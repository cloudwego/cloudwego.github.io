<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudWeGo – CloudWeGo</title><link>https://www.cloudwego.io/zh/</link><description>Recent content on CloudWeGo</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://www.cloudwego.io/zh/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Kitex Release v0.15.1</title><link>https://www.cloudwego.io/zh/blog/2025/09/29/kitex-release-v0.15.1/</link><pubDate>Mon, 29 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2025/09/29/kitex-release-v0.15.1/</guid><description>
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="公告"&gt;&lt;strong&gt;公告&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go 版本支持变化&lt;/strong&gt;：Kitex 最低声明 Go 版本调整至 Go1.20，并支持至 Go1.25
&lt;ul&gt;
&lt;li&gt;暂时不影响 Go v1.18/v1.19 编译，但声明到高版本后，后续版本会引入高版本特性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;部分接口调整&lt;/strong&gt;：对普通使用的用户无影响，但如果有扩展或特殊依赖会有影响，详见[&lt;strong&gt;特殊变更&lt;/strong&gt;]部分&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="新特性"&gt;&lt;strong&gt;新特性&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化调用：全新 v2 API 支持 multi services 和流式调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thrift 二进制泛化调用 API 提供 v2 版本，支持 multi services 和 streaming 调用，详细用法见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage"&gt;泛化调用使用指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化调用：支持 unknown service handler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;便于快速开发 streaming proxy，详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/proxy_application_development"&gt;Proxy 应用开发指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化调用：支持服务端 json/map 流式泛化调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;详见：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage"&gt;泛化调用使用指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming：支持 ctx cancel 控制流生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速结束流式调用，节省模型资源&lt;/li&gt;
&lt;li&gt;对齐 gPRC，详细用法见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/streamx/streamx_lifecycle_control"&gt;流生命周期控制最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持 Client 主动调用 cancel 结束流式调用&lt;/li&gt;
&lt;li&gt;支持 Client 感知所处 Handler 的 ctx cancel 信号，级联结束流式调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流式错误处理优化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速对应具体错误场景，加速级联 cancel 链路问题排查，详情见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/streamx/streamx_error_handling"&gt;流错误处理最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;级联 cancel 场景，错误描述包含完整 cancel 链路，快速定位主动 cancel 的第一跳服务&lt;/li&gt;
&lt;li&gt;错误描述包含具体的错误场景，以及与之唯一对应的错误码&lt;/li&gt;
&lt;li&gt;统一方便的 cancel 错误处理方式，无需使用繁琐的字符串匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="功能体验优化"&gt;&lt;strong&gt;功能/体验优化&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化 Client：优化后台 goroutine 启动逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从 Kitex v0.13.0 开始，一个泛化 Client 同时支持 Ping-Pong 和流式调用，并默认使用 TTHeader Streaming 协议，每个泛化 Client 都会自动开启一个后台 goroutine 用于清理 TTHeader Streaming 的空闲连接。&lt;/p&gt;
&lt;p&gt;若用户之前使用泛化 Client 的姿势不当(例如每次请求都创建一个泛化 Client)，升级到 Kitex v0.13.x 后会导致大量后台 goroutine 被创建，产生 goroutine 泄漏的现象，但实际上没使用流式泛化。&lt;/p&gt;
&lt;p&gt;v0.15.1 版本只有在真正使用到流式泛化时才会创建后台 goroutine。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="代码生成工具-kitex-tool"&gt;&lt;strong&gt;代码生成工具 Kitex Tool&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;严格的枚举值检查&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;针对 Thrift IDL 定义枚举值溢出的场景，增加了严格的生成检查，详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/idl_enumeration_type"&gt;Kitex Tool 检查枚举类型说明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该变更会导致部分产物生成失败，因为正确性已经存在问题，对服务风险较大！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="特殊变更---少数服务可能会有影响"&gt;&lt;strong&gt;特殊变更 - 少数服务可能会有影响&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对 99.9% 用户无影响的接口 Breaking Change&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kitex 会保证内部用户正常使用方式的兼容性。但个别用户可能对 Kitex 仓库的定义有依赖，Kitex 本次版本调整对这部分用户有影响。&lt;/p&gt;
&lt;p&gt;本版本对 &lt;code&gt;remote.Message&lt;/code&gt;、&lt;code&gt;rpcinfo.RPCInfo&lt;/code&gt; 或 &lt;code&gt;generic.Generic&lt;/code&gt; 接口非普通使用方式做了微调，如果有特殊的使用需要调整至符合新版本的接口定义。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rpcinfo.RPCInfo().Invocation()&lt;/code&gt; 新增了 &lt;code&gt;MethodInfo()&lt;/code&gt; 方法，返回当前 rpc 的 MethodInfo：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit 62979e4b95e5a5ed73d0bfd9e218cfc61c5ce253
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;type Invocation interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PackageName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ServiceName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MethodName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ MethodInfo() serviceinfo.MethodInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; StreamingMode() serviceinfo.StreamingMode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SeqID() int32
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; BizStatusErr() kerrors.BizStatusErrorIface
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;remote.Message&lt;/code&gt; 接口删除了部分冗余接口：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; // Message is the core abstraction for Kitex message.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; type Message interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; RPCInfo() rpcinfo.RPCInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- ServiceInfo() *serviceinfo.ServiceInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- SpecifyServiceInfo(svcName, methodName string) (*serviceinfo.ServiceInfo, error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; Data() interface{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NewData(method string) (ok bool)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MessageType() MessageType
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetPayloadLen(size int)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TransInfo() TransInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Tags() map[string]interface{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- ProtocolInfo() ProtocolInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- SetProtocolInfo(ProtocolInfo)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; PayloadCodec() PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetPayloadCodec(pc PayloadCodec)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Recycle()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对 &lt;code&gt;ProtocolInfo()&lt;/code&gt; 接口的依赖请修改为依赖 &lt;code&gt;remote.Message().RPCInfo().Config().TransportProtocol()&lt;/code&gt;。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;generic.Generic&lt;/code&gt; 接口做了大幅调整：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; commit 024fedbc2da33956cd81cd0a8226f817e5eac777
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; // Generic ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; type Generic interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Closer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // PayloadCodec return codec implement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // this is used for generic which does not need IDL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- PayloadCodec() remote.PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; // PayloadCodecType return the type of codec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PayloadCodecType() serviceinfo.PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // RawThriftBinaryGeneric must be framed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- Framed() bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // GetMethod is to get method name if needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- GetMethod(req interface{}, method string) (*Method, error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+ // GenericMethod return generic method func
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ GenericMethod() serviceinfo.GenericMethodFunc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; // IDLServiceName returns idl service name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; IDLServiceName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // MessageReaderWriter returns reader and writer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // this is used for generic which needs IDL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- MessageReaderWriter() interface{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+ // GetExtra returns extra info by key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ GetExtra(key string) interface{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;完全删除了 &lt;code&gt;PayloadCodec()&lt;/code&gt; 接口，这一调整是因为 kitex generic 接口支持了 multi service 功能后，已经不再依赖此接口劫持 PayloadCodec 的方式注入泛化编解码器，而是通过劫持 Args/Results 结构体实现。当前仅 &lt;code&gt;generic.BinaryThriftGeneric()&lt;/code&gt; 接口依赖此方式，但该接口已经标注为废弃，请迁移至使用 &lt;code&gt;generic.BinaryThriftGenericV2()&lt;/code&gt;，参考 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage"&gt;泛化调用使用指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Framed() bool&lt;/code&gt; 是废弃接口，因为 kitex 自 v0.13.* 开始已经默认对 client 启用 framed；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageReaderWriter&lt;/code&gt; 和 &lt;code&gt;GetMethod&lt;/code&gt; 接口整合为一个统一的 &lt;code&gt;GenericMethod()&lt;/code&gt; 接口。统一后的新接口返回一个闭包函数，该函数接受 context 和 method name 入参，返回对应的 method info，其中 metainfo info 就包含了劫持的 Args/Results 参数，从而实现不同类型的泛化调用编解码逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;remote.ServiceSearcher&lt;/code&gt; 的 Get/Set 方式变更，&lt;code&gt;codec.SetOrCheckMethodName&lt;/code&gt; 参数调整：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit a1008887b9ab4553a79ce82cf6d3db324c344977
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-const keyServiceSearcher = &amp;#34;rpc_info_service_searcher&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+type keyServiceSearcher struct{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-// GetServiceSearcher returns the service searcher from rpcinfo.RPCInfo.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func GetServiceSearcher(ri rpcinfo.RPCInfo) ServiceSearcher {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- svcInfo, _ := ri.Invocation().Extra(keyServiceSearcher).(ServiceSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- return svcInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+// GetServiceSearcher returns the service searcher from context.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+func GetServiceSearcher(ctx context.Context) ServiceSearcher {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ svcSearcher, _ := ctx.Value(keyServiceSearcher{}).(ServiceSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ return svcSearcher
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-// SetServiceSearcher sets the service searcher to rpcinfo.RPCInfo.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func SetServiceSearcher(ri rpcinfo.RPCInfo, svcSearcher ServiceSearcher) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- setter := ri.Invocation().(rpcinfo.InvocationSetter)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- setter.SetExtra(keyServiceSearcher, svcSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+// WithServiceSearcher sets the service searcher to context.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+func WithServiceSearcher(ctx context.Context, svcSearcher ServiceSearcher) context.Context {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ return context.WithValue(ctx, keyServiceSearcher{}, svcSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;旧版本将 &lt;code&gt;ServiceSearcher&lt;/code&gt; 设置在 rpcinfo，新版本为优化 Get/Set 的性能将其设置到 context。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit a1008887b9ab4553a79ce82cf6d3db324c344977
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;// SetOrCheckMethodName is used to set method name to invocation.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func SetOrCheckMethodName(methodName string, message remote.Message) error {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+func SetOrCheckMethodName(ctx context.Context, methodName string, message remote.Message) error {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;同时影响到 &lt;code&gt;codec.SetOrCheckMethodName&lt;/code&gt; 的定义，添加 &lt;code&gt;context.Context&lt;/code&gt; 作为入参。
`&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;feat(ttstream): support ctx cancel and detailed canceled error by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1821"&gt;#1821&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1859"&gt;#1859&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1856"&gt;#1856&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;特性：TTStream 支持上下文取消及详细的取消错误信息&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;feat(generic): support new thrift binary generic call api, server streaming generic call and unknown service or method handler by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1837"&gt;#1837&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1857"&gt;#1857&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;特性：支持新的 thrift 二进制泛化调用 api，服务端流式泛化调用和 unknown service or method handler&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;feat(grpc): support dump MaxConcurrentStreams of HTTP2 Client by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1820"&gt;#1820&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;特性：gRPC 支持导出 HTTP2 客户端的 MaxConcurrentStreams 配置&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fix(retry): shallow copy response to avoid data race by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1799"&gt;#1799&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1814"&gt;#1814&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：浅拷贝 response 以避免数据竞争&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(lbcache): check the existence before new Balancer to prevent leakage by @ppzqh in &lt;a href="https://github.com/cloudwego/kitex/pull/1825"&gt;#1825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：负载均衡器缓存中创建新均衡器前检查存在性以防止泄漏&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(generic): descriptor.HTTPRequest.GetParam nil pointer exception by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1827"&gt;#1827&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：描述符 HTTPRequest.GetParam 的空指针异常&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(generic): fix generic write int range check by @HeyJavaBean in &lt;a href="https://github.com/cloudwego/kitex/pull/1861"&gt;#1861&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：泛化写入整数的范围检查&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(rpcinfo): protect bizErr and extra field of ri.Invocation by lock by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1850"&gt;#1850&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：通过锁保护 ri.Invocation 的 bizErr 和 extra 字段&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(timeout): remove timer pool to avoid timer race issue by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1858"&gt;#1858&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：移除计时器池以避免计时器竞争问题&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(tool): disable fast api for protobuf by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1807"&gt;#1807&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：工具中为 Protobuf 禁用 Fast API&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fix(tool): skip pb code gen for arg -use by @xiaost in &lt;a href="https://github.com/cloudwego/kitex/pull/1819"&gt;#1819&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;修复：工具中为 -use 参数跳过 PB 代码生成&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;optimize(grpc): access metadata.MD without ToLower by @xiaost in &lt;a href="https://github.com/cloudwego/kitex/pull/1806"&gt;#1806&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优化：gRPC 访问 metadata.MD 时不转换为小写&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;optimize(ttstream): lazy init cleaning task for ObjectPool to reduce the impact of lots of goroutines caused by creating too many Generic Client by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1842"&gt;#1842&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优化：对象池延迟初始化清理任务，减少创建过多泛化客户端导致的大量 goroutine 影响&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;optimize(tool): remove string deepcopy because the string type is read-only in Go by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1832"&gt;#1832&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优化：移除字符串深拷贝，因为 Go 中字符串类型是只读的&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;refactor(ttstream): remove ttstream provider by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1805"&gt;#1805&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重构：移除 TTStream provider 接口&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;refactor(rpcinfo): move service/method info from message to rpcinfo, remove protocol info from message and update min go version to 1.20 by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1818"&gt;#1818&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1855"&gt;#1855&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重构：将服务/方法信息从消息移至 rpcinfo，从消息中移除协议信息，并更新最低 Go 版本至 1.20&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;refactor(server): remove service middleware and SupportedTransportsFunc api by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1839"&gt;#1839&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重构：移除服务中间件和 SupportedTransportsFunc API&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;refactor(server): remove useless TargetSvcInfo field by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1840"&gt;#1840&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重构：移除无用的 TargetSvcInfo 字段&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;chore: update dependencies of kitex to support go 1.25 and new features by @jayantxie @AsterDY in &lt;a href="https://github.com/cloudwego/kitex/pull/1848"&gt;#1848&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1834"&gt;#1834&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1862"&gt;#1862&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1836"&gt;#1836&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;chore：更新 kitex 依赖项以支持 go1.25 和新特性&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;chore: update version v0.15.0 by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1864"&gt;#1864&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;chore：更新版本至 v0.15.0&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docs: fix broken link to blogs by @scientiacoder in &lt;a href="https://github.com/cloudwego/kitex/pull/1813"&gt;#1813&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;chore：修复博客的损坏链接&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;chore: support custom ctx key to pass to downstream in Service-Inline by @Duslia in &lt;a href="https://github.com/cloudwego/kitex/pull/1709"&gt;#1709&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;特性：在合并编译场景中支持传递自定义上下文 key 到下游&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>Blog: Kitex Release v0.14.0</title><link>https://www.cloudwego.io/zh/blog/2025/06/26/kitex-release-v0.14.0/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2025/06/26/kitex-release-v0.14.0/</guid><description>
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="新特性"&gt;&lt;strong&gt;新特性&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;泛化调用：泛化 Client 支持流式调用，一个 Client 搞定流式/非流式调用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;泛化 Client 支持流式泛化调用，适配 gRPC/TTHeader Streaming 并支持 map / json 和 protobuf 二进制泛化调用。&lt;/p&gt;
&lt;p&gt;简要代码示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;genericclient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;actualServiceName&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;g&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Ping-Pong 泛化&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GenericCall&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;PingPongTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ClientStreaming 泛化&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;cliStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ClientStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;ClientStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ServerStreaming 泛化&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;srvStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServerStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;ServerStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// BidiStreaming 泛化&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;bidiStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;BidiStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;BidiStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;各场景使用细节请参考&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage"&gt;泛化调用&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="功能体验优化"&gt;&lt;strong&gt;功能/体验优化&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming： 观测/排错体验优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若配置了 Tracer，创建 Stream 失败将打点上报&lt;/li&gt;
&lt;li&gt;当 Server 侧发生 panic 时，将打印完整堆栈，方便排查问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若配置了 Tracer，创建 Stream 失败将打点上报&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="其他"&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;产物简化&lt;/p&gt;
&lt;p&gt;Kitex Tool 不再生成 fastpb，只影响 protobuf 的用户。若有高性能 protobuf 编解码需求，可配置环境变量 &lt;code&gt;KITEX_TOOL_USE_PRUTAL_MARSHAL=1&lt;/code&gt;启用 prutal。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1759"&gt;#1759&lt;/a&gt;] feat(tool): add env for using prutal to marshal&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1782"&gt;#1782&lt;/a&gt;] feat(ttstream): process MetaFrame and reflect to rpcinfo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1777"&gt;#1777&lt;/a&gt;] feat(client): report err when create Stream failed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1763"&gt;#1763&lt;/a&gt;] feat: support ttheader streaming generic call&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1771"&gt;#1771&lt;/a&gt;] feat(tool): add thriftgo patcher extension&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1755"&gt;#1755&lt;/a&gt;] feat: add generic binary pb for streamx&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1752"&gt;#1752&lt;/a&gt;] feat(generic): support generic pb binary for streaming&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1788"&gt;#1788&lt;/a&gt;] optimize: go net implementation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1786"&gt;#1786&lt;/a&gt;] optimize(tool): remove tool fastpb generation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1783"&gt;#1783&lt;/a&gt;] optimize(gRPC): parse PayloadCodec in server side&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1780"&gt;#1780&lt;/a&gt;] optimize(ttstream): log the error thrown by invoking handler&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1769"&gt;#1769&lt;/a&gt;] optimize: injection of options in ttstream&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1792"&gt;#1792&lt;/a&gt;] fix(gRPC): inject current method name to rpcinfo in server-side to fix FROM_METHOD missing&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1787"&gt;#1787&lt;/a&gt;] fix(ttstream): metrics missing caused by server-side rpcinfo not set correctly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1778"&gt;#1778&lt;/a&gt;] fix: enabling json mode of map generic not work&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1774"&gt;#1774&lt;/a&gt;] fix(server): trans server conn count race issue&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1742"&gt;#1742&lt;/a&gt;] fix(generic): align dynamicgo&amp;rsquo;s write base behavior with old generic (only for internal logic)&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1770"&gt;#1770&lt;/a&gt;] refactor: refactor generic streaming&lt;/p&gt;
&lt;h3 id="test"&gt;Test&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1793"&gt;#1793&lt;/a&gt;] test: add go1.18 to scenario-test&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1765"&gt;#1765&lt;/a&gt;] refactor: refactor generic streaming&lt;/p&gt;
&lt;h3 id="docs"&gt;Docs&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1794"&gt;#1794&lt;/a&gt;] docs: update CONTRIBUTING.md to change PR base branch to main&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1795"&gt;#1795&lt;/a&gt;] chore: update dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1776"&gt;#1776&lt;/a&gt;] chore: remove testify dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1757"&gt;#1757&lt;/a&gt;] chore: update prutal to v0.1.1&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1753"&gt;#1753&lt;/a&gt;] ci: disable codecov annotations&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.10.0</title><link>https://www.cloudwego.io/zh/blog/2025/05/21/hertz-release-v0.10.0/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2025/05/21/hertz-release-v0.10.0/</guid><description>
&lt;p&gt;Hertz v0.10.0 版本新增两项功能并修复了一些问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集成 SSE 功能。使用方法请参阅 &lt;a href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/sse/"&gt;SSE&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;添加 http.Handler 适配器，使用官方 net/http 生态系统扩展 Hertz。使用方法请参阅 &lt;a href="https://www.cloudwego.io/zh/docs/hertz/tutorials/basic-feature/http-adaptor/"&gt;Adaptor&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1327"&gt;#1327&lt;/a&gt;] feat(adaptor): 为 http.Handler 添加新的 HertzHandler&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1349"&gt;#1349&lt;/a&gt;] feat(sse): SetLastEventID&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1343"&gt;#1343&lt;/a&gt;] feat(sse): reader 支持取消流&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1341"&gt;#1341&lt;/a&gt;] feat(server): 检测请求 race&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1339"&gt;#1339&lt;/a&gt;] feat(sse): 添加 LastEventID helper&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1335"&gt;#1335&lt;/a&gt;] feat(protocol): 新的 sse 包&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1322"&gt;#1322&lt;/a&gt;] feat: server 使用标准 go net 传输时感知客户端连接关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1340"&gt;#1340&lt;/a&gt;] fix:仅在 amd64/arm64 linux/darwin 上使用 netpoll 和 sonic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1333"&gt;#1333&lt;/a&gt;] fix(protocol): 非预期的设置 resp.bodyStream&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1329"&gt;#1329&lt;/a&gt;] fix(client): sse 场景下自动切换为 stream body 模式&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1332"&gt;#1332&lt;/a&gt;] fix(server): server 关闭时检查 ExitWaitTimeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1316"&gt;#1316&lt;/a&gt;] fix: 优先使用自定义 validator&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1336"&gt;#1336&lt;/a&gt;] test(protocol): 修复硬编码的监听地址&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1353"&gt;#1353&lt;/a&gt;] chore：更新 netpoll 依赖&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1337"&gt;#1337&lt;/a&gt;] chore(hz): 更新 hz 工具 v0.9.7&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1328"&gt;#1328&lt;/a&gt;] ci: 禁用 codecov 注释&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Kitex Release v0.13.0</title><link>https://www.cloudwego.io/zh/blog/2025/04/09/kitex-release-v0.13.0/</link><pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2025/04/09/kitex-release-v0.13.0/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;建议直接升级 Kitex 版本到 v0.13.1，因为我们对 v0.13.0 里 gRPC Client 潜在的 Goroutine 泄漏问题进行了修复&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="新特性"&gt;&lt;strong&gt;新特性&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;新流式接口 StreamX 支持 gRPC，存量 Kitex gRPC 用户可迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;v0.12.0 发布了 StreamX 接口优化流式体验，支持了自定义流式协议 TTHeader Streaming，但未支持 gRPC，导致存量用户无法迁移。&lt;/p&gt;
&lt;p&gt;v0.13.0 对 StreamX 支持 gRPC 后，用户可迁移至 StreamX 新接口，Server 端可以同时兼容两个流式协议，无需担心接口迁移后的协议兼容性问题。&lt;/p&gt;
&lt;p&gt;特别地，StreamX 在适配 gRPC 时，发现依然有一些不便利的问题，为带来更好的接口使用体验，因此对 StreamX 接口做了二次调整。&lt;/p&gt;
&lt;p&gt;已经使用 v0.12.* 的 StreamX 用户会带来影响，在这里表示抱歉。&lt;/p&gt;
&lt;p&gt;详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/streamx"&gt;StreamX 用户文档&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prutal - Protobuf 的无生成代码序列化库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/prutal"&gt;Prutal&lt;/a&gt; 正式开源，对标 Thrift 的 &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 库，新版本 Kitex 默认集成 Prutal。特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;产物体积最小化，只需生成结构体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用与 Frugal 相似的反射优化，性能优于官方 Protobuf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兼容官方 Protobuf 及衍生版本的生成代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细信息参考 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/prutal"&gt;Prutal&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="功能体验优化"&gt;&lt;strong&gt;功能/体验优化&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming 支持配置接口级别 Recv 超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本版本 TTHeader Streaming 在原有的 Kitex Client 级别基础上，额外支持接口级别的 Recv 超时配置，配置更为灵活。&lt;/p&gt;
&lt;p&gt;详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/streamx/streamx_timeout_control/"&gt;StreamX 流超时控制&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="特殊变更"&gt;&lt;strong&gt;特殊变更&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thrift 默认传输协议由 Buffered 改为 Framed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个变更可以利用 FastCodec 以获得更高的编解码性能。因为 Kitex 服务端支持协议探测，此行为变更是兼容的，通常支持 Apache Thrift 的框架都支持 Framed，我们评估影响不大，但如果你访问的下游不支持协议探测，或不支持 Framed，请手动参考下面的方式改回 Buffered 协议：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithTransportProtocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;transport&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PurePayload&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="其他"&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;产物简化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认不生成 Set 数据结构的重复校验代码与各结构体的 DeepEqual 函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若只想恢复 DeepEqual，生成命令追加&lt;code&gt;-thrift gen_deep_equal=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若想恢复 Set 的重复校验，生成命令追加&lt;code&gt;-thrift validate_set=true, -thrift gen_deep_equal=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认不生成 Apache Codec 相关代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若想恢复这部分代码，生成命令追加&lt;code&gt;-thrift no_default_serdes=false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go 支持版本变化&lt;/p&gt;
&lt;p&gt;支持版本 Go 1.19~1.24，最低支持版本变为 Go 1.19，如果 Go 版本过低，编译时会有提示：&lt;code&gt;note: module requires Go 1.19&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1719"&gt;#1719&lt;/a&gt;] feat: prutal for replacing protoc&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1736"&gt;#1736&lt;/a&gt;] feat(ttstream): support WithRecvTimeout stream call option&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1702"&gt;#1702&lt;/a&gt;] feat(gRPC): add grpc client conn dump to help debug the conn and stream status&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1723"&gt;#1723&lt;/a&gt;] feat(codec/thrift): use fastcodec/frugal if apache codec not available&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1724"&gt;#1724&lt;/a&gt;] feat: add tail option to support for delayed initialization of some client options&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1728"&gt;#1728&lt;/a&gt;] optimize(apache): remove apache codec gen and set default protocol from buffered to framed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1732"&gt;#1732&lt;/a&gt;] optimize(rpcinfo): purify the transport protocol of rpcinfo in a single rpc request&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1711"&gt;#1711&lt;/a&gt;] optimize(tool): disable set validate and deep equal code gen to simplify kitex_gen&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1717"&gt;#1717&lt;/a&gt;] optimize(gRPC): return more detailed error when received invalid http2 frame&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1734"&gt;#1734&lt;/a&gt;] fix(ttstream): adjust stream state transition and remove all SetFinalizer to avoid memory leak&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1735"&gt;#1735&lt;/a&gt;] fix(generic): support both relative and absolute check for idl includes parse to make it compatible with generation tool&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1725"&gt;#1725&lt;/a&gt;] fix: code gen import issue for streamx mode, stream call judgement bug and set ttheader streaming as default&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1727"&gt;#1727&lt;/a&gt;] fix(tool): fix tool UseStdLib remains unexpected lib issue.&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1658"&gt;#1658&lt;/a&gt;] refactor: streamx api to adapt both grpc and ttheader streaming protocol and provide more user-friendly interface&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1729"&gt;#1729&lt;/a&gt;] refactor(tool): move pb tpl code to sep pkg&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1743"&gt;#1743&lt;/a&gt;] chore: update dependencies version&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1740"&gt;#1740&lt;/a&gt;] chore(generic): deprecate NewThriftContentProvider&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1741"&gt;#1741&lt;/a&gt;] chore(streamx): remove redundant streamx package&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1738"&gt;#1738&lt;/a&gt;] ci: fix typos &amp;amp; crate-ci/typos&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1737"&gt;#1737&lt;/a&gt;] chore: update dependency and change go support to 1.19-1.24&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1720"&gt;#1720&lt;/a&gt;] Revert &amp;ldquo;fix(ttstream): pingpong method refers to server interface defined in Kitex generation code when streamx is enabled and there are other streaming methods&amp;rdquo;&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.12.0</title><link>https://www.cloudwego.io/zh/blog/2025/01/03/kitex-release-v0.12.0/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2025/01/03/kitex-release-v0.12.0/</guid><description>
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="精简产物建议---去-apache-thrift"&gt;精简产物建议 - 去 Apache Thrift&lt;/h3&gt;
&lt;p&gt;强烈建议去 Apache Codec，解决 Apache 不兼容变更带来的编译体验问题，并能&lt;strong&gt;减少 50% 产物体积&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;请使用 Kitex 的 Thrift Codec：FastCodec 或 Frugal，不会依赖 Apache Thrift Codec。&lt;/p&gt;
&lt;p&gt;后续版本计划：Kitex 会默认去除 Apache 产物，用户指南见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/best-practice/remove_apache_codec/"&gt;Kitex 去 Apache Thrift 用户手册&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="new-features"&gt;New Features&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thrift Streaming over TTHeader - 自定义流式协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持了基于 TTheader 协议的流式调用，优化因 gRPC streaming 协议复杂度过高而引入的稳定性问题；&lt;/p&gt;
&lt;p&gt;提供了新的流式接口 StreamX，解决原流式接口各类使用体验问题，并提供流式接口的最佳实践。&lt;/p&gt;
&lt;p&gt;用户文档：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/streamx/"&gt;StreamX 用户文档与最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming 支持优雅退出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持了优雅退出功能，用于解决因为服务升级/更新而导致的上游报错问题。&lt;/p&gt;
&lt;p&gt;用户文档：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/graceful_shutdown/"&gt;gRPC Streaming 优雅退出&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="体验优化"&gt;体验优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming 日志优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于流式串联场景，若下游 Stream 出错是由于上游 Stream 退出，将会在错误中包含&amp;quot;[triggered by {serviceName}]&amp;ldquo;后缀，方便定位问题；&lt;/p&gt;
&lt;p&gt;Send 返回的 the stream is done 错误将变成导致流被关闭的真正错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码生成工具 Kitex Tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成速度和工具安装优化&lt;/strong&gt;：无需再安装或升级 Thriftgo ，内置到 Kitex，在 IDL 特别庞大的场景，生成速度有较大提升。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最小化产物体积&lt;/strong&gt;：产物体积最小化可以使用 Frugal，如果希望灰度开启，支持指定结构体使用 Frugal 序列化。详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/"&gt;代码生成工具&lt;/a&gt;关于 -frugal-struct、-gen-frugal 参数的说明。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="不兼容变更-对99用户无影响"&gt;不兼容变更-对99%用户无影响&lt;/h3&gt;
&lt;p&gt;Kitex 会尽量保证常规使用方式的兼容性，个别用户可能对 Kitex 部分代码定义有依赖，Kitex 本次版本调整对这部分用户有影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除 &lt;code&gt;thrift.NewBinaryProtocol&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thrift.NewBinaryProtocol&lt;/code&gt;是 Kitex 对 Apache thrift.TProtocol 接口的实现，因为 trans 部分直接使用 Kitex 的 ByteBuffer，相比 apache thrift.TBinaryProtocol 性能更好。在 v0.11.0 已经加了弃用注释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除原因&lt;/strong&gt;: 因为要去除 Apache Thrift 依赖，所以需要删除该实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户修改说明&lt;/strong&gt;: 该实现本就是配套 Apache Codec 使用，如果你还需要依赖 Apache Codec，请直接使用 Apache 的TBinaryProtocol。如果觉得对性能有影响，可以把 Kitex 旧版本实现 fork 下来，参考 github/cloudwego/kitex v0.10.0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/apache/thrift/lib/go/thrift&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tProt&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTBinaryProtocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTMemoryBufferLen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1024&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除 &lt;code&gt;generic.ServiceInfo&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;泛化部分删除 &lt;code&gt;generic.ServiceInfo&lt;/code&gt; API。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除原因&lt;/strong&gt;: 因为多 Service 的支持需要对泛化部分定义做重构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户修改说明&lt;/strong&gt;: 新 API 用 &lt;code&gt;generic.ServiceInfoWithGeneric&lt;/code&gt; 替代。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/pkg/generic&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// removed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;pcType&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PayloadCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// please use this instead&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfoWithGeneric&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;g&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Generic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1541"&gt;#1541&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1633"&gt;#1633&lt;/a&gt;] feat(ttstream): support ttheader streaming and streamv2 interface&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1623"&gt;#1623&lt;/a&gt;] feat(gRPC): optimize gRPC error prompt and metrics, assisting in troubleshooting problems&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1556"&gt;#1556&lt;/a&gt;] feat(gRPC): support gRPC graceful shutdown&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1467"&gt;#1467&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1627"&gt;#1627&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1619"&gt;#1619&lt;/a&gt;] feat(generic): support thrift streaming(over gRPC) for json generic client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1607"&gt;#1607&lt;/a&gt;] feat(tool): kitex tool support gen frugal codec for certain struct&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1526"&gt;#1526&lt;/a&gt;] feat(generic): support an option to remove go.tag annotation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1536"&gt;#1536&lt;/a&gt;] feat(generic): support an option to set IDL ParseMode for each client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1510"&gt;#1510&lt;/a&gt;] feat: register service with service level middleware&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1635"&gt;#1635&lt;/a&gt;] optimize: add two function for binary protocol to get bufiox reader and writer&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1630"&gt;#1630&lt;/a&gt;] optimize(tool): implement no recursive generate to support incremental update&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1617"&gt;#1617&lt;/a&gt;] optimize(retry): optimize UpdatePolicy and add test cases to check invalid retry policy. &amp;lt;v0.11.0, if the FailurePolicy is nil and type is 0 or &amp;gt;1, will trigger nil panic. The bug has been fixed in v0.11.0, this pr is to add test cases and optimize UpdatePolicy to ignore the nil panic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1606"&gt;#1606&lt;/a&gt;] optimize(tool): use embedded thriftgo as default option&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1595"&gt;#1595&lt;/a&gt;] optimize(tool): optimize pb tool code&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1599"&gt;#1599&lt;/a&gt;] optimize(tool): call FastWriteNocopy in FastWrite to avoid misuse by users&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1615"&gt;#1615&lt;/a&gt;] refactor: get rid of apache thrift in go.mod&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1611"&gt;#1611&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1614"&gt;#1614&lt;/a&gt;] refactor: move ttheader codec logic to gopkg&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1553"&gt;#1553&lt;/a&gt;] refactor(codec/thrift): unified typecodec implementation and adjust new file layout&lt;/p&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1581"&gt;#1581&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1628"&gt;#1628&lt;/a&gt;] perf(timeout): refactor new rpctimeout implementation to improve performance&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1564"&gt;#1564&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1567"&gt;#1567&lt;/a&gt;] perf: reduce object allocation for circuitbreak middleware and retry context&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1557"&gt;#1557&lt;/a&gt;] perf(rpcinfo): remove lock for rpcinfo.RPCStats&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1622"&gt;#1622&lt;/a&gt;] fix(generic): use jsoniter instead of sonic for json generic-call, since sonic doesn&amp;rsquo;t support map[interface{}]interface{}&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1562"&gt;#1562&lt;/a&gt;] fix: deep copy function of the generated code cannot copy the empty string&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1602"&gt;#1602&lt;/a&gt;] fix(gRPC): check if the type assertion succeed in ProtocolMatch to avoid panic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1598"&gt;#1598&lt;/a&gt;] fix(retry): fix issue that mixed retry cannot update its config correctly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1590"&gt;#1590&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1572"&gt;#1572&lt;/a&gt;] fix(generic): set default values for optional fields of primitive types with generic with dynamicgo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1580"&gt;#1580&lt;/a&gt;] fix(netpoll): fix timeout caused by partial use of the Read method of remote.ByteBuffer&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1574"&gt;#1574&lt;/a&gt;] fix(trace): stream event handler ignore io.EOF event&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1563"&gt;#1563&lt;/a&gt;] fix(generic): fix the issue where the generic client sets the parse mode of CombineServices and then requests causes &amp;ldquo;unknown service&amp;rdquo; error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1568"&gt;#1568&lt;/a&gt;] fix(wpool): fix the issue of wpool object allocation, and incorrect ctx causing profiler errors.&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1558"&gt;#1558&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1555"&gt;#1555&lt;/a&gt;] fix(bthrift): fix the issue of no recursion conversion of unknown field type under bthrift&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1593"&gt;#1593&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1560"&gt;#1560&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1561"&gt;#1561&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1559"&gt;#1559&lt;/a&gt;] chore(test): fix data race issue, unstable issue and long time running issue of some test cases&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1634"&gt;#1634&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1632"&gt;#1632&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1573"&gt;#1573&lt;/a&gt;] chore(dep): upgrade frugal, localsession and other cloudwego dependency versions&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1616"&gt;#1616&lt;/a&gt;] chore(generic): remove deprecated apis/interfaces/variables&lt;/p&gt;</description></item><item><title>Blog: 如何让你的 Kitex 生成代码击败 99% 的用户</title><link>https://www.cloudwego.io/zh/blog/2024/09/20/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84-kitex-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%87%BB%E8%B4%A5-99-%E7%9A%84%E7%94%A8%E6%88%B7/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/09/20/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84-kitex-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%87%BB%E8%B4%A5-99-%E7%9A%84%E7%94%A8%E6%88%B7/</guid><description>
&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;h3 id="为什么要生成代码"&gt;为什么要生成代码&lt;/h3&gt;
&lt;p&gt;框架开发有两种常见的风格： Code First 和 Schema First&lt;/p&gt;
&lt;p&gt;简单来说，Code First 就是先写代码，再由代码生成数据模型和接口规范（比如先代码写一个 http 接口，然后用 Swagger 来生成 API 信息）&lt;/p&gt;
&lt;p&gt;而 RPC 开发更多是 Schema First ，因为 RPC 服务可能是跨语言的，不一定会先写代码，而是用 Thrift、Protobuf 这些通用的 IDL 来描述接口和结构体，再生成对应语言、对应框架的具体代码。&lt;/p&gt;
&lt;p&gt;（btw，用 IDL 生成 RPC 代码通常也比手搓一堆结构体和 Getter Setter 要方便不少）&lt;/p&gt;
&lt;p&gt;Kitex RPC 开发步骤也是先写 IDL，再由 Kitex Tool 生成 Golang 代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IDL 里的结构体定义会被生成为 Golang 的桩结构体（和一些 Getter Setter）&lt;/li&gt;
&lt;li&gt;IDL 里 Service 和 Method 会被生成为 NewKitexClient、NewKitexServer、KitexServiceInfo 这些框架使用相关的脚手架函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但如果你仔细观察过 kitex_gen 的内容，会发现上面代码占比并不多，主要是 FastRead、FastWrite 这些序列化相关的函数占了很多行。&lt;/p&gt;
&lt;p&gt;这是因为静态生成的序列化方性能会更高一些。（可以 hardcode 生成 hardcode 类型、字段名称等，不用走反射、减少函数调用等等&amp;hellip;..）&lt;/p&gt;
&lt;p&gt;此外，一些 Kitex 的功能特性也是基于生成的代码来实现的，例如 Unknown Fields 和 Field Mask&lt;/p&gt;
&lt;p&gt;所以，如果你想运行一个 Kitex RPC 服务，就需要根据 IDL 来生成这些桩代码。&lt;/p&gt;
&lt;h3 id="生成代码里有什么"&gt;生成代码里有什么&lt;/h3&gt;
&lt;p&gt;以 Thrift 场景为例，Kitex Tool 生成内容的目录如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex_gen/
├── base
│ ├── base.go // 结构体桩代码 + 普通的序列化代码
│ ├── k-base.go // FastCodec 序列化代码
│ └── k-consts.go
└── test
├── example.go // 结构体桩代码 + 普通的序列化代码
├── k-consts.go
├── k-example.go // FastCodec 序列化代码
└── myservice // 创建 Kitex Client/Server 的脚手架
├── client.go
├── invoker.go
├── myservice.go
└── server.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，结构体相关的代码占据了大部分体积，例如 Getter Setter、FastRead、FastWrite：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;描述&amp;amp;用途&lt;/th&gt;
&lt;th&gt;CodeGen 内容长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InitDefault&lt;/td&gt;
&lt;td&gt;Frugal 场景需要&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GetXXXField/SetXXXField/IsSetXXXX&lt;/td&gt;
&lt;td&gt;GetterSetter，部分 interface 需要&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read/ReadFieldX/Write/writeFieldX&lt;/td&gt;
&lt;td&gt;原生 Apache Codec&lt;/td&gt;
&lt;td&gt;长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Stringer&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeepEqual/FieldXXXDeepEqual&lt;/td&gt;
&lt;td&gt;set 去重提速&lt;/td&gt;
&lt;td&gt;长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeepCopy&lt;/td&gt;
&lt;td&gt;RPAL 场景需要&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ThriftService 模板&lt;/td&gt;
&lt;td&gt;ServiceInterface 描述接口定义&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XXXClientFactory、XXXClientProtocol&lt;/td&gt;
&lt;td&gt;旧的 ThriftClient 代码，不再有用&lt;/td&gt;
&lt;td&gt;较长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XXXProcessor&lt;/td&gt;
&lt;td&gt;旧的 Thrift Processor 代码，不再有用&lt;/td&gt;
&lt;td&gt;较长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XXXServiceMethodArgs/Result&lt;/td&gt;
&lt;td&gt;Thrift 为 Method 的入参和返回值单独生成的类型&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GetFirstArgument/GetResult&lt;/td&gt;
&lt;td&gt;args、result 专用&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FastRead/FastReadFieldX/FastWrite/FastWriteNocopy/BLength/fastWriteFieldX/fieldXLength&lt;/td&gt;
&lt;td&gt;FastCodec 编解码&lt;/td&gt;
&lt;td&gt;长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GetOrSetBase/GetOrSetBaseResp&lt;/td&gt;
&lt;td&gt;特殊的 Base 相关接口，框架内部使用&lt;/td&gt;
&lt;td&gt;短&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="产物过大会怎么样"&gt;产物过大会怎么样&lt;/h3&gt;
&lt;p&gt;现在很多服务都有了自己的 IDL 大仓库，在字节的内部场景中，甚至出现了 6.8G 的超大型 IDL 仓库，包含了上百万个 commit&lt;/p&gt;
&lt;p&gt;这种情况下，随着业务迭代，IDL 的内容新增和相互引用不断增加（大家没事都不会去删 IDL，所以只会越来越大），所以生成 kitex_gen 之后，不管有的没的，产物体积可能会非常大&lt;/p&gt;
&lt;p&gt;体积太大了，会导致：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成耗时也很长，影响研发效率&lt;/li&gt;
&lt;li&gt;Goland 加载索引要很久，或者根本无法加载，没自动补全了，代码都不知道怎么写了&lt;/li&gt;
&lt;li&gt;Git 提交的时候内容巨大，Git 仓库也越来越大了，当 Git 仓库超过 500MB 后，&lt;a href="https://github.com/golang/go/issues/29210"&gt;甚至可能 go get 都拉不下来了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;编译很慢、甚至编译时符号表过大&lt;a href="https://github.com/golang/go/issues/17378"&gt;直接编译失败&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以这种时候，不得不提到产物优化治理了（顺便能让生成速度更快）&lt;/p&gt;
&lt;h2 id="优化手段"&gt;优化手段&lt;/h2&gt;
&lt;p&gt;过去半年，我们对生成速度和体积优化进行了一轮探索，总结了不少有用的手段。&lt;/p&gt;
&lt;p&gt;虽然由于历史包袱或其他原因，我们没把这些手段直接作为 kitex tool 的默认行为，但也经过了稳定的验证和一些字节内部场景的落地接入&lt;/p&gt;
&lt;p&gt;如果你的服务也受代码生成的困扰，下面的方法总有一款适合你~&lt;/p&gt;
&lt;h3 id="idl-裁切"&gt;IDL 裁切&lt;/h3&gt;
&lt;p&gt;特点：大幅减少产物体积、提高生成速度&lt;/p&gt;
&lt;h4 id="简介"&gt;简介&lt;/h4&gt;
&lt;p&gt;简单来说，很多项目的 Thrift IDL 有大量冗余内容，只需要生成所有 Method 直接或者间接引用到的结构体就好了，其他无关内容可以剔除掉。&lt;/p&gt;
&lt;p&gt;IDL 裁切工具能自动完成这个过程，使得 Kitex 代码生成速度和产物体积都得到很大的优化。根据一些字节内部大仓库的试点，生成耗时减半、产物体积减少 60%+ （你的 IDL 越大，里面的冗余内容越多，效果越好）&lt;/p&gt;
&lt;h4 id="使用"&gt;使用&lt;/h4&gt;
&lt;p&gt;在 kitex 命令执行时，额外添加 &lt;code&gt;-thrift trim_idl&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex -module xx -thrift trim_idl xxxx.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;工具在执行时，会解析 IDL 然后只保留所有 Method 直接或间接用到的结构体，以最快的速度生成最简洁的产物，并同时输出一个裁切效果的报告：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_codegen_practices/wanring.jpg" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="进阶"&gt;进阶&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有这样一种场景，某个超大 IDL 有 100 个 Method，但 A 团队只用其中 5 个 Method，B 团队只用另外 10 个 Method，对于每个团队而言，不需要生成 100 个 Method 以及所有的结构体&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;裁切工具提供了 -method ，细粒度到方法级别做裁切，以解决上面提到的场景，详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/idl_trimmer"&gt;指定 Method 裁切&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="no_fmt-提速"&gt;no_fmt 提速&lt;/h3&gt;
&lt;p&gt;特点：代码生成提速 50%&lt;/p&gt;
&lt;h4 id="简介-1"&gt;简介&lt;/h4&gt;
&lt;p&gt;在分析一些复杂 IDL 场景生成慢的火焰图时，发现 Kitex Tool 里有一个比较 interesting 的情况：生成代码后，对产物进行 go fmt 整理的耗时居然占了一半&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_codegen_practices/profile.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;所以，如果你不是很关心产物代码的格式整不整齐，可以直接跳过这个操作，生成速度马上就快 50% 了&lt;/p&gt;
&lt;p&gt;虽然很粗暴，但确实很有用 😂&lt;/p&gt;
&lt;p&gt;（当然我们也试过对火焰图左边的 template 底层的反射开销做优化，预估快 20%，但改造和影响有点大。直接无脑去掉 no_fmt 提速 50% 后，速度就已经可以接受了，所以就没继续搞了）&lt;/p&gt;
&lt;p&gt;字节内部的产物平台通过该方式，代码生成耗时 P90 从 80s 下降到了 20s ，节约了了 60s (70%)&lt;/p&gt;
&lt;h4 id="使用-1"&gt;使用&lt;/h4&gt;
&lt;p&gt;在 kitex 命令执行时，额外添加 &lt;code&gt;-thrift no_fmt&lt;/code&gt; 即可&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex -module xx -thrift no_fmt xxxx.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;产物会有一些空行或者缩进上的不整齐，但往往 kitex_gen 里面的大量内容都是没人看的，所以也无所谓了&lt;/p&gt;
&lt;h3 id="删除-processor"&gt;删除 Processor&lt;/h3&gt;
&lt;p&gt;特点：产物体积减小约 10%，速度等比提升&lt;/p&gt;
&lt;p&gt;v0.10.0+ 后的 kitex tool 已默认使用该策略&lt;/p&gt;
&lt;h4 id="简介-2"&gt;简介&lt;/h4&gt;
&lt;p&gt;因为一些历史原因（以前对照 apache thrift 的一些无用实现），kitex_gen 会有些没用的代码，形如 XXXClientFactory、XXXClientProtocol、XXXProcessor：&lt;/p&gt;
&lt;p&gt;这部分代码原本是 apache thrift 场景用来创建 service 和 client 的，但在 kitex 中，会单独生成 xxxservice 目录，以及 client.go、server.go 这些 kitex server 和 kitex client 的实现。&lt;/p&gt;
&lt;p&gt;经确认，在 Kitex 场景下，这部分内容已经完全没被使用了（业务代码里也不会引用到），所以可以从生成代码里逐渐把这些内容移除掉。从 IDL 测试的平均值来看，产物体积优化约 10%，速度略微提升&lt;/p&gt;
&lt;h4 id="使用-2"&gt;使用&lt;/h4&gt;
&lt;p&gt;在 Kitex 代码生成工具 v0.10.0 之后，会自动不生成这部分内容&lt;/p&gt;
&lt;p&gt;如果你的工具是旧版本，添加 &lt;code&gt;-thrift no_processor&lt;/code&gt; 参数即可&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex -module xx -thrift no_processor xxxx.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;补充说明&lt;/p&gt;
&lt;p&gt;一般情况下，你可以放心的去掉这部分代码，因为确实用不到。但以防意外，如果 v0.10.0 的默认去除行为确实影响到你的代码了，导致编译失败等情况，可以通过 &lt;code&gt;-thrift no_processor=false&lt;/code&gt; 来阻止这一行为：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex -module xx -thrift no_processor=false xxxx.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并联系 Cloudwego 社区，进行后续支持&lt;/p&gt;
&lt;h3 id="删除-deep-equal"&gt;删除 Deep Equal&lt;/h3&gt;
&lt;p&gt;特点：产物体积减小约 20%，速度等比例提升&lt;/p&gt;
&lt;h4 id="简介-3"&gt;简介&lt;/h4&gt;
&lt;p&gt;Kitex 对 Thrift IDL 的 set 类型生成是数组，会进行去重检查&lt;/p&gt;
&lt;p&gt;默认情况下，会为每个结构体生成 DeepEqual 方法，因为静态生成的性能好。如果不生成，就默认用反射库的 reflect.DeepEqual （性能慢）&lt;/p&gt;
&lt;p&gt;如果在用不到 set 或用的不多的场景下，可以不生成 DeepEqual 方法来节约体积&lt;/p&gt;
&lt;h4 id="使用-3"&gt;使用&lt;/h4&gt;
&lt;p&gt;添加参数 &lt;code&gt;-thrift gen_deep_equal=false&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex -module xxx -thrift gen_deep_equal=false xxx.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="注意"&gt;注意&lt;/h4&gt;
&lt;p&gt;剔除这个来优化产物的前提是不对 set 有大量使用，如果 set 使用的地方很多，或者 set 里的元素数量很大，那么可能会有性能下降的问题&lt;/p&gt;
&lt;p&gt;但如果你在使用 set 之前，已经对写入的元素做了去重检查，那其实 Kitex 框架里的这步二次检查就是多余的了，可以考虑使用 -thrift validate_set=false 来关闭检查，反而节约一次多余的计算开销&lt;/p&gt;
&lt;p&gt;后续我们会针对 Deep Equal 以及 Set 的去重用法做更合理的实现，保证产物精简高效&lt;/p&gt;
&lt;h3 id="删除-apache-codec"&gt;删除 Apache Codec&lt;/h3&gt;
&lt;p&gt;特点：产物体积减小约 50%，速度等比例提升&lt;/p&gt;
&lt;h4 id="背景"&gt;背景&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么 Kitex 代码里有两套编解码&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;kitex_gen 里会生成 Apache Codec 和 Fast Codec 两套编解码。Fast Codec 性能更好，但需要从协议里读到 payload size 才能用，所以只有 TTHeader、Framed 场景能用
绝大多服务都接入了使用 TTHeader，或手动设置了 Framed，所以直接用 Fast Codec&lt;/p&gt;
&lt;p&gt;这就有了一个想法： 对大部分服务，Apache Codec 占了快 50% 的体积，而且基本没用，只是用来兜底的
如果能让 Thrift Buffered 也能走 Fast Codec，就没必要保留 Apache Codec 了
可以把服务的默认协议从 Buffered 改为 Framed&lt;/p&gt;
&lt;h4 id="简介-4"&gt;简介&lt;/h4&gt;
&lt;p&gt;在 Kitex v0.10.0 里，我们实现了一个 SkipDecoder，可以让 Thrift Buffered 场景也能走 Fast Codec 编解码，而不需要 Apache Codec 兜底了，通过这个功能，你就可以在仓库里少生成一半的代码&lt;/p&gt;
&lt;p&gt;同时 Kitex v0.10.0 也把默认协议设置为了 Framed，进一步减少了线上的 Apache Codec 使用空间。&lt;/p&gt;
&lt;h4 id="使用-4"&gt;使用&lt;/h4&gt;
&lt;p&gt;保证你的 Kitex 版本高于 v0.10.0
重新做代码生成，添加 &lt;code&gt;-thrift no_default_serdes&lt;/code&gt; 参数&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;kitex -module xxx -thrift no_default_serdes xxx.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样生成的代码就没有 Apache Codec 内容，少了一大半体积
开启 Skip Decoder，在 NewClient 或 NewServer 的时候添加如下参数：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;import (
&amp;#34;github.com/cloudwego/kitex/pkg/remote/codec/thrift&amp;#34;
&amp;#34;demo/kitex_gen/kitex/samples/echo/echoservice&amp;#34;
)
func main() {
cli := echoservice.MustNewClient(&amp;#34;kitex.samples.echo&amp;#34;,
client.WithPayloadCodec(thrift.NewThriftCodecWithConfig(thrift.FastRead|thrift.FastWrite|thrift.EnableSkipDecoder)),
)
srv := echoservice.NewServer(handler,
server.WithPayloadCodec(thrift.NewThriftCodecWithConfig(thrift.FrugalWrite|thrift.FrugalRead|thrift.EnableSkipDecoder)),
)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，当你的服务收到 Thrift Buffered 报文时，会通过 SkipDecoder + FastCodec 完成编解码，不再依赖 Apache Codec&lt;/p&gt;
&lt;h4 id="注意-1"&gt;注意&lt;/h4&gt;
&lt;p&gt;Skip Decoder 功能已经正式发布了，但还需手动开启。后续计划 Skip Decoder 默认启用&lt;/p&gt;
&lt;p&gt;一旦使用了 &lt;code&gt;-thrift no_default_serdes&lt;/code&gt; 从生成代码里去除了 Apache Codec，对应的 Kitex Client / Kitex Server 要添加 Skip Decoder 配置，否则当收到对端的 Thrift Buffered 报文时，会无法解析，所有请求报错失败！&lt;/p&gt;
&lt;p&gt;Apache Codec 的序列化实现是读一段内容解析一段内容，而 Skip Decoder 和 Fast Codec 的序列化实现都是一次读完所有内容然后整体解析，这样虽然速度更快了，但占用内存会多一些。绝大部分情况无所谓。但如果你的服务比较特殊，比如一次读的内容非常大，为了避免内存过大，明确设置过禁用 Fast Codec，通过 Apache Codec 来编解码，这种场景下，请谨慎考虑这个特性。&lt;/p&gt;
&lt;h4 id="低版本如何操作"&gt;低版本如何操作&lt;/h4&gt;
&lt;p&gt;如果 Kitex 版本低于 v0.10.0，没有 SkipDecoder 能力来兜底 Thrift Buffered 场景，但也想删除 Apache Codec 来治理产物体积，思路如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确保你的服务，以及上下游服务，都不采用 Thrift Buffered 协议，如果是 Kitex，那么把他们至少都设置为 Framed 协议，这样就走不到 Apache Codec 的逻辑了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成代码添加 &lt;code&gt;-thrift no_default_serdes&lt;/code&gt; 来减少一半的产物体积&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样做有一些风险点：&lt;/p&gt;
&lt;p&gt;如果某个服务考虑漏了，发送了 Buffered 协议，那么这些请求都会失败&lt;/p&gt;
&lt;p&gt;如果你的下游有一些很旧的其他框架（例如老版本的 Java 框架），不支持 Buffered 协议，那么这条链路就不能这么搞&lt;/p&gt;
&lt;p&gt;所以推荐还是升级 Kitex 版本到 v0.10.0，用 Skip Decoder 的能力来兜底&lt;/p&gt;
&lt;h3 id="frugal"&gt;Frugal&lt;/h3&gt;
&lt;p&gt;特点：产物体积减小约 90%，速度等比例提升&lt;/p&gt;
&lt;h4 id="简介-5"&gt;简介&lt;/h4&gt;
&lt;p&gt;Frugal 是一款动态的不需要编解码代码的 Thrift 编解码器，通过启用 slim 模板，Kitex 可以只生成 Golang Types，上文提到的 Apache Codec 和 Fast Codec 都不需要了，编解码在运行时通过反射或 JIT 实现。这样可以大幅减少生成的代码量，减少 IDE 加载时间，相比正常的 kitex_gen，体积缩小 90%，且性能仍然较高。&lt;/p&gt;
&lt;h4 id="使用-5"&gt;使用&lt;/h4&gt;
&lt;p&gt;说来话长，步骤相对较多，详见：https://github.com/cloudwego/frugal&lt;/p&gt;
&lt;h4 id="注意-2"&gt;注意&lt;/h4&gt;
&lt;p&gt;目前 Frugal 是基于 JIT 实现的，所以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JIT 首次编解码耗时会长一些，可能会影响首批请求的耗时&lt;/li&gt;
&lt;li&gt;也可以在服务启动时就通过 Pretouch 预热，但当 IDL 非常复杂的时候，启动时间会增加&lt;/li&gt;
&lt;li&gt;目前不支持 Unknown Fields 特性&lt;/li&gt;
&lt;li&gt;在 ARM64 场景还处在试验性的支持中&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="其他"&gt;其他&lt;/h4&gt;
&lt;p&gt;近期我们实现了一个基于 Golang 反射版的 Frugal，对不同系统的兼容性较好，而且也不会有太严重的首次耗时，后续会更新文档和相关使用方式&lt;/p&gt;
&lt;p&gt;长期规划中，我们期望 Frugal 能逐渐广泛落地，让绝大多数 Kitex 项目不再需要生成大量代码，只有当对性能有更高要求的场景，才使用 FastCodec 这种静态生成的编解码。&lt;/p&gt;
&lt;h3 id="进阶-工具-sdk-化"&gt;进阶: 工具 SDK 化&lt;/h3&gt;
&lt;p&gt;速度预计优化 10%~25%，易用性和维护性有提升&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是个进阶功能，如果你是某个 Kitex Tool 相关的代码生成项目维护者，可能会对你有帮助&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id="简介-6"&gt;简介&lt;/h4&gt;
&lt;p&gt;当要使用 Kitex Tool 生成代码，以往都只能安装 Kitex Tool （以及 Thriftgo、Validator 等工具链），然后执行命令来触发。一些代码生成项目，是通过在 Golang 代码里起一个进程，通过 os.Exec 来调用本地的 Kitex Tool，实现代码生成的。&lt;/p&gt;
&lt;p&gt;之前这样设计是想着能跨语言、插件进程可拔插，不过实际场景用到的很少。所以在 v0.11.0 之后，Kitex Tool 提供了 SDK 化调用的能力，可以通过引入依赖包 + Golang 函数来生成代码，而无需再安装 Kitex Tool、Thriftgo、Validator 插件等一系列工具链了&lt;/p&gt;
&lt;h4 id="使用-6"&gt;使用&lt;/h4&gt;
&lt;p&gt;首先引入依赖包： &lt;code&gt;import &amp;quot;github.com/cloudwego/kitex/tool/cmd/kitex/sdk&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接口签名如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func RunKitexTool(wd string, plugins []plugin.SDKPlugin, kitexArgs ...string) error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wd：想在哪个路径下执行 kitex tool 命令&lt;/li&gt;
&lt;li&gt;plugins：想同时内嵌执行哪些插件，例如 Validator 插件，也实现了对应的接口。一般用不到，写 nil 即可&lt;/li&gt;
&lt;li&gt;kitexArgs：想执行哪些参数，按 kitex tool 的常规写法来，然后空格拆分成数组传入即可&lt;/li&gt;
&lt;li&gt;一个例子：想在当前目录执行 kitex -module my_mod xxx.thrift，按下面方式写就可以了&lt;/li&gt;
&lt;li&gt;err := sdk.RunKitexTool(os.Getwd(), nil, &amp;ldquo;-module&amp;rdquo;, &amp;ldquo;my_mod&amp;rdquo;, &amp;ldquo;xxx.thrift&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;普通开发者不用太关心，日常用不到&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这种使用方式中，不需要安装 thriftgo（而且不会有自升级行为），直接内嵌 thriftgo 函数调用省掉了进程调用和数据传输的开销，在一些复杂场景，生成速度能提高 10%~25%，而且更易于维护或集成使用。&lt;/p&gt;
&lt;p&gt;如果你在开发某种封装了 Kitex 的代码生成器或者代码生成平台，那么可以通过这种方式来代替 os.Exec 调用 Kitex 命令行，同时也省去了维护本地 kitex tool、thriftgo 二进制文件。&lt;/p&gt;
&lt;p&gt;后续 Kitex Tool 将默认内嵌 Thriftgo SDK，就不再需要单独安装 Thriftgo 或者关系工具版本关系了&lt;/p&gt;
&lt;h2 id="我们还在做什么"&gt;我们还在做什么&lt;/h2&gt;
&lt;p&gt;一些还在探索的产物优化&amp;amp;生成提速手段&lt;/p&gt;
&lt;h3 id="fastcodec-高性能重构"&gt;FastCodec 高性能重构&lt;/h3&gt;
&lt;p&gt;我们正在重构一版 FastCodec 的代码生成实现，预期会占用更少的代码体积，具有更好的编解码性能，并且与现在的实现完全兼容。开发完成后，我们会生成这套更好的 FastCodec 内容。&lt;/p&gt;
&lt;h3 id="增量代码更新"&gt;增量代码更新&lt;/h3&gt;
&lt;p&gt;有时候一组 IDL 有上千个，但每次改动 diff 只有一点（比如添加了一个字段之类的），刷新生成代码就要等上很久，大部分生成的内容都和之前没区别，在做无用功。如果能对变动的 IDL 单独更新，就能极大缩短时间&lt;/p&gt;
&lt;p&gt;目前 Kitex Tool 从技术上是可以做到这点的，但需要结合具体的生成场景来看如何集成&lt;/p&gt;
&lt;h3 id="冗余字段消除"&gt;冗余字段消除&lt;/h3&gt;
&lt;p&gt;当前由于代码产物过大、版本管理困难等原因，各业务线往往使用 公共代码生成仓库来管理生成产物。但是同一套 IDL 面向不同服务场景往往有不同的数据字段下发规则，此时某一使用公共结构体的客户端就会产生冗余字段。此外，随着业务逻辑的迭代，IDL 中也可能有大量 事实上无用但是并未删除的废弃 Field 字段。这些情况都会转化为不必要的 thrift 编解码开销，最终导致服务性能下降。因此我们希望通过某种方式来判断业务主进程中 实际没有使用到的字段，前置到 kitex tool 中进行预处理，最终优化掉其产生的不必要性能开销。（前文提到的 IDL 裁切是删减没用的结构体，而这种手动能更精准的清理无用的结构体字段、并减少编译和序列化开销）&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.11.0</title><link>https://www.cloudwego.io/zh/blog/2024/09/12/kitex-release-v0.11.0/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/09/12/kitex-release-v0.11.0/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;建议直接升级 Kitex 版本到 v0.11.3, 因为我们对 v0.11.0 里的一些性能问题进行了优化&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="新特性"&gt;新特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;重试：新增混合重试功能&lt;/strong&gt;：支持同时开启「失败重试」+「Backup Request」两种策略，能够在降低长尾请求的同时提高请求的重试成功率，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/retry/"&gt;请求重试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义 Payload 校验&lt;/strong&gt;：为避免硬件故障或数据篡改导致收发的数据不一致，Kitex 提供了对 Payload 报文的校验功能，并支持自定义扩展，使用方式参见: &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/payload_validator/"&gt;payload 校验&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="功能优化"&gt;功能优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Frugal ARM 性能优化&lt;/strong&gt;：Frugal 支持了基于反射的高性能编解码，升级到 Frugal v0.2.0 即可&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kitex Tool 代码生成提速&lt;/strong&gt;：提供了 &lt;code&gt;-rapid&lt;/code&gt; 参数，可以无需安装 Thriftgo ，且速度略有提高。下个版本之后将作为默认行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多 Service 多 Handler 生成&lt;/strong&gt;：从该版本开始，Kitex Tool 支持为每个 service 生成 handler 并统一注册到 server，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/multi_handler/"&gt;多 Service 多 Handler 生成&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;支持版本 Go 1.18~1.23，最低支持变为 Go 1.18，如果你的 Go 版本过低，编译时会有提示：&lt;code&gt;note: module requires Go 1.18&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;逐步移除对 Apache Thrift 的依赖，将对 Thrift 编解码相关的逻辑逐步收敛到 github.com/cloudwego/gopkg/thrift 库中&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1509"&gt;#1509&lt;/a&gt;] feat(retry): support Mixed Retry which integrating Failure Retry and Backup Request&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1478"&gt;#1478&lt;/a&gt;] feat: customized payload validator&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1514"&gt;#1514&lt;/a&gt;] feat(grpc): server returns cancel reason&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1513"&gt;#1513&lt;/a&gt;] feat(tool): support updating import path for PkgInfo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1425"&gt;#1425&lt;/a&gt;] feat(tool): support generating multiple handlers for multiple services&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1491"&gt;#1491&lt;/a&gt;] feat(grpc): add GetTrailerMetadataFromCtx&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1492"&gt;#1492&lt;/a&gt;] feat: add GetCallee to kitexutil to get the service name of callee&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1479"&gt;#1479&lt;/a&gt;] feat(tool): embed thriftgo into kitex tool&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1485"&gt;#1485&lt;/a&gt;] optimize: add cachekey to discovery event for debug&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1525"&gt;#1525&lt;/a&gt;] fix: move json-iterator back to support marshal &lt;code&gt;map[any]any&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1471"&gt;#1471&lt;/a&gt;] fix(streaming): resolve ctx diverge in server-side streaming&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1515"&gt;#1515&lt;/a&gt;] fix(gRPC): pass error when client transport is closed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1501"&gt;#1501&lt;/a&gt;] fix(generic): judge business error directly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1503"&gt;#1503&lt;/a&gt;] fix: return an unknown service/method exception to client correctly under multi_service server scenario&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1487"&gt;#1487&lt;/a&gt;] fix(generic): fix a generic serviceInfo compatible issue&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1489"&gt;#1489&lt;/a&gt;] fix(codec): wrap trans error for apache thrift read error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1486"&gt;#1486&lt;/a&gt;] fix(trans/netpoll): log when panic in onConnRead&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1476"&gt;#1476&lt;/a&gt;] fix: fix GetServerConn interface assert for streamWithMiddleware&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1481"&gt;#1481&lt;/a&gt;] fix(gonet): adjust gonet server read timeout to avoid read error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1466"&gt;#1466&lt;/a&gt;] fix: allow HEADERS frame with empty header block fragment&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1512"&gt;#1512&lt;/a&gt;] refactor: thrift and generic codec uses bufiox interface for encoding and decoding&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1490"&gt;#1490&lt;/a&gt;] refactor: optimized apache codec without reflection&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1483"&gt;#1483&lt;/a&gt;] refactor: use github.com/cloudwego/gopkg/protocol/thrift/apache&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1474"&gt;#1474&lt;/a&gt;] refactor: rm apache thrift in internal/mocks&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1470"&gt;#1470&lt;/a&gt;] refactor: rm apache thrift in pkg/generic &amp;amp; netpollmux&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1450"&gt;#1450&lt;/a&gt;] refactor(generic): remove apache thrift.TProtocol from generic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1441"&gt;#1441&lt;/a&gt;] refactor: deprecate bthrift, use cloudwego/gopkg&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1455"&gt;#1455&lt;/a&gt;] refactor(test): perf optimize and log loc correct&lt;/p&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1469"&gt;#1469&lt;/a&gt;] test: replace judgement of mem stats of client finalizer by closed count check&lt;/p&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1527"&gt;#1527&lt;/a&gt;] perf(grpc): bdp ping rate limit&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1511"&gt;#1511&lt;/a&gt;] perf(thrift): encodeBasicThrift write logic didn&amp;rsquo;t use kitex BinaryProtocol&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1504"&gt;#1504&lt;/a&gt;] perf(grpc): zero allocation in hot path&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1497"&gt;#1497&lt;/a&gt;] perf: add option to enable spancache for fastpb&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1495"&gt;#1495&lt;/a&gt;] perf(thrift): use kitex BinaryProtocol replace apache BinaryProtocol for apache thrift codec&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1532"&gt;#1532&lt;/a&gt;] chore: update dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1522"&gt;#1522&lt;/a&gt;] chore(generic): make generic streaming APIs internal&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1465"&gt;#1465&lt;/a&gt;] chore(generic): add an external method to create service info for generic streaming client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1468"&gt;#1468&lt;/a&gt;] build: adapt to go1.23rc2&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1482"&gt;#1482&lt;/a&gt;] chore(generic): add generic base using gopkg base&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1463"&gt;#1463&lt;/a&gt;] chore: fix grpc keepalive test by start server responsiblly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1462"&gt;#1462&lt;/a&gt;] chore(test): fix xorshift64 in consist_test.go&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1454"&gt;#1454&lt;/a&gt;] chore(ci): speed up multiple ci processes 8min -&amp;gt; 1min&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.10.0</title><link>https://www.cloudwego.io/zh/blog/2024/06/12/kitex-release-v0.10.0/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/06/12/kitex-release-v0.10.0/</guid><description>
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="性能优化"&gt;性能优化&lt;/h3&gt;
&lt;p&gt;新版本探索了更多性能优化的方向和非常规的一些优化手段。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;长连接池: 100 并发 qps 提升 4%, p99 降低 18%&lt;/li&gt;
&lt;li&gt;多路复用: 100 并发 qps 提升 7%, p99 降低 24%&lt;/li&gt;
&lt;li&gt;gRPC: 100 并发 qps优化 8%，p99优化 10%&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="代码产物精简优化"&gt;代码产物精简优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;移除非序列化代码（默认）&lt;/strong&gt;：原 kitex_gen Thrift 产物代码为保持与 Apache 的一致性，会生成 Processor 代码，但 Kitex 并不需要这些代码。为解决大家的产物痛点问题，此版本默认去除这部分代码，生成速度提升约10%。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移除 Apache Codec 代码（配置移除）&lt;/strong&gt;：Kitex 有自定义的 FastCodec 代码，旧版本仅在 Buffered 包需要使用 Apache Codec。Kitex 新版本实现 SkipDecoder，在开启后就可以完全不依赖 Apache Codec，进而移除代码，产物体积可减少约50%。使用方式见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/skip_decoder/"&gt;SkipDecoder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="新特性"&gt;新特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Thrift 按需序列化&lt;/strong&gt;：支持定义 FieldMask 实现数据按需序列化（字段裁剪、合并，RPC性能优化等），详见 &lt;a href="https://github.com/cloudwego/thriftgo/tree/main/fieldmask"&gt;Thrift FieldMask RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="功能优化"&gt;功能优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;熔断&lt;/strong&gt;：支持自定义熔断的错误类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常重试&lt;/strong&gt;：代码配置的自定义结果重试增加 ctx 参数，方便用户结合 ctx 信息判断是否重试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移除一致性哈希中的缓存&lt;/strong&gt;：解决hash key分散导致的延迟变高、内存上涨的问题。移除缓存后，面对 Key 特别分散甚至接近随机分布的场景，可以有效降低内存占用与管理缓存的消耗。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="用户体验优化"&gt;用户体验优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kitex 工具兼容性检测&lt;/strong&gt;：优化过去产物引入新定义导致的 undefined 编译问题。Kitex 工具在生成代码前会检查 go.mod 中使用的 Kitex 版本。若 Kitex 工具和 Kitex 版本不兼容，则不会生成代码并给出相应的升降级提示。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1370"&gt;#1370&lt;/a&gt;] feat(loadbalance): do not cache all the keys for Consistent Hash&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1359"&gt;#1359&lt;/a&gt;] feat:(generic) jsonpb using dynamicgo support parse IDL from memory&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1353"&gt;#1353&lt;/a&gt;] feat(retry): add ctx param for customized result retry funcs&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1352"&gt;#1352&lt;/a&gt;] feat: add option to specify ip version for default HTTPResolver&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1316"&gt;#1316&lt;/a&gt;] feat(kitex tool): support dependencies compatibility checking&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1346"&gt;#1346&lt;/a&gt;] feat(generic): set dynamicgo parse mode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1336"&gt;#1336&lt;/a&gt;] feat(tool): fast-codec supports Thrift Fieldmask&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1313"&gt;#1313&lt;/a&gt;, #1378] feat(thrift codec): implement skipDecoder to enable Frugal and FastCodec for standard Thrift Buffer Protocol&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1257"&gt;#1257&lt;/a&gt;] feat: CBSuite custom GetErrorType func&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1349"&gt;#1349&lt;/a&gt;] optimize(gRPC): gRPC onError uses CtxErrorf to print log with information in ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1326"&gt;#1326&lt;/a&gt;] optimize(tool): remove thrift processor for less codegen&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1369"&gt;#1369&lt;/a&gt;] perf(thrift): optimized skip decoder&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1314"&gt;#1314&lt;/a&gt;] perf: use dirtmake to reduce memclr cost&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1322"&gt;#1322&lt;/a&gt;] perf(codec): support fast write nocopy when using netpoll link buffer&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1276"&gt;#1276&lt;/a&gt;] perf: linear allocator for fast codec ReadString/ReadBinary&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1320"&gt;#1320&lt;/a&gt;] perf(codec): fast codec use batch alloc&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1379"&gt;#1379&lt;/a&gt;] fix: fix a bug &amp;ldquo;unknown service xxx&amp;rdquo; when using generic client by not writing IDLServiceName when it&amp;rsquo;s generic service&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1368"&gt;#1368&lt;/a&gt;] fix(remote): modify the error message thrown when no target service is found&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1374"&gt;#1374&lt;/a&gt;] fix: init default values when using liner allocator&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1361"&gt;#1361&lt;/a&gt;] fix: span cache re-cap bytes when using Make&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1362"&gt;#1362&lt;/a&gt;] fix(payloadCodec): replace the registered PayloadCodec if the type is same when using WithPayloadCodec for server-side&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1364"&gt;#1364&lt;/a&gt;] fix: fix grpc compressor mcache free panic when data is empty&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1328"&gt;#1328&lt;/a&gt;] fix(gRPC): release connection in DoFinish for grpc streaming to close the short connection&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1307"&gt;#1307&lt;/a&gt;] fix(connpool): kitex long pool reset idleList element to nil to prevent conn leak&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1294"&gt;#1294&lt;/a&gt;] fix(netpollmux): fix a bug that disables multi-service by assigning the first svcInfo to targetSvcInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1308"&gt;#1308&lt;/a&gt;] fix(generic): not write generic method name for binary generic exception to align with method names of services not using binary generic&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1344"&gt;#1344&lt;/a&gt;] refactor(tool): export thriftgo template definition in kitextool&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1385"&gt;#1385&lt;/a&gt;] chore: update dynamicgo to v0.2.8&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1383"&gt;#1383&lt;/a&gt;] chore: upgrade netpoll to v0.6.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1376"&gt;#1376&lt;/a&gt;] chore: integration test use go 1.20 to solve the compatibility issue of official gRPC in kitex-tests repo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1355"&gt;#1355&lt;/a&gt;] chore: upgrade netpoll to v0.6.1 pre-release version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1338"&gt;#1338&lt;/a&gt;] chore: correct the comment of FreezeRPCInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1347"&gt;#1347&lt;/a&gt;] chore: use runtimex to replace choleraehyq/pid&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1342"&gt;#1342&lt;/a&gt;] chore: update sonic/loader to v0.1.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1334"&gt;#1334&lt;/a&gt;] chore: update dynamicgo to v0.2.3&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1324"&gt;#1324&lt;/a&gt;] chore: update dynamicgo and sonic version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1317"&gt;#1317&lt;/a&gt;] chore: frugal v0.1.15 (with migrated iasm)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong&gt;
@XiaoYi-byte&lt;/p&gt;</description></item><item><title>Blog: kitexcall：用 JSON 发起 RPC 请求的命令行神器</title><link>https://www.cloudwego.io/zh/blog/2024/05/31/kitexcall%E7%94%A8-json-%E5%8F%91%E8%B5%B7-rpc-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8/</link><pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/05/31/kitexcall%E7%94%A8-json-%E5%8F%91%E8%B5%B7-rpc-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8/</guid><description>
&lt;h2 id="背景"&gt;背景&lt;/h2&gt;
&lt;p&gt;Kitex 是字节跳动基础架构服务框架团队推出的 Go 微服务 RPC 框架，支持 Thrift、Kitex Protobuf、gRPC 等消息协议，具有高性能、强可扩展的特点。Kitex 于 2021 年 9 月正式开源后，已在多家外部企业成功落地，为他们带来了真实的成本、性能和稳定性收益。
然而，对于开发者来说，有一个痛点是，为了验证 Server 端代码，发起 RPC 测试请求的流程比较繁琐。&lt;/p&gt;
&lt;h2 id="痛点"&gt;痛点&lt;/h2&gt;
&lt;p&gt;给 Kitex 服务发送 RPC 测试请求的过程通常包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成客户端代码：根据 IDL 文件生成 Kitex Client 相关代码。&lt;/li&gt;
&lt;li&gt;构造测试请求：构建请求、调用方法、处理响应。&lt;/li&gt;
&lt;li&gt;配置多种选项：设置传输协议、元信息、异常处理等。
这一过程不仅耗时，且在频繁测试时，每次都需修改和编译代码，效率较低。一个能简化这些步骤、快速发送 RPC 请求的工具，将大幅提升开发效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="kitexcall-介绍"&gt;kitexcall 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;详情可以参考：https://github.com/kitex-contrib/kitexcall&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;为了简化开发者的工作，社区推出了 kitexcall 这个命令行工具，基于 Kitex 提供的 JSON 泛化调用，极大地简化了 Kitex 客户端的编写过程。开发者只需通过简单的命令行操作，就可以轻松发起 Kitex 请求，而不再需要编写繁琐的代码。&lt;/p&gt;
&lt;p&gt;kitexcall 目前已发布 v0.1.1 版本，具备以下功能特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Thrift/Protobuf：可以处理 Thrift 和 Protobuf 格式的 IDL。&lt;/li&gt;
&lt;li&gt;支持多种传输协议：包括 Buffered、TTHeader、Framed、TTHeaderFramed，未来还将支持 gRPC。&lt;/li&gt;
&lt;li&gt;灵活的客户端选项：支持指定常用的客户端选项，如 &lt;code&gt;client.WithHostPorts&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;多种数据输入方式：请求数据可以从命令行参数或本地文件读取。&lt;/li&gt;
&lt;li&gt;元信息传递：支持单跳透传和持续透传的元信息，并接收服务器返回的反向透传元信息。&lt;/li&gt;
&lt;li&gt;业务异常处理：接收并处理业务自定义的异常错误码和信息。&lt;/li&gt;
&lt;li&gt;多种输出格式：默认输出人类友好的可读格式，未来将支持可解析的格式，便于与其他自动化工具集成。
下面，我们通过一个简单的例子，展示如何使用 kitexcall 发起一个 Kitex 请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="使用示例"&gt;使用示例&lt;/h2&gt;
&lt;p&gt;首先安装 kitexcall 命令行工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;go&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;install&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;github&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;com&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;/&lt;/span&gt;&lt;span style="color:#000"&gt;kitex&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;contrib&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;/&lt;/span&gt;&lt;span style="color:#000"&gt;kitexcall&lt;/span&gt;&lt;span style="color:#a40000"&gt;@&lt;/span&gt;&lt;span style="color:#000"&gt;latest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以 &lt;a href="https://github.com/cloudwego/kitex-examples"&gt;kitex-examples&lt;/a&gt; 的 Echo 服务为例，将其 IDL 文件保存为 echo.thrift。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;namespace&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;go&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Echo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Echo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为方便测试，你可以用如下步骤在本机启动这个 Echo 服务（默认监听 8888 端口）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;$&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;git&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;clone&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;https&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;//github.com/cloudwego/kitex-examples.git&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#a40000"&gt;$&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cd&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;kitex&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;examples&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;/&lt;/span&gt;&lt;span style="color:#000"&gt;basic&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;/&lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;/&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#a40000"&gt;$&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;go&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;run&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;Info&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;KITEX&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;listen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;at&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=[::]:&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;8888&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 kitexcall 发起请求非常简单，只要在命令行中指定 IDL 文件、方法名称、请求报文（JSON 格式）和 Server 地址即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;kitexcall&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;idl&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;path&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;echo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;m&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;echo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;d&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#a40000"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#a40000"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;e&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;127.0.0.1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;8888&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就可以看到 kitexcall 输出服务端返回的响应报文：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;Status&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;]:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Success&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你希望从文件中读入请求数据，也可以先创建请求数据文件 input.json：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并在 kitexcall 的参数中用 -f 参数指定文件名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;kitexcall&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;idl&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;path&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;echo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;m&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;echo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;f&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;input&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;json&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;e&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;127.0.0.1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;8888&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="原理简介"&gt;原理简介&lt;/h2&gt;
&lt;p&gt;kitexcall 工具基于 Kitex 提供的 JSON 泛化调用实现。其原理简单介绍如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Descriptor Provider&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kitexcall 使用 Kitex 提供的 DescriptorProvider 接口来解析 Thrift 或 Protobuf 的 IDL 文件，获取服务定义。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;泛化对象创建&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解析 IDL 文件后，kitexcall 创建泛化对象（如 JSONThriftGeneric 或 JSONPbGeneric），将 JSON 数据转换为内部请求格式，并将响应数据转换回 JSON 格式。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;客户端初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kitexcall 使用泛化对象和客户端选项（如传输协议、元信息处理等）来创建泛化客户端。该客户端可以调用 IDL 文件中定义的任何服务方法。&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;请求构建与发送&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kitexcall 从命令行输入或文件中读取 JSON 格式的请求数据，构建请求对象并发送请求，同时设置传输协议和元信息。&lt;/p&gt;
&lt;ol start="5"&gt;
&lt;li&gt;响应处理
接收到响应后，kitexcall 将其格式化为 JSON 并输出。如果启用了元信息回传机制，还会输出从服务端返回的元信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="未来展望"&gt;未来展望&lt;/h2&gt;
&lt;p&gt;kitexcall 作为一个社区驱动的项目，致力于简化开发者使用 Kitex 进行 RPC 调用的过程。未来，我们计划在以下几个方面进行改进和扩展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计划支持 gRPC（含基于 gRPC/HTTP2 的 Thrift Streaming）协议，以适应更多的使用场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持通过服务发现获取 Kitex Server 地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Kitex Server 支持 Reflection 能力之后，kitexcall 将跟进，实现无需 IDL 文件，即可获取服务详情和进行服务调用，使用将会更加便捷。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持可解析的输出格式（如 JSON），以便与其他自动化工具集成（例如 CI/CD、IDE 插件等场景）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;欢迎对 Kitex 和 kitexcall 感兴趣的开发者加入社区，共同贡献代码和创意。我们相信，在大家的共同努力下，kitexcall 将成为 Kitex 开发者手中的一把利器，让微服务开发变得更加高效和便捷。访问 &lt;a href="https://github.com/kitex-contrib/kitexcall"&gt;kitexcall&lt;/a&gt; 了解更多信息，并加入我们吧！&lt;/p&gt;
&lt;h3 id="项目地址"&gt;项目地址&lt;/h3&gt;
&lt;p&gt;GitHub：https://github.com/cloudwego&lt;/p&gt;</description></item><item><title>Blog: Hertz v0.9.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2024/05/30/hertz-v0.9.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/05/30/hertz-v0.9.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Hertz v0.9.0 版本中主要支持常规迭代与优化。&lt;/p&gt;
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1101"&gt;#1101&lt;/a&gt;] 增加一个方法能够放逐掉当前的 RequestContext（请求结束不入池）&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1056"&gt;#1056&lt;/a&gt;] 为参数绑定提供更多的默认类型支持&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1057"&gt;#1057&lt;/a&gt;] 当请求缺少Host短路时或者非法path时设置全局中间件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/921"&gt;#921&lt;/a&gt;] 对路由进行严格排序，防止生成代码出现大量的 diff&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1037"&gt;#1037&lt;/a&gt;] 在 trace 中过滤 shortConnErr 错误&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1102"&gt;#1102&lt;/a&gt;] 修复当使用 ResponseHeader.Set/Add 设置 Trailer 时，有可能会 panic 的问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1107"&gt;#1107&lt;/a&gt;] 修复路由排序的失效问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1064"&gt;#1064&lt;/a&gt;] 重构 client query 对于 enum 传递的配置形式&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Volo 0.10.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2024/04/08/volo-0.10.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/04/08/volo-0.10.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.10.0 版本中，我们更多的关注在了可扩展性和易用性上。&lt;/p&gt;
&lt;h2 id="break-change"&gt;Break Change&lt;/h2&gt;
&lt;h3 id="错误处理重构"&gt;错误处理重构&lt;/h3&gt;
&lt;p&gt;原先的错误类型存在诸如语义不清晰、可维护性不强、可扩展性不强、容易误用等问题，因此在新版中，我们重构了整个错误处理部分，极大加强了错误处理部分的语义清晰度和可维护性，并通过类型系统降低误用概率。&lt;/p&gt;
&lt;h4 id="迁移指南"&gt;迁移指南&lt;/h4&gt;
&lt;h5 id="server-handler-迁移"&gt;Server Handler 迁移&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;如果原先使用 &lt;code&gt;anyhow::Result&lt;/code&gt; 的，把 &lt;code&gt;anyhow:Result&lt;/code&gt; 改为 &lt;code&gt;volo_thrift::ServerResult&lt;/code&gt; 即可：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;example&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;XReq&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;ServerResult&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;XResp&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;如果原先使用 &lt;code&gt;Result&amp;lt;XResp, anyhow::Error&amp;gt;&lt;/code&gt; 的，将 &lt;code&gt;anyhow::Error&lt;/code&gt; 改为 &lt;code&gt;volo_thrift::ServerError&lt;/code&gt; 即可：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;example&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;XReq&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;XResp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;ServerError&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;如果原先使用了 &lt;code&gt;Exception&lt;/code&gt; 的用户，需要将返回类型从 &lt;code&gt;Result&amp;lt;XResp, volo_thrift::UserException&amp;lt;XException&amp;gt;&amp;gt;&lt;/code&gt; 改为 &lt;code&gt;Result&amp;lt;volo_thrift::MaybeException&amp;lt;XResp, XException&amp;gt;, volo_thrift::ServerError&amp;gt;&lt;/code&gt;，同时将原先返回 &lt;code&gt;Err(UserError::UserException(exception))&lt;/code&gt; 的地方改为使用 &lt;code&gt;Ok(MaybeException::Exception(exception))&lt;/code&gt; 即可：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;example&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;XReq&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;MaybeException&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;XResp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;XException&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;ServerError&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;..&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Ok&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;MaybeException&lt;/span&gt;::&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;如果改完之后，在返回 &lt;code&gt;anyhow::Error&lt;/code&gt; 时出现报错，可以手动加一个 &lt;code&gt;.into()&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;anyhow&lt;/span&gt;::&lt;span style="color:#000"&gt;anyhow!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#000"&gt;into&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="5"&gt;
&lt;li&gt;如果改完之后，在 &lt;code&gt;?&lt;/code&gt; 返回错误处出现报错，可以尝试先转换成 &lt;code&gt;anyhow::Error&lt;/code&gt; 再返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;map_err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;|&lt;/span&gt;&lt;span style="color:#000"&gt;e&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;|&lt;/span&gt;&lt;span style="color:#000"&gt;anyhow&lt;/span&gt;::&lt;span style="color:#000"&gt;anyhow!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;e&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;?&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="service-中间件迁移"&gt;Service 中间件迁移&lt;/h5&gt;
&lt;p&gt;对于不感知用户错误的中间件来说，本次修改应该不带来 break change；如果有需要感知用户错误，那么只需要把原来的 &lt;code&gt;volo_thrift::Error&lt;/code&gt; 改为 &lt;code&gt;volo_thrift::ServerError/ClientError&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h5 id="client-迁移"&gt;Client 迁移&lt;/h5&gt;
&lt;p&gt;client 部分的错误从原来的 &lt;code&gt;ResponseError&lt;/code&gt; 改为了 &lt;code&gt;ClientError&lt;/code&gt;，按编译器报错提示匹配新的错误 variant 即可。&lt;/p&gt;
&lt;h3 id="idl-管理文件-voloyml-格式重构"&gt;IDL 管理文件 volo.yml 格式重构&lt;/h3&gt;
&lt;p&gt;新版 yml 配置的结构更加清晰，且更易于维护，并主要解决了旧版中无法支持 git 跨仓库引用的问题，具体的功能和配置参数见 &lt;a href="https://www.cloudwego.io/zh/docs/volo/guide/config"&gt;config&lt;/a&gt;。另外，对于 volo-cli 命令行工具，我们将之前的 idl 命令名字修改为了 repo。&lt;/p&gt;
&lt;h4 id="迁移指南-1"&gt;迁移指南&lt;/h4&gt;
&lt;p&gt;安装 volo-cli 0.10.0 版本，并在 volo.yml 目录下执行 volo migrate 命令即可自动迁移。&lt;/p&gt;
&lt;h3 id="默认生成的-enum-类型修改"&gt;默认生成的 Enum 类型修改&lt;/h3&gt;
&lt;p&gt;在新版生成代码中，默认生成的 Enum 类型修改为了 i32 wrapper 的 newtype 类型，以便于更好的向前兼容 IDL enum 字段中枚举值的修改。&lt;/p&gt;
&lt;h4 id="迁移指南-2"&gt;迁移指南&lt;/h4&gt;
&lt;p&gt;将 enum 字段中枚举值名字修改为对应生成的名字即可，如 &lt;code&gt;Foo::Bar&lt;/code&gt; -&amp;gt; &lt;code&gt;Foo::BAR&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-0.9.0...volo-0.10.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex 支持 Dubbo 协议：助力多语言云原生生态融合</title><link>https://www.cloudwego.io/zh/blog/2024/03/16/kitex-%E6%94%AF%E6%8C%81-dubbo-%E5%8D%8F%E8%AE%AE%E5%8A%A9%E5%8A%9B%E5%A4%9A%E8%AF%AD%E8%A8%80%E4%BA%91%E5%8E%9F%E7%94%9F%E7%94%9F%E6%80%81%E8%9E%8D%E5%90%88/</link><pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/03/16/kitex-%E6%94%AF%E6%8C%81-dubbo-%E5%8D%8F%E8%AE%AE%E5%8A%A9%E5%8A%9B%E5%A4%9A%E8%AF%AD%E8%A8%80%E4%BA%91%E5%8E%9F%E7%94%9F%E7%94%9F%E6%80%81%E8%9E%8D%E5%90%88/</guid><description>
&lt;h2 id="背景"&gt;背景&lt;/h2&gt;
&lt;p&gt;Kitex 是字节跳动基础架构服务框架团队推出的 Go 微服务 RPC 框架，支持 Thrift、Kitex Protobuf、gRPC 等消息协议，具有高性能、强可扩展的特点。于 2021 年 9 月正式开源后，已在多家外部企业成功落地，为他们带来了真实的成本、性能和稳定性收益。&lt;/p&gt;
&lt;p&gt;很多企业用户在使用 Kitex 改造服务的过程中，需要 Kitex 能与现有的 Dubbo 框架实现的服务进行通信，这与 CloudWeGo 社区积极拓展生态的目标不谋而合，因此 Dubbo 互通项目 &lt;a href="https://github.com/kitex-contrib/codec-dubbo"&gt;codec-dubbo&lt;/a&gt; 应运而生。&lt;/p&gt;
&lt;p&gt;在社区同学的热情帮助下，目前 codec-dubbo 能做到 Kitex 与 Dubbo-Java，Kitex 与 Dubbo-Go 互通，支持 Dubbo 用户向 Kitex 迁移。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Dubbo_interoperate/kitex_dubbo_interoperate.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;本文将以方正证券利用 Kitex 与 codec-dubbo 成功进行服务改造为例，对改造过程中使用到的 codec-dubbo 主要功能进行阐述，并简要分析其中的实现细节。&lt;/p&gt;
&lt;h2 id="企业落地案例"&gt;企业落地案例&lt;/h2&gt;
&lt;p&gt;方正证券原有的服务采用 Java 和 Dubbo 框架编写，两者稳定且经过了大量场景的验证，符合他们的生产和开发需求。以请求量较大的小方个股详情页为例，高峰期的接口 QPS 在 3-4k，使用 16 台 16 Core 64G 虚拟机进行承载。&lt;/p&gt;
&lt;p&gt;随着云原生架构的兴起，凭借内存占用与执行效率的优势以及天然适配云原生，Go 逐渐成为构建企业服务的重要技术选项。为了更好地降本增效，综合考虑成本、性能和稳定性等因素后，他们决定在新建应用上由 Java 转向 Go，引入 Kitex，Hertz 等 CloudWeGo 项目进行服务开发与重构，并整体迁移至 Kubernetes 环境。&lt;/p&gt;
&lt;p&gt;在重构过程中，codec-dubbo 凭借接近原生 Kitex + Thrift 的使用体验以及对 Dubbo 概念的良好支持，降低了使用和理解成本，成功帮助他们解决了 Kitex &amp;lt;-&amp;gt; Dubbo 的互通问题，让 Kitex 服务顺利调用原有的 Dubbo 服务。&lt;/p&gt;
&lt;p&gt;目前，使用了 codec-dubbo 的 Kitex 服务已成功上线，稳定运行两个月。还是以小方个股详情页为例，Kitex 和 Hertz 承载了该页面一半左右的接口，在 QPS 不变的情况下，只需要提供 12 个 4 Core 4G Pod，降低资源占用效果显著。&lt;/p&gt;
&lt;h2 id="codec-dubbo-功能特性"&gt;codec-dubbo 功能特性&lt;/h2&gt;
&lt;h3 id="dubbo-协议编解码器"&gt;Dubbo 协议编解码器&lt;/h3&gt;
&lt;p&gt;Dubbo 服务主要使用 Dubbo 协议进行通信，为了支持 Kitex &amp;lt;-&amp;gt; Dubbo 互通，我们需要在 Kitex 中实现 Dubbo 协议。得益于 Kitex 优秀的扩展性，codec-dubbo 根据 Kitex 提供的 Codec 接口实现了 DubboCodec 这一核心编解码器，只需在初始化时注入 DubboCodec 便能使用 Dubbo 协议。&lt;/p&gt;
&lt;h3 id="类型映射与拓展"&gt;类型映射与拓展&lt;/h3&gt;
&lt;h4 id="类型映射"&gt;类型映射&lt;/h4&gt;
&lt;p&gt;Dubbo 主要使用 Hessian2 序列化协议进行 Payload 的编解码，它最大的特点是自描述序列化类型，即不依赖外部 Schema 或接口定义。序列化过程依赖编程语言类型和 Hessian2 类型之间的映射，以 Go 类型转化为 Java 类型为例：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Dubbo_interoperate/types_convert_process.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;经过分析，我们发现 Hessian2 的基础类型系统与 Thrift 基本重合。为了保证 Kitex + codec-dubbo 的使用体验与 Kitex + Thrift 基本一致，我们基于 Thrift IDL 来生成 Kitex Dubbo-Hessian2 脚手架代码，此时类型转化过程如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Dubbo_interoperate/types_convert_process_with_thrift.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;参考 Dubbo 官方的 &lt;a href="https://github.com/apache/dubbo-go-hessian2"&gt;dubbo-go-hessian2&lt;/a&gt; 类型映射，codec-dubbo 提供如下类型映射(此处仅包含部分映射，更多注意事项请参考 codec-dubbo Readme )：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;THRIFT 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;Go 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;HESSIAN2 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;JAVA 类型&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;i32&lt;/td&gt;
&lt;td style="text-align: center"&gt;int32&lt;/td&gt;
&lt;td style="text-align: center"&gt;int&lt;/td&gt;
&lt;td style="text-align: center"&gt;java.lang.Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;double&lt;/td&gt;
&lt;td style="text-align: center"&gt;float64&lt;/td&gt;
&lt;td style="text-align: center"&gt;double&lt;/td&gt;
&lt;td style="text-align: center"&gt;java.lang.Double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;string&lt;/td&gt;
&lt;td style="text-align: center"&gt;string&lt;/td&gt;
&lt;td style="text-align: center"&gt;string&lt;/td&gt;
&lt;td style="text-align: center"&gt;java.lang.String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;list&lt;i32&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;[]int32&lt;/td&gt;
&lt;td style="text-align: center"&gt;list&lt;/td&gt;
&lt;td style="text-align: center"&gt;List&lt;Integer&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;list&lt;double&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;[]float64&lt;/td&gt;
&lt;td style="text-align: center"&gt;list&lt;/td&gt;
&lt;td style="text-align: center"&gt;List&lt;Double&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;list&lt;string&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;[]string&lt;/td&gt;
&lt;td style="text-align: center"&gt;list&lt;/td&gt;
&lt;td style="text-align: center"&gt;List&lt;String&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;map&amp;lt;bool, i32&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;map[bool]int32&lt;/td&gt;
&lt;td style="text-align: center"&gt;map&lt;/td&gt;
&lt;td style="text-align: center"&gt;Map&amp;lt;Boolean, Integer&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;map&amp;lt;bool, double&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;map[bool]float64&lt;/td&gt;
&lt;td style="text-align: center"&gt;map&lt;/td&gt;
&lt;td style="text-align: center"&gt;Map&amp;lt;Boolean, Double&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;map&amp;lt;bool, string&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;map[bool]string&lt;/td&gt;
&lt;td style="text-align: center"&gt;map&lt;/td&gt;
&lt;td style="text-align: center"&gt;Map&amp;lt;Boolean, String&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;根据 codec-dubbo 提供的类型映射，我们能很轻松地将 Dubbo 接口定义转化为 Thrift IDL，并使用 Kitex 命令行工具生成项目脚手架代码，最终注入 DubboCodec 完成 Kitex -&amp;gt; Dubbo 的通信。以下方 Dubbo 接口定义为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;package&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;org.cloudwego.kitex.samples.api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;interface&lt;/span&gt; &lt;span style="color:#000"&gt;GreetProvider&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetResponse&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Greet&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;throws&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;implements&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Serializable&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;this&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#c4a000"&gt;req&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#000"&gt;GreetResponse&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;implements&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Serializable&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetResponse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;this&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#c4a000"&gt;resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的 api.thrift 文件如下所示，需要注意到其中的结构体定义都需要加上 &lt;code&gt;JavaClassName&lt;/code&gt; 的注解，对应 Dubbo 接口定义中的 package + 类名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;org.cloudwego.kitex.samples.api.GreetRequest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetResponse&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;org.cloudwego.kitex.samples.api.GreetResponse&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetResponse&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Greet&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 Kitex 命令行工具，并指定协议为 Hessian2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;kitex -module demo-client -protocol Hessian2 ./api.thrift
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后初始化 DubboCodec 并将其注入 Kitex ，利用生成代码编写以下 Client 端代码即可实现 Kitex -&amp;gt; Dubbo 调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;javaClass&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;org.cloudwego.kitex.samples.api.GreetProvider&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;greetservice&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 指定想要访问的服务端地址，也支持 ZooKeeper 服务发现&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithHostPorts&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;127.0.0.1:21000&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 配置 DubboCodec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 指定想要调用的 Dubbo Interface&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;dubbo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewDubboCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;dubbo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithJavaClassName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;javaClass&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;panic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Greet&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Background&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;hello&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;})&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;klog&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;klog&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Infof&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;resp: %s&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Kitex + codec-dubbo Server 端流程与 Client 端基本类似，具体例子可参考项目主页。&lt;/p&gt;
&lt;h4 id="类型拓展"&gt;类型拓展&lt;/h4&gt;
&lt;p&gt;Hessian2 schema-free 的特性导致 Dubbo 的实现“过于灵活”，可以使用任意类型。为了适配 Dubbo Hessian2 的类型使用灵活性，codec-dubbo 支持类型拓展，其中主要包括自定义映射与 Java 常用类型拓展。&lt;/p&gt;
&lt;h5 id="自定义映射"&gt;自定义映射&lt;/h5&gt;
&lt;p&gt;Java 的基础类型有与之对应的包装类型，例如 &lt;code&gt;boolean&lt;/code&gt; 与 &lt;code&gt;java.lang.Boolean&lt;/code&gt;。类型映射中默认将 Go 的 类型映射到 Java 的 &lt;code&gt;java.lang.Boolean&lt;/code&gt; 类型并不能覆盖到使用 &lt;code&gt;boolean&lt;/code&gt; 的情况。&lt;/p&gt;
&lt;p&gt;为了统一用户使用体验，让他们在 Kitex 侧只需使用 &lt;code&gt;bool&lt;/code&gt; 类型，我们可以在 Thrift 的方法定义后面加上 &lt;code&gt;hessian.argsType=&amp;quot;boolean&amp;quot;&lt;/code&gt; 注解，利用 thriftgo 的 IDL 反射功能，提前生成 IDL 元信息并注入 codec-dubbo，便可以在运行时动态地将默认映射类型 &lt;code&gt;java.lang.Boolean&lt;/code&gt; 改写成 &lt;code&gt;boolean&lt;/code&gt; 。具体 Thrift 定义如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;bool&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoBoolean&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;bool&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;hessian.argsType&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与 &lt;code&gt;boolean&lt;/code&gt; 和 &lt;code&gt;java.lang.Boolean&lt;/code&gt; 类似，其他 Java 基础类型和包装类型也能通过这种方式进行自定义映射，此时 codec-dubbo 提供的完整类型映射如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;THRIFT 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;GO 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;HESSIAN2 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;默认 JAVA 类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;&lt;strong&gt;可拓展 JAVA 类型&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;i32&lt;/td&gt;
&lt;td style="text-align: center"&gt;int32&lt;/td&gt;
&lt;td style="text-align: center"&gt;int&lt;/td&gt;
&lt;td style="text-align: center"&gt;java.lang.Integer&lt;/td&gt;
&lt;td style="text-align: center"&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;double&lt;/td&gt;
&lt;td style="text-align: center"&gt;float64&lt;/td&gt;
&lt;td style="text-align: center"&gt;double&lt;/td&gt;
&lt;td style="text-align: center"&gt;java.lang.Double&lt;/td&gt;
&lt;td style="text-align: center"&gt;double float / java.lang.Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;string&lt;/td&gt;
&lt;td style="text-align: center"&gt;string&lt;/td&gt;
&lt;td style="text-align: center"&gt;string&lt;/td&gt;
&lt;td style="text-align: center"&gt;java.lang.String&lt;/td&gt;
&lt;td style="text-align: center"&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;list&lt;i32&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;[]int32&lt;/td&gt;
&lt;td style="text-align: center"&gt;list&lt;/td&gt;
&lt;td style="text-align: center"&gt;List&lt;Integer&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;int[] / ArrayList&lt;Integer&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;list&lt;double&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;[]float64&lt;/td&gt;
&lt;td style="text-align: center"&gt;list&lt;/td&gt;
&lt;td style="text-align: center"&gt;List&lt;Double&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;double[] / ArrayList&lt;Double&gt; float[]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;list&lt;string&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;[]string&lt;/td&gt;
&lt;td style="text-align: center"&gt;list&lt;/td&gt;
&lt;td style="text-align: center"&gt;List&lt;String&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;String[] / ArrayList&lt;String&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;map&amp;lt;bool, i32&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;map[bool]int32&lt;/td&gt;
&lt;td style="text-align: center"&gt;map&lt;/td&gt;
&lt;td style="text-align: center"&gt;Map&amp;lt;Boolean, Integer&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;HashMap&amp;lt;Boolean, Integer&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;map&amp;lt;bool, double&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;map[bool]float64&lt;/td&gt;
&lt;td style="text-align: center"&gt;map&lt;/td&gt;
&lt;td style="text-align: center"&gt;Map&amp;lt;Boolean, Double&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;HashMap&amp;lt;Boolean, Double&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;map&amp;lt;bool, string&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;map[bool]string&lt;/td&gt;
&lt;td style="text-align: center"&gt;map&lt;/td&gt;
&lt;td style="text-align: center"&gt;Map&amp;lt;Boolean, String&amp;gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;HashMap&amp;lt;Boolean, String&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id="java-常用类型拓展"&gt;java 常用类型拓展&lt;/h5&gt;
&lt;p&gt;由于 Thrift 类型的局限性，我们无法直接使用 Java 类库中提供的常用类型。为此，codec-dubbo 在 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/tree/main/java"&gt;codec-dubbo/java&lt;/a&gt; 包中维护了 Thrift 不支持的 Java 类型(例如 &lt;code&gt;java.lang.Object&lt;/code&gt; 、 &lt;code&gt;java.util.Date&lt;/code&gt; )以及与之对应的 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/java/java.thrift"&gt;java.thrift&lt;/a&gt; ，同时借助 thriftgo 提供的 idl-ref 功能，我们可以直接在 Thrift IDL 中引用这些类型并生成相应代码。当前的 java.thrift 如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Object&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;java.lang.Object&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Date&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;java.util.Date&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;java.lang.Exception&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了启用这些类型，我们需要在 Thrift IDL 中使用 &lt;code&gt;include &amp;quot;java.thrift&amp;quot;&lt;/code&gt; 导入它们，并且在使用 Kitex 命令行工具生成代码时添加 &lt;code&gt;-hessian2 java_extension&lt;/code&gt; 参数来拉取该拓展包。&lt;/p&gt;
&lt;p&gt;Kitex 命令行工具会自动下载 java.thrift ，你也可以手动下载后放到项目的根目录。引用 java.thrift 中类型的 Thrift IDL 示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;include&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;java.thrift&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// java.lang.Object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoString2ObjectMap&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;map&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;java.Object&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// java.util.Date
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoDate&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;java.Date&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="方法重载"&gt;方法重载&lt;/h3&gt;
&lt;p&gt;Go 原生不支持方法重载，只能通过定义多个方法来达到类似重载的效果。为了将 Go 中的多个方法映射到 Java 中的重载方法，与自定义映射一节类似，我们在 Thrift 的方法定义后面加上 &lt;code&gt;JavaMethodName&lt;/code&gt; 标签，借助 thriftgo 的 IDL 反射功能在运行时动态地将 Go 侧原本的方法名改写成 &lt;code&gt;JavaMethodName&lt;/code&gt; 指定的 Java 侧中的重载方法。&lt;/p&gt;
&lt;p&gt;以 Java 侧的 EchoMethod 为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethod&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;Boolean&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethod&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;Integer&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethod&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethod&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;Boolean&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Integer&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们编写如下 Thrift 定义，即可完成 Go 与 Java 间的重载方法映射，注意到 &lt;code&gt;JavaMethodName&lt;/code&gt; 和 &lt;code&gt;hessian.argsType&lt;/code&gt; 可以同时使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethodA&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;bool&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaMethodName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;EchoMethod&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethodB&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaMethodName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;EchoMethod&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethodC&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaMethodName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;EchoMethod&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;hessian.argsType&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;int&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoMethodD&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;bool&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaMethodName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;EchoMethod&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="异常处理"&gt;异常处理&lt;/h3&gt;
&lt;p&gt;codec-dubbo 将 Java 中的异常映射为 Go 中的错误，这些错误统一实现以下接口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Throwabler&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;interface&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GetStackTrace&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#000"&gt;StackTraceElement&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据 Dubbo 官方推荐的异常处理实践以及企业用户目前的需求，我们将异常划分为常见异常与自定义异常，同时兼顾用户的基础需求以及可扩展需求。&lt;/p&gt;
&lt;h4 id="常见异常"&gt;常见异常&lt;/h4&gt;
&lt;p&gt;codec-dubbo 在 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/tree/main/pkg/hessian2/exception"&gt;pkg/hessian2/exception&lt;/a&gt; 包中提供了 Java 常见的异常，目前支持 &lt;code&gt;java.lang.Exception&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;常见异常无需 Kitex 命令行工具的支持，直接引用即可，以下是 Client 端提取异常和 Server 端返回异常的示例。&lt;/p&gt;
&lt;h5 id="client端提取异常"&gt;Client端提取异常&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Greet&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Background&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;hello&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;})&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// FromError 返回 Throwabler&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;exceptionRaw&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;hessian2_exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;FromError&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;!&lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 视作常规错误处理&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;else&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 若不关心 exceptionRaw 的具体类型，直接调用 Throwabler 提供的方法即可&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;klog&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Errorf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;get %s type Exception&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;exceptionRaw&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 若想获得 exceptionRaw 的具体类型，需要进行类型转换，但前提是已知该具体类型&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;exception&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;exceptionRaw&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;hessian2_exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="server端返回异常"&gt;Server端返回异常&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;GreetServiceImpl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Greet&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;hello&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GreetRequest&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;hello&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GreetResponse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;hessian2_exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewException&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Your detailed message&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="自定义异常"&gt;自定义异常&lt;/h4&gt;
&lt;p&gt;Java 中的自定义异常往往会继承一个基础异常，这里以 &lt;code&gt;CustomizedException&lt;/code&gt; 为例，&lt;code&gt;CustomizedException&lt;/code&gt; 继承了 &lt;code&gt;java.lang.Exception&lt;/code&gt; ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#000"&gt;CustomizedException&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;extends&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;private&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;final&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;customizedMessage&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;public&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;CustomizedException&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;String&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;customizedMessage&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;super&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;this&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#c4a000"&gt;customizedMessage&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;customizedMessage&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得益于 thriftgo 支持生成嵌套结构体，为了在 Kitex 侧定义与之对应的异常，我们在 Thrift 中编写如下定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;exception&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;CustomizedException&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// thrift.nested=“true” 注解让 thriftgo 生成嵌套结构体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;java.Exception&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;exception&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;thrift.nested&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;customizedMessage&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}(&lt;/span&gt;&lt;span style="color:#000"&gt;JavaClassName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;org.cloudwego.kitex.samples.api.CustomizedException&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意 &lt;code&gt;exception&lt;/code&gt; 字段的注解 &lt;code&gt;thrift.nested=&amp;quot;true&amp;quot;&lt;/code&gt; ，它让 thriftgo 生成嵌套结构体，达到类似继承的效果。&lt;/p&gt;
&lt;p&gt;和 Java 常用类型扩展一样，需要在使用 kitex 脚手架工具生成代码时添加 &lt;code&gt;-hessian2 java_extension&lt;/code&gt; 参数来拉取拓展包，生成代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EchoCustomizedException&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;java&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;`thrift:&amp;#34;exception,1,required&amp;#34; frugal:&amp;#34;1,required,java.Exception&amp;#34; json:&amp;#34;exception&amp;#34;`&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;CustomizedMessage&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;`thrift:&amp;#34;customizedMessage,2,required&amp;#34; frugal:&amp;#34;2,required,string&amp;#34; json:&amp;#34;customizedMessage&amp;#34;`&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用方法与常见异常一致，此处不再赘述。&lt;/p&gt;
&lt;h3 id="服务注册与发现"&gt;服务注册与发现&lt;/h3&gt;
&lt;p&gt;Dubbo 同时提供&lt;strong&gt;接口级&lt;/strong&gt;与&lt;strong&gt;应用级&lt;/strong&gt;服务注册发现模型，根据企业用户当前的生产环境需要，我们选择优先实现基于 zookeeper 的&lt;strong&gt;接口级&lt;/strong&gt;模型：Dubbo registry-zookeeper。&lt;/p&gt;
&lt;p&gt;与我们熟知的应用级模型不同，接口级模型需要维护接口名 =&amp;gt; 服务(不同于微服务，更接近 Handler )的映射关系，一个接口名会映射到多个服务 ，这些服务可能会存在于同一个进程中。&lt;/p&gt;
&lt;p&gt;考虑到 Dubbo 的接口级服务模型与 Kitex 的服务模型差别较大，且 Dubbo registry-zookeeper 应绑定 codec-dubbo 使用，因此不考虑修改 kitex-contrib 中原有的 registry-zookeeper，让 dubbo registry-zookeeper 成为 codec-dubbo 的一个子 go module 统一进行开发与维护。&lt;/p&gt;
&lt;p&gt;综合考虑 Dubbo 接口级服务模型、Kitex API 与用户的使用体验，我们提供以下的配置层次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/registries/zookeeper/registry/options.go"&gt;registry/options.go&lt;/a&gt; 与 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/registries/zookeeper/resolver/options.go"&gt;resolver/options.go&lt;/a&gt; 中的 WithServers 和 WithRegistryGroup 函数提供注册中心级别的配置，分别指定 zookeeper 的地址和这些 zookeeper 所属的组。用户使用这些函数生成 Kitex 中 &lt;code&gt;registry.Registry&lt;/code&gt; 和 &lt;code&gt;discovery.Resolver&lt;/code&gt; 实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务级别的配置由 &lt;code&gt;client.WithTag&lt;/code&gt; 与 &lt;code&gt;server.WithRegistryInfo&lt;/code&gt; 进行传递，&lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/registries/common.go"&gt;registries/common.go&lt;/a&gt; 提供 Tag keys ，这些 key 与 Dubbo 中的服务元数据一一对应。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="resolver-示例"&gt;resolver 示例&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;intfName&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;org.cloudwego.kitex.samples.api.GreetProvider&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;res&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resolver&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewZookeeperResolver&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 指定 zookeeper 服务器的地址，可指定多个，请至少指定一个&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resolver&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithServers&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;127.0.0.1:2181&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;panic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;greetservice&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 配置 ZookeeperResolver&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithResolver&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;res&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 指定想要调用的 dubbo Interface&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithTag&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;registries&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;DubboServiceInterfaceKey&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;intfName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;panic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 使用 cli 进行 RPC 调用&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="registry-示例"&gt;registry 示例&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;intfName&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;org.cloudwego.kitex.samples.api.GreetProvider&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;reg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;registry&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewZookeeperRegistry&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 指定 zookeeper 服务器的地址，可指定多个，请至少指定一个&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;registry&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithServers&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;127.0.0.1:2181&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;panic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;greetservice&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewServer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#204a87"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;GreetServiceImpl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithRegistry&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;reg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 配置dubbo URL元数据&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithRegistryInfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;kitex_registry&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Info&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Tags&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;map&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;registries&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;DubboServiceInterfaceKey&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;intfName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// application请与dubbo所设置的ApplicationConfig保持一致，此处仅为示例&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;registries&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;DubboServiceApplicationKey&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;application-name&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 启动 svr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;Kitex 支持了 Dubbo 协议，是 CloudWeGo 助力多语言云原生生态融合的一大步，解决了众多企业用户 Java 转 Go 、 Java 与 Go 并存的痛点，欢迎大家试用和接入；如果在使用过程遇到任何问题，可以加入我们的飞书用户群，或者在 Github 上给我们提反馈。&lt;/p&gt;</description></item><item><title>Blog: Netpoll v0.6.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2024/03/04/netpoll-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/03/04/netpoll-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/306"&gt;#306&lt;/a&gt;] feat: 懒加载 pollers 以避免在 netpoll 没有被使用时，创建任何 poller goroutines&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/303"&gt;#303&lt;/a&gt;] feat: 支持 WithOnDisconnect 回调&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/300"&gt;#300&lt;/a&gt;] feat: netpoll exception 实现 net.Error 接口&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/294"&gt;#294&lt;/a&gt;] feat: netpoll 支持 SetRunner 参数&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/307"&gt;#307&lt;/a&gt;] fix: 修复当 disconnect 与 connect 回调同时运行时，访问 ctx race 的问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/304"&gt;#304&lt;/a&gt;] fix: 当对端关闭连接但是 OnRequest 回调刚刚返回时，连接可能泄漏的问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/296"&gt;#296&lt;/a&gt;] fix: 当 readtrigger 被 error 触发时候，停止 timer&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/302"&gt;#302&lt;/a&gt;] ci: 升级 &lt;code&gt;actions/checkout&lt;/code&gt; 和 &lt;code&gt;actions/setup-go&lt;/code&gt; 的版本&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Kitex Release v0.9.0</title><link>https://www.cloudwego.io/zh/blog/2024/03/04/kitex-release-v0.9.0/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/03/04/kitex-release-v0.9.0/</guid><description>
&lt;p&gt;v0.9.0 针对 Thrift 提供了两个重要的功能：Thrift Streaming 和 Multi-Service，发布多个 RC 版本在内部试点收集反馈，所以正式版本姗姗来迟。&lt;/p&gt;
&lt;p&gt;下面就重要变更做一些介绍：&lt;/p&gt;
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Thrift Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于 gRPC(HTTP2) 的 Thrift Streaming 功能正式 Release，用户可以使用 Thrift IDL 定义自己的 Streaming 请求，为保持 IDL 解析的兼容性，Kitex 的 Streaming 方法的定义通过注解的方式，使用方式见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/thrift_streaming/"&gt;Thrift Streaming Usage&lt;/a&gt;。本版本也对 Streaming 请求的监控上报做了改进，同样适用于 gRPC-Protobuf。注意，Thrift 主要用于结构体序列化，并没有使用 Thrift 消息协议。&lt;/p&gt;
&lt;p&gt;由于 HTTP2 协议的复杂性对性能有一定有影响，后续计划发布自研 Streaming 协议提升性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 完整的 Thrift MultiService 支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 v0.8.0 版本中，Kitex 对 gRPC 对齐了多 Service 的能力，而 Thrift 多 Service 之前为保证协议的兼容性提供了 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/combine_service/"&gt;Combine Service&lt;/a&gt; 支持，但该功能的使用要求不同 IDL Service 的方法不能相同，并不是真正的多 Service。本次版本中 Kitex 基于 TTHeader 提供了协议层面真正的多 Service 功能，支持在一个 Server 里注册多个 Thrift IDL Service，同时兼容旧的 CombineService。使用方式见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/"&gt;Multi-Service&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注：Thrift Multi-Service 需使用 TTHeader 传输协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Frugal 对 ARM64 的实验性支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持在 ARM64 机器上使用 Frugal，暂时是 Fallback 支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 服务端超时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增加 &lt;code&gt;server.WithEnableContextTimeout&lt;/code&gt; option 支持在服务端给 context 增加 timeout，同时新版本里，Kitex 会默认透传 Client 超时配置给下游 Server。详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/timeout/"&gt;超时配置&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注：需使用 TTHeader 传输协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. KitexProtobuf 协议支持 JSON 泛化调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与 Thrift 的 JSON 泛化调用使用方式一样，新版本对 KitexProtobuf 也做了同样的支持。见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/#jsonpbgeneric"&gt;JSONPbGeneric&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;注：需使用 TTHeader 传输协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 负载均衡新增策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新增 Alias Method 的负载均衡方法，来减少权重随机负载均衡算法的时间复杂度。通过 &lt;code&gt;client.WithLoadBalancer(loadbalance.NewWeightedRandomWithAliasMethodBalancer())&lt;/code&gt; 指定。&lt;/p&gt;
&lt;h3 id="特别的变更"&gt;特别的变更&lt;/h3&gt;
&lt;p&gt;v0.9.0 要求 Go 版本必须 &amp;gt;= 1.17，不再兼容 Go &amp;lt;= v1.16 (稳定性要求必须升级 golang.org/x/ 库引入的 Go 版本限制)&lt;/p&gt;
&lt;h2 id="配置中心的扩展生态完善"&gt;&lt;strong&gt;配置中心的扩展生态完善&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注意与 v0.9.0 版本无关，仅同步社区扩展的状态&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;主流的配置中心对接均完成 Release&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex 对超时、重试、熔断、限流的策略支持通过远程配置中心来控制，感谢社区的贡献者们，目前&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/third-party/config-center/"&gt;主流的配置中心&lt;/a&gt;均已完成扩展对接并 Release，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/third-party/config-center/"&gt;配置中心&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1208"&gt;#1208&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1251"&gt;#1251&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1230"&gt;#1230&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1226"&gt;#1226&lt;/a&gt;] feat: support thrift streaming (replacing the protobuf payload of GRPC/HTTP2 with thrift binary)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1217"&gt;#1217&lt;/a&gt;] feat: support thrift and pb multi service&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1268"&gt;#1268&lt;/a&gt;] feat(thrift): support frugal fallback for arm&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/951"&gt;#951&lt;/a&gt;] feat(bizerr): support returning biz status error for json/map generic server&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1199"&gt;#1199&lt;/a&gt;] feat(loadbalance): add loadbalancer using Alias Method (#1184)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1244"&gt;#1244&lt;/a&gt;] feat(timeout): add option server.WithEnableContextTimeout to enable server timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1228"&gt;#1228&lt;/a&gt;] feat(streaming): Adding Recv/End events to streaming requests to improve trace information&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1062"&gt;#1062&lt;/a&gt;] feat(generic): supports JSON and Map generic call for the KitexProtobuf protocol, &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/#jsonpbgeneric"&gt;doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1225"&gt;#1225&lt;/a&gt;] feat(timeout): support timeout transparent transmission by default when using TTHeader transport protocol&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1211"&gt;#1211&lt;/a&gt;] feat(hessian2): support nested struct for hessian2 customized Exception&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1222"&gt;#1222&lt;/a&gt;] optimize(frugal): enable frugal by default when the generated code is using slim template&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1209"&gt;#1209&lt;/a&gt;] optimize: split encoder interface to customize meta and payload encoding implementation&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1206"&gt;#1206&lt;/a&gt;] optimize(tool): add IsDir judge in readTemplate and add template register func&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1198"&gt;#1198&lt;/a&gt;] optimize(kitexutil): add util api for getting real request and response&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1197"&gt;#1197&lt;/a&gt;] optimize(kitexutil): add GetCallerIP util method in kitexutil to fetch Caller IP&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1195"&gt;#1195&lt;/a&gt;] optimize(error): more specific instruction when panic in server handler&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1235"&gt;#1235&lt;/a&gt;] optimize(tool): add IDLName field in PackageInfo for cwgo tool rendering&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1238"&gt;#1238&lt;/a&gt;] optimize(bizerr): support biz status error for streaming mode&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1236"&gt;#1236&lt;/a&gt;] fix(hessian2): correct code-ref behavior when thrift file is not in project dir&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1234"&gt;#1234&lt;/a&gt;] fix(hessian2): still perform replacement on handler.go when -service is not specified for hessian2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1232"&gt;#1232&lt;/a&gt;] fix(gRPC): append &amp;ldquo;h2&amp;rdquo; to next proto in gRPC tlsConfig to enable protocol negotiation in TLS&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1215"&gt;#1215&lt;/a&gt;] fix: bugfix for hessian2 tpl codegen&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1203"&gt;#1203&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1205"&gt;#1205&lt;/a&gt;] fix: fix the issue where disabling rpcinfo reuse on the server side does not take effect&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1227"&gt;#1227&lt;/a&gt;] fix: idl-ref overwritten when using hessian2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1194"&gt;#1194&lt;/a&gt;] fix(retry): always set RespOp &amp;amp;&amp;amp; preventive panic to avoid dead loop&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="chore--tests"&gt;Chore &amp;amp; Tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1273"&gt;#1273&lt;/a&gt;] chore: upgrade netpoll to v0.6.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1263"&gt;#1263&lt;/a&gt;] chore: update sonic to v1.11.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1255"&gt;#1255&lt;/a&gt;] chore: upgrade netpoll to v0.6.0 pre-release version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1252"&gt;#1252&lt;/a&gt;] chore: upgrade golang.org/x/net&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1254"&gt;#1254&lt;/a&gt;] chore: upgrade sonic to v1.11.0 to support go1.22&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1231"&gt;#1231&lt;/a&gt;] chore: frugal support go1.22&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1220"&gt;#1220&lt;/a&gt;] test: correct the cachekey in the benchmark test of balancer&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1196"&gt;#1196&lt;/a&gt;] test: add just biz handler message error&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong&gt;
@DMwangnima @jizhuozhi @NX-Official @jieqiboh @Lvnszn @Skyenought&lt;/p&gt;</description></item><item><title>Blog: Hertz v0.8.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2024/01/12/hertz-v0.8.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/01/12/hertz-v0.8.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Hertz v0.8.0 版本中，除了常规迭代优化之外，我们还带来了一个重要 feature。&lt;/p&gt;
&lt;h2 id="partitioned-cookies"&gt;Partitioned cookies&lt;/h2&gt;
&lt;p&gt;在 Hertz v0.8.0 版本中，我们支持了 partitioned cookies 特性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/1041"&gt;https://github.com/cloudwego/hertz/pull/1041&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="背景"&gt;背景&lt;/h3&gt;
&lt;p&gt;三方 Cookie 为 Web 提供了跨站点跟踪的能力，它的存在为 Web 用户的隐私和安全都带来了巨大威胁。Chrome 从 2024 年第一季度开始对 1% 的用户禁用第三方 Cookie，从 2024 年第三季度开始逐步将禁用范围扩大到 100%。
Partitioned Cookies Cookies Having Independent Partitioned State (CHIPS) 作为三方Cookie的替代方案，提供了跨站（cross-site）请求携带三方 Cookie 的能力。&lt;/p&gt;
&lt;h4 id="通过-set-cookie-header-设置-partitioned-cookie"&gt;通过 Set-Cookie Header 设置 Partitioned Cookie&lt;/h4&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Set-Cookie header:
Set-Cookie: __Host-name=value; Secure; Path=/; SameSite=None; Partitioned;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="how-to"&gt;How to&lt;/h3&gt;
&lt;h4 id="升级-hertz-版本"&gt;升级 Hertz 版本&lt;/h4&gt;
&lt;p&gt;Hertz 在 v0.8.0 添加了对 Partitioned Cookies 的支持，你需要升级到&amp;gt;=v0.8.0来使用 Partitioned Cookie。&lt;/p&gt;
&lt;h4 id="如何使用-partitioned-cookies"&gt;如何使用 Partitioned Cookies&lt;/h4&gt;
&lt;p&gt;目前 Hertz 支持 Partitioned Cookies，但还不支持通过 SetCookie 传入是否为 Partitioned，我们将在下个小版本增加此功能。在此之前，你可以参考下面的代码示例来使用 Partitioned Cookies。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func SetPartitionedCookie(c *app.RequestContext, name, value string, maxAge int, path, domain string, sameSite protocol.CookieSameSite, secure, httpOnly bool) {
if path == &amp;#34;&amp;#34; {
path = &amp;#34;/&amp;#34;
}
cookie := protocol.AcquireCookie()
defer protocol.ReleaseCookie(cookie)
cookie.SetKey(name)
cookie.SetValue(url.QueryEscape(value))
cookie.SetMaxAge(maxAge)
// 如果 name 前缀为 __Host，则 Path 必须为/
cookie.SetPath(path)
cookie.SetDomain(domain)
// Secure 必须为 true。
cookie.SetSecure(secure)
cookie.SetHTTPOnly(httpOnly)
cookie.SetSameSite(sameSite)
cookie.SetPartitioned(true)
c.Response.Header.SetCookie(cookie)
}
func main() {
h := server.Default()
h.GET(&amp;#34;/partitioned&amp;#34;, func(ctx context.Context, c *app.RequestContext) {
SetPartitionedCookie(c, &amp;#34;user&amp;#34;, &amp;#34;hertz&amp;#34;, 1, &amp;#34;/&amp;#34;, &amp;#34;localhost&amp;#34;, protocol.CookieSameSiteNoneMode, true, true)
c.JSON(consts.StatusOK, utils.H{&amp;#34;partitioned&amp;#34;: &amp;#34;yes&amp;#34;})
})
h.Spin()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;验证 Set-Cookie Header&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;curl -v http://localhost:8888/partitioned
* Trying [::1]:8888...
* Connected to localhost (::1) port 8888
&amp;gt; GET /partitioned HTTP/1.1
&amp;gt; Host: localhost:8888
&amp;gt; User-Agent: curl/8.4.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: hertz
&amp;lt; Date: Fri, 12 Jan 2024 07:01:02 GMT
&amp;lt; Content-Type: application/json; charset=utf-8
&amp;lt; Content-Length: 21
&amp;lt; Set-Cookie: user=hertz; max-age=1; domain=localhost; path=/; HttpOnly; secure; SameSite=None; Partitioned
&amp;lt;
* Connection #0 to host localhost left intact
{&amp;#34;partitioned&amp;#34;:&amp;#34;yes&amp;#34;}%
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Blog: Volo 0.9.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2024/01/04/volo-0.9.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/01/04/volo-0.9.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.9.0 版本中，我们主要将默认生成的 HashSet/HashMap 类型修改为了 AHashMap/AHashSet, 预期会带来一定的性能提升。此外，随着 &lt;a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html"&gt;Rust 1.75&lt;/a&gt; 的发布，Volo 已经可以在 stable rust 中使用了。&lt;/p&gt;
&lt;h2 id="break-change"&gt;Break Change&lt;/h2&gt;
&lt;h3 id="默认生成的-hashset--hashmap-类型修改"&gt;默认生成的 HashSet / HashMap 类型修改&lt;/h3&gt;
&lt;p&gt;在新版生成代码中，默认生成的 HashMap/HashSet 类型修改为了 AHashMap/AHashSet，这相比 std 的 map 会带来更高的性能，参考 &lt;a href="https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md"&gt;ahash&lt;/a&gt;。在用户代码中，可以根据编译器报错，将原来使用 &lt;code&gt;std::collections::HashMap&lt;/code&gt; 的地方，直接替换为 &lt;code&gt;pilota::AHashMap&lt;/code&gt; 或者 &lt;code&gt;ahash::AHashMap&lt;/code&gt; 即可（pilota 本质上是 re-export 了 ahash 的 AHashMap, 所以是同一个类型）。&lt;/p&gt;
&lt;h3 id="rpcinfo-字段类型去掉-option"&gt;RpcInfo 字段类型去掉 Option&lt;/h3&gt;
&lt;p&gt;在这个版本中，我们将 RpcInfo 的字段去掉了 Option 包装，预计对绝大多数没有自己写 layer 的用户无感。如果有使用到 cx 写 layer 的用户，可以直接去掉对 Option 的处理即可。&lt;/p&gt;
&lt;h3 id="新增-basicerror"&gt;新增 BasicError&lt;/h3&gt;
&lt;p&gt;在这个版本中，volo-thrift 错误返回的枚举类型中新增了 BasicError 分支, 主要用于存放框架内部自身的错误。预计对绝大多数用户没有影响，如果用户有对错误类型进行 match 的地方，需要新增对 BasicError 的处理。&lt;/p&gt;
&lt;h3 id="去除-max_frame_size-方法"&gt;去除 max_frame_size 方法&lt;/h3&gt;
&lt;p&gt;volo-thrift client 中的 max_frame_size 由于迭代中接口变更，并没有被实际用到，在这个版本中已经删除。如果用户有需求设置 max_frame_size, 可以使用 make_codec 方法传入自定义的 codec，并在 MakeFramedCodec 那一层中使用 &lt;a href="https://github.com/cloudwego/volo/blob/main/volo-thrift/src/codec/default/framed.rs#L33"&gt;with_max_frame_size&lt;/a&gt; 方法设置 max_frame_size。&lt;/p&gt;
&lt;h3 id="hyper-升级到-10-版本"&gt;hyper 升级到 1.0 版本&lt;/h3&gt;
&lt;p&gt;hyper 在 1.0 版本中移除了 hyper::Body，并引入了 hyper::body::Incoming 用作请求的 Body 类型。在 volo-grpc 中，我们跟进了这一改动，预计对绝大多数没有自己写 layer 的用户无感。如果有使用到完整 Service 泛型的用户，将 &lt;code&gt;Service&amp;lt;ServerContext, Request&amp;lt;hyper::Body&amp;gt;&amp;gt;&lt;/code&gt; 修改为 &lt;code&gt;Service&amp;lt;ServerContext, Request&amp;lt;hyper::body::Incoming&amp;gt;&amp;gt;&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-0.8.0...volo-0.9.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: CloudWeGo 易用性建设：提升 Go 语言云原生工程效率之路</title><link>https://www.cloudwego.io/zh/blog/2023/12/21/cloudwego-%E6%98%93%E7%94%A8%E6%80%A7%E5%BB%BA%E8%AE%BE%E6%8F%90%E5%8D%87-go-%E8%AF%AD%E8%A8%80%E4%BA%91%E5%8E%9F%E7%94%9F%E5%B7%A5%E7%A8%8B%E6%95%88%E7%8E%87%E4%B9%8B%E8%B7%AF/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/12/21/cloudwego-%E6%98%93%E7%94%A8%E6%80%A7%E5%BB%BA%E8%AE%BE%E6%8F%90%E5%8D%87-go-%E8%AF%AD%E8%A8%80%E4%BA%91%E5%8E%9F%E7%94%9F%E5%B7%A5%E7%A8%8B%E6%95%88%E7%8E%87%E4%B9%8B%E8%B7%AF/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;本篇文章是 CloudWeGo 两周年庆典系列的第二篇。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;这次分享会首先给大家同步下 CloudWeGo 易用性建设的一个简单背景，然后会介绍我们针对易用性建设做了哪些工作，最后会对未来的工作进行展望。&lt;/p&gt;
&lt;h2 id="背景"&gt;背景&lt;/h2&gt;
&lt;p&gt;CloudWeGo 是一套由字节跳动基础架构服务框架团队开源的、可快速构建企业级云原生微服务架构的中间件集合。
CloudWeGo 下的项目主要有三个特点：&lt;strong&gt;高性能&lt;/strong&gt;、&lt;strong&gt;高扩展性&lt;/strong&gt;以及&lt;strong&gt;高可靠性&lt;/strong&gt;；并且，在开源后我们也更加重视易用性的建设，我们意识到易用性可以给社区带来很多用户、进而形成活跃的社区氛围，推动社区持续发展，而且易用性可帮助用户快速完成业务逻辑开发，提升效率。&lt;/p&gt;
&lt;p&gt;针对易用性，我们在研发体验、用户体验以及社区宣传等均做了诸多工作，下面我来一一介绍。另外这次分享主要会重点介绍 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的易用性建设。&lt;/p&gt;
&lt;h2 id="易用性-feature-建设"&gt;易用性 Feature 建设&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 作为企业级的 HTTP 框架，易用性一直是我们非常重视的方面，因为它能够极大提升研发体验。因此，自从开源以来，我们一直非常重视用户提出的各种关于易用性的建议，并进行了总结：第一个问题是我们在一些 Feature 的使用上与常见的框架有些差别，导致迁移过来的用户可能会不习惯；
第二个问题是框架的脚手架工具较多，例如 CloudWeGo 下就有 hz 和 kitex 两个脚手架，这无疑增加了用户的学习成本；第三个问题是文档的问题，我们在 issue 和用户群的用户反馈中看出，目前我们的文档存在描述不清晰，内容缺失等问题，导致用户遇到问题，往往无法快速解决。&lt;/p&gt;
&lt;p&gt;针对以上问题，我们开发了多种能力以快速支持用户需求。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多协议支持&lt;/strong&gt;：首先需要介绍的是 Hertz 可支持无缝切换多协议，目前一些开源的框架已经支持了 h2/h3 协议了，因此我们基于 Hertz 协议层的拓展能力，完成了 http2/http3 的实现，并放到了 hertz-contrib 下。其使用方式非常简单，只需要在 Hertz engine 上将对应的协议注册上就可以啦。 http3 协议的支持也类似，不过我们需要将传输层指定为 Hertz 拓展的 quic 协议的传输层，其他的操作就和 http2 一样了。
&lt;img src="https://www.cloudwego.io/img/blog/CloudWeGo_Usability_Construction/multi_protocols.png" alt="image"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Response Writer 劫持&lt;/strong&gt;：接下来，再给大家介绍一下 Response Writer 劫持能力。在介绍 Writer 劫持前，先说一下 Hertz 读写报文的流程(图中数字部分)，Hertz 会先在连接中读数据&amp;amp;解析，然后会根据请求内容进行路由匹配、业务逻辑处理、创建响应数据等，并在这些工作结束后，由框架将数据发送给对端。这么做可完全简化用户操作，不过在一些场景下却存在问题，首先是用户无法控制响应真正 flush 到对端的时机，因此在一些增量生成数据、实时性要求高的场景，用户限制较多。
&lt;img src="https://www.cloudwego.io/img/blog/CloudWeGo_Usability_Construction/response_writer.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;因此，我们开发了 Response Writer 劫持能力，在原来写响应流程的基础之上，支持用户在业务 handler/中间件中劫持 Response Writer，提前将响应数据发回到对端，实现更加灵活的写请求方式。 我们已经基于 Response Writer 的能力实现了 handler flush、SSE、流式 Gzip 等能力，更多能力也期待大家贡献。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数绑定重构：介绍完 Writer 劫持后，再来给大家介绍一个重要的 Feature - 参数绑定。重构之前 Hertz 的参数绑定依赖了第三方的实现，这会存在以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖第三方实现，用户的需求需要诉诸于开发者&lt;/li&gt;
&lt;li&gt;提供接口较少，迁移过来的同学会增加学习成本&lt;/li&gt;
&lt;li&gt;性能差，之前的实现适配的是标准 http 库的存储模型，Hertz 用需要多一次转换，性能差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为解决这些问题，我们重构了参数绑定的能力，将其实现放到 Hertz 内部，作为我们应用层的一个重要实现，重构后它支持和之前一样的绑定规则和使用方法，并且性能也会完全优于之前。另外还支持了自定义 binder 和 Validator，方便用户使用其熟悉的语法。另外，我们将所有的配置统一收敛到一个结构体，使用 withOption 的形式注入到 Hertz engine 上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上 3 个就是 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 比较重要的易用性建设方面的 Feature。&lt;/p&gt;
&lt;h2 id="生态建设"&gt;生态建设&lt;/h2&gt;
&lt;p&gt;接下来给大家介绍一下 Hertz 相关的&lt;a href="https://github.com/hertz-contrib"&gt;生态建设&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;目前我们将一些通用的能力以中间件的形式提供给了大家，这样开发者可以更好的关注业务逻辑了，只需要调用中间件就可以使用这些通用的能力。
截止当前，我们已经提供了包括认证/授权、安全、性能、HTTP 通用能力、治理观测拓展能力等各类超过 20 个中间件拓展，基本可满足大部分的业务需求。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/CloudWeGo_Usability_Construction/middleware_1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/CloudWeGo_Usability_Construction/middleware_2.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;当然，我们也会继续投入这些中间件生态的建设，也欢迎大家来参与到我们的社区开发中来。&lt;/p&gt;
&lt;h2 id="脚手架优化"&gt;脚手架优化&lt;/h2&gt;
&lt;p&gt;下面我来针对脚手架工具的优化进行介绍。&lt;/p&gt;
&lt;h3 id="hz"&gt;Hz&lt;/h3&gt;
&lt;p&gt;在开源的时候，Hertz 的脚手架工具 &lt;a href="https://www.cloudwego.io/zh/docs/hertz/tutorials/toolkit/"&gt;hz&lt;/a&gt; 已经提供基于 IDL 生成 server 的能力，也就是图中的 3、4、5 部分我们已经支持了，目前可以根据 IDL 的接口定义来自动生成路由注册、handler 代码等功能；
但是作为一个通信框架，我们也需要完成 client 端的生成工作，也就是图中的 1、2、6 过程，因此 hz 在开源后支持了生成 client 代码的能力。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/CloudWeGo_Usability_Construction/hz.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Client 端生成的目的主要是可以屏蔽掉初始化 Hertz client 、发送请求等一系列固定的操作、为用户提供一个类似 HTTP 请求一键发送的能力，并能够和 hz 生成的 server 直接进行通信。&lt;/p&gt;
&lt;h2 id="用户体验优化"&gt;用户体验优化&lt;/h2&gt;
&lt;h3 id="文档优化"&gt;文档优化&lt;/h3&gt;
&lt;p&gt;自从开源来，CloudWeGo 下的项目一直都注重文档的问题，但是每次都是哪里有问题修哪里，无法全面解决问题&lt;/p&gt;
&lt;p&gt;因此，我们参与 CCF GLCC 项目发起了文档优化专项的工作，在该专项中我们主要做了以下工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全方位地对文档进行重新体验，包括代码、图片、内容等，并记录相关问题&lt;/li&gt;
&lt;li&gt;根据记录的相关问题，我们有专人来对文档进行优化，解决了一些逻辑混乱、描述不清晰等问题，并着重优化了 新人教程、Hertz 核心能力等常用文档。根据反馈，优化后的文档已经可以解决基本所有常见问题&lt;/li&gt;
&lt;li&gt;此外，我们还对文档格式、目录结构进行了统一的调整，提供更好的视觉体验
目前，该优化专项目前已在 CloudWeGo 其他项目下进行，也欢迎大家多多给我们反馈文档的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="示例代码库"&gt;示例代码库&lt;/h3&gt;
&lt;p&gt;其次，我们提供了丰富的示例代码库。&lt;/p&gt;
&lt;p&gt;目前，我们提供了 &lt;a href="https://github.com/cloudwego/hertz-examples"&gt;hertz-example&lt;/a&gt;、&lt;a href="https://github.com/cloudwego/kitex-examples"&gt;kitex-example&lt;/a&gt; 代码库，这里包含了所有常用 Feature 的可执行的使用实例，并且定期更新、维护。&lt;/p&gt;
&lt;p&gt;另外，为了使得业务更快地能使用 CloudWeGo 项目完成业务逻辑开发，我们提供了若干个真实场景的 demo，目前提供了如下的 demo，其中下面的几个业务代码都是使用了 Hertz 和 Kitex 进行开发或者重构，大家可以在此基础上拓展自己的业务逻辑，完成业务的快速上线。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/biz-demo/tree/main/bookinfo"&gt;Bookinfo&lt;/a&gt;: 使用 Hertz+Kitex 重新实现 IstioBookinfo&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/biz-demo/tree/main/easy_note"&gt;Easy Note&lt;/a&gt;: 使用 Hertz+Kitex 微服务的形式实现一个笔记服务&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/biz-demo/tree/main/book-shop"&gt;Book Shop&lt;/a&gt;: 使用 Hertz+Kitex 实现一个电商示例&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/biz-demo/tree/main/open-payment-platform"&gt;Open Payment Platform&lt;/a&gt;: 使用 Hertz+Kitex 实现支持多商户的开放式支付平台&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="csg-活动"&gt;CSG 活动&lt;/h3&gt;
&lt;p&gt;我们还定期举办 CSG 活动，CSG 活动旨在帮助开发者了解框架的源码以及最佳用法。&lt;/p&gt;
&lt;p&gt;截止目前，CSG 活动已经举办了 5 期，分别带大家了解了 Hertz/kitex/volo 框架的诸多源码和最佳实践，帮助开发者更好的了解和使用框架。大家可以在 &lt;a href="https://github.com/cloudwego/community"&gt;cloudwego/community&lt;/a&gt; 仓库的 issue 查看往期活动的 issue 介绍与回放。&lt;/p&gt;</description></item><item><title>Blog: Kitex 两周年回顾 — 能力升级、社区合作与未来展望</title><link>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-%E4%B8%A4%E5%91%A8%E5%B9%B4%E5%9B%9E%E9%A1%BE-%E8%83%BD%E5%8A%9B%E5%8D%87%E7%BA%A7%E7%A4%BE%E5%8C%BA%E5%90%88%E4%BD%9C%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-%E4%B8%A4%E5%91%A8%E5%B9%B4%E5%9B%9E%E9%A1%BE-%E8%83%BD%E5%8A%9B%E5%8D%87%E7%BA%A7%E7%A4%BE%E5%8C%BA%E5%90%88%E4%BD%9C%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;本篇文章是 CloudWeGo 两周年庆典系列的第一篇。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;今天的分享主要分成三个部分，首先是 &lt;a href="http://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的能力升级，看一下过去一年在&lt;strong&gt;性能&lt;/strong&gt;、&lt;strong&gt;功能&lt;/strong&gt;和&lt;strong&gt;易用性&lt;/strong&gt;这个方面上的一些进展。第二个是社区合作项目的进展，特别是其中两个重点项目 &lt;strong&gt;Kitex-Dubbo 互通&lt;/strong&gt;以及&lt;strong&gt;配置中心集成&lt;/strong&gt;。第三个是给大家剧透一下我们目前在做以及计划做的一些事情。&lt;/p&gt;
&lt;h2 id="能力升级"&gt;能力升级&lt;/h2&gt;
&lt;h3 id="性能"&gt;性能&lt;/h3&gt;
&lt;p&gt;在2021年9月，我们曾发布了一篇&lt;a href="https://www.cloudwego.io/zh/blog/2020/05/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/"&gt;字节跳动 Go RPC框架 Kitex 性能优化实践&lt;/a&gt;，
这篇文章介绍了如何通过自研网络库 &lt;a href="http://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt;、及自研的 Thrift 编解码器 fastCodec 来优化 &lt;a href="http://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的性能。&lt;/p&gt;
&lt;p&gt;自那时起，提升 Kitex 核心请求链路上的性能就非常困难了，实际上我们是要努力，在不断地添加新功能的同时，避免 Kitex 性能下降。&lt;/p&gt;
&lt;p&gt;尽管如此，我们一直没有停止优化 Kitex 性能的尝试。在字节内部，我们已经在试验、推广一些在核心链路上的性能提升，稍后会再给各位介绍。&lt;/p&gt;
&lt;h4 id="基于-dynamicgo-的泛化调用"&gt;基于 DynamicGo 的泛化调用&lt;/h4&gt;
&lt;p&gt;首先介绍一个已经发布的性能优化：基于 &lt;a href="http://github.com/cloudwego/dynamicgo"&gt;DynamicGo&lt;/a&gt; 的泛化调用。&lt;strong&gt;泛化调用&lt;/strong&gt;是 Kitex 的一个高级特性，能够在不预先生成 SDK 代码（也就是 Kitex Client）的前提下，使用 Kitex Generic Client 直接调用目标服务的 API。&lt;/p&gt;
&lt;p&gt;例如字节跳动内部的 接口测试工具、API 网关等，就使用了 Kitex 的泛化 Client，能够接收一个 HTTP 请求（请求体是 JSON 格式），转换成 Thrift Binary 后，发送给 Kitex Server。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/generic_call.jpeg" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;其实现方案是依赖一个 &lt;code&gt;map[string]interface{}&lt;/code&gt; 作为泛型容器，请求时先将 json 转换为 map，在基于 Thrift IDL 完成 map -&amp;gt; thrift 的转换；对响应的处理则反过来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这样做的好处是灵活性高，不需要依赖预先生成的静态代码，只需要有 IDL 就可以请求目标服务；&lt;/li&gt;
&lt;li&gt;但是其代价是性能较差，这样一个泛型容器依赖 Go 的 GC 和 内存管理，开销巨大，不仅需要分配大量内存，还需要多次数据拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此我们开发了 &lt;a href="http://github.com/cloudwego/dynamicgo"&gt;DynamicGo&lt;/a&gt;，可用于提升协议转换的性能。项目 &lt;a href="https://github.com/cloudwego/dynamicgo/blob/main/introduction.md"&gt;introduction&lt;/a&gt; 里有非常详细的介绍，这里只给大家介绍其核心设计思路：基于&lt;strong&gt;原始字节流&lt;/strong&gt;，原地完成&lt;strong&gt;数据处理和转换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://github.com/cloudwego/dynamicgo"&gt;DynamicGo&lt;/a&gt; 通过池化技术，能实现只需要预分配一次内存，并使用 SSE、AVX 等 SIMD 指令集进行加速，最终实现了非常可观的性能提升。&lt;/p&gt;
&lt;p&gt;如下图所示，相比原泛化调用的实现，在 6KB 数据的编解码测试中，性能提升了 &lt;strong&gt;4~9 倍&lt;/strong&gt;，甚至优于预先生成的静态代码。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/dynamicgo.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;其实际原理很简单：根据解析 IDL 生成类型描述符 Descriptor，执行如下协议转换过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次从 JSON 字节流中读取一个 Key/Value pair；&lt;/li&gt;
&lt;li&gt;根据 IDL Descriptor 里找到 key 对应的 Thrift 字段；&lt;/li&gt;
&lt;li&gt;按相应类型的 Thrift 编码规范完成 Value 的编码，并写入输出字节流；&lt;/li&gt;
&lt;li&gt;循环这个过程，直到处理完整个 JSON。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://github.com/cloudwego/dynamicgo"&gt;DynamicGo&lt;/a&gt; 除了可以优化 JSON/Thrift 的协议转换，还提供了 Thrift DOM 方式用于优化数据编排场景的性能。例如抖音某业务团队需要擦除请求中的违规数据，但仅限请求中的某一个字段；使用 DynamicGo 的 Thrift DOM API 就非常适合，可以实现 10 倍的性能提升，详情可参考 DynamicGo 的文档，这里就不展开了。&lt;/p&gt;
&lt;h4 id="frugal---基于-jit-的高性能-thrift-编解码器"&gt;Frugal - 基于 JIT 的高性能 Thrift 编解码器&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 是一个 基于 &lt;strong&gt;JIT&lt;/strong&gt; 编译技术的高性能 Thrift 编解码器。&lt;/p&gt;
&lt;p&gt;Thrift 官方以及 Kitex 默认的编解码器都是基于解析 Thrift IDL，生成相应的编解码 Go 代码。通过 JIT 技术，我们能够在&lt;strong&gt;运行时动态生成&lt;/strong&gt;性能更好的编解码代码：
生成更紧凑的机器码、减少 cache miss、减少 branch miss，用 &lt;strong&gt;SIMD&lt;/strong&gt; 指令来加速，使用基于寄存器的函数调用（Go 默认是基于栈）。&lt;/p&gt;
&lt;p&gt;这里给出了编解码测试的性能指标：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/frugal_performance.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;可以看到，&lt;a href="http://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 性能显著高于传统方式。&lt;/p&gt;
&lt;p&gt;除了性能上的优势，由于可以不生成编解码代码，也有额外的好处。&lt;/p&gt;
&lt;p&gt;一方面&lt;strong&gt;仓库更简洁&lt;/strong&gt;了，我们有一个项目，生成的代码有 700MB，切换到 frugal 后只有 37M，大约只有原来的 5%，在仓库维护方面压力大幅缩小，修改 IDL 以后也不会生成一大堆实际上无法 review 的代码；
另一方面 IDE 的&lt;strong&gt;加载速度&lt;/strong&gt;、项目的&lt;strong&gt;编译速度&lt;/strong&gt;也能显著提高。&lt;/p&gt;
&lt;p&gt;其实 Frugal 去年就已经发布了，但是当时的早期版本覆盖不够充分。今年我们重点优化了它的稳定性，修复了所有已知问题，
最近发版的 v0.1.12 版本，可以稳定地使用在生产业务上。例如字节跳动电商业务线，某服务的峰值 QPS 约 25K，已经全量切换到 Frugal，稳定运行了数月。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 目前支持 Go1.16 ~ Go1.21，暂时只支持 AMD64 架构，未来也将支持 ARM64 架构；我们可能会在未来某个版本将 Frugal 作为 Kitex 的默认编解码器。&lt;/p&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;Kitex 在过去一年中从 v0.4.3 升级到 v0.7.2，其中 Feature 相关的 Pull Request 共有 40 多个，涵盖了&lt;strong&gt;命令行工具&lt;/strong&gt;、&lt;strong&gt;gRPC&lt;/strong&gt;、&lt;strong&gt;Thrift 编解码&lt;/strong&gt;、&lt;strong&gt;重试&lt;/strong&gt;、&lt;strong&gt;泛化调用&lt;/strong&gt;、&lt;strong&gt;服务治理配置&lt;/strong&gt;等多个方面，这里重点介绍几个比较重要的特性。&lt;/p&gt;
&lt;h4 id="fallback---业务自定义降级"&gt;Fallback - 业务自定义降级&lt;/h4&gt;
&lt;p&gt;首先是 Kitex 在 v0.5.0 版本新增的 fallback 功能。&lt;/p&gt;
&lt;p&gt;需求背景是，业务代码在 RPC 请求失败、无法获得响应时，往往需要执行一些降级策略。&lt;/p&gt;
&lt;p&gt;例如信息流业务，API 接入层在请求推荐服务时，如遇到偶发错误（例如超时），简单粗暴的做法是告诉用户出错了，让用户重试，但这样体验就很差。一个比较好的降级策略是，尝试返回一些热门条目，用户几乎无感，体验相对就好了很多。&lt;/p&gt;
&lt;p&gt;旧版 Kitex 的问题是，业务自定义的 中间件 在熔断、超时等内置中间件之后，因此无法在 middleware 里实现降级策略，只能直接修改业务代码，侵入性较大，且需要修改每一处方法调用，容易遗漏。在新增调用某方法的业务逻辑时，没有机制保证不被遗漏。&lt;/p&gt;
&lt;p&gt;通过新增的 fallback 功能， 允许业务&lt;strong&gt;在初始化 Client 时指定一个 fallback 方法&lt;/strong&gt;来实现降级策略。&lt;/p&gt;
&lt;p&gt;下面是一个简单的使用示例：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/fallback_example.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;初始化 client 时指定的这个方法会在每次请求结束前被调用，可以获得这次请求的 context、请求参数、响应，基于此实现自定义的降级策略，这样就把策略的实现都收敛起来了。&lt;/p&gt;
&lt;h4 id="thrift-fastcodec---支持-unknown-fields"&gt;Thrift FastCodec - 支持 unknown fields&lt;/h4&gt;
&lt;p&gt;在实际的业务场景中，一个请求链路往往涉及多个节点。&lt;/p&gt;
&lt;p&gt;以链路 A -&amp;gt; B -&amp;gt; C -&amp;gt; D 为例，A 节点的某个 struct 需要通过 B、C 透传到 D 节点。在以往的实现里，如果在 A 新增一个字段，例如 &lt;code&gt;Extra&lt;/code&gt;，
我需要使用&lt;strong&gt;新的 IDL 重新生成所有节点的代码&lt;/strong&gt;，重新部署，才能在 D 节点获得 Extra 字段的值。整个流程比较复杂，更新周期也比较长，如果中间节点是其他团队的服务，还需要跨团队协调，非常吃力。&lt;/p&gt;
&lt;p&gt;在 Kitex v0.5.2 里，我们在自研的 fastCodec 里实现了 Unknown Fields 这个特性，可以很好地解决这个问题。&lt;/p&gt;
&lt;p&gt;例如同样是 A -&amp;gt; B -&amp;gt; C -&amp;gt; D 这个链路，B、C节点代码不变（如下图所示），在解析时，发现有个字段 id=2，在 struct 里找不到对应的字段，于是就写入这个未导出的 &lt;code&gt;_unknownFields&lt;/code&gt; 字段（实际上就是一个 byte slice 的别名）；&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/old_code.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;而 A、D 服务是用新 IDL 重新生成过的（如下图所示），包含了 Extra 字段，因此解析到 id=2 的字段时，可以写到这个 Extra 字段，业务代码就可以正常使用了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/new_code.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;此外，我们在 v0.7.0 还对这个特性进行了一次性能优化，使用「无序列化」（直接拷贝字节流）的方式，将 unknown fields 的编解码性能提升了约 6~7 倍。&lt;/p&gt;
&lt;h4 id="基于-gls-的-session-传递机制"&gt;基于 GLS 的 Session 传递机制&lt;/h4&gt;
&lt;p&gt;另一个值得给各位介绍的特性也和长链路有关。&lt;/p&gt;
&lt;p&gt;在字节内部，我们用 LogID 来追踪整个调用链，这就要求链路中所有节点都能按要求透传这个票据。在我们的实现中，LogID 不是放在请求体里，而是以 metadata（元数据）的形式透传。&lt;/p&gt;
&lt;p&gt;以 A -&amp;gt; B -&amp;gt; C 这个链路为例，A 调用 B 的 &lt;code&gt;A_Call_B&lt;/code&gt; 方法，传入的 LogID 会存放在 handler 入参的 &lt;code&gt;ctx&lt;/code&gt; 里；B 在请求 C 时，正确的用法是，将这个 &lt;code&gt;ctx&lt;/code&gt; 传给 &lt;code&gt;clientC.B_Call_C&lt;/code&gt; 方法，这样才能把 LogID 继续传递下去。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/call_example.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;但是实际情况往往是，请求 C 服务的代码被多层包装，&lt;strong&gt;ctx 的透传就容易被遗漏&lt;/strong&gt;；我们遇到的情况更麻烦，对 C 服务的请求是由第三方库完成的，而该库的接口就不支持传入 ctx，而这样的代码改造成本很高，可能需要协调多个团队才能完成。&lt;/p&gt;
&lt;p&gt;为了解决这个痛点，我们引入了基于 GLS（goroutine local storage）的 session 传递机制。具体方案是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Kitex Server 这边，收到请求后，先将 context 备份在 GLS 里，然后再调用 Handler ，也就是业务代码；&lt;/li&gt;
&lt;li&gt;在业务代码里调用 client 发送请求时，先检查入参的 ctx 里是否包含期望的票据，如果没有，则从 GLS 的备份里取出，再发出请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个具体例子：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/GLS_example.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化 Server 的时候打开 &lt;code&gt;ContextBackup&lt;/code&gt; 开关&lt;/li&gt;
&lt;li&gt;初始化 Client 的时候指定一个 &lt;code&gt;backupHandler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每次发出请求前，会调用该 handler，检查入参是否包含了 &lt;code&gt;LogID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果不包含，从备份的 &lt;code&gt;ctx&lt;/code&gt; 里读出，合并到当前 &lt;code&gt;ctx&lt;/code&gt; 里返回（返回 &lt;code&gt;useNewCtx = true&lt;/code&gt; 表示 Kitex 应使用这个新的 &lt;code&gt;ctx&lt;/code&gt; 发请求）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在开启上述设置后，即使业务代码使用了错误的 context，也能够串联起整个链路。&lt;/p&gt;
&lt;p&gt;最后再介绍下 server 初始化的 async 参数，它解决的是在 handler 里新建 goroutine 里发送请求的情况。
由于不是同一个 goroutine，无法直接共享 Local Storage；我们借鉴 pprof 给 goroutine 染色的机制，将备份的 ctx 也传递给新的 goroutine，这样就实现了在&lt;strong&gt;异步场景&lt;/strong&gt;也能&lt;strong&gt;隐式传递票据&lt;/strong&gt;的能力。&lt;/p&gt;
&lt;h3 id="易用性"&gt;易用性&lt;/h3&gt;
&lt;p&gt;除了高性能和丰富的功能，我们也很注重提高 Kitex 的易用性。&lt;/p&gt;
&lt;h4 id="文档"&gt;文档&lt;/h4&gt;
&lt;p&gt;众所皆知，程序员最讨厌的两件事：一是写文档，二是别人不写文档。因此我们很注重降低编写文档的启动成本，并努力推进文档建设。&lt;/p&gt;
&lt;p&gt;在字节跳动内部，Kitex 的文档是以飞书知识库的形式组织的，能够更好地集成到飞书的搜索，方便字节员工查询；由于飞书文档更新方便，因此比官网文档更新更及时；新功能在开发时往往也是先在飞书知识库中撰写文档，有些没有及时同步到官网。各种原因导致内外两个分支差别越来越大。&lt;/p&gt;
&lt;p&gt;因此最近两个季度，我们发起了新一轮文档优化工作：根据用户的反馈，重新整理所有文档，添加更多示例；将所有文档翻译成英文，同步到官网。这项工作预计今年能完成，目前已经能在官网看到一些更新后的文档了，例如超时控制、Frugal、panic 处理等，欢迎各位到官网围观、帮忙捉虫。&lt;/p&gt;
&lt;p&gt;此外，我们还在搭建一套机制，用于自动化将内部文档同步到官网，希望能让开源用户以后也能像内部用户一样得到及时更新的文档。&lt;/p&gt;
&lt;h4 id="其他优化"&gt;其他优化&lt;/h4&gt;
&lt;p&gt;除了文档， Kitex 还做了一些其他易用性相关的工作。&lt;/p&gt;
&lt;p&gt;我们发布了一个示例项目&lt;a href="https://github.com/cloudwego/kitex-examples/tree/main/bizdemo/easy_note"&gt;笔记服务&lt;/a&gt;，在实例中展示中间件、限流、重试、超时控制等各种特性的用法，通过真实的项目代码给 Kitex 用户提供参考。&lt;/p&gt;
&lt;p&gt;其次我们也在努力提高问题排查的效率，例如我们根据日常 oncall 的需求，在报错信息里添加了更具体的上下文信息（诸如超时报错增加具体原因、panic 信息增加 method name、thrift 编解码错误信息增加具体字段名称等），方便快速定位到具体的问题点。&lt;/p&gt;
&lt;p&gt;此外，Kitex 命令行工具也在持续改进。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如很多企业用户是在 Windows 上开发，之前 Kitex 无法正常在 Windows 下生成代码，导致这些用户还需要一个 Linux 环境来辅助，非常不方便，我们根据这些用户的反馈做了优化。&lt;/li&gt;
&lt;li&gt;我们还实现了一个 IDL 裁剪工具，能够识别出没有被引用的结构体，在生成代码时直接过滤掉，这对于一些包浆的老项目非常有帮助。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="社区合作项目"&gt;社区合作项目&lt;/h2&gt;
&lt;p&gt;过去的一年里，在 CloudWeGo 社区的支持下，我们也取得了很多成果，特别是 Dubbo 互通和配置中心集成这两个项目。&lt;/p&gt;
&lt;h3 id="dubbo-互通"&gt;Dubbo 互通&lt;/h3&gt;
&lt;p&gt;虽然 Kitex 最初是一个 Thrift RPC 框架，但是其架构设计有较好的扩展性，如图所示，增加新的协议，核心工作是按 Codec 接口实现一个对应的协议编解码器（Codec 或者 PayloadCodec）：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/kitex_transport.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Dubbo 互通项目源于某企业用户提出的需求，他们有一些供应商是用 Dubbo Java 实现的外围服务，他们希望也能够使用 Kitex 来请求这些服务，降低项目的管理成本。&lt;/p&gt;
&lt;p&gt;这个项目得到了社区同学的热情支持，有很多同学参与到这个项目中。特别地，承担核心任务之一的 @&lt;a href="https://github.com/DMwangnima"&gt;DMwangnima&lt;/a&gt; 同学，同时也是 Dubbo 社区的开发者，由于他对 Dubbo 比较熟悉，开发过程也少走了很多弯路。&lt;/p&gt;
&lt;p&gt;在具体实现方案上，我们采用了和 Dubbo 官方不同的思路。根据对 hessian2 协议的分析，其基础类型系统基本上是和 Thrift 重合的，因此我们基于 Thrift IDL 来生成 Kitex Dubbo-Hessian2 项目脚手架。&lt;/p&gt;
&lt;p&gt;一期为了快速实现功能，我们直接借用了 Dubbo-go 框架的 hessian2 库来做序列化和反序列化，并参考 Dubbo 官方文档和 Dubbo-Go 的源码，实现了 Kitex 自己的 DubboCodec；&lt;/p&gt;
&lt;p&gt;在 10 月我们已经完成了第一版代码，项目地址是 &lt;a href="https://github.com/kitex-contrib/codec-dubbo"&gt;code-dubbo&lt;/a&gt; ，感兴趣的用户可以按照上面的文档试用，在具体的使用上，和 Kitex Thrift 类似，写好 Thrift IDL，用 kitex 命令行生成脚手架（注意需要指定 Protocol 为 hessian2），然后在代码里初始化 client、server 的地方指定 DubboCodec，就可以开始编写业务代码了。&lt;/p&gt;
&lt;p&gt;这不仅降低了用户使用门槛，而且用 IDL 来管理接口相关信息，可维护性也更好。&lt;/p&gt;
&lt;p&gt;目前我们已经能够做到 &lt;strong&gt;Kitex 和 Dubbo-Java&lt;/strong&gt;、&lt;strong&gt;Kitex 和 Dubbo-Go&lt;/strong&gt; 互通：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/kitex_dubbo.jpeg" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;未来计划：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是提高与 dubbo-java 的兼容性，以及允许用户在 IDL 注解里指定对应的 Java 类型。&lt;/li&gt;
&lt;li&gt;其次是与注册中心的对接。虽然 Kitex 已经有对应的注册中心模块，但具体的数据格式和 Dubbo 不一致，这块还需要一些改造，相关工作即将完成。&lt;/li&gt;
&lt;li&gt;最后是性能问题，目前和 Kitex Thrift 相比有较大差距，因为 dubbo-go-hessian2 这个库完全基于反射实现，性能还有很大优化空间。计划实现 Hessian2 的 FastCodec，从而解决编解码的性能瓶颈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个项目的推进过程中，我们深切体验到跨社区合作的积极影响，Kitex 吸收了 Dubbo 社区的成果，同时也发现了 Dubbo-go 项目可以改进的地方，上面说到的兼容性和性能的解决方案，预计也能反哺 dubbo 社区。&lt;/p&gt;
&lt;p&gt;在此也特别向这个项目的社区贡献者 @&lt;a href="https://github.com/DMwangnima"&gt;DMwangnima&lt;/a&gt;、@&lt;a href="https://github.com/Lvnszn"&gt;Lvnszn&lt;/a&gt;、@&lt;a href="https://github.com/ahaostudy"&gt;ahaostudy&lt;/a&gt;、@&lt;a href="https://github.com/jasondeng1997"&gt;jasondeng1997&lt;/a&gt;、@&lt;a href="https://github.com/VaderKai"&gt;VaderKai&lt;/a&gt; 等同学致谢，感谢他们抽出大量业余时间完成这个项目。&lt;/p&gt;
&lt;h3 id="配置中心集成"&gt;配置中心集成&lt;/h3&gt;
&lt;p&gt;另一个社区合作的重点项目是「配置中心集成」。&lt;/p&gt;
&lt;p&gt;Kitex 提供了可动态配置的服务治理能力，包括客户端的超时、重试、熔断，以及服务端的限流。&lt;/p&gt;
&lt;p&gt;这些服务治理能力在字节内部都是被重度使用的，微服务的开发者可以在字节自建的服务治理配置平台上编辑这些配置，粒度细化到这个五元组，并且是准实时生效，这些能力对提高微服务的 SLA 非常有帮助。&lt;/p&gt;
&lt;p&gt;然而我们和企业用户沟通，发现这些能力通常只有非常简单的使用，粒度很粗，而且时效性较差，可能只是硬编码指定配置，或者通过简单的文件配置，需要重启才能生效。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/config_cases.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;为了让用户能够更好地用上 Kitex 的服务治理能力，我们启动了配置中心集成项目，让 Kitex 能够从用户的配置中心&lt;strong&gt;动态获取服务治理配置&lt;/strong&gt;，并准实时生效。&lt;/p&gt;
&lt;p&gt;我们已经发布了 &lt;a href="https://github.com/kitex-contrib/config-nacos"&gt;config-nacos&lt;/a&gt; 的 v0.1.1 版本（注：截至发文时已更新至 v0.3.0，感谢 @&lt;a href="https://github.com/whalecold"&gt;whalecold&lt;/a&gt; 同学的持续投入），通过在现有 Kitex 项目上给 client 增加 NacosClientSuite，可以很简单地让 Kitex 从 Nacos 加载对应的服务治理配置。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/nacos_code.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;由于我们使用 nacos client 本身提供的 watch 能力，可以准实时地收到配置的变更通知，因此时效性也很强，不需要重启服务。&lt;/p&gt;
&lt;p&gt;此外，我们还预留了修改配置粒度的能力，例如默认的配置粒度是 client + server，在 Nacos 的 data id 里按这个格式填写即可；用户也可以通过指定这个 data id 的模板，例如加上机房、集群等，从而更精细化地调整这些配置。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/nacos_config.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们计划完成对接常见的配置中心，在这个 &lt;a href="https://github.com/cloudwego/kitex/issues/973"&gt;issue&lt;/a&gt; 里有更详细的说明，欢迎大家围观。
目前的进展是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kitex-contrib/config-file"&gt;file&lt;/a&gt;、&lt;a href="https://github.com/kitex-contrib/config-apollo"&gt;apollo&lt;/a&gt;、&lt;a href="https://github.com/kitex-contrib/config-etcd"&gt;etcd&lt;/a&gt;、&lt;a href="https://github.com/kitex-contrib/config-zookeeper"&gt;zookeeper&lt;/a&gt; 已经完成；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kitex-contrib/config-consul"&gt;consul&lt;/a&gt; 正在开发中；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感兴趣的同学的同学也可以参与进来，一起 review、测试验证这些扩展模块。&lt;/p&gt;
&lt;h2 id="未来展望"&gt;未来展望&lt;/h2&gt;
&lt;p&gt;最后给大家剧透一下我们目前正在尝试的一些方向。&lt;/p&gt;
&lt;h3 id="合并部署"&gt;合并部署&lt;/h3&gt;
&lt;h4 id="亲和性部署"&gt;亲和性部署&lt;/h4&gt;
&lt;p&gt;我们之前的优化大多是针对服务内，而随着可优化点逐渐减少，我们开始考虑其他目标，比如优化 RPC 请求在网络通信上的开销。
具体的方案如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是亲和性调度，通过修改容器化调度机制，我们将 Client 和 Server 尽量调度到相同的物理机上；&lt;/li&gt;
&lt;li&gt;于是我们就可以用同机通信来降低开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前我们已经实现的同机通信包括如下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unix Domain Socket&lt;/strong&gt;，比标准的 TCP Socket 性能要好一些，但不太多；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/shmipc-go"&gt;ShmIPC&lt;/a&gt;，基于共享内存的进程间通信，这个可以直接省略序列化数据的传递，只需要把内存地址告诉接收方即可；&lt;/li&gt;
&lt;li&gt;最后是 &lt;strong&gt;RPAL&lt;/strong&gt; 这个「黑科技」，这是 Run Process As Library 的缩写，我们和字节的内核组合作，通过定制化的内核，将两个进程放在同一个地址空间，在满足一定条件的情况下，我们甚至可以不需要做序列化；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前我们已经在 100 多个服务上开启了这个能力，也取得了一些性能收益，对于效果比较好的服务，能够节省约 5&lt;del&gt;10% 的 CPU，耗时也能减少 10&lt;/del&gt;70%；当然实际表现取决于服务的一些特性，例如数据包的大小等。&lt;/p&gt;
&lt;h4 id="编译期合并"&gt;编译期合并&lt;/h4&gt;
&lt;p&gt;另一个思路是编译期合并。&lt;/p&gt;
&lt;p&gt;该方案的出发点是，我们发现微服务虽然提升了团队协作的效率，但是也增加了系统整体复杂性，尤其是在服务部署、资源占用、通信开销等方面。&lt;/p&gt;
&lt;p&gt;因此我们希望实现一种方案：让业务既能够以微服务的形式开发，又能够按单体服务的形式部署，俗称既要又要。&lt;/p&gt;
&lt;p&gt;然后我们把这个方案做出来了 —— 我们开发了一个工具，能够把两个微服务的 git repo 合并在一起，并通过 namespace 隔离可能有冲突的资源，然后编译成一个可执行程序，用于部署。&lt;/p&gt;
&lt;p&gt;目前在字节跳动内部，已经有数十组服务接入，效果最好的服务，CPU 节省约80%，延迟则能降低最多 67%;当然，实际表现也取决于该服务的特性，比如请求包的大小。&lt;/p&gt;
&lt;p&gt;以上是我们在亲和性方面的尝试。&lt;/p&gt;
&lt;h3 id="序列化"&gt;序列化&lt;/h3&gt;
&lt;p&gt;在序列化方面，我们也还在做一些努力和尝试。&lt;/p&gt;
&lt;h4 id="frugal---ssa-backend"&gt;Frugal - SSA Backend&lt;/h4&gt;
&lt;p&gt;首先是 Frugal，前面介绍过它的性能已经显著优于传统的 Thrift 编解码代码，但它还有提升空间。&lt;/p&gt;
&lt;p&gt;目前 Frugal 的实现是用 Go 直接生成对应的汇编代码。我们在具体实现中也应用了一些优化手段，例如生成更紧凑的代码，减少分支等；但光靠我们自己这样写，无法充分利用现有的编译器优化技术。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/frugal_current.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们计划将 Frugal 重构后，能够基予 go struct 先生成符合 SSA 的 LLVM IR（即 Intermediate Representation，中间表示），这样就能够充分利用 LLVM 的编译优化能力。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/frugal_future.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;预计这样改造后，性能可以提升至少 30%。&lt;/p&gt;
&lt;h4 id="按需序列化"&gt;按需序列化&lt;/h4&gt;
&lt;p&gt;在另外一个探索方向是按需序列化，具体又可以分成三块。&lt;/p&gt;
&lt;p&gt;首先是编译前。我们目前已经发布了一个 IDL 裁剪工具，能够识别出没有被引用的类型；但是被引用的类型也可能是不需要的，例如A、B两个服务依赖同一个类型，但其中有一个字段可能A需要，B不需要。我们考虑在这个工具上增加用户标注能力，允许用户指定不需要的字段，从而进一步降低序列化开销。&lt;/p&gt;
&lt;p&gt;其次是编译中。其思路是根据编译器的编译报告来获取实际违背业务代码引用的字段进行裁剪。具体的方案和正确性还需要一些验证。&lt;/p&gt;
&lt;p&gt;最后是编译后，在运行时，也允许业务通过指定不需要的字段，从而节省编解码的开销。&lt;/p&gt;
&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;最后我们整体回顾一下：&lt;/p&gt;
&lt;p&gt;在能力升级方面，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 通过 &lt;a href="http://github.com/cloudwego/dynamicgo"&gt;DynamicGo&lt;/a&gt; 优化了泛化调用的性能，高性能 &lt;a href="http://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 编解码器也已经稳定，可用于生产环境了；&lt;/li&gt;
&lt;li&gt;过去一年新增了 fallback 方便业务实现自定义降级策略，并通过 unknown fields 和 session 传递机制来解决长链路的改造问题；&lt;/li&gt;
&lt;li&gt;我们还通过文档优化、demo 项目、问题排查效率改造 和 增强命令行工具等方式提升了 Kitex 的易用性；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在社区合作方面，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们通过 Kitex - Dubbo &lt;a href="https://github.com/kitex-contrib/codec-dubbo"&gt;互通项目&lt;/a&gt;支持了 Dubbo 的 hessian2 协议，可以和 Dubbo Java、Dubbo-Go 框架互通，并且还有后续的优化，也能反哺 Dubbo 社区；&lt;/li&gt;
&lt;li&gt;在配置中心集成项目中，我们发布了 &lt;a href="https://github.com/kitex-contrib/config-nacos"&gt;Nacos&lt;/a&gt; 扩展，方便用户集成，目前还在继续推进其他配置中心的对接；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来还有一些探索方向，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在合并部署方面，我们通过亲和性部署、编译其合并这两种方式，既能保留微服务的好处，又能享受一部分单体不服务的优势；&lt;/li&gt;
&lt;li&gt;在序列化方面，我们还继续进一步优化 &lt;a href="http://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt;，并且通过编译前中后各环节来实现按需序列化的能力；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是在 CloudWeGo 两周年之际，关于 &lt;a href="http://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的回顾和展望，希望对大家有帮助，谢谢。&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.8.0</title><link>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-release-v0.8.0/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-release-v0.8.0/</guid><description>
&lt;h2 id="重要变更介绍"&gt;&lt;strong&gt;重要变更介绍&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC 协议支持多 Service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex gRPC 支持多 Service 的能力，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/"&gt;Multiple Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Acquire Kitex RPCInfo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提供 kitexutil 方法以方便从 RPCInfo 获取 rpc 信息, 详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/"&gt;Acquire RPC information&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="优化"&gt;优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Map 泛化调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Map 泛化支持通过 SetBinaryWithByteSlice 设置对 binary 字段返回 []byte。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. RPCInfo 异步使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许关闭 RPCInfo 复用，简化异步使用方式，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/#12-%E5%BC%82%E6%AD%A5%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F"&gt;Acquire RPC information&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="其它"&gt;其它&lt;/h3&gt;
&lt;p&gt;升级 Frugal &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.12"&gt;v0.1.12&lt;/a&gt;, 修复同时使用 frugal 和 sonic 时极小概率出现的并发问题。
强烈建议同时升级 frugal 和 sonic 到较新的版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; go get github.com/cloudwego/frugal@latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; go get github.com/bytedance/sonic@latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1051"&gt;#1051&lt;/a&gt;] feat(grpc): support gRPC multi-service on a server&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1189"&gt;#1189&lt;/a&gt;] feat(rpcinfo): add kitexutil methods for the convenience to fetch rpc information from RPCInfo&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1176"&gt;#1176&lt;/a&gt;] feat(tool): add an environment variable to make it easier to debug kitex tool&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1173"&gt;#1173&lt;/a&gt;] feat(rpcinfo): allow disable rpcinfo reuse for async reference&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1172"&gt;#1172&lt;/a&gt;] feat(retry): client.WithSpecifiedResultRetry should have higher priority&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1150"&gt;#1150&lt;/a&gt;] feat(proxy): add an interface to customize proxy middleware to replace the default implementation&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1159"&gt;#1159&lt;/a&gt;] feat(generic): support returning []byte for binary fields in map generic&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1153"&gt;#1153&lt;/a&gt;] feat(retry): add Extra for retry.FailurePolicy for better extension&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1187"&gt;#1187&lt;/a&gt;] optimize(tool): add an option to keep resp for kitex tool&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1183"&gt;#1183&lt;/a&gt;] optimize(meshheader): retrieve rip from meshheader and write it to TransInfo&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1178"&gt;#1178&lt;/a&gt;] optimize(bizErr): recurse to obtain BizErr to avoid additional Error encapsulation in the middle, resulting in unwrap results that are not BizErr&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1126"&gt;#1126&lt;/a&gt;] fix(generic): the issue of structs cache of generic call has dirty data under multiple services scene&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1168"&gt;#1168&lt;/a&gt;] fix(tool): remove the pointer to java.Object in generated file for &lt;a href="https://github.com/kitex-contrib/codec-dubbo"&gt;CodecDubbo&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1169"&gt;#1169&lt;/a&gt;] fix(tool): empty struct generate wrong struct&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1166"&gt;#1166&lt;/a&gt;] fix(generic): issue of deep copy function generation when map key type is binary&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1155"&gt;#1155&lt;/a&gt;] fix(tool): add import package &amp;lsquo;context&amp;rsquo; for gRPC client.go&lt;/p&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1177"&gt;#1177&lt;/a&gt;] test: avoid port conflict&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1190"&gt;#1190&lt;/a&gt;] chore: update thriftgo version to v0.3.3&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1186"&gt;#1186&lt;/a&gt;] chore: update readme with examples and new blogs&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1185"&gt;#1185&lt;/a&gt;] chore: add ci for windows&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1182"&gt;#1182&lt;/a&gt;] chore: update dynamicgo to v0.1.6&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1152"&gt;#1152&lt;/a&gt;] chore: update dynamicgo and sonic version&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1164"&gt;#1164&lt;/a&gt;] chore: update frugal to v0.1.12 and allow disable frugal by build tag&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1161"&gt;#1161&lt;/a&gt;] chore: update frugal to v0.1.10&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1157"&gt;#1157&lt;/a&gt;] chore: update frugal to v0.1.9&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1151"&gt;#1151&lt;/a&gt;] chore(test): upgrade mockey to latest to compatible with Go1.21&lt;/p&gt;</description></item><item><title>Blog: Volo 0.8.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/10/23/volo-0.8.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/10/23/volo-0.8.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.8.0 版本中，我们主要使用了 AFIT（Async Fn In Trait） 和 RPITIT（Return Position Impl Trait In Traits） 这两个刚刚 stabilized 的 feature 重构了 Service trait 和之前所有用了 async_trait 的地方，除了会有略微的性能提升外，更重要的是，接下来写 Service 可以直接写 async fn call 了，易用性会有较大的提升。&lt;/p&gt;
&lt;h2 id="break-change"&gt;Break Change&lt;/h2&gt;
&lt;h3 id="service-trait-重构"&gt;Service trait 重构&lt;/h3&gt;
&lt;p&gt;在最新的 nightly 中，Rust 备受瞩目的两个重量级 feature AFIT（Async Fn In Trait）和 RPITIT（Return Position Impl Trait In Traits）已经稳定了，也就意味着两个月后，我们就可以在 stable rust 中使用 volo 了。&lt;/p&gt;
&lt;p&gt;这里先简单介绍一下这两个 feature：&lt;/p&gt;
&lt;h4 id="rpitit"&gt;RPITIT&lt;/h4&gt;
&lt;p&gt;RPITIT 的意思是，我们可以在 trait 里面，在函数返回的地方写 impl trait 了，之前我们只能在普通的函数里面写，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;fetch&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;key&lt;/span&gt;: &lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而现在，我们可以直接在 trait 里面写了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Fetcher&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;fetch&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;key&lt;/span&gt;: &lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="afit"&gt;AFIT&lt;/h4&gt;
&lt;p&gt;AFIT 的功能就是，我们可以直接在 trait 里面定义 async fn 了（其实本质上是 RPITIT 的语法糖），并且不需要使用 #[async_trait] 这个宏了，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Fetcher&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;fetch&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;key&lt;/span&gt;: &lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上，也就是一个语法糖，编译器会将这个 async fn 转换成上述的 RPITIT 的形式。&lt;/p&gt;
&lt;p&gt;如需了解更多，可以参考：https://github.com/rust-lang/rust/pull/115822&lt;/p&gt;
&lt;h4 id="service-新定义"&gt;Service 新定义&lt;/h4&gt;
&lt;p&gt;新版 Service Trait 的原始定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个更容易理解的定义是这样的，大家直接这么理解即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与之前的定义对比，去掉了 type Future 关联类型，同时修改了 call 中生命周期的顺序（之前的顺序为&lt;code&gt;call&amp;lt;'cx, 's&amp;gt;&lt;/code&gt;，是一开始写的时候 typo 写反了，趁这个机会改回来）。&lt;/p&gt;
&lt;h4 id="迁移指南"&gt;迁移指南&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Rust 编译器更新到最新 nightly（rustup update）及所有依赖（volo、pilota、motore）升级到最新版&lt;/li&gt;
&lt;li&gt;cargo check 看看哪里报错，可能会遇到比如&lt;code&gt;type Future is not a member&lt;/code&gt;、&lt;code&gt;associated type Future not found&lt;/code&gt;等类似错误，我们以如下&lt;code&gt;Service&lt;/code&gt;为例：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;LogService&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;: &lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Sync&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_grpc&lt;/span&gt;::&lt;span style="color:#000"&gt;context&lt;/span&gt;::&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;: &lt;span style="color:#204a87"&gt;Send&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;move&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;inner&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;duration_since&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tracing&lt;/span&gt;::&lt;span style="color:#000"&gt;info!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;rpc_type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;rpcAccess&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cost&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;as_micros&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;as&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;把&lt;code&gt;type Future&lt;/code&gt;这行直接去掉&lt;/li&gt;
&lt;li&gt;把&lt;code&gt;fn call&amp;lt;'cx, 's&amp;gt;&lt;/code&gt;中的生命周期位置对调，并去掉下面的&lt;code&gt;where&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;fn call&lt;/code&gt;前面加个&lt;code&gt;async&lt;/code&gt;，然后把&lt;code&gt;Self::Future&amp;lt;'cx&amp;gt;&lt;/code&gt;这部分，改成&lt;code&gt;Result&amp;lt;Self::Response, Self::Error&amp;gt;&lt;/code&gt;，并去掉函数体里面的&lt;code&gt;async move&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最终改完的&lt;code&gt;Service&lt;/code&gt;如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;LogService&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;: &lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Sync&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_grpc&lt;/span&gt;::&lt;span style="color:#000"&gt;context&lt;/span&gt;::&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;: &lt;span style="color:#204a87"&gt;Send&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;inner&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;duration_since&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tracing&lt;/span&gt;::&lt;span style="color:#000"&gt;info!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;rpc_type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;rpcAccess&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cost&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;as_micros&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;as&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="handler-重构"&gt;Handler 重构&lt;/h3&gt;
&lt;p&gt;之前版本中，Volo 生成的用户的 handler 为了易用性使用了 async_trait，但得益于 AFIT，现在我们可以直接在 trait 中写 async fn 了，因此我们去掉了 async trait（可以减少一次 Box 开销）。&lt;/p&gt;
&lt;p&gt;因此，升级后可能一开始会遇到类似“lifetime parameters or bounds not match”的错误，遇到这种问题直接去掉&lt;code&gt;#[async_trait]&lt;/code&gt;宏即可。&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-0.5.4...volo-0.8.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Netpoll v0.5.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/10/18/netpoll-v0.5.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/10/18/netpoll-v0.5.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/289"&gt;#289&lt;/a&gt;] fix: 解决当建立建立超时时，遇到 panic 或 fault 错误&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="optimise"&gt;Optimise&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/290"&gt;#290&lt;/a&gt;] optimise: 移除已经不使用的 inputBarrier&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Kitex v0.7.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/09/27/kitex-v0.7.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/09/27/kitex-v0.7.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍"&gt;重要变更介绍&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 重试: 限制重试请求占比&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该特性优化了备用请求的可用性：如某个请求超过重试等待时间，会触发一个备用请求，但如果该请求在RPC超时阈值之内，最终可以正常处理，因而不会被当做失败请求，这会在偶发网络异常时导致大量重试请求，增加服务端压力甚至引起雪崩。&lt;/p&gt;
&lt;p&gt;建议更新现有代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;retry.NewRetryContainerWithPercentageLimit()&lt;/code&gt; 来构造 RetryContainer，限制重试请求占比；&lt;/li&gt;
&lt;li&gt;在 Client 初始化时添加选项 &lt;code&gt;client.WithCloseCallbacks(container.Close)&lt;/code&gt;，以便在 client 被回收时释放相关资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="优化"&gt;优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unary 请求发送 END_STREAM flag&lt;/li&gt;
&lt;li&gt;修复 grpc streaming 吞吐下降与压缩器选择逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 长连接池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果没有指定 &lt;code&gt;MaxIdleGlobal&lt;/code&gt; 则默认不限制，简化长连接池的使用配置。&lt;/p&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;更新 netpoll 至 &lt;a href="https://github.com/cloudwego/netpoll/releases/tag/v0.5.0"&gt;v0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;升级 frugal 到 &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.8"&gt;v0.1.8&lt;/a&gt;，支持在 go1.21 编译时使用 frugal (注: frugal 旧版本不支持 go1.21)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="详细变更"&gt;详细变更&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1117"&gt;#1117&lt;/a&gt;] feat(retry): support retry percentage limit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1033"&gt;#1033&lt;/a&gt;] optimize: no need to check svcInfo twice&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1115"&gt;#1115&lt;/a&gt;] optimize: rm outdated framed suggestion&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1095"&gt;#1095&lt;/a&gt;] optimize: add K_METHOD in serviceinline ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1107"&gt;#1107&lt;/a&gt;] optimize(connpool): set maxIdleGlobal to no limit if not set&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1116"&gt;#1116&lt;/a&gt;] fix: use the last rpcinfo to trace&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1104"&gt;#1104&lt;/a&gt;] fix: move limiter handler to the last of the inbound handler to get rpcinfo in custom limiter&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1103"&gt;#1103&lt;/a&gt;] fix: reset all fields of netpoll byte buffer when recycle it&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1106"&gt;#1106&lt;/a&gt;] fix(grpc): fix grpc streaming tps decreasing and the selection logic of compressor&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1114"&gt;#1114&lt;/a&gt;] fix(gRPC): client send END_STREAM flag in unary call (#1066)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1096"&gt;#1096&lt;/a&gt;] fix(tool): add backquote to handle filepath string invalid syntax under windows os&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1098"&gt;#1098&lt;/a&gt;] fix(tool): fix import for codegen template when using slim and unknown fields&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1124"&gt;#1124&lt;/a&gt;] test: fix codegen script&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1122"&gt;#1122&lt;/a&gt;] test: add codegen test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1119"&gt;#1119&lt;/a&gt;] test(connpool): modify the idleTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1133"&gt;#1133&lt;/a&gt;] chore: update version v0.7.2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1125"&gt;#1125&lt;/a&gt;] chore: upgrade netpoll to v0.5.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1123"&gt;#1123&lt;/a&gt;] perf: replace concurrent string builder with lock&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1118"&gt;#1118&lt;/a&gt;] perf: optimize remote addr setter interface to reduce lock cost of Address()&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1110"&gt;#1110&lt;/a&gt;] chore: upgrade netpoll to v0.4.2 pre-release&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1061"&gt;#1061&lt;/a&gt;] chore: netpoll pre release v0.4.2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1100"&gt;#1100&lt;/a&gt;] chore: enable frugal on go1.21&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Netpoll v0.5.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/09/26/netpoll-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/09/26/netpoll-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/274"&gt;#274&lt;/a&gt;] optimize: 添加初始 bookSize 到 8KB 以减少连接最初读取时的开销&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/273"&gt;#273&lt;/a&gt;] optimize: 当读取一个已经关闭连接时，忽略 EOF 错误&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/283"&gt;#283&lt;/a&gt;] fix: 保护 operator 不被 detach 两次&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/280"&gt;#280&lt;/a&gt;] fix: 修复 detach operator race 问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/278"&gt;#278&lt;/a&gt;] fix: OnRequest 应该等待所有 readable 数据都被消费完毕&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/276"&gt;#276&lt;/a&gt;] fix: 缺少 import 库引入的编译错误&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/238"&gt;#238&lt;/a&gt;] fix: 当 server 的 OnRequest panic 时，应该关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/243"&gt;#243&lt;/a&gt;] docs: 移除过时信息&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Hertz v0.7.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/09/26/hertz-v0.7.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/09/26/hertz-v0.7.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Hertz v0.7.0 版本中，除了常规迭代优化之外，我们还带来了一个重要 feature。&lt;/p&gt;
&lt;h2 id="参数绑定重构"&gt;参数绑定重构&lt;/h2&gt;
&lt;p&gt;在 Hertz v0.7.0 版本中，我们重构了 hertz 参数绑定&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/541"&gt;https://github.com/cloudwego/hertz/pull/541&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="重构说明"&gt;重构说明&lt;/h3&gt;
&lt;p&gt;在 Hertz v0.7.0 版本中，我们重构了参数绑定能力，将参数绑定能力收敛到框架本身，以更好地支持用户的需求。本次重构主要有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能一致：
&lt;ul&gt;
&lt;li&gt;Binder：重构后在 Hertz 内部实现了一个默认的 Binder，其功能与重构前完全对齐，并将重构前的绑定能力以拓展的形式实现在 hertz-contrib 下&lt;/li&gt;
&lt;li&gt;Validator： 仍使用 go-tagexpr 作为默认实现，保证功能一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置收敛：
&lt;ul&gt;
&lt;li&gt;重构前：参数绑定的行为大多通过全局参数的形式进行配置，可能导致多个组件出现配置冲突&lt;/li&gt;
&lt;li&gt;重构后：以 BindConfig 和 ValidateConfig 的结构通过 &amp;lsquo;WithOption&amp;rsquo; 的形式注入到 Hertz Engine 中，既能统一配置形式，又能避免配置冲突的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可自定义 Binder 和 Validator：
&lt;ul&gt;
&lt;li&gt;自定义 Binder：可使用 &amp;ldquo;WithCustomBinder&amp;rdquo; 来注入自定义的 Binder，目前已有拓展 hertz-contrib/binding/go_tagexpr&lt;/li&gt;
&lt;li&gt;自定义 Validator：可使用 &amp;ldquo;WithCustomValidator&amp;rdquo; 来注入自定义的 Validator，目前已经将 go-playground/validator 进行了拓展&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能提升：重构后绑定性能较之前有提升，详见后文压测数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="使用方法"&gt;使用方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;package&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/app/server/binding&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/app/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bindConfig&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;binding&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewBindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;LooseZeroMode&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;New&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithBindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;bindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Spin&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="压测数据"&gt;压测数据&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz-benchmark/tree/main/binding"&gt;https://github.com/cloudwego/hertz-benchmark/tree/main/binding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.7.0"&gt;https://github.com/cloudwego/hertz/releases/tag/v0.7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hz(脚手架): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.7.0"&gt;https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.7.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo 0.5.4 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/08/28/volo-0.5.4-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/08/28/volo-0.5.4-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.5.4 版本中，除了常规 bugfix 之外，还有一些新的 feature 引入。&lt;/p&gt;
&lt;h2 id="thrift-协议支持-unknown-fields"&gt;Thrift 协议支持 Unknown Fields&lt;/h2&gt;
&lt;h3 id="motivation"&gt;Motivation&lt;/h3&gt;
&lt;p&gt;保留 Thrift 解码中未被识别的字段，使用场景比如代理使用IDL的子集解析完整数据，其中未识别的数据将保留成为未识别字段，并透传到下游，可以减少本服务不必要的 IDL 更新或者只解析关心的子集部分。&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在解码 read 步骤时，对于未识别的字段递归进行skip得到长度后，将对应长度的一段 bytes 直接存入生成的 _unknown_fields 结构中，省去具体类型的反序列化开销（在 volo 实现中这一块默认是 zerocopy 的实现）。如果是提前把已知字段读完，会直接把剩余 bytes 全存起来，从而不再需要递归解析长度，性能更优。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在编码 write 步骤时，直接将 _unknown_fields 整块 bytes 写入，省去序列化的开销（在 volo 实现中这一块是 zerocopy 的实现）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Test&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Hello&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;hello&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;union&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Hello&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;a&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;binary&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;b&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pilota 生成代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Generated code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt; &lt;span style="color:#000"&gt;Test&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;hello&lt;/span&gt;: &lt;span style="color:#000"&gt;Hello&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_unknown_fields&lt;/span&gt;: ::&lt;span style="color:#000"&gt;pilota&lt;/span&gt;::&lt;span style="color:#000"&gt;LinkedBytes&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Enum&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Hello&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;A&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;::&lt;span style="color:#000"&gt;pilota&lt;/span&gt;::&lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;B&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;::&lt;span style="color:#000"&gt;pilota&lt;/span&gt;::&lt;span style="color:#000"&gt;Bytes&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_UnknownFields&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;::&lt;span style="color:#000"&gt;pilota&lt;/span&gt;::&lt;span style="color:#000"&gt;LinkedBytes&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="how-to"&gt;How To&lt;/h3&gt;
&lt;p&gt;在 volo.yml 中对要生成 _unknown_fields 的 thrift 文件进行配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;entries&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;protocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;filename&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_gen.rs&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;idls&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;- &lt;span style="color:#204a87;font-weight:bold"&gt;source&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;local&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;path&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;path/to/idl/*.thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;keep_unknown_fields&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="thrift-binary-fast-skip"&gt;Thrift Binary Fast Skip&lt;/h2&gt;
&lt;h3 id="motivation-1"&gt;Motivation&lt;/h3&gt;
&lt;p&gt;优化提升 Skip 逻辑的性能，在代理和 Unknown Fields 等场景下 Skip 是关键路径。&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Thrift Binary Protocol Scalar Types 是定长编码，比如 i32 编码 4 Bytes ，那么 map/list/set 和定长类型组成的这些复合类型（Compound Types）就可以特殊处理，比如 list&lt;i32&gt;，按之前的 Skip 算法是 O(n) 操作循环 Skip，可以提前计算总长度直接跳过，算法复杂度变成了 O(1)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用循环替换递归；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PS1: 递归一定能改成循环，但循环替换递归未必有性能收益；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PS2：复杂的递归调用改循环还是需要设计一个栈来存储中间状态，栈设计的好坏直接影响性能收益；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;cargo bench 性能对比：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cargo bench result(the old version is baseline):
Thrift Binary Skip Bench/binary_unsafe skip list&amp;lt;i32&amp;gt;
time: [32.492 ns 32.665 ns 32.859 ns]
change: [-93.907% -93.787% -93.682%] (p = 0.00 &amp;lt; 0.05)
Performance has improved.
Found 7 outliers among 100 measurements (7.00%)
4 (4.00%) high mild
3 (3.00%) high severe
Thrift Binary Skip Bench/binary_unsafe skip struct
time: [342.44 ns 346.33 ns 350.27 ns]
change: [-6.1207% -4.4530% -2.6464%] (p = 0.00 &amp;lt; 0.05)
Performance has improved.
Found 10 outliers among 100 measurements (10.00%)
5 (5.00%) high mild
5 (5.00%) high severe
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="hot-restart"&gt;Hot Restart&lt;/h2&gt;
&lt;h3 id="motivation-2"&gt;Motivation&lt;/h3&gt;
&lt;p&gt;支持hot restart升级对于维护系统可用性、最大限度地减少停机时间以及在升级过程中提供无缝的用户体验至关重要。在字节主要在sidecar热升级使用。&lt;/p&gt;
&lt;h3 id="solution-2"&gt;Solution&lt;/h3&gt;
&lt;p&gt;热重启的关键是如何使两个不同的进程共享同一个 TCP / UNIX Domain Socket。如果是新旧进程是父子进程关系，由于 fork 创建子进程会拷贝文件描述符表，那父进程可以简单的通过Env环境变量告知子进程监听的Listener Fd，子进程直接通过fd创建socket即可，这个代表是Nginx。我们遇到的场景或者说考虑更通用的场景，一般也有两种解法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过SO_REUSEADDR 和 SO_REUSEPORT&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果只需要监听 TCP / UDP 端口，可以直接在监听时开启 SO_REUSEADDR 与 SO_REUSRPORT。当两个 进程同时监听在一个地址上时，内核会自动在两个主进程之间做 round-robin。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过SCM_RIGHTS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UNIX/LINUX环境下，我们可以使用 UNIX Domain Socket 和 SCM_RIGHTS 机制在应用程序之间传递文件描述符；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过UDS除了通用性更佳外，还有一个好处是可以发送更多信息，丰富扩展功能（比如通知旧进程关闭的时机，比如链接热迁移等等），开源使用SCM_RIGHTS 方案的代表有Envoy、Mosn，我们这次也采用这个方案。一些关键步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;要使用热重启，需要初始化热重启机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该进程首先尝试连接到 parent_sock。如果连接失败，则说明该进程是原来的父进程。这种情况下，进程应该绑定 parent_sock 和 parent_handle，等待子进程发送消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果子进程成功连接到 parent_sock，它将使用 dup_parent_listener_sock 复制文件描述符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一旦所有监听器套接字都被复制，子进程就会向父进程发送终止父进程请求，父进程收到请求后启动终止信号（kill sigterm）并走gracefully exit流程完全退出进程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="how-to-1"&gt;How To&lt;/h3&gt;
&lt;p&gt;在 Server 启动（run）前初始化 hotrestart 即可，code example：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[volo::main]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;: &lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;[::]:8080&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;parse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// hotrestart initialize
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo&lt;/span&gt;::&lt;span style="color:#000"&gt;hotrestart&lt;/span&gt;::&lt;span style="color:#000"&gt;DEFAULT_HOT_RESTART&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;initialize&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;Path&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;/tmp&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;nthrift&lt;/span&gt;::&lt;span style="color:#000"&gt;test&lt;/span&gt;::&lt;span style="color:#000"&gt;idl&lt;/span&gt;::&lt;span style="color:#000"&gt;LearnServiceServer&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;byted&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;run&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;volo热升级不仅仅支持Volo-Thrift 使用，也支持Volo-gRPC使用，未来基于volo的Server理论上都可以支持；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;initialize 方法两个参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;sock_dir_path: 存储 hot_restart 使用的UDS监听地址父目录，一般由托管进程分配地址，注意隔离性（尤其是物理机等非隔离环境下运行使用）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;server_listener_num: 总共server监听数量，指启动的基于volo的server listener数量，一般服务只有一个server，比如Volo-Thrift Server，设置1即可；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-0.5.0...volo-0.5.4"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex v0.7.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/08/14/kitex-v0.7.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/08/14/kitex-v0.7.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍"&gt;重要变更介绍&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC 压缩支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现了 KiteX gRPC 的压缩功能支持，可以使用例如 gzip 等压缩方法减小 payload 体积&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. GLS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;a href="https://github.com/cloudwego/localsession"&gt;local-session&lt;/a&gt; 组件兜底请求上下文传递，解决用户没有传递 ctx 导致的微服务断链问题&lt;/p&gt;
&lt;h3 id="优化"&gt;优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Unknown Fields 无序列化优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现无序列化的 unknown field 功能，无序列化unknown fields方案在FastCodec上性能提升约6x ~ 7x，详见：&lt;a href="https://github.com/cloudwego/kitex/pull/1017"&gt;#1017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. DynamicGo 集成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 KiteX 的泛化模块中集成 &lt;a href="https://github.com/cloudwego/dynamicgo"&gt;dynamicgo&lt;/a&gt; 以提升 JSON\HTTP 泛化调用性能 （+50%～200%）&lt;/p&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;p&gt;升级 Thriftgo 库依赖至 v0.3.0 ，支持了 Thriftgo 反射功能，可以在运行时获取 IDL 元信息&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="详细变更"&gt;详细变更&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1053"&gt;#1053&lt;/a&gt;] feat(retry): support to distinguish local retry request&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1058"&gt;#1058&lt;/a&gt;] feat(retry): support delete retry policy dynamically&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1000"&gt;#1000&lt;/a&gt;] feat(grpc): support grpc compress&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1018"&gt;#1018&lt;/a&gt;] feat: use local-session to backup request context in case of missing&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1045"&gt;#1045&lt;/a&gt;] feat(generic): support base64 codec for map generic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1035"&gt;#1035&lt;/a&gt;] feat(config): provide the ability to dynamically configure the rpctimeout config on the method hierarchy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/825"&gt;#825&lt;/a&gt;] feat(generic): integrate dynamicgo into kitex generic call&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1019"&gt;#1019&lt;/a&gt;] feat(lb): interleaved weighted round-robin load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1064"&gt;#1064&lt;/a&gt;] optimize: check header max size when ttheader encode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1017"&gt;#1017&lt;/a&gt;] optimize: implement unknown field function without serialization&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1036"&gt;#1036&lt;/a&gt;] optimize(protobuf): ignore err when (un)marshal empty req/resp&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1056"&gt;#1056&lt;/a&gt;] optimize(tool): optimize struct ref&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1043"&gt;#1043&lt;/a&gt;] optimize: add method info to the error message of the server handler panic for easy troubleshooting&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1025"&gt;#1025&lt;/a&gt;] optimize: use Tags of ServerBasicInfo as default Tags of RegistryInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1020"&gt;#1020&lt;/a&gt;] optimize: add nil check for MethodInfo which get from ServiceInfo in client.Call to ignore panic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1073"&gt;#1073&lt;/a&gt;] fix: fix failure retryer dump panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1067"&gt;#1067&lt;/a&gt;] fix: slim template with deepcopy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1055"&gt;#1055&lt;/a&gt;] fix: ignore SIGHUP when run with nohup&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1048"&gt;#1048&lt;/a&gt;] fix(retry): keep the behavior of retry policy consistent between initing and updating&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1047"&gt;#1047&lt;/a&gt;] fix(tool): cli warning for unknown suffix&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1038"&gt;#1038&lt;/a&gt;] fix(config): correct the function signature of the rpcinfo.TimeoutProvider implementation&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1034"&gt;#1034&lt;/a&gt;] fix(generic): add case int16 into buildinTypeIntoString&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1023"&gt;#1023&lt;/a&gt;] fix(generic): avoid dead-loop when marshal self-referenced struct&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1028"&gt;#1028&lt;/a&gt;] fix:modify .licenserc.yaml&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1012"&gt;#1012&lt;/a&gt;] fix: skip frugal on go 1.21&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/992"&gt;#992&lt;/a&gt;] fix(grpc): use mcache to fix memory leak caused by grpc codec buffer to reuse memory incorrectly&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/994"&gt;#994&lt;/a&gt;] fix(tool): fix kitex tool git repo pulling logic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1074"&gt;#1074&lt;/a&gt;] chore: update thriftgo to v0.3.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1031"&gt;#1031&lt;/a&gt;] chore: remove wechat group in readme&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1008"&gt;#1008&lt;/a&gt;] chore: update dynamicgo to v0.1.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1006"&gt;#1006&lt;/a&gt;] chore: remove unnecessary replace for frugal&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1007"&gt;#1007&lt;/a&gt;] chore: upgrade netpoll to v0.4.1&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex v0.6.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/06/19/kitex-v0.6.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/06/19/kitex-v0.6.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="详细变更"&gt;&lt;strong&gt;详细变更&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="hotfix"&gt;Hotfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/988"&gt;#988&lt;/a&gt;] hotfix(code_gen): 修复slim模板代码生成失败问题&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Netpoll v0.4.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/06/14/netpoll-v0.4.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/06/14/netpoll-v0.4.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/249"&gt;#249&lt;/a&gt;] feat: 添加 Detach 函数来支持从连接的 poller 中删除连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/250"&gt;#250&lt;/a&gt;] optimize: 优化 WriteDirect 实现，避免 remainLen 为 0 时 panic 和重复创建冗余的 LinkBufferNode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/256"&gt;#256&lt;/a&gt;] fix: 调用 openPoll 失败时关闭已经创建的 poll&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/251"&gt;#251&lt;/a&gt;] fix: err to e0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/226"&gt;#226&lt;/a&gt;] fix: 在关闭连接前 poller 读取所有未读的 data&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/237"&gt;#237&lt;/a&gt;] fix: shard queue 状态关闭错误&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/189"&gt;#189&lt;/a&gt;] fix: 当 readv syscall return 0, nil 时关闭连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/233"&gt;#233&lt;/a&gt;] refactor: 简化 race 和 norace event loop&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex v0.6.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/06/14/kitex-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/06/14/kitex-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍"&gt;重要变更介绍&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. GRPC 元信息传递&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;client 默认将 header 设置到 ctx，外部方法可利用 &lt;code&gt;GetHeaderMetadataFromCtx&lt;/code&gt; 获取元信息。可用于 transmeta 内获取元信息并设置到 rpcinfo 中，或在中间件内获取 header 信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Kitex 配置模块重构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增加重试、熔断、超时、限流的 config item，支持 &lt;a href="https://github.com/cloudwego/configmanager"&gt;configmanager&lt;/a&gt; 中间件定义的接口，用于支持与外部配置中心的扩展集成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kitex - 工具&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持在 thrift 生成代码中插入对象深拷贝函数，用于深拷贝源对象到目标对象，使用方式为 kitex 命令增加 &lt;code&gt;-deep-copy-api&lt;/code&gt; 参数；&lt;/li&gt;
&lt;li&gt;支持在 thrift 生成代码中插入 IDL 描述符注册代码，用于在运行时加载对应生成代码后，注册 IDL 描述符信息到 &lt;code&gt;github.com/cloudwego/kitex/pkg/reflection/thrift&lt;/code&gt; 包内，并通过暴露的函数获取描述符信息，使用方式为在 kitex 命令 &lt;code&gt;thrift&lt;/code&gt; 参数添加 &lt;code&gt;generate-reflection-info=true&lt;/code&gt; ，如 &lt;code&gt;kitex -thrift generate-reflection-info=true ...&lt;/code&gt; ；Kitex 在 v1.12.0 只支持了 IDL 描述符信息注册，更丰富的查询接口将在后续版本进行发布，同时 IDL 描述符注册函数生成也将修改为默认生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="优化"&gt;优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 重构 detection server 支持多种协议的探测&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;旧版本 detection server 写死了 http2 作为探测协议，v1.12.0 版本支持用户传入实现了 &lt;code&gt;detection.DetectableServerTransHandler&lt;/code&gt; 接口的 &lt;code&gt;remote.ServerTransHandler&lt;/code&gt; 对应的 &lt;code&gt;remote.ServerTransHandlerFactory&lt;/code&gt; 作为不定参数，配合默认的&lt;code&gt;remote.ServerTransHandler&lt;/code&gt;处理未匹配的协议，实现多种协议兼容的Kitex Server。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 一致性 hash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一致性hash负载均衡中 &lt;code&gt;buildVirtualNodes&lt;/code&gt; 使用 &lt;code&gt;virtualFactorLen&lt;/code&gt; 初始化 &lt;code&gt;bytes&lt;/code&gt; 数组， 空间可能不足容纳下 &lt;code&gt;VirtualNodeLen&lt;/code&gt; 编号，导致 &lt;code&gt;address&lt;/code&gt; 部分被覆盖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 长连接池埋点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修复长连接池复用连接成功时打点未上报问题。&lt;/p&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;p&gt;升级 netpoll 库依赖至 v0.4.0 ，同时支持 &lt;a href="https://github.com/cloudwego/configmanager"&gt;configmanager&lt;/a&gt; v0.2.0 版本。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="详细变更"&gt;详细变更&lt;/h2&gt;
&lt;h2 id="feature"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/923"&gt;#923&lt;/a&gt;] feat(grpc): grpc 客户端将 header 和 trailer 设置到 context 内，并提供接口从 context 获取 header&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/891"&gt;#891&lt;/a&gt;] feat: 支持 rpc client 和 server 的服务合并，它可以将远端 rpc 调用改成本地的函数级调用。这个特性需要生成工具支持&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/946"&gt;#946&lt;/a&gt;] feat: default server handler 支持通过trans pipeline执行Read函数&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/936"&gt;#936&lt;/a&gt;] feat(config): 增加 重试、熔断、超时、限流 的 config item&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/924"&gt;#924&lt;/a&gt;] [&lt;a href="https://github.com/cloudwego/kitex/pull/939"&gt;#939&lt;/a&gt;] feat(code_gen): 支持生成深拷贝API代码功能&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/926"&gt;#926&lt;/a&gt;] feat: 支持thrift反射信息注册&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/897"&gt;#897&lt;/a&gt;] feat: 自定义模板中支持 loop_service&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/961"&gt;#961&lt;/a&gt;] optimize(tool): -use 参数支持自定义模板场景&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/966"&gt;#966&lt;/a&gt;] optimize(ttheader): ttheader 的 headerFlags 处理增加类型检查&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/919"&gt;#919&lt;/a&gt;] optimize: 使用 GoFunc 替代 go func 以避免 panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/960"&gt;#960&lt;/a&gt;] optimize: 公开stats包以便在扩展仓库中重用&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/955"&gt;#955&lt;/a&gt;] optimize: 移除 gonet transerver 中多余的 onRead 错误日志&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/954"&gt;#954&lt;/a&gt;] optimize: 当 transHandler 没有实现 GracefulShutdown 接口时，不返回报错&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/941"&gt;#941&lt;/a&gt;] optimize(callopt): 优化 callopt 的 debug 信息，减少 slice 扩张的可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/963"&gt;#963&lt;/a&gt;] fix(generic): 修复 map 泛化调用在 byte 类型字段 panic 的问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/901"&gt;#901&lt;/a&gt;] fix(mux): 多路复用连接的 asynccallback 不创建新 goroutine，并且 server 等待所有 crrst 包都被 client 接收后再关闭&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/921"&gt;#921&lt;/a&gt;] fix(loadbalance): 修复一致性 hash []byte 数组长度不够用的问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/922"&gt;#922&lt;/a&gt;] fix(mux): 修复当开启 mux 并且使用 Kitex Protobuf 时，在退出时输出不合理的 error 问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/927"&gt;#927&lt;/a&gt;] fix(connpool): 长连接池复用连接成功时进行上报&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/958"&gt;#958&lt;/a&gt;] refactor(errorHandler): 重构 error handler 定义，可以获取更新信息处理 error&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/943"&gt;#943&lt;/a&gt;] refactor(client): 重构 client.Call 提升代码可读性&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/560"&gt;#560&lt;/a&gt;] refactor: 重构server detection trans handler以支持多种协议的探测&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tests"&gt;Tests:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/900"&gt;#900&lt;/a&gt;] test(generic): 添加使用 dynamicgo 的 thrift 反射泛化调用示例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/976"&gt;#976&lt;/a&gt;] chore: 更新 netpoll 版本到 v0.4.0 并且更新 thriftgo 版本到 v0.2.11&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/956"&gt;#956&lt;/a&gt;] chore: 更新 configmanager 版本到 v0.2.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/948"&gt;#948&lt;/a&gt;] chore: 使用 goimports -local github.com/cloudwego/kitex 调整仓库格式&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo 0.5.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/06/02/volo-0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 02 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/06/02/volo-0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.5.0 版本中，除了常规 bugfix 之外，还有一些新的 feature 引入。&lt;/p&gt;
&lt;h2 id="pilota-build-compile-接口变动"&gt;Pilota-build compile 接口变动&lt;/h2&gt;
&lt;p&gt;如果有需要自己编译 idl 的用户，在这个版本中需要适配一下新的&lt;code&gt;compile&lt;/code&gt;接口，参数改动很简单，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;compile&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;idl/collector.proto&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;],&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;pilota_build&lt;/span&gt;::&lt;span style="color:#000"&gt;Output&lt;/span&gt;::&lt;span style="color:#000"&gt;File&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;out_dir&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只需要在原先的&lt;code&gt;out_dir&lt;/code&gt;上加一个&lt;code&gt;pilota_build::Output::File&lt;/code&gt;即可。&lt;/p&gt;
&lt;h2 id="thrift-编解码接口变动"&gt;Thrift 编解码接口变动&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Pilota&lt;/code&gt;中&lt;code&gt;InputProtocol&lt;/code&gt;接口改为使用&lt;code&gt;Bytes&lt;/code&gt;而不是&lt;code&gt;BytesMut&lt;/code&gt;，以接受更多类型的参数。&lt;/p&gt;
&lt;h2 id="一致性哈希-lb-支持"&gt;一致性哈希 LB 支持&lt;/h2&gt;
&lt;p&gt;感谢 @&lt;a href="https://github.com/my-vegetable-has-exploded"&gt;my-vegetable-has-exploded&lt;/a&gt; 在 &lt;a href="https://github.com/cloudwego/volo/pull/182"&gt;#182&lt;/a&gt; 中为我们支持了一致性哈希 LB。&lt;/p&gt;
&lt;h2 id="返回-arc"&gt;返回 Arc&lt;Resp&gt;&lt;/h2&gt;
&lt;p&gt;新版本中，我们支持了在 Resp 类型外增加 Arc wrapper，具体使用可以参考：https://github.com/cloudwego/pilota/pull/159&lt;/p&gt;
&lt;h2 id="unsafe-codec"&gt;unsafe-codec&lt;/h2&gt;
&lt;p&gt;新版本支持了使用 unsafe 的方式来优化 codec 性能，针对比如 list&lt;i64&gt; 这种类型的编解码均有大约 20 倍的性能提升，其它类型也有一定提升；带来的问题是，恶意构造的 thrift payload 可能会导致 ub（coredump），因此我们没有默认开启。&lt;/p&gt;
&lt;p&gt;如果用户能够信任 Thrift Payload（比如内网），那么可以通过 unsafe-codec 这个 feature 来开启。&lt;/p&gt;
&lt;h2 id="减少-happy-path-上的-box-数量"&gt;减少 happy path 上的 Box 数量&lt;/h2&gt;
&lt;p&gt;新版本中，我们优化了 happy path 上需要使用的 Box 数量，性能理论上会有一些轻微提升。&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-0.4.2...volo-0.5.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex v0.5.3 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/04/21/kitex-v0.5.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/04/21/kitex-v0.5.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍"&gt;重要变更介绍&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;异常重试：添加配置，支持不对超时错误进行重试，用于请求非幂等的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码生成工具：支持 windows 环境使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超时错误类型拆分：支持细粒度的超时错误类型，将 ErrRPCTimeout 细分为三个错误类型：超时、业务cancel、业务timeout。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thrift FastCodec：支持 unknown fields。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unknown fields 使用背景：在 thrift 中，IDL 内增加字段对未更新 IDL 的一方是无感知的，必须更新 IDL 与生成代码以获取到新的字段。这会导致调用链路上某个节点更新 IDL 时，下游所有节点均需要进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unknown fields 则支持保留未识别的字段，对于 IDL 内不存在的字段，读取并设置于结构体的 &lt;code&gt;_unknownFields&lt;/code&gt; 字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用方法：&lt;code&gt;kitex -thrift keep_unknown_fields your.thrift&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="修复"&gt;修复&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;失败重试策略：修复失败重试策略被动态修改后，结果重试 (resultRetry) 策略失效的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="详细变更"&gt;详细变更&lt;/h2&gt;
&lt;h2 id="feature"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/887"&gt;#887&lt;/a&gt;] feat(retry): 增加配置，支持异常重试场景下不对超时做重试，用于请求非幂等的场景&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/881"&gt;#881&lt;/a&gt;] feat(tool): 支持 windows 场景下的代码生成&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/880"&gt;#880&lt;/a&gt;] feat(rpctimeout): 支持细粒度的超时错误类型&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/872"&gt;#872&lt;/a&gt;] feat(thrift): 在 fast codec 中支持 unknown fields 的序列化及反序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/884"&gt;#884&lt;/a&gt;] optimize(rpcinfo): RPCInfo.To().Tag() 优先使用服务发现的instance tag而不是remoteinfo tag&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/896"&gt;#896&lt;/a&gt;] fix(remoteinfo): 修复 remoteinfo 中非深拷贝的 CopyFrom 引入的 race 问题&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/892"&gt;#892&lt;/a&gt;] fix(grpc): 注释 ReadFrame error 时输出的 error 日志&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/889"&gt;#889&lt;/a&gt;] fix(retry): 在失败重试策略被动态修改后，结果重试策略失效&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/866"&gt;#866&lt;/a&gt;] fix(grpc): stream 的 sendMsg/recvMsg 返回的 ctx 无需赋值给 stream 的 ctx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/898"&gt;#898&lt;/a&gt;] chore: 更新 PR 的模板，对用户文档的更新做 check&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/854"&gt;#854&lt;/a&gt;] style(nphttp2): 保证 receiver 的名字一致&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: 字节开源 Monoio ：基于 io-uring 的高性能 Rust Runtime</title><link>https://www.cloudwego.io/zh/blog/2023/04/17/%E5%AD%97%E8%8A%82%E5%BC%80%E6%BA%90-monoio-%E5%9F%BA%E4%BA%8E-io-uring-%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD-rust-runtime/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/04/17/%E5%AD%97%E8%8A%82%E5%BC%80%E6%BA%90-monoio-%E5%9F%BA%E4%BA%8E-io-uring-%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD-rust-runtime/</guid><description>
&lt;h2 id="概述"&gt;概述&lt;/h2&gt;
&lt;p&gt;尽管 Tokio 目前已经是 Rust 异步运行时的事实标准，但要实现极致性能的网络中间件还有一定距离。为了这个目标，&lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; Rust Team 探索基于 io-uring 为 Rust 提供异步支持，并在此基础上研发通用网关。
本文包括以下内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;介绍 Rust 异步机制；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 的一些设计精要；&lt;/li&gt;
&lt;li&gt;Runtime 对比选型与应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="rust-异步机制"&gt;Rust 异步机制&lt;/h2&gt;
&lt;p&gt;借助 Rustc 和 llvm，Rust 可以生成足够高效且安全的机器码。但是一个应用程序除了计算逻辑以外往往还有 IO，特别是对于网络中间件，IO 其实是占了相当大比例的。&lt;/p&gt;
&lt;p&gt;程序做 IO 需要和操作系统打交道，编写异步程序通常并不是一件简单的事情，在 Rust 中是怎么解决这两个问题的呢？比如，在 C++里面，可能经常会写一些 callback ，但是我们并不想在 Rust 里面这么做，这样的话会遇到很多生命周期相关的问题。&lt;/p&gt;
&lt;p&gt;Rust 允许自行实现 Runtime 来调度任务和执行 syscall；并提供了 Future 等统一的接口；另外内置了 async-await 语法糖从面向 callback 编程中解放出来。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/1_2_zh.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;这里从一个简单的例子入手，看一看这套系统到底是怎么工作的。&lt;/p&gt;
&lt;p&gt;当并行下载两个文件时，在任何语言中都可以启动两个 Thread，分别下载一个文件，然后等待 thread 执行结束；但并不想为了 IO 等待启动多余的线程，如果需要等待 IO，我们希望这时线程可以去干别的，等 IO 就绪了再做就好。&lt;/p&gt;
&lt;p&gt;这种基于事件的触发机制在 cpp 里面常常会以 callback 的形式遇见。Callback 会打断我们的连续逻辑，导致代码可读性变差，另外也容易在 callback 依赖的变量的生命周期上踩坑，比如在 callback 执行前提前释放了它会引用的变量。&lt;/p&gt;
&lt;p&gt;但在 Rust 中只需要创建两个 task 并等待 task 执行结束即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;这个例子相比线程的话，异步 task 会高效很多，但编程上并没有因此复杂多少。&lt;/p&gt;
&lt;p&gt;第二个例子，现在 mock 一个异步函数 do_http，这里直接返回一个 1，其实里面可能是一堆异步的远程请求；在此之上还想对这些异步函数做一些组合，
这里假设是做两次请求，然后把两次的结果加起来，最后再加一个 1 ，就是这个例子里面的 sum 函数。通过 Async 和 Await 语法可以非常友好地把这些异步函数给嵌套起来。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[inline(never)]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// do http request in async way
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;sum&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个过程和写同步函数是非常像的，也就说是在面向过程编程，而非面向状态编程。利用这种机制可以避开写一堆 callback 的问题，带来了编程的非常大的便捷性。&lt;/p&gt;
&lt;h3 id="async-await-背后的秘密"&gt;Async Await 背后的秘密&lt;/h3&gt;
&lt;p&gt;通过这两个例子可以得知 Rust 的异步是怎么用的，以及它写起来确实非常方便。那么它背后到底是什么原理呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[inline(never)]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// do http request in async way
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;sum&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;刚才的例子使用 Async + Await 编写，其生成结构最终实现 Future trait 。&lt;/p&gt;
&lt;p&gt;Async + Await 其实是语法糖，可以在 HIR 阶段被展开为 Generator 语法，然后 Generator 又会在 MIR 阶段被编译器展开成状态机。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/5.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="future-抽象"&gt;Future 抽象&lt;/h3&gt;
&lt;p&gt;Future trait 是标准库里定义的。它的接口非常简单，只有一个关联类型和一个 poll 方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;: &lt;span style="color:#000"&gt;Pin&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;_&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Poll&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;enum&lt;/span&gt; &lt;span style="color:#000"&gt;Poll&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;T&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Ready&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;T&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pending&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Future 描述状态机对外暴露的接口：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;推动状态机执行：Poll 方法顾名思义就是去推动状态机执行，给定一个任务，就会推动这个任务做状态转换。&lt;/li&gt;
&lt;li&gt;返回执行结果：
&lt;ol&gt;
&lt;li&gt;遇到了阻塞：Pending&lt;/li&gt;
&lt;li&gt;执行完毕：Ready + 返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看出，异步 task 的本质就是实现 Future 的状态机。程序可以利用 Poll 方法去操作它，它可能会告诉程序现在遇到阻塞，或者说任务执行完了并返回结果。&lt;/p&gt;
&lt;p&gt;既然有了 Future trait，我们完全可以手动地去实现 Future。这样一来，实现出来的代码要比 Async、Await 语法糖去展开的要易读。下面是手动生成状态机的样例。
如果用 Async 语法写，可能直接一个 async 函数返回一个 1 就可以；我们手动编写需要自定义一个结构体，并为这个结构体实现 Future。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// auto generate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// do http request in async way
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// manually impl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;DOHTTPFuture&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;DoHTTPFuture&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt; &lt;span style="color:#000"&gt;DoHTTPFuture&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;DoHTTPFuture&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;: &lt;span style="color:#000"&gt;Pin&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;_&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Poll&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Poll&lt;/span&gt;::&lt;span style="color:#000"&gt;Ready&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Async fn 的本质就是返回一个实现了 Future 的匿名结构，这个类型由编译器自动生成，所以它的名字不会暴露给我们。
而我们手动实现就定义一个 Struct DoHTTPFuture，并为它实现 Future，它的 Output 和 Async fn 的返回值是一样的，都是 i32 。这两种写法是等价的。&lt;/p&gt;
&lt;p&gt;由于这里只需要立刻返回一个数字 1，不涉及任何等待，那么我们只需要在 poll 实现上立刻返回 Ready(1) 即可。&lt;/p&gt;
&lt;p&gt;前面举了 sum 的例子，它做的事情是异步逻辑的组合：调用两次 do http，最后再把两个结果再加一起。这时候如果要手动去实现的话，就会稍微复杂一些，因为会涉及到两个 await 点。一旦涉及到 await，其本质上就变成一个状态机。&lt;/p&gt;
&lt;p&gt;为什么是状态机呢？因为每次 await 等待都有可能会卡住，而线程此时是不能停止工作并等待在这里的，它必须切出去执行别的任务；为了下次再恢复执行前面任务，它所对应的状态必须存储下来。
这里我们定义了 FirstDoHTTP 和 SecondDoHTTP 两个状态。实现 poll 的时候，就是去做一个 loop，loop 里面会 match 当前状态，去做状态转换。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// auto generate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;sum&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;do_http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;do&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;http&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// manually impl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;sum&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;::&lt;span style="color:#000"&gt;FirstDoHTTP&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;DoHTTPFuture&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;enum&lt;/span&gt; &lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;FirstDoHTTP&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;DOHTTPFuture&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;SecondDoHTTP&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;DOHTTPFuture&lt;/span&gt;&lt;span style="color:#a40000"&gt;，&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;: &lt;span style="color:#000"&gt;Pin&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Poll&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;this&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;get&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;loop&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;match&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;this&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;::&lt;span style="color:#000"&gt;FirstDoHTTP&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;f&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;pinned&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;unsafe&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pin&lt;/span&gt;::&lt;span style="color:#000"&gt;new_unchecked&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;f&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;};&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;match&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;pinned&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Poll&lt;/span&gt;::&lt;span style="color:#000"&gt;Ready&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;r&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;this&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;::&lt;span style="color:#000"&gt;SecondDoHTTP&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;DOHTTPFuture&lt;/span&gt;&lt;span style="color:#a40000"&gt;，&lt;/span&gt;&lt;span style="color:#000"&gt;r&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Poll&lt;/span&gt;::&lt;span style="color:#000"&gt;Pending&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pol&lt;/span&gt;::&lt;span style="color:#000"&gt;Pending&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;SumFuture&lt;/span&gt;::&lt;span style="color:#000"&gt;SecondDoHTTP&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;f&lt;/span&gt;&lt;span style="color:#a40000"&gt;，&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;prev_sum&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;pinned&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;unsafe&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pin&lt;/span&gt;::&lt;span style="color:#000"&gt;new_unchecked&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;f&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;};&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;match&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;pinned&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Poll&lt;/span&gt;::&lt;span style="color:#000"&gt;Ready&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;r&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Poll&lt;/span&gt;::&lt;span style="color:#000"&gt;Ready&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;prev_sum&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;r&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Poll&lt;/span&gt;::&lt;span style="color:#000"&gt;Pending&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pol&lt;/span&gt;::&lt;span style="color:#000"&gt;Pending&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;};&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="task-future-和-runtime-的关系"&gt;Task, Future 和 Runtime 的关系&lt;/h3&gt;
&lt;p&gt;我们这里以 TcpStream 的 Read/Write 为例梳理整个机制和组件的关系。&lt;/p&gt;
&lt;p&gt;首先当我们创建 TCP stream 的时候，这个组件内部就会把它注册到一个 poller 上去，这个 poller 可以简单地认为是一个 epoll 的封装（具体使用什么 driver 是根据平台而异的）。&lt;/p&gt;
&lt;p&gt;按照顺序来看，现在有一个 task ，要把这个 task spawn 出去执行。那么 spawn 本质上就是把 task 放到了 runtime 的任务队列里，
然后 runtime 内部会不停地从任务队列里面取出任务并且执行——执行就是推动状态机动一动，即调用它的 poll 方法，之后我们就来到了第 2 步。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/6.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们执行它的 poll 方法，本质上这个 poll 方法是用户实现的，然后用户就会在这个 task 里面调用 TcpStream 的 read/write。这两个函数内部最终是调用 syscall 来实现功能的，但在执行 syscall 之前需要满足条件：这个 fd 可读/可写。
如果它不满足这个条件，那么即便我们执行了 syscall 也只是拿到了 WOULD_BLOCK 错误，白白付出性能。初始状态下我们会设定新加入的 fd 本身就是可读/可写的，所以第一次 poll 会执行 syscall。
当没有数据可读，或者内核的写 buffer 满了的时候，这个 syscall 会返回 WOULD_BLOCK 错误。在感知到这个错误后，我们会修改 readiness 记录，设定这个 fd 相关的读/写为不可读/不可写状态。这时我们只能对外返回 Pending。&lt;/p&gt;
&lt;p&gt;之后来到第四步，当我们任务队列里面任务执行完了，我们现在所有任务都卡在 IO 上了，所有的 IO 可能都没有就绪，此时线程就会持续地阻塞在 poller 的 wait 方法里面，
可以简单地认为它是一个 epoll_wait 一样的东西。当基于 io_uring 实现的时候，这可能对应另一个 syscall。&lt;/p&gt;
&lt;p&gt;此时陷入 syscall 是合理的，因为没有任务需要执行，我们也不需要轮询 IO 状态，陷入 syscall 可以让出 CPU 时间片供同机的其他任务使用。
如果有任何 IO 就绪，这时候我们就会从 syscall 返回，并且 kernel 会告诉我们哪些 fd 上的哪些事件已经就绪了。比如说我们关心的是某一个 FD 它的可读，那么这时候他就会把我们关心的 fd 和可读这件事告诉我们。&lt;/p&gt;
&lt;p&gt;我们需要标记 fd 对应的 readiness 为可读状态，并把等在它上面的任务给叫醒。前面一步我们在做 read 的时候，有一个任务是等在这里的，它依赖 IO 可读事件，现在条件满足了，我们需要重新调度它。
叫醒的本质就是把任务再次放到 task queue 里，实现上是通过 Waker 的 wake 相关方法做到的，wake 的处理行为是 runtime 实现的，最简单的实现就是用一个 Deque 存放任务，wake 时 push 进去，复杂一点还会考虑任务窃取和分配等机制做跨线程的调度。&lt;/p&gt;
&lt;p&gt;当该任务被 poll 时，它内部会再次做 TcpStream read，它会发现 IO 是可读状态，所以会执行 read syscall，而此时 syscall 就会正确执行，TcpStream read 对外会返回 Ready。&lt;/p&gt;
&lt;h3 id="waker"&gt;Waker&lt;/h3&gt;
&lt;p&gt;刚才提到了 Waker，接下来介绍 waker 是如何工作的。我们知道 Future 本质是状态机，每次推它转一转，它会返回 Pending 或者 Ready ，当它遇到 io 阻塞返回 Pending 时，谁来感知 io 就绪? io 就绪后怎么重新驱动 Future 运转？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;: &lt;span style="color:#000"&gt;Pin&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;_&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Poll&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt; &lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;a&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;//可以拿到用于唤醒Task的Waker
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;waker&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt; &lt;span style="color:#000"&gt;a&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Waker&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;//标记字段,忽略即可
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_marker&lt;/span&gt;: &lt;span style="color:#000"&gt;PhantomData&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;a&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;a&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Future trait 里面除了有包含自身状态机的可变以借用以外，还有一个很重要的是 Context，Context 内部当前只有一个 Waker 有意义，
这个 waker 我们可以暂时认为它就是一个 trait object ，由 runtime 构造和实现。它实现的效果，就是当我们去 wake 这个 waker 的时候，会把任务重新加回任务队列，这个任务可能立刻或者稍后被执行。&lt;/p&gt;
&lt;p&gt;举另一个例子来梳理整个流程。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/7.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;用户使用 listener.accept() 生成 AcceptFut 并等待:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fut.await 内部使用 cx 调用 Future 的 poll 方法&lt;/li&gt;
&lt;li&gt;poll 内部执行 syscall&lt;/li&gt;
&lt;li&gt;当前无连接拨入，kernel 返回 WOULD_BLOCK&lt;/li&gt;
&lt;li&gt;将 cx 中的 waker clone 并暂存于 TcpListener 关联结构内&lt;/li&gt;
&lt;li&gt;本次 poll 对外返回 Pending&lt;/li&gt;
&lt;li&gt;Runtime 当前无任务可做，控制权交给 Poller&lt;/li&gt;
&lt;li&gt;Poller 执行 epoll_wait 陷入 syscall 等待 IO 就绪&lt;/li&gt;
&lt;li&gt;查找并标记所有就绪 IO 状态&lt;/li&gt;
&lt;li&gt;如果有关联 waker 则 wake 并清除&lt;/li&gt;
&lt;li&gt;等待 accept 的 task 将再次加入执行队列并被 poll&lt;/li&gt;
&lt;li&gt;再次执行 syscall&lt;/li&gt;
&lt;li&gt;12/13. kernel 返回 syscall 结果，poll 返回 Ready&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="runtime"&gt;Runtime&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先从 executor 看起，它有一个执行器和一个任务队列，它的工作是不停地取出任务，推动任务运行，之后在所有任务执行完毕必须等待时，把执行权交给 Reactor。&lt;/li&gt;
&lt;li&gt;Reactor 拿到了执行权之后，会与 kernel 打交道，等待 IO 就绪，IO 就绪好了之后，我们需要标记这个 IO 的就绪状态，并且把这个 IO 所关联的任务给唤醒。唤醒之后，我们的执行权又会重新交回给 executor 。在 executor 执行这个任务的时候，就会调用到 IO 组件所提供的一些能力。&lt;/li&gt;
&lt;li&gt;IO 组件要能够提供这些异步的接口，比如说当用户想用 tcb stream 的时候，得用 runtime 提供的一个 TcpStream， 而不是直接用标准库的。第二，能够将自己的 fd 注册到 Reactor 上。第三，在 IO 没有就绪的时候，我们能把这个 waker 放到任务相关联的区域里。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个 Rust 的异步机制大概就是这样。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/8.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="monoio-设计"&gt;Monoio 设计&lt;/h2&gt;
&lt;p&gt;以下将会分为四个部分介绍 &lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; Runtime 的设计要点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 GAT(Generic associated types) 的异步 IO 接口；&lt;/li&gt;
&lt;li&gt;上层无感知的 Driver 探测与切换；&lt;/li&gt;
&lt;li&gt;如何兼顾性能与功能；&lt;/li&gt;
&lt;li&gt;提供兼容 Tokio 的接口&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="基于-gat-的纯异步-io-接口"&gt;基于 GAT 的纯异步 IO 接口&lt;/h3&gt;
&lt;p&gt;首先介绍一下两种通知机制。第一种是和 epoll 类似的，基于就绪状态的一种通知。第二种是 io-uring 的模式，它是一个基于“完成通知”的模式。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/9.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;在基于就绪状态的模式下，任务会通过 epoll 等待并感知 IO 就绪，并在就绪时再执行 syscall。但在基于“完成通知”的模式下，&lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 可以更懒：直接告诉 kernel 当前任务想做的事情就可以放手不管了。&lt;/p&gt;
&lt;p&gt;io_uring 允许用户和内核共享两个无锁队列，submission queue 是用户态程序写，内核态消费；completion queue 是内核态写，用户态消费。通过 enter syscall 可以将队列中放入的 SQE 提交给 kernel，并可选地陷入并等待 CQE。&lt;/p&gt;
&lt;p&gt;在 syscall 密集的应用中，使用 io_uring 可以大大减少上下文切换次数，并且 io_uring 本身也可以减少内核中数据拷贝。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/10.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;这两种模式的差异会很大程度上影响 Runtime 的设计和 IO 接口。在第一种模式下，等待时是不需要持有 buffer 的，只有执行 syscall 的时候才需要 buffer，
所以这种模式下可以允许用户在真正调用 poll 的时候（如 poll_read）传入 &amp;amp;mut Buffer；而在第二种模式下，在提交给 kernel 后，kernel 可以在任何时候访问 buffer，&lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 必须确保在该任务对应的 CQE 返回前 Buffer 的有效性。&lt;/p&gt;
&lt;p&gt;如果使用现有异步 IO trait（如 tokio/async-std 等），用户在 read/write 时传入 buffer 的引用，可能会导致 UAF 等内存安全问题：如果在用户调用 read 时将 buffer 指针推入 uring SQ，
那么如果用户使用 read(&amp;amp;mut buffer) 创建了 Future，但立刻 Drop 它，并 Drop buffer，这种行为不违背 Rust 借用检查，但内核还将会访问已经释放的内存，就可能会踩踏到用户程序后续分配的内存块。&lt;/p&gt;
&lt;p&gt;所以这时候一个解法，就是去捕获它的所有权，当生成 Future 的时候，把所有权给 Runtime，这时候用户无论如何都访问不到这个 buffer 了，也就保证了在 kernel 返回 CQE 前指针的有效性。这个解法借鉴了 tokio-uring 的做法。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 定义了 AsyncReadRent 这个 trait。所谓的 Rent ，即租借，相当于是 Runtime 先把这个 buffer 从用户手里拿过来，待会再还给用户。这里的 type read future 是带了生命周期泛型的，这个泛型其实是 GAT 提供了一个能力，
现在 GAT 已经稳定了，已经可以在 stable 版本里面去使用它了。当要实现关联的 Future 的时候，借助 TAIT 这个 trait 可以直接利用 async-await 形式来写，相比手动定义 Future 要方便友好很多，这个 feature 目前还没稳定（现在改名叫 impl trait in assoc type 了）。&lt;/p&gt;
&lt;p&gt;当然，转移所有权会引入新的问题。在基于就绪状态的模式下，取消 IO 只需要 Drop Future 即可；这里如果 Drop Future 就可能导致连接上数据流错误（Drop Future 的瞬间有可能 syscall 刚好已经成功），并且一个更严重的问题是一定会丢失 Future 捕获的 buffer。
针对这两个问题 &lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 支持了带取消能力的 IO trait，取消时会推入 CancelOp，用户需要在取消后继续等待原 Future 执行结束（由于它已经被取消了，所以会预期在较短的时间内返回），对应的 syscall 可能执行成功或失败，并返还 buffer。&lt;/p&gt;
&lt;h3 id="上层无感知的-driver-探测和切换"&gt;上层无感知的 Driver 探测和切换&lt;/h3&gt;
&lt;p&gt;第二个特性是支持上层无感知的 Driver 探测和切换。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;OpAble&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;uring_op&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;io_uring&lt;/span&gt;::&lt;span style="color:#000"&gt;squeue&lt;/span&gt;::&lt;span style="color:#000"&gt;Entry&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;legacy_interest&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Option&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ready&lt;/span&gt;::&lt;span style="color:#000"&gt;Diirection&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;usize&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;legacy_call&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;io&lt;/span&gt;::&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;u32&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;通过 Feature 或代码指定 Driver，并有条件地做运行时探测&lt;/li&gt;
&lt;li&gt;暴露统一的 IO 接口，即 AsyncReadRent 和 AsyncWriteRent&lt;/li&gt;
&lt;li&gt;内部利用 OpAble 统一组件实现（对 Read、Write 等 Op 做抽象）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体来说，比如想做 accept、connect 或者 read、write 之类的，这些 op 是实现了 OpAble 的，实际对应这三个 fn ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;uring_op：生成对应 uring SQE&lt;/li&gt;
&lt;li&gt;legacy_interest：返回其关注的读写方向&lt;/li&gt;
&lt;li&gt;legacy_call：直接执行 syscall&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/11.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;整个流程会将一个实现了 opable 的结构 submit 到的 driver 上，然后会返回一个实现了 future 的东西，之后它 poll 的时候和 drop 的时候具体地会分发到两个 driver 实现中的一个，就会用这三个函数里面的一个或者两个。&lt;/p&gt;
&lt;h3 id="性能"&gt;性能&lt;/h3&gt;
&lt;p&gt;性能是 &lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 的出发点和最大的优点。除了 io_uring 带来的提升外，它设计上是一个 thread-per-core 模式的 Runtime。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有 Task 均仅在固定线程运行，无任务窃取。&lt;/li&gt;
&lt;li&gt;Task Queue 为 thread local 结构操作无锁无竞争。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;高性能主要源于两个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Runtime 内部高性能：基本等价于裸对接 syscall&lt;/li&gt;
&lt;li&gt;用户代码高性能：结构尽量 thread local 不跨线程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任务窃取和 thread-per-core 两种机制的对比：&lt;/p&gt;
&lt;p&gt;如果用 tokio 的话，可能某一个线程上它的任务非常少，可能已经空了，但是另一个线程上任务非常多。那么这时候比较闲的线程就可以把任务从比较忙的任务上偷走，这一点和 Golang 非常像。这种机制可以较充分的利用 CPU，应对通用场景可以做到较好的性能。&lt;/p&gt;
&lt;p&gt;但跨线程本身会有开销，多线程操作数据结构时也会需要锁或无锁结构。但无锁也不代表没有额外开销，相比纯本线程操作，跨线程的无锁结构会影响缓存性能，CAS 也会付出一些无效 loop。除此之外，更重要的是这种模式也会影响用户代码。&lt;/p&gt;
&lt;p&gt;举个例子，我们内部需要一个 SDK 去收集本程序的一些打点，并把这些打点聚合之后去上报。在基于 tokio 的实现下，要做到极致的性能就比较困难。
如果在 thread-per-core 结构的 Runtime 上，我们完全可以将聚合的 Map 放在 thread-local 中，不需要任何锁，也没有任何竞争问题，只需要在每个线程上启动一个任务，让这个任务定期清空并上报 thread local 中的数据。
而在任务可能跨线程的场景下，我们就只能用全局的结构来聚合打点，用一个全局的任务去上报数据。聚合用的数据结构就很难不使用锁。&lt;/p&gt;
&lt;p&gt;所以这两种模式各有各的优点，thread-per-core 模式下对于可以较独立处理的任务可以达到更好的性能。共享更少的东西可以做到更好的性能。
但是 thread-per-core 的缺点是在任务本身不均匀的情况下不能充分利用 CPU。对于特定场景，如网关代理等，thread-per-core 更容易充分利用硬件性能，做到比较好的水平扩展性。当前广泛使用 nginx 和 envoy 都是这种模式。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/12.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们做了一些 benchmark，&lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 的性能水平扩展性是非常好的。当 CPU 核数增加的时候，只需要增加对应的线程就可以了。&lt;/p&gt;
&lt;h3 id="功能性"&gt;功能性&lt;/h3&gt;
&lt;p&gt;Thread-per-core 不代表没有跨线程能力。用户依旧可以使用一些跨线程共享的结构，这些和 Runtime 无关；Runtime 提供了跨线程等待的能力。&lt;/p&gt;
&lt;p&gt;任务在本线程执行，但可以等待其他线程上的任务，这个是一个很重要的能力。举例来说，用户需要用单线程去拉取远程配置，并下发到所有线程上。基于这个能力，用户就可以非常轻松地实现这个功能。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/13.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;跨线程等待的本质是在别的线程唤醒本线程的任务。实现上我们在 Waker 中标记任务的所属权，如果当前线程并不是任务所属线程，那么 Runtime 会通过无锁队列将任务发送到其所属线程上；
如果此时目标线程处于休眠状态（陷入 syscall 等待 IO），则利用事先安插的 eventfd 将其唤醒。唤醒后，目标线程会处理跨线程 waker 队列。&lt;/p&gt;
&lt;p&gt;除了提供跨线程等待能力外，&lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 也提供了 spawn_blocking 能力，供用户执行较重的计算逻辑，以免影响到同线程的其他任务。&lt;/p&gt;
&lt;h3 id="兼容接口"&gt;兼容接口&lt;/h3&gt;
&lt;p&gt;由于目前很多组件（如 hyper 等）绑定了 tokio 的 IO trait，而前面讲了由于地层 driver 的原因这两种 IO trait 不可能统一，所以生态上会比较困难。对于一些非热路径的组件，需要允许用户以兼容方式使用，即便付出一些性能代价。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/14.png" alt="image"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// tokio way
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tcp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tokio&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;TcpStream&lt;/span&gt;: &lt;span style="color:#000"&gt;connect&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;1.1.1.1.1:80&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// monoio way(with monoio-compat)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tcp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;monoio_compat&lt;/span&gt;::&lt;span style="color:#000"&gt;StreamWrapper&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;monoio_tcp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;monoio_tcp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;monoio&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;TcpStream&lt;/span&gt;::&lt;span style="color:#000"&gt;connect&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;1.1.1.1:80&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// both of them implements tokio:: io::AsyncReadd and tokio:: io: AsyncWrite
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们提供了一个 Wrapper，内置了一个 buffer，用户使用时需要多付出一次内存拷贝开销。通过这种方式，我们可以为 &lt;a href="https://github.com/bytedance/monoio"&gt;monoio&lt;/a&gt; 的组件包装出 tokio 的兼容接口，使其可以使用兼容组件。&lt;/p&gt;
&lt;h2 id="runtime-对比应用"&gt;Runtime 对比&amp;amp;应用&lt;/h2&gt;
&lt;p&gt;这部分介绍 runtime 的一些对比选型和应用。&lt;/p&gt;
&lt;p&gt;前面已经提到了关于均匀调度和 thread-per-core 的一些对比，这里主要说一下应用场景。对于较大量的轻任务，thread-per-core 模式是适合的。特别是代理、网关和文件 IO 密集的应用，使用 Monoio 就非常合适。&lt;/p&gt;
&lt;p&gt;还有一点，Tokio 致力于一个通用跨平台，但是 &lt;a href="https://github.com/bytedance/monoio"&gt;monoio&lt;/a&gt; 设计之初就是为了极致性能，所以是期望以 io_uring 为主的。虽然也可以支持 epoll 和 kqueue，但仅作 fallback。
比如 kqueue 其实就是为了让用户能够在 Mac 上去开发的便利性，其实不期望用户真的把它跑在这（未来将支持 Windows）。&lt;/p&gt;
&lt;p&gt;生态部分，Tokio 的生态是比较全的，&lt;a href="https://github.com/bytedance/monoio"&gt;monoio&lt;/a&gt; 的比较缺乏，即便有兼容层，兼容层本身是有开销的。Tokio 有任务窃取，可以在较多的场景表现很好，但其水平扩展性不佳。
&lt;a href="https://github.com/bytedance/monoio"&gt;monoio&lt;/a&gt; 的水平扩展就比较好，但是对这个业务场景和编程模型其实是有限制的。所以 &lt;a href="https://github.com/bytedance/monoio"&gt;monoio&lt;/a&gt; 比较适合的一些场景就是代理、网关还有缓存数据聚合等。以及还有一些会做文件 io 的，因为 io_uring 对文件 io 非常好。
如果不用 io_uring 的话，在 Linux 下其实是没有真异步的文件 io 可以用的，只有用 io_uring 才能做到这一点。还适用于这种文件 io 比较密集的，比如说像 DB 类型的组件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Monoio_Open_Source/15.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Tokio-uring 其实是一个构建在 tokio 之上的一层，有点像是一层分发层，它的设计比较漂亮，我们也参考了它里面的很多设计，比如说像那个传递所有权的这种形式。
但是它还是基于 tokio 做的，在 epoll 之上运行 uring，没有做到用户透明。当组件在实现时，只能在使用 epoll 和使用 uring 中二选一，
如果选择了 uring，那么编译产物就无法在旧版本 linux 上运行。而 &lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 很好的支持了这一点，支持动态探测 uring 的可用性。&lt;/p&gt;
&lt;h3 id="monoio-应用"&gt;Monoio 应用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Monoio Gateway: 基于 &lt;a href="https://github.com/bytedance/monoio"&gt;Monoio&lt;/a&gt; 生态的网关服务，我们优化版本 Benchmark 下来性能优于 Nginx；&lt;/li&gt;
&lt;li&gt;Volo: &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; Team 开源的 RPC 框架，目前在集成中，PoC 版本性能相比基于 Tokio 提升 26%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们也在内部做了一些业务业务试点，未来我们会从提升兼容性和组件建设上入手，就是让它更好用。&lt;/p&gt;</description></item><item><title>Blog: 字节跳动开源 Shmipc：基于共享内存的高性能 IPC</title><link>https://www.cloudwego.io/zh/blog/2023/04/04/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%BC%80%E6%BA%90-shmipc%E5%9F%BA%E4%BA%8E%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD-ipc/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/04/04/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%BC%80%E6%BA%90-shmipc%E5%9F%BA%E4%BA%8E%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD-ipc/</guid><description>
&lt;h2 id="简介"&gt;简介&lt;/h2&gt;
&lt;p&gt;Shmipc 是字节跳动服务框架团队研发的&lt;strong&gt;高性能进程间通讯库&lt;/strong&gt;，它基于&lt;strong&gt;共享内存&lt;/strong&gt;构建，具有&lt;strong&gt;零拷贝&lt;/strong&gt;的特点，同时它引入的同步机制具有&lt;strong&gt;批量收割 IO&lt;/strong&gt; 的能力，相对于其他进程间通讯方式能明显提升性能。
在字节内部，Shmipc 应用于 Service Mesh 场景下，mesh proxy 进程与业务逻辑进程、与通用 sidecar 进程的通讯， 在&lt;strong&gt;大包场景&lt;/strong&gt;和 &lt;strong&gt;IO 密集型场景&lt;/strong&gt;能够取得了显著的性能收益。&lt;/p&gt;
&lt;p&gt;开源社区关于这方面的资料不多，Shmipc 的开源希望能为社区贡献一份力量，提供一份参考。本文主要介绍 Shmipc 的一些主要的设计思路、落地过程遇到的问题以及后续的演进规划。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go 版本实现: &lt;a href="https://github.com/cloudwego/shmipc-go"&gt;https://github.com/cloudwego/shmipc-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;设计细节: &lt;a href="https://github.com/cloudwego/shmipc-spec"&gt;https://github.com/cloudwego/shmipc-spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="项目背景"&gt;项目背景&lt;/h2&gt;
&lt;p&gt;在字节，Service Mesh 在落地的过程中进行了大量的性能优化工作，其中 Service Mesh 的流量劫持是通过，mesh proxy 与微服务框架约定的地址进行进程间通讯来完成，
性能会优于开源方案中的 iptables。但常规的优化手段已不能带来明显的性能提升。于是我们把目光放到了进程间通讯上，Shmipc 由此诞生。&lt;/p&gt;
&lt;h2 id="设计思路"&gt;设计思路&lt;/h2&gt;
&lt;h3 id="零拷贝"&gt;零拷贝&lt;/h3&gt;
&lt;p&gt;在生产环境中比较广泛使用的进程间通讯方式是 unix domain socket 与 TCP loopback（localhost:$PORT），两者从 benchmark 看性能差异不大。
从技术细节看，都需要将通讯的数据在用户态和内核态之间进行拷贝。在 RPC 场景下，一次 RPC 流程中在进程间通讯上会有四次的内存拷贝，Request 路径两次， Response 路径两次。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Shmipc_Open_Source/zero_copy.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;虽然现代 CPU 上进行顺序的 copy 非常快，但如果我们能够消除这多达四次的内存拷贝，在大包场景下也能在一定程度上节省 CPU 使用。
而基于共享内存通讯零拷贝的特性，我们可以很容易达成这一点。但为了达到零拷贝的效果，围绕共享内存本身，还会产生有许多额外的工作，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深入微服务框架的序列化与反序列化。我们希望当 Request 或 Response 序列化完成时，对应的二进制数据已经存在共享内存中。而不是序列化到一块非共享内存的 buffer 中，然后再拷贝到共享内存 buffer。&lt;/li&gt;
&lt;li&gt;实现一种进程同步机制。当一个进程把数据写入共享内存后，另外一个进程并不知道，因此需要同步机制进行通知。&lt;/li&gt;
&lt;li&gt;高效的内存分配和回收。保证跨进程的共享内存的分配和回收机制的开销足够低，避免其掩盖零拷贝的特性带来的收益。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="同步机制"&gt;同步机制&lt;/h3&gt;
&lt;p&gt;分场景考虑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按需实时同步。适用于在线场景，对时延极其敏感，每次写入操作完成后都通知对端进程。Linux 下，可做选择的比较多，TCP loopback、unix domain socket、event fd 等。
event fd 的 benchmark 性能会略好，但跨进程传递 fd 会引入过多复杂性，其带来的性能提升在 IPC 上不太明显，复杂性与性能中间的权衡需要慎重考虑。在字节，我们选择了 unix domain socket 来进行进程同步。&lt;/li&gt;
&lt;li&gt;定时同步。适用于离线场景，对时延不敏感。通过高间隔的 sleep 访问共享内存中自定义的标志位来鉴别是否有数据写入。但注意 sleep 本身也需要系统调用，开销大于 unix domain socket 的读写。&lt;/li&gt;
&lt;li&gt;轮询同步。适用于时延非常敏感，CPU 不那么敏感的场景。可以通过单核轮询共享内存中的自定义标志位来完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总的来说按需实时同步和定期同步需要系统调用来完成，轮询同步不需要系统调用，但需要常态跑满一个 CPU 核心。&lt;/p&gt;
&lt;h3 id="批量收割-io"&gt;批量收割 IO&lt;/h3&gt;
&lt;p&gt;在线场景中按需实时同步，每次数据写入都需要进行一次进行进程同步（下图中的 4），虽然延迟问题解决了，但在性能上，需要交互的数据包需要大于一个比较大的阈值，零拷贝带来的收益才能突显。
因此在共享内存中构造了一个 IO 队列的来完成批量收割 IO，使其在小包 IO 密集场景也能显现收益。核心思想是：当一个进程把请求写入 IO 队列后，会给另外一个进程发通知来处理。
那么在下一个请求进来时（对应下图中的 IOEvent 2~N，一个 IOEvent 可以独立描述一个请求在共享内存中的位置），如果对端进程还在处理 IO 队列中的请求，那么就不必进行通知。因此，IO 越密集，批处理效果就越好。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Shmipc_Open_Source/share_memory.jpeg" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;另外就是离线场景中，定时同步本身就是批量处理 IO 的，批处理的效果能够有效减少进程同步带来的系统调用，sleep 间隔越高，进程同步的开销就越低。
对于轮询同步则不需要考虑批量收割 IO，因为这个机制本身是为了减少进程同步开销。而轮询同步直接占满一个 CPU 核心，相当于默认把同步机制的开销拉满以获取极低的同步延迟。&lt;/p&gt;
&lt;h2 id="性能收益"&gt;性能收益&lt;/h2&gt;
&lt;h3 id="benchmark"&gt;Benchmark&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Shmipc_Open_Source/benchmark.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;其中 X 轴为数据包大小，Y 轴为一次 Ping-Pong 的耗时，单位为微秒，越小越好。可以看到在小包场景下，Shmipc 相对于 unix domain socket 也能获得一些收益，并且随着&lt;strong&gt;包大小越大性能越好&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;数据源： &lt;code&gt;git clone https://github.com/cloudwego/shmipc-go &amp;amp;&amp;amp; go test -bench=BenchmarkParallelPingPong -run BenchmarkParallelPingPong&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="生产环境"&gt;生产环境&lt;/h3&gt;
&lt;p&gt;在字节生产环境的 Service Mesh 生态中，我们在&lt;strong&gt;3000+服务、100w+实例上&lt;/strong&gt;的应用了 Shmipc。不同的业务场景显现出不同的收益，
其中收益最高的风控业务降低了整体&lt;strong&gt;24%的资源使用&lt;/strong&gt;，当然也有无明显收益的甚至劣化的场景出现。但&lt;strong&gt;在大包和 IO 密集型场景均能显现出显著收益&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id="采坑记录"&gt;采坑记录&lt;/h2&gt;
&lt;p&gt;在字节实际落地的过程中我们也踩了一些坑，导致一些线上事故，比较具有参考价值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;共享内存泄漏。IPC 过程共享内存分配和回收涉及到两个进程，稍有不慎就容易发生共享内存的泄漏。问题虽然非常棘手，但只要能够做到泄漏时主动发现，以及泄漏之后有观测手段可以排查即可。
&lt;ol&gt;
&lt;li&gt;主动发现。可以通过增加一些统计信息然后汇总到监控系统来做到主动发现，比如总分配和总回收的内存大小。&lt;/li&gt;
&lt;li&gt;观测手段。在设计共享内存的布局时增加一些元信息，使得在发生泄漏之后，我们可以通过内置的 debug 工具 dump 泄漏时刻的共享内存来进行分析。能够知道所泄漏的内存有多少，里面的内容是什么，以及和这部分内容相关的一些元信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;串包。串包是最头疼的问题，出现的原因是千奇百怪的，往往造成严重后果。我们曾在某业务上发生串包事故，出现的原因是因为大包导致共享内存耗尽，
fallback 到常规路径的过程中设计存在缺陷，小概率出现串包。排查过程和原因并不具备共性，可以提供更多的参考是增加更多场景的集成测试和单元测试将串包扼杀在摇篮中。&lt;/li&gt;
&lt;li&gt;共享内存踩踏。应该尽可能使用 &lt;strong&gt;memfd&lt;/strong&gt; 来共享内存，而不是 mmap 文件系统中的某个路径。早期我们通过 mmap 文件系统的路径来共享内存，Shmipc 的开启和共享内存的路径由环境变量指定，
启动过程由引导进程注入应用进程。那么存在一种情况是应用进程可能会 fork 出一个进程，该进程继承了应用进程的环境变量并且也集成了 Shmipc，然后 fork 的进程和应用进程 mmap 了同一块共享内存，发现踩踏。
在字节的事故场景是应用进程使用了 golang 的 plugin 机制从外部加载 &lt;code&gt;.so&lt;/code&gt; 来运行，该 &lt;code&gt;.so&lt;/code&gt; 集成了 Shmipc，并且跑在应用进程里，能看到所有环境变量，于是就和应用进程 mmap 了同一片共享内存，运行过程发生未定义行为。&lt;/li&gt;
&lt;li&gt;Sigbus coredump。早期我们通过 mmap &lt;code&gt;/dev/shm/&lt;/code&gt;路径（tmpfs）下的文件来共享内存，应用服务大都运行在 docker 容器实例中。
容器实例对 tmpfs 有容量限制（可以通过 df -h 观测），这会使得 mmap 的共享内存如果超过该限制就会出现 Sigbus，
并且 mmap 本身不会有任何报错，但在运行期，使用到超过限制的地址空间时才会出现 Sigbus 导致应用进程崩溃。 解决方式和第三点一样，使用 &lt;strong&gt;memfd&lt;/strong&gt; 来共享内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="后续演进"&gt;后续演进&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;整合至微服务 RPC 框架 &lt;a href="https://github.com/cloudwego/kitex"&gt;CloudWeGo/Kitex&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;整合至微服务 HTTP 框架 &lt;a href="https://github.com/cloudwego/hertz"&gt;CloudWeGo/Hertz&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;开源 Rust 版本的 Shmipc 并整合至 Rust RPC 框架 &lt;a href="https://github.com/cloudwego/volo"&gt;CloudWeGo/Volo&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;开源 C++ 版本的 Shmipc。&lt;/li&gt;
&lt;li&gt;引入定时同步机制适用于离线场景。&lt;/li&gt;
&lt;li&gt;引入轮询同步的同步机制适用于对延迟有极致要求的场景。&lt;/li&gt;
&lt;li&gt;赋能其他 IPC 场景， 比如 Log SDK 与 Log Agent， Metrics SDK 与 Metrics Agent 等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;希望本文能让大家对于 Shmipc 有一个初步的了解，知晓其设计原理，更多实现细节以及使用方法请参考文章开头给出的项目地址。
欢迎各位感兴趣的同学向 Shmipc 项目提交 Issue 和 PR，共同建设 &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; 开源社区，也期望 Shmipc 在 IPC 领域助力越来越多开发者和企业构建高性能云原生架构。&lt;/p&gt;</description></item><item><title>Blog: Volo 0.4.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/03/20/volo-0.4.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/03/20/volo-0.4.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.4.1 版本中，除了常规 bugfix 之外，还有一些新的 feature 引入。&lt;/p&gt;
&lt;h2 id="更为详细的-thrift-decode-错误信息"&gt;更为详细的 Thrift Decode 错误信息&lt;/h2&gt;
&lt;p&gt;之前版本的 Thrift Decode 错误信息只会报告出最基本的错误，而不带有任何上下文。
比如含有如下结构关系&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;A&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;B&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;b&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;B&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;C&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;C&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;3&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;a&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在对结构&lt;code&gt;C&lt;/code&gt;的字段&lt;code&gt;a&lt;/code&gt;进行 Decode 如果发生错误。在之前的版本中错误信息只会报告针对出&lt;code&gt;a&lt;/code&gt;字段的错误，而在现在的版本中会报告出 Decode 的错误信息链路是在 &lt;code&gt;A&lt;/code&gt; -&amp;gt; &lt;code&gt;B&lt;/code&gt; -&amp;gt; &lt;code&gt;C&lt;/code&gt; 这个过程中发生的，会更方便信息的排查&lt;/p&gt;
&lt;h2 id="框架-stats-信息"&gt;框架 stats 信息&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/volo/pull/149"&gt;#149&lt;/a&gt; 为框架增加了更多的 stats 信息。用户可以在中间件自行处理这些数据，比如进行日志记录或者上报到监控系统。&lt;/p&gt;
&lt;h2 id="在服务发现的-discover-中支持部分-key-的监听"&gt;在服务发现的 Discover 中支持部分 key 的监听&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/volo/pull/155"&gt;#155&lt;/a&gt; 在服务发现的 Discover 中支持部分 key 的监听，这样可以减少不必要的监听，提升性能。&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-thrift-0.3.2...volo-0.4.1"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex v0.5.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/03/08/kitex-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/03/08/kitex-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍"&gt;重要变更介绍&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Fallback 功能: 支持 Client 侧的 Fallback 功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;业务在 RPC 请求失败后通常会有一些降级措施保证有效返回（比如在请求超时、熔断后，构造默认返回），Kitex 的 Fallback 支持对所有异常请求进行处理。
同时，因为业务异常通常会通过 BaseResp 字段返回，所以也支持对 Resp 进行处理。详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/fallback/"&gt;Fallback&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Kitex - gRPC：Client 增加 TLS 的配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过 client.WithGRPCTLSConfig option 配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kitex - 工具&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;支持自定义脚手架模板&lt;/strong&gt;，详见： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/custom_tpl/"&gt;自定义脚手架模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持指定生成代码的目录&lt;/strong&gt;，详见： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/#-gen-path"&gt;代码生成工具 -gen-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 protoc 插件选项&lt;/strong&gt;，详见： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/#-protobuf-plugin"&gt;代码生成工具 -protobuf-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="优化"&gt;优化&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 负载均衡：使用权重轮询作为默认 Loadbalance 策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;旧版本默认使用权重随机做 Loadbalance，Random 可以做到全局的均衡，但在服务端实例较少的情况下，随机有较大概率连续访问一个实例，导致下游节点最大并发请求数增加，所以新版本将默认策略调整为轮询。
详见：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/loadbalance/"&gt;负载均衡&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 连接池协程问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;旧版本在使用长连接时，每个 client 对应一个协程资源清理连接，在 client 较多时会导致协程过多，新版本改为共享协程避免 goroutine 数量随着 client 数量增长。&lt;/p&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;p&gt;升级 frugal, pid 库依赖以支持 go 1.20。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="详细变更"&gt;详细变更&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/840"&gt;#840&lt;/a&gt;] feat(fallback): support fallback ability for kitex client-side, usage guide refer to &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/fallback/"&gt;Fallback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/841"&gt;#841&lt;/a&gt;] feat(tool): add GetResult() and GetFirstArgument() methods for service params of protobuf&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/791"&gt;#791&lt;/a&gt;] feat(tool): merge two ways of passing extensions, to support two ways at sametime&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/797"&gt;#797&lt;/a&gt;] feat(loadbalance): use smooth weighted round robin algo as default Loadbalance policy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/760"&gt;#760&lt;/a&gt;] feat(grpc): support TLS config in kitex grpc client&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/781"&gt;#781&lt;/a&gt;] feat(tool): supports custom templates&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/783"&gt;#783&lt;/a&gt;] feat(ttheader): add encode logic for gdpr token in TransInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/775"&gt;#775&lt;/a&gt;] feat(tool): support custom generate path&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/687"&gt;#687&lt;/a&gt;] feat(tool): add protoc plugin flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/750"&gt;#750&lt;/a&gt;] optimize(generic): generic call write zero value for required and default fields to meet the specification of apache thrift and keep consistent with normal thrift encode of Kitex.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/739"&gt;#739&lt;/a&gt;] optimize(generic): modify the url routing to align with Hertz for HTTP generic call&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/752"&gt;#752&lt;/a&gt;] optimize(ttheader): attach part of ttheader binary into error when readKVInfo failed, which is useful for troubleshooting&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/821"&gt;#821&lt;/a&gt;] optimize(config): add DeepCopy() &amp;amp; Equals() to circuitbreaker.CBConfig and retry.Policy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/827"&gt;#827&lt;/a&gt;] optimize: revise the remoteInfo of retry call, using the remoteInfo of the RPCCall that returns&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/762"&gt;#762&lt;/a&gt;] optimize(tool): add go mod auto replace to thrift 0.13 in thrift mode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/755"&gt;#755&lt;/a&gt;] optimize: improve client error msg when ctx cancel or timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/756"&gt;#756&lt;/a&gt;] optimize: use sync.Cond as the profiler event trigger&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/753"&gt;#753&lt;/a&gt;] optimize: add recover for client&amp;rsquo;s Close&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/734"&gt;#734&lt;/a&gt;] fix(retry): fix the panic problem caused by concurrent read and write of rpcinfo under backup retry&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/837"&gt;#837&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/842"&gt;#842&lt;/a&gt;] fix(metahandler): adjust MetainfoHandler to the top of the MetaHandlers array to ensure that the logic of custom MetaHandlers that depends on MetainfoHandler works&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/812"&gt;#812&lt;/a&gt;] fix: use detectionHandler to perform protocol detection in windows environment to support gRPC&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/851"&gt;#851&lt;/a&gt;] fix: upgrade frugal to v0.1.6 for missing stop field&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/845"&gt;#845&lt;/a&gt;] fix: fix the problem that RPCStat report status as success when biz handler return err&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/822"&gt;#822&lt;/a&gt;] fix(loadbalance): don&amp;rsquo;t share balancer factory when loadbalance is defined by user&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/732"&gt;#732&lt;/a&gt;] fix(mux): mux server waits for shardqueue close before shutdown&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/795"&gt;#795&lt;/a&gt;] fix(grpc): zero first byte of grpc data frame, which could be random data from mcache&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/668"&gt;#668&lt;/a&gt;] fix: fix race problem in queue.go/queue @dugenkui03&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/743"&gt;#743&lt;/a&gt;] fix: use sharedTicker for long conn pool to prevent goroutine numbers increase as the number of client increases&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/799"&gt;#799&lt;/a&gt;] fix(util): should return when get at least one GOPATH @StellarisW&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/807"&gt;#807&lt;/a&gt;] fix(codec): fix fastpb nil ptr when struct fields are all default values&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/794"&gt;#794&lt;/a&gt;] fix(tool): fix fastpb codegen by updating dependency&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/787"&gt;#787&lt;/a&gt;] fix(tool): the import did not use the new method to render when template append content&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/785"&gt;#785&lt;/a&gt;] fix(tool): remove useless combine service files&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/754"&gt;#754&lt;/a&gt;] fix: fix the usage of metainfo in grpc scene&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/814"&gt;#814&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/843"&gt;#843&lt;/a&gt;] refactor(trans): return error in onRead of defaultServerHandler and close conn in outer method&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/816"&gt;#816&lt;/a&gt;] refactor(utils): add utils.GetEnvLogDir and deprecate utils.GetLogDir&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test--docs--chore"&gt;Test &amp;amp; Docs &amp;amp; Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/839"&gt;#839&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/693"&gt;#693&lt;/a&gt;] test: import mockey repo and add usage demo of mockey unit test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/806"&gt;#806&lt;/a&gt;] test(transmeta):add some test cases for tansmeta package&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/761"&gt;#761&lt;/a&gt;] docs: update README.md @fuergaosi233&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/817"&gt;#817&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/832"&gt;#832&lt;/a&gt;] chore: upgrade dependency lib to adapt go 1.20&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/772"&gt;#772&lt;/a&gt;] chore: modify kitex gen code meta file name from kitex.yaml to kitex_info.yaml&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Hertz v0.6.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/03/02/hertz-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/03/02/hertz-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Hertz 0.6.0 版本中，除了常规迭代优化之外，我们还带来了多个重要 feature。&lt;/p&gt;
&lt;h2 id="支持-http-trailer"&gt;支持 HTTP Trailer&lt;/h2&gt;
&lt;p&gt;在 Hertz v0.6.0 版本中，我们支持了 HTTP Trailer 的编码和解析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz-examples/tree/main/trailer"&gt;https://github.com/cloudwego/hertz-examples/tree/main/trailer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;写 Trailer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// server 端&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;handler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;){&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Set&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// client 端&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Set&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;读 Trailer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// server 端&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;handler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;){&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Get&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// client 端&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Get&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="http11-支持-response-writer-劫持"&gt;HTTP/1.1 支持 Response Writer 劫持&lt;/h2&gt;
&lt;p&gt;在 Hertz v0.6.0 版本中，我们扩展了 HTTP/1.1 写请求的方式，在原来写请求流程的基础之上，支持用户在业务 handler/中间件中劫持 Response Writer，实现更加灵活的写请求方式。
简单来说，原来所有的“底层写”逻辑统一放到 handler/中间件返回之后，这个带来两个比较明显的局限性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户无法控制请求真正 flush 到对端的时机&lt;/li&gt;
&lt;li&gt;针对 chunk 方式增量产生数据 &amp;amp; 实时写到对端的场景，在老的架构之上用法相对复杂，限制相对较多&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于此我们扩展出一套能够提供自行 flush 请求头和请求体的能力，同时提供了一个支持用户按需发送 chunk 数据的 Writer。详细实现参考：https://github.com/cloudwego/hertz/pull/610&lt;/p&gt;
&lt;h3 id="主要变更"&gt;主要变更&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;增加了一个扩展 Writer 的接口定义，实现了这个接口的 Writer 都可以用作劫持 Response Writer：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ExtWriter&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;interface&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;io&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Writer&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Flush&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Finalize will be called by framework before the writer is released.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Implementations must guarantee that Finalize is safe for multiple calls.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Finalize&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供了一个实现了上述接口的 Chunk Writer（有类似需求都可以参考这个来实现）：&lt;code&gt;chunkedBodyWrite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP/1.1 具体写请求的地方针对被劫持了 Writer 的 Response 写操作做了对应的处理（跳过默认写请求逻辑），最后调用&lt;code&gt;ExtWriter&lt;/code&gt;接口的&lt;code&gt;Finalize()&lt;/code&gt;方法完成一次请求写回&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="使用方法"&gt;使用方法&lt;/h3&gt;
&lt;p&gt;如上，Hertz 提供了一个默认的&lt;code&gt;ExtWriter&lt;/code&gt;实现满足用户在 handler/中间件中的主动 flush 需求，使用方式也非常简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GET&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;/flush/chunk&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Hijack the writer of response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;HijackWriter&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewChunkedBodyWriter&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetWriter&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;10&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;++&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Write&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;([]&lt;/span&gt;&lt;span style="color:#204a87"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;fmt&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Sprintf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;chunk %d: %s&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;strings&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Repeat&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;hi~&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// nolint: errcheck&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Flush&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// nolint: errcheck&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;time&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Sleep&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;200&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;time&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Millisecond&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;})&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="脚手架使用优化--最佳实践"&gt;脚手架使用优化 &amp;amp; 最佳实践&lt;/h2&gt;
&lt;p&gt;在 hz v0.6.0 版本中，我们对生成代码的组织结构进行一系列的优化，从而可生成更加灵活的代码组织结构&lt;/p&gt;
&lt;h3 id="主要优化"&gt;主要优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; 命令支持 &amp;ldquo;router_dir&amp;rdquo; 选项，并配合已有的 &amp;ldquo;handler_dir&amp;rdquo;、&amp;ldquo;model_dir&amp;rdquo;，可完全自定义 IDL 生成产物的路径；并且会将这些自定义选项持久化到 &amp;ldquo;.hz&amp;rdquo; 文件中，可在 &lt;code&gt;update&lt;/code&gt; 时自动读取，减少命令的复杂度&lt;/li&gt;
&lt;li&gt;增加向上搜索 &amp;ldquo;go.mod&amp;rdquo; 文件的能力，从而使得 hertz 在作为一个子项目时可以和其他项目共享同一个 &amp;ldquo;go module&amp;rdquo;&lt;/li&gt;
&lt;li&gt;增加 &amp;ldquo;handler&amp;rdquo; 中引用第三方 IDL 产物的能力，可将 IDL 产物放到第三方仓库单独维护，使其不在项目目录中存放，进一步增强 IDL 管理能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="最佳实践"&gt;最佳实践&lt;/h3&gt;
&lt;p&gt;我们利用 &amp;ldquo;hz v0.6.0&amp;rdquo; 重写了 &amp;ldquo;&lt;a href="https://github.com/cloudwego/biz-demo/pull/26"&gt;biz-demo/easy-note&lt;/a&gt;&amp;quot;，主要利用了如下 hz 的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 &amp;ldquo;hz client&amp;rdquo; 的能力，基于 IDL 生成访问 &amp;ldquo;api server&amp;rdquo; 的 hertz client 调用代码&lt;/li&gt;
&lt;li&gt;利用自定义 &amp;ldquo;router_dir&amp;rdquo;、 &amp;ldquo;handler_dir&amp;rdquo;、&amp;ldquo;model_dir&amp;rdquo; 选项，重新调整 &amp;ldquo;api server&amp;rdquo; 代码的组织结构，去掉 &amp;ldquo;biz&amp;rdquo; 目录的限制&lt;/li&gt;
&lt;li&gt;利用 &amp;ldquo;向上搜索 go.mod&amp;rdquo; 的能力，使得 &amp;ldquo;api server&amp;rdquo; 可以作为 &amp;ldquo;easy-note&amp;rdquo; 的子项目共享同一个 &amp;ldquo;go module&amp;rdquo;&lt;/li&gt;
&lt;li&gt;利用 &amp;ldquo;handler 引用第三方 IDL 产物&amp;rdquo; 的能力并配合 &amp;ldquo;hz model&amp;rdquo; 的能力，使得 IDL 产物单独存到到 &amp;ldquo;easy-note&amp;rdquo; 项目里，而并不存放到 &amp;ldquo;api server&amp;rdquo; 子项目里&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.6.0"&gt;https://github.com/cloudwego/hertz/releases/tag/v0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hz(脚手架): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.6.0"&gt;https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: HTTP 框架 Hertz 实践入门：性能测试指南</title><link>https://www.cloudwego.io/zh/blog/2023/02/24/http-%E6%A1%86%E6%9E%B6-hertz-%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/02/24/http-%E6%A1%86%E6%9E%B6-hertz-%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</guid><description>
&lt;h2 id="背景"&gt;背景&lt;/h2&gt;
&lt;p&gt;2021 年 9 月 8 日，字节跳动宣布正式开源 &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt;。CloudWeGo 是一套字节跳动内部微服务中间件集合，具备&lt;strong&gt;高性能、强扩展性和稳定性&lt;/strong&gt;的特点，专注于解决微服务通信与治理的难题，满足不同业务在不同场景的诉求。
2022 年 6 月 21 日，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 正式开源。日前，CloudWeGo 团队正式开源字节跳动最大的 HTTP 框架 Hertz。Hertz 自发布以来，得到了大量用户的关注，累计收获了 3K+ star。有很多用户自己进行了测试，感谢大家对我们的关注和支持。
本文旨在分享开发者在压测 Hertz 时需要了解的场景和技术问题。这些建议有助于用户更好地结合真实 HTTP 场景对 Hertz 进行调优，使之更贴合业务需要、发挥最佳性能。用户也可以参考官方提供的压测项目 &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; 了解更多细节。&lt;/p&gt;
&lt;h2 id="微服务-http-场景的特点"&gt;微服务 HTTP 场景的特点&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 诞生于字节跳动大规模微服务架构实践，面向的场景自然是微服务场景，因此下面会先介绍微服务 HTTP 场景的特点，方便开发者深入理解 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的设计思考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP 通信模型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微服务间的通信通常以 Ping-Pong 模型为主，除了常规的吞吐性能指标外，每次 HTTP 的&lt;strong&gt;平均时延&lt;/strong&gt;也是开发者需要考虑的点。吞吐达到瓶颈时可以通过增加机器快速解决，但对用户使用体验有显著影响的时延却没有那么容易降低。
在微服务场景下，一次调用往往需要多个微服务协作完成，即使每个节点延迟很低，最终汇聚到链路上的时延也会被放大，因此微服务场景下时延指标是开发者更应该关注的点。&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 在保证吞吐的前提下，也针对时延做了一定优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;长短连接使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于 TCP 连接首次建立时需要三次握手，如果每个请求都建立新连接，这部分的开销是非常大的。因此对于时延敏感型服务，尽量使用长连接完成请求。在 HTTP 1.1 中，长连接也是默认的选项。
但是没有银弹，维持连接也需要消耗资源，长连接的水平扩展能力也不如短连接。因此，在某些场景下并不适合使用长连接，比如定时拉取配置的场景，
在这个场景下，建连时延对配置影响并不大，且当配置中心负载过高时，希望能够方便的进行水平扩容，这时短连接可能是一个更好的选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;包体积大小&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个服务的包大小取决于实际的业务场景。HTTP 场景的数据可以放在 query、path、header、body 等地方，不同位置对解析造成的影响也不一样。
HTTP 的 header 是标识符协议，在没有找到特定的标识符之前，框架并不知道 header 还有多少，因此框架需要收到全部的 header 后才能够解析完成，对框架的内存模型不很友好。
&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 也针对 header 解析做了特殊的优化，分配足够的 buffer 空间给 header，减少 header 处理时跨包拷贝的开销。&lt;/p&gt;
&lt;p&gt;同时在字节跳动内部线上服务的统计中，发现大部分包在 1K 以内（但是太小的包没有实际意义，比如固定返回 &amp;ldquo;hello world&amp;rdquo;），同时大包场景上不封顶，各个包大小均有涉及，所以 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 在最常用的 128k 以内的包的性能（吞吐和时延）进行了重点优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并发数量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个实例的上游可能会有很多个，不会只接受某个实例的请求；而且，HTTP 1 的连接不能够多路复用，每条连接上只能同时处理一个请求。因此 Server 需要接受多个连接同时处理。
不同服务的连接使用率也不同，比如压测服务的连接使用率很高，一个请求完成后马上就会进行下一个请求；有的服务连接使用率很低，虽然是长连接，但是只使用一次。这两者使用的连接模型并不相同，
前者应使用 goroutine per connection 的模型减少上下文的切换，后者应使用协程池减少过多 goroutine 的调度开销。&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 也同时支持这两种场景，用户可以根据自己的业务场景选择合适的配置。&lt;/p&gt;
&lt;h2 id="针对-http-场景进行压测"&gt;针对 HTTP 场景进行压测&lt;/h2&gt;
&lt;h3 id="使用贴近自己的场景"&gt;使用贴近自己的场景&lt;/h3&gt;
&lt;p&gt;Github 上的压测项目有很多，网络上也有很多性能测试报告，但是这些项目和测试不一定贴合自己。举个极端一点的例子，在真实场景中你会写一个项目无论 Client 发什么 Server 都只回 &lt;strong&gt;&lt;code&gt;hello world&lt;/code&gt;&lt;/strong&gt; 吗？很遗憾，很多的压测项目就是这么做的。&lt;/p&gt;
&lt;p&gt;在进行压测前，应考虑自己真正的使用场景，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;长短连接的使用&lt;/strong&gt; ：使用长连接还是短连接更符合自己的场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接使用率的估算&lt;/strong&gt; ：如果使用长连接，且连接使用率很高（大部分场景），则使用默认配置即可；如果连接使用率很低，可以添加配置：&lt;strong&gt;&lt;code&gt;server.WithIdleTimeout(0)&lt;/code&gt;&lt;/strong&gt;，将 goroutine per connection 的模型修改为协程池模型，并进行对比测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据位置及大小的确定&lt;/strong&gt; ：上面提到不同位置（如 query、header、body 等）及大小的数据对框架可能造成影响，如果所有框架的性能都比较一般，可以考虑换一个数据传输位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发数的确定&lt;/strong&gt; ：有的服务属于轻业务重框架，这个时候框架的并发可能会很高；有的服务属于重业务轻框架，这个时候框架的并发可能会很低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果只是想看一下框架的性能，可以使用常规的场景：&lt;strong&gt;长连接、较高连接使用率、1k body、100 并发&lt;/strong&gt;等。&lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; 仓库默认的压测配置也是如此。
同时 &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; 仓库也开发给用户 header、body、并发数的配置，用户可以方便的修改这些配置完成贴合自己的压测。&lt;/p&gt;
&lt;h3 id="确定压测对象"&gt;确定压测对象&lt;/h3&gt;
&lt;p&gt;衡量一个 RPC 框架的性能需要从两个视角分别去思考：Client 视角与 Server 视角。在大规模的业务架构中，上游 Client 不见得使用的也是下游的框架，而开发者调用的下游服务也同样如此，如果再考虑到 Service Mesh 的情况就更复杂了。&lt;/p&gt;
&lt;p&gt;一些压测项目通常会把 Client 和 Server 进程混部进行压测，然后得出&lt;strong&gt;整个框架&lt;/strong&gt;的性能数据，这其实和线上实际运行情况很可能是不符的。&lt;/p&gt;
&lt;p&gt;如果要压测 Server，应该给 Client 尽可能多的资源，把 Server 压到极限，反之亦然。如果 Client 和 Server 都只给了 4 核 CPU 进行压测，会导致开发者无法判断最终得出来的性能数据是哪个视角下的，更无法给线上服务做实际的参考。&lt;/p&gt;
&lt;h3 id="使用独占-cpu"&gt;使用独占 CPU&lt;/h3&gt;
&lt;p&gt;虽然线上应用通常是多个进程共享 CPU，但在压测场景下，Client 与 Server 进程都处于极端繁忙的状况，此时共享 CPU 会导致大量上下文切换，从而使得数据缺乏可参考性，且容易产生前后很大波动。&lt;/p&gt;
&lt;p&gt;所以我们建议是将 Client 与 Server 进程隔离在不同 CPU 或者不同独占机器上进行。如果还想要进一步避免其他进程产生影响，可以再加上 nice -n -20 命令调高压测进程的调度优先级。&lt;/p&gt;
&lt;p&gt;另外如果条件允许，相比云平台虚拟机，使用真实物理机会使得测试结果更加严谨与具备可复现性。&lt;/p&gt;
&lt;h2 id="性能数据参考"&gt;性能数据参考&lt;/h2&gt;
&lt;p&gt;在满足上述要求的前提下，我们基于当前最新版本对多个框架进行了压测对比，压测代码在 &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; 仓库。
在充分压满 Server 的目标下，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的 P99 延迟在所有压测框架中最低，吞吐也是属于第一梯队，且在持续优化中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: AMD EPYC 7Y83 64-Core Processor 2.7GHz
&lt;ul&gt;
&lt;li&gt;运行限定 server 4-CPUs，client 16-CPUS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS：Debian GNU/Linux 10 (buster)&lt;/li&gt;
&lt;li&gt;Go 1.19&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.3.2"&gt;hertz v0.3.2&lt;/a&gt;，&lt;a href="https://github.com/valyala/fasthttp/releases/tag/v1.40.0"&gt;fasthttp v1.40.0&lt;/a&gt;，
&lt;a href="https://github.com/gin-gonic/gin/releases/tag/v1.8.1"&gt;gin v1.8.1&lt;/a&gt;，&lt;a href="https://github.com/gofiber/fiber/releases/tag/v2.38.1"&gt;fiber v2.38.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Hertz-benchmark/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p align="center"&gt;四个框架的吞吐和时延比较&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Hertz-benchmark/2.png" alt="image"&gt;&lt;/p&gt;
&lt;p align="center"&gt;三个框架的吞吐和时延比较&lt;/p&gt;
&lt;h2 id="结语"&gt;结语&lt;/h2&gt;
&lt;p&gt;作为一个超大规模企业级的微服务 HTTP 框架，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 在设计之初就更倾向于解决大规模微服务场景下的各种问题。在推广过程中也遇到了各种各样的服务，踩了各种各样的坑，也是基于以上经验写了本文。
欢迎广大开发者基于本文提供的测试指南，针对自己的实际场景选择合适的工具。更多问题，请在 GitHub 上提 &lt;a href="https://github.com/cloudwego/hertz/issues"&gt;Issue&lt;/a&gt; 交流。&lt;/p&gt;</description></item><item><title>Blog: Volo 0.3.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/02/07/volo-0.3.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/02/07/volo-0.3.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.3.2 版本中，除了常规 bugfix 之外，还有多处改进。尤其是，有社区贡献者为我们带来了重要的 feature，非常感谢他们。&lt;/p&gt;
&lt;h2 id="thrift-异步编解码-trait-支持"&gt;Thrift 异步编解码 Trait 支持&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ii64"&gt;@ii64&lt;/a&gt; 在 &lt;a href="https://github.com/cloudwego/volo/pull/123"&gt;#123&lt;/a&gt; 中为我们带来了 Thrift 异步编解码 Trait 的定义和 Binary、Apache Compact Protocol 的实现，在此之前他还为 Pilota 贡献了编解码的底层实现！&lt;/p&gt;
&lt;h2 id="grpc-graceful-shutdown-支持"&gt;gRPC graceful shutdown 支持&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/iGxnon"&gt;@iGxnon&lt;/a&gt; 在 &lt;a href="https://github.com/cloudwego/volo/pull/127"&gt;#127&lt;/a&gt; 中为我们带来了 gRPC graceful shutdown 的支持！&lt;/p&gt;
&lt;h2 id="metainfo-与-faststr-版本更新"&gt;metainfo 与 faststr 版本更新&lt;/h2&gt;
&lt;p&gt;在这个版本中，我们更新了 metainfo 和 faststr 的版本，使得 metainfo 也支持了 faststr，以在尽可能多的场景下减少内存分配和拷贝，以优化性能。&lt;/p&gt;
&lt;p&gt;faststr 是我们参考 smol_str 改进的一个 string 库，实现了 immutable string 的零开销 clone。&lt;/p&gt;
&lt;p&gt;同时 FastStr 有一个不兼容变更：之前是为所有&lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt;实现了&lt;code&gt;From&lt;/code&gt;，但是这样做会导致直接使用&lt;code&gt;into&lt;/code&gt;会带来额外的内存分配和拷贝开销。
在新的 0.2 版本中，我们只为 &lt;code&gt;'static str&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;/code&gt;、&lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt;四种类型实现了&lt;code&gt;From&lt;/code&gt;，这四种类型调用 &lt;code&gt;into&lt;/code&gt; 到 FastStr 是零开销的，通过这种形式避免用户不经意间带来的内存分配和拷贝问题。&lt;/p&gt;
&lt;p&gt;旧版本的&lt;code&gt;From&lt;/code&gt;本质上就是调用了&lt;code&gt;FastStr::new(s)&lt;/code&gt;，因此出现不兼容问题的话，直接改为显式调用&lt;code&gt;FastStr::new&lt;/code&gt;即可。&lt;/p&gt;
&lt;h2 id="pilota-中-protobuf-编解码支持生成-faststr"&gt;Pilota 中 Protobuf 编解码支持生成 FastStr&lt;/h2&gt;
&lt;p&gt;通过在 Pilota 中支持为 Protobuf 编解码生成 FastStr，我们可以将我们的性能优化能力带到 PB 和 gRPC 中。&lt;/p&gt;
&lt;p&gt;升级后，需要把原先引入的&lt;code&gt;use prost::Message;&lt;/code&gt;改为&lt;code&gt;use pilota::prost::message::Message;&lt;/code&gt;即可。&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;a href="https://github.com/cloudwego/volo/compare/volo-0.3.0...volo-0.3.2"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Hertz v0.5.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/01/12/hertz-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/01/12/hertz-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Hertz 0.5.0 版本中，除了常规迭代优化之外，我们还带来了多个重要 feature。&lt;/p&gt;
&lt;h2 id="网络层和协议层支持基于流的接口"&gt;网络层和协议层支持基于流的接口&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/467"&gt;https://github.com/cloudwego/hertz/pull/467&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在 Hertz v0.5.0 版本中，我们进一步加强了 Hertz 传输层 &amp;amp; 协议层可扩展能力，支持无缝对接基于流的传输层协议 QUIC，以及在此之上构建的 &lt;a href="https://github.com/cloudwego/hertz/issues/458"&gt;HTTP3 协议。&lt;/a&gt;
此外，我们在此基础上还增加和完善了 &amp;ldquo;ALPN&amp;rdquo;(应用层协议协商)、&amp;ldquo;QUIC/TLS parallel monitoring&amp;rdquo;(QUIC/TLS并行监听)、&amp;ldquo;Alt-Svc&amp;rdquo;(备选服务) 等功能。&lt;/p&gt;
&lt;h3 id="主要变更"&gt;主要变更&lt;/h3&gt;
&lt;h4 id="传输层"&gt;传输层&lt;/h4&gt;
&lt;p&gt;我们在保证兼容性能的基础之上增加了一个针对基于流（stream-based）的网络连接接口抽象&lt;code&gt;StreamConn&lt;/code&gt;，同时调整传输层和协议层的交互逻辑，实现针对连接类型的分发正确的协议层处理（protocol server）。
针对需要同时监听监听 TCP（TLS）以及 UDP(QUIC)的场景我们提供了一个&lt;code&gt;WithAltTransporter&lt;/code&gt;选项，方便将备用 transporter 传递到主 transporter 中，便于实现 QUIC/TLS 并行监听的能力。&lt;/p&gt;
&lt;h4 id="协议层"&gt;协议层&lt;/h4&gt;
&lt;p&gt;支持添加基于流的协议层实现（protocol server）&lt;code&gt;StreamServer&lt;/code&gt;，以便于在新增的基于流的传输层扩展之上构建对应处理协议（HTTP/3）。
为了便捷的实现为某个主协议（HTTP/3）配置备选服务元信息，&lt;code&gt;ProtocolSuite&lt;/code&gt;对外暴露&lt;code&gt;SetAltHeader&lt;/code&gt;接口。
同时，我们也为&lt;code&gt;StreamConn&lt;/code&gt;设计了 ALPN 能力，以便于在 QUIC 内提供协议协商的能力。&lt;/p&gt;
&lt;h4 id="通用层"&gt;通用层&lt;/h4&gt;
&lt;p&gt;同时我们在通用层中新增了能够与 Golang 标准 Handler 进行转换的辅助函数，以便于快速的将基于 Golang 标准 Handler 实现移植到 Hertz 中来。在之后提供的基于 &lt;a href="https://github.com/lucas-clemente/quic-go"&gt;quic-go&lt;/a&gt; 的 &lt;a href="https://github.com/hertz-contrib/http3/pull/1"&gt;QUIC &amp;amp; HTTP/3 扩展&lt;/a&gt;中，就用到了这个函数提供的能力。&lt;/p&gt;
&lt;h4 id="feature-状态"&gt;Feature 状态&lt;/h4&gt;
&lt;p&gt;Hertz 核心库能力已经发布，具体实现后续将以&lt;a href="https://github.com/hertz-contrib/http3/pull/1"&gt;扩展包&lt;/a&gt;的形式发布，欢迎试用~&lt;/p&gt;
&lt;p&gt;更多详细的设计说明可以参考：&lt;a href="https://www.cloudwego.io/zh/blog/2023/08/02/hertz-%E6%94%AF%E6%8C%81-quic-http/3/"&gt;Hertz 支持 QUIC &amp;amp; HTTP/3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="脚手架工具支持生成-hertz-client-代码"&gt;脚手架工具支持生成 hertz client 代码&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/471"&gt;https://github.com/cloudwego/hertz/pull/471&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在脚手架工具(Hz)的 v0.5.0 的版本，我们支持了基于 IDL 自动生成 hertz client 代码的功能，并实现了类 RPC 调用形式的 HTTP 请求一键调用。
使用方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体详见：https://github.com/cloudwego/hertz-examples/tree/main/hz_client&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;定义 IDL&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;namespace&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;go&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;toutiao&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;middleware&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;hzClient&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryReq&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryValue&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;query&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;query1&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Hertz121&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryMethod&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryReq&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;get&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;/query&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;handler_path&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;base_domain&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;http://127.0.0.1:8888&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;生成代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可基于上述 IDL，分别生成 server 和 client 端代码：&lt;/p&gt;
&lt;p&gt;server：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;hz&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;idl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;psm&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;handler_by_method&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;t&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;template&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;slim&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;client：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;hz&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;idl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;psm&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;model_dir&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;hertz_gen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;t&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;template&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;slim&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;client_dir&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;hz_client&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;调用 client 代码发起 HTTP 请求，实现 client 端和 server 端的互通&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.5.0"&gt;https://github.com/cloudwego/hertz/releases/tag/v0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hz(脚手架): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.5.0"&gt;https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo 0.3.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/12/22/volo-0.3.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/12/22/volo-0.3.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p&gt;Volo 0.3.0 版本中，除了常规 bugfix 之外，我们还带来了多个重要 feature。&lt;/p&gt;
&lt;h2 id="service-trait-重构"&gt;Service Trait 重构&lt;/h2&gt;
&lt;p&gt;Volo 0.3.0 版本中，我们对 Service Trait 进行了重构，使得 Service Trait 的实现更加简单，同时也提供了更多的灵活性。&lt;/p&gt;
&lt;p&gt;具体来看，我们将 Service Trait 的定义从：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// The future response value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;: &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改为了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// The future response value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;: &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最明显的改动是，Service Trait 的方法 call() 的 self 参数由 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 改为了 &lt;code&gt;&amp;amp;self&lt;/code&gt;。这样做的目的是，之前依赖 &lt;code&gt;&amp;amp;mut self&lt;/code&gt; 的话，在调用之前就得 clone 拿所有权才行，需要 Service 用户自己保证 Clone 的开销低；实际上，这个 clone 是完全没必要的，这个决策应该交给用户自己决定，如果真的有需求改变内部状态的话，自己内部加锁或者用 atomic 即可，这样可以节省 clone 的开销。&lt;/p&gt;
&lt;h2 id="grpc-多-service-支持"&gt;gRPC 多 Service 支持&lt;/h2&gt;
&lt;p&gt;在这个版本中，我们还支持了 gRPC 服务端同时支持多个 Service 的场景，并且每个 Service 都可以有自己的 layer；当然，Server 也可以有全局有效的 layer。&lt;/p&gt;
&lt;p&gt;如果某个中间件需要感知到 Request / Response 的具体类型并且做处理的，或者只针对单个 Service 的，那么可以添加为 Service 自己的 layer 即可。&lt;/p&gt;
&lt;p&gt;这是一个 breaking change，使用之前版本的用户可能需要修改一下代码，具体来说需要从这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[volo::main]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;: &lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;[::]:8080&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;parse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;Address&lt;/span&gt;::&lt;span style="color:#000"&gt;from&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;proto_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;hello&lt;/span&gt;::&lt;span style="color:#000"&gt;HelloServiceServer&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;run&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;use&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;std&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;use&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_grpc&lt;/span&gt;::&lt;span style="color:#000"&gt;server&lt;/span&gt;::&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#000"&gt;Server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceBuilder&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;};&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[volo::main]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;: &lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;[::]:8080&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;parse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;Address&lt;/span&gt;::&lt;span style="color:#000"&gt;from&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Server&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;add_service&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceBuilder&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;volo_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;proto_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;hello&lt;/span&gt;::&lt;span style="color:#000"&gt;GreeterServer&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)).&lt;/span&gt;&lt;span style="color:#000"&gt;build&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;run&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="grpc-compression"&gt;gRPC Compression&lt;/h2&gt;
&lt;p&gt;感谢&lt;a href="https://github.com/tuchg"&gt;@tuchg&lt;/a&gt;在&lt;a href="https://github.com/cloudwego/volo/pull/91"&gt;#91&lt;/a&gt;中为我们带来了 gRPC 的压缩和解压缩支持，如果对于传输大小有要求的场景，可以使用这个功能。&lt;/p&gt;
&lt;h2 id="thrift-codec-重构"&gt;Thrift Codec 重构&lt;/h2&gt;
&lt;p&gt;在之前的 Codec 设计中，Thrift 的编解码指定的方式是通过&lt;code&gt;CodecType&lt;/code&gt;来指定，这样带来了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无法很轻松地扩展新的协议支持，所有的支持的协议都需要在框架中实现并硬编码到 CodecType 中；&lt;/li&gt;
&lt;li&gt;无法将 Transport 和 Serialize 协议进行解耦和排列组合，举个例子，如果我们想要支持 TCompact 协议，那么我们就需要增加多个变体：TTHeaderFramedCompact、TTheaderCompact、FramedCompact、Compact……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时，之前的编解码没有做到 Zero Copy，性能上也有可以提升的空间。&lt;/p&gt;
&lt;p&gt;这次的重构，一次性的解决了以上所有问题，我们不再依赖&lt;code&gt;CodecType&lt;/code&gt;来指定编解码方式，而是通过&lt;code&gt;make_codec&lt;/code&gt;这个接口来指定 Codec 的生成方式，这样我们就可以很轻松地扩展新的协议支持，同时也可以将 Transport 和 Serialize 协议进行解耦和排列组合。&lt;/p&gt;
&lt;p&gt;具体可以参考一下 &lt;a href="https://docs.rs/volo-thrift/latest/volo_thrift/codec/index.html"&gt;codec 的文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="thrift-生成代码默认字段变更"&gt;Thrift 生成代码默认字段变更&lt;/h2&gt;
&lt;p&gt;之前的生成代码中，binary 类型会生成 Vec&lt;u8&gt;，string 类型会生成 String，这会导致在解码和编码的时候都需要进行一次 clone，性能损耗较大；在这个版本中，我们将这两个类型默认生成的 Rust 类型改为了 Bytes 和 &lt;a href="https://docs.rs/faststr/latest/faststr/"&gt;FastStr&lt;/a&gt;，以此来实现全链路的 Zero Copy，因为在实践中我们观察到绝大多数 Request / Response 中的 binary 和 string 都是不会被修改的，而即使用户需要修改，也就是多一次 Clone 的代价，并不会比之前性能更差。&lt;/p&gt;
&lt;p&gt;这是一个 breaking change，使用之前版本的用户在升级后可能会需要修改一下代码，一般来说只需要根据报错信息修改一下类型即可。&lt;/p&gt;
&lt;p&gt;如果仍旧有需求要针对 string 生成 String 的话，可以在 thrift idl 文件中的对应字段加一个&lt;code&gt;pilota.rust_type=&amp;quot;string&amp;quot;&lt;/code&gt;的 annotation，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;name&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;pilota.rust_type&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，Pilota 还支持了其它的 Annotation，详情可以参考：&lt;a href="https://www.cloudwego.io/zh/docs/volo/pilota/#pilota-%E6%94%AF%E6%8C%81%E7%9A%84%E6%B3%A8%E8%A7%A3"&gt;Pilota 支持的注解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="完整-release-note"&gt;完整 Release Note&lt;/h2&gt;
&lt;p&gt;完整的 Release Note 可以参考：https://github.com/cloudwego/volo/releases/tag/volo-0.3.0&lt;/p&gt;</description></item><item><title>Blog: Netpoll v0.3.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/11/09/netpoll-v0.3.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/11/09/netpoll-v0.3.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feat"&gt;Feat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/206"&gt;#206&lt;/a&gt;] feat: 连接 Flush 接口支持写超时设置。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/182"&gt;#182&lt;/a&gt;] feat: 支持在 ipv6 only 环境下创建连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/200"&gt;#200&lt;/a&gt;] fix: 修复 #166 中的代码错误：close fd 没有正确的被 detach。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/196"&gt;#196&lt;/a&gt;] fix: 系统 io 调用使用 int32 存储 size, 超限调用会导致 EINVAL。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/179"&gt;#179&lt;/a&gt;] fix: 修复 buffer 长度 int32 溢出的问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/183"&gt;#183&lt;/a&gt;] fix: 当 EPOLLERR 发生时，跳过检查 EPOLLOUT。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Proxyless 之流量路由：配合 Istio 与 OpenTelemetry 实现全链路泳道</title><link>https://www.cloudwego.io/zh/blog/2022/11/08/kitex-proxyless-%E4%B9%8B%E6%B5%81%E9%87%8F%E8%B7%AF%E7%94%B1%E9%85%8D%E5%90%88-istio-%E4%B8%8E-opentelemetry-%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%93%BE%E8%B7%AF%E6%B3%B3%E9%81%93/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/11/08/kitex-proxyless-%E4%B9%8B%E6%B5%81%E9%87%8F%E8%B7%AF%E7%94%B1%E9%85%8D%E5%90%88-istio-%E4%B8%8E-opentelemetry-%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%93%BE%E8%B7%AF%E6%B3%B3%E9%81%93/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;导语：Kitex Proxyless 是 Kitex 服务能够不借助 envoy sidecar 直接与 istiod 交互，基于 xDS 协议动态获取控制面下发的服务治理规则，并转换为 Kitex 对应规则来实现一些服务治理功能，如流量路由。基于 Kitex Proxyless，能够实现 Kitex 无需代理就可以被 ServiceMesh 统一管理，进而实现多种部署模式下的治理规则 Spec、治理控制面、治理下发协议、异构数据治理能力的统一。本文在 biz-demo 中使用 Kitex 和 Hertz 重写 bookinfo 项目，以实战的方式演示了如何使用 xDS 实现全链路的流量泳道。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="01-引言"&gt;01 引言&lt;/h2&gt;
&lt;h3 id="kitex-proxyless"&gt;&lt;strong&gt;Kitex Proxyless&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 是字节开源的 Golang RPC 框架，已经原生支持了 xDS 标准协议，支持以 Proxyless 的方式被 ServiceMesh 统一纳管。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;详细设计见：
&lt;a href="https://github.com/cloudwego/kitex/issues/461"&gt;Proposal: Kitex support xDS Protocol · Issue #461 · cloudwego/kitex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;具体使用方式见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/xds/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Proxyless&lt;/strong&gt; 简单来说就是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 服务能够不借助 envoy sidecar 直接与 istiod 交互，基于 xDS 协议动态获取控制面下发的服务治理规则，并转换为 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 对应规则来实现一些服务治理功能（例如本文的重点：&lt;strong&gt;流量路由&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;基于 &lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Proxyless&lt;/strong&gt;，让我们实现 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 能够无需代理就可以被 ServiceMesh 统一管理，进而实现多种部署模式下的&lt;strong&gt;治理规则 Spec、治理控制面、治理下发协议、异构数据治理能力&lt;/strong&gt;的统一。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/1.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="流量路由"&gt;流量路由&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;流量路由是指，能够将流量&lt;strong&gt;根据其自身特定的元数据标识路由&lt;/strong&gt;到指定目的地。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;流量路由属于服务治理中比较核心的能力之一，也是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Proxyless 优先支持的场景之一。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 基于 xDS 实现&lt;strong&gt;流量路由&lt;/strong&gt;的方案大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/2.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;具体流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加一个 &lt;strong&gt;xDS Router MW&lt;/strong&gt; 来负责 Pick Cluster（路由），并 watch 目标服务的 LDS 及 RDS。&lt;/li&gt;
&lt;li&gt;感知 LDS 变化，并提取目标服务的 LDS 中的 Filter Chain 及其 inline RDS。&lt;/li&gt;
&lt;li&gt;感知 RDS 变化，根据 &lt;strong&gt;&lt;code&gt;VirtualHost&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;ServiceName&lt;/code&gt;&lt;/strong&gt; 来匹配（支持前缀、后缀、精确、通配），获取目标服务的路由配置。&lt;/li&gt;
&lt;li&gt;遍历处理匹配到的 RDS 中的路由规则，路由规则主要分为两部分（参考：&lt;a href="https://github.com/envoyproxy/envoy/blob/v1.13.1/api/envoy/api/v2/route/route_components.proto#L349"&gt;路由规范定义&lt;/a&gt;）：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Match&lt;/strong&gt; （支持前缀、后缀、精确、通配等），目前版本我们支持以下两种即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Path（必须项）：从 &lt;code&gt;rpcinfo&lt;/code&gt; 提取 &lt;code&gt;Method&lt;/code&gt; 进行匹配；&lt;/li&gt;
&lt;li&gt;HeaderMatcher（可选项）：从 metainfo 中提取对应元数据 KeyValue，并进行匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Route：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cluster&lt;/strong&gt; ：标准 Cluster。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WeightedClusters（权重路由）&lt;/strong&gt; ：MW 内根据权重来选择 cluster。&lt;/li&gt;
&lt;li&gt;将选择到的 Cluster 写入 &lt;code&gt;EndpointInfo.Tag&lt;/code&gt;，用于之后的服务发现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，流量路由其实是一个根据一定规则选择对应 SubCluster 的流程。&lt;/p&gt;
&lt;h2 id="02-全链路泳道"&gt;02 全链路泳道&lt;/h2&gt;
&lt;p&gt;基于流量路由能力，我们可以延伸出很多使用场景，如：A/B 测试、金丝雀发布、蓝绿发布等等，以及本文重点：&lt;strong&gt;全链路泳道&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;全链路泳道可以理解成是对一组服务实例按照一定方式进行拆分（例如部署环境），并基于全链路灰度路由能力，让流量能够精准按照规则在指定服务实例泳道中流动（逻辑上如同游泳场中的泳道）。&lt;/p&gt;
&lt;p&gt;在 Istio 中我们一般会通过 DestinationRule 的 subset 对实例进行分组，将一个服务拆分成不同子集（例如：按照版本、区域等属性拆分），然后配合 VirtualService 来定义对应的路由规则，将流量路由到对应子集中，从而完成泳道中的单跳路由能力。&lt;/p&gt;
&lt;p&gt;不过单单只有流量路由能力，还不足以实现&lt;strong&gt;全链路泳道&lt;/strong&gt;，因为当一个请求跨越多个服务的时候，我们需要有一个比较好的机制能够准确识别出该流量，并基于这个特征来为每一跳流量配置路由规则。&lt;/p&gt;
&lt;p&gt;如下图所示：假设我们要实现一个用户的请求能够精确灰度到 service-b 的 v1 版本。最先想到的做法可能是所有请求都带上 &lt;code&gt;uid = 100&lt;/code&gt; 的请求头，然后配置对应 VirtualService 来根据 header 里的 &lt;code&gt;uid = 100&lt;/code&gt; 匹配。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;但这样的做法有几个明显的缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;不够通用&lt;/strong&gt;：以具体某个业务属性标识（如：uid）作为流量路由匹配规则，我们需要将这个业务属性手动在全链路里透传，这本身对业务侵入性较大，需要业务配合改造。并且当我们要使用其他业务属性的时候，又需要全链路业务都改造一遍，可想而知，是非常不通用的做法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由规则容易频繁变动，容易造成规则臃肿&lt;/strong&gt;：以具体某个业务属性标识（如：uid）作为流量路由匹配规则，假设我们要换一个业务属性，或者给其他用户设置路由规则的时候，得去改造原有的路由规则，或者针对不同业务属性重复定义多套路由规则，很容易就会造成路由臃肿，以至于难以维护。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，要实现全链路的流量路由统一，我们还需要额外借助一个更通用的&lt;strong&gt;流量染色&lt;/strong&gt;与&lt;strong&gt;染色标识全链路透传&lt;/strong&gt;能力。&lt;/p&gt;
&lt;h3 id="流量染色"&gt;流量染色&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;流量染色是指对请求流量打上特殊标识，并在整个请求链路中携带这个标识，而所谓的全链路泳道，就是整个链路基于统一的灰度流量染色标识来设置流量路由规则，使得流量能够精准控制在不同泳道中。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;通常我们会在网关层进行流量染色，通常会根据原始请求中的元数据，来进行一定规则（条件、比例）转换成对应的染色标识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按条件染色&lt;/strong&gt;：当请求元数据满足一定条件之后，就给当前请求打上染色标识，如：请求头中 &lt;code&gt;uid = 100&lt;/code&gt;、cookie 匹配等等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按比例染色&lt;/strong&gt;：按照一定比例，给请求打上染色标识。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了一套统一的流量染色机制之后，我们配置路由规则的时候，就不需要关心具体的业务属性标识了，只需要根据&lt;strong&gt;染色标识&lt;/strong&gt;来配置即可。&lt;/p&gt;
&lt;p&gt;将具体的业务属性抽象成条件染色规则，使其更通用，即使业务属性发生了变化，路由规则也无需再频繁变动了。&lt;/p&gt;
&lt;h3 id="染色标识全链路透传"&gt;染色标识全链路透传&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;染色标识通常会依靠 Tracing Baggage 来透传，Baggage 是用于在整个链路中传递业务自定义 KV 属性，例如传递流量染色标识、传递 AccountID 等业务标识等等。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;要实现流量染色标识在全链路透传，我们通常会借助 Tracing Baggage 机制，在全链路中传递对应染色标识，大部分 Tracing 框架都支持 Baggage 概念机能力，如：OpenTelemetry、Skywalking、Jaeger 等等。&lt;/p&gt;
&lt;p&gt;有了一套通用的全链路透传机制，业务方就只需要接入一遍 tracing 即可，无需每次业务属性标识发生变化就配合改造一次。&lt;/p&gt;
&lt;p&gt;下面会借助一个&lt;strong&gt;具体的工程案例&lt;/strong&gt;介绍，来介绍并演示如何基于 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Proxyless 和 OpenTelemetry Baggage 实现全链路泳道功能。&lt;/p&gt;
&lt;h2 id="03-案例介绍bookinfo"&gt;03 案例介绍：Bookinfo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;该案例是使用 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;、&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 重写经典的 &lt;a href="https://istio.io/latest/zh/docs/examples/bookinfo/"&gt;Istio Bookinfo&lt;/a&gt; 项目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 istiod 来作为 &lt;strong&gt;xDS server&lt;/strong&gt;，作为 CRD 配置和下发的入口；&lt;/li&gt;
&lt;li&gt;使用 wire 来实现&lt;strong&gt;依赖注入&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;使用 opentelemetry 来实现&lt;strong&gt;全链路追踪&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;使用 &lt;a href="https://github.com/kitex-contrib/xds"&gt;Kitex-xds&lt;/a&gt; 和 opentelemetry baggage 来实现 &lt;strong&gt;proxyless&lt;/strong&gt; 模式下的全链路泳道;&lt;/li&gt;
&lt;li&gt;使用 arco-design 和 react 实现一个 &lt;strong&gt;&lt;a href="https://github.com/cloudwego/biz-demo/blob/main/bookinfo/README_CN.md"&gt;Bookinfo&lt;/a&gt; UI&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id="架构"&gt;架构&lt;/h3&gt;
&lt;p&gt;整体架构与 &lt;a href="https://github.com/cloudwego/biz-demo/blob/main/bookinfo/README_CN.md"&gt;Bookinfo&lt;/a&gt; 保持一致，分为四个单独的微服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;productpage.&lt;/code&gt; 这个微服务会调 &lt;code&gt;details&lt;/code&gt; 和 &lt;code&gt;reviews&lt;/code&gt; 两个微服务；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;details.&lt;/code&gt; 这个微服务中包含了书籍的信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reviews.&lt;/code&gt; 这个微服务中包含了书籍相关的评论。它还会调用 &lt;code&gt;ratings&lt;/code&gt; 微服务；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ratings.&lt;/code&gt; 这个微服务中包含了由书籍评价组成的评级信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; 微服务有 3 个版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v1 版本会调用 &lt;code&gt;ratings&lt;/code&gt; 服务，并使用 1 颗 ⭐️ 显示评分；&lt;/li&gt;
&lt;li&gt;v2 版本会调用 &lt;code&gt;ratings&lt;/code&gt; 服务，并使用 5 颗 ⭐️⭐️⭐️⭐️⭐️⭐️ 显示评分；&lt;/li&gt;
&lt;li&gt;v3 版本不会调用 &lt;code&gt;ratings&lt;/code&gt; 服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/5.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="泳道示意图"&gt;泳道示意图&lt;/h3&gt;
&lt;p&gt;整体区分成 2 个泳道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基准泳道&lt;/strong&gt;：未被染色的流量会被路由到基准泳道中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分支泳道&lt;/strong&gt;：被染色的流量会被路由到 reviews-v2 -&amp;gt;ratings-v2 的分支泳道中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/6.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="流量染色-1"&gt;流量染色&lt;/h3&gt;
&lt;p&gt;网关统一负责对流量进行染色，例如请求 header 中 uid=100 的流量都统一进行染色，为请求携带上 &lt;code&gt;env=dev&lt;/code&gt; 的 &lt;strong&gt;baggage&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/7.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;染色方式可以根据不同的网关实现具体选择，例如当我们选择 istio ingress 作为网关的时候，我们可以借助 &lt;code&gt;EnvoyFilter&lt;/code&gt; + &lt;code&gt;Lua&lt;/code&gt; 的方式来编写网关染色规则。&lt;/p&gt;
&lt;h3 id="为服务实例打标"&gt;为服务实例打标&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;为对应 &lt;strong&gt;workload&lt;/strong&gt; 打上对应 version 标识。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以 reviews 为例，只需要给对应 pod 打上 version: v1 的 label 即可。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/8.png" alt="image"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;基于 &lt;strong&gt;DestinationRule&lt;/strong&gt; 为服务设置一系列的 subsets：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Productpage: v1&lt;/li&gt;
&lt;li&gt;Reviews: v1、v2、v3&lt;/li&gt;
&lt;li&gt;Ratings: v1、v2&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="流量路由规则"&gt;流量路由规则&lt;/h3&gt;
&lt;p&gt;网关已经将请求头中携带了 &lt;code&gt;uid=100&lt;/code&gt; 的流量进行了染色，自动带上了 &lt;code&gt;env=dev&lt;/code&gt; 的 baggage，因此我们只需要根据 header 进行路由匹配即可，下面是具体的路由规则配置示例：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="查看效果"&gt;查看效果&lt;/h3&gt;
&lt;h4 id="基准泳道"&gt;基准泳道&lt;/h4&gt;
&lt;p&gt;入口流量请求头中不带 &lt;code&gt;uid=100&lt;/code&gt; 的请求，会自动路由到基准泳道服务，reviews v1 和 v3 服务间轮询，展示的效果是评分为 0 或 1 随机。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/11.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="分支泳道"&gt;分支泳道&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;我们这边通过浏览器 mod-header 插件，来模拟入口流量请求头中携带了 &lt;code&gt;uid=100&lt;/code&gt; 的场景。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/12.png" alt="image"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;再点击刷新按钮，可以发现请求打到了分支泳道，流量泳道功能成功生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/13.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="04-总结与展望"&gt;04 总结与展望&lt;/h2&gt;
&lt;p&gt;至此我们已经基于 &lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Proxyless&lt;/strong&gt; 与 &lt;strong&gt;OpenTelemetry&lt;/strong&gt; 实现了一个完整的全链路泳道，并且无需借助 Envoy sidecar，就能基于 Isito 标准治理规则 Spec，来为 Kitex 设置对应的路由规则了。&lt;/p&gt;
&lt;p&gt;当然，除了满足&lt;strong&gt;流量路由&lt;/strong&gt;能力之外，&lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Proxyless&lt;/strong&gt; 也在持续迭代优化，满足更多数据面治理能力需求。Proxyless 作为一种 ServiceMesh 数据面探索和实践，除了能够丰富网格数据面部署形态之外，也希望可以不断打磨 &lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;&lt;/strong&gt;，增强其在开源生态兼容方面的能力，打造一个开放包容的微服务生态体系。&lt;/p&gt;
&lt;h2 id="05-相关项目链接"&gt;05 相关项目链接&lt;/h2&gt;
&lt;p&gt;下面是该案例涉及的项目清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;biz-demo: &lt;a href="https://github.com/cloudwego/biz-demo"&gt;https://github.com/cloudwego/biz-demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex: &lt;a href="https://github.com/cloudwego/kitex"&gt;https://github.com/cloudwego/kitex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hertz: &lt;a href="https://github.com/cloudwego/hertz"&gt;https://github.com/cloudwego/hertz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex-xds: &lt;a href="https://github.com/kitex-contrib/xds"&gt;https://github.com/kitex-contrib/xds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex-opentelemetry: &lt;a href="https://github.com/kitex-contrib/obs-opentelemetry"&gt;https://github.com/kitex-contrib/obs-opentelemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hertz-opentelemetry: &lt;a href="https://github.com/hertz-contrib/obs-opentelemetry"&gt;https://github.com/hertz-contrib/obs-opentelemetry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该完整案例已提交在 &lt;a href="https://github.com/cloudwego/biz-demo"&gt;biz-demo&lt;/a&gt; 仓库中，感兴趣的同学可以前往查阅。&lt;a href="https://github.com/cloudwego/biz-demo"&gt;biz-demo&lt;/a&gt; 会包含一些基于 &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; 技术栈且具备一定业务场景的完整 Demo，初衷是能够为企业用户在生产中使用提供有价值的参考，非常欢迎更多同学能够参与到 &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; 相关场景与案例的贡献中来，一起来做一些有意思的尝试。&lt;/p&gt;</description></item><item><title>Blog: Kitex v0.4.3 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/11/02/kitex-v0.4.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/11/02/kitex-v0.4.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍"&gt;重要变更介绍&lt;/h2&gt;
&lt;h3 id="功能"&gt;功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;扩展 client/server 生成模板&lt;/strong&gt; ：新增 client/server 模板扩展功能，可以通过配置定制，适用于统一定制 suite 场景，详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/template_extension/"&gt;扩展 Service 代码生成模板&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务异常&lt;/strong&gt; ：新增业务自定义异常支持，可区分于 RPC 异常返回 error，使用详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/bizstatuserr/"&gt;业务异常&lt;/a&gt;，背景详见&lt;a href="https://github.com/cloudwego/kitex/issues/511"&gt;Proposal&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求 Profiler&lt;/strong&gt; ：新增功能可用于为不同的 RPC 请求提供成本分析统计的能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context Middleware&lt;/strong&gt; : 新增 Context Middleware，用于请求粒度添加 Middleware。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="优化"&gt;优化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Frugal 性能优化&lt;/strong&gt; ：支持在创建 Client/Server 阶段进行 Frugal “预编译”，减少动态编译对延迟的影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接池优化&lt;/strong&gt; ：重构连接池，完善空闲连接清理能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="详细变更"&gt;详细变更&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/691"&gt;#691&lt;/a&gt;] feat(client): 为 Client 添加上下文中间件，用于请求粒度添加中间件。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/649"&gt;#649&lt;/a&gt;] feat(connpool): 长连接池的新实现，支持最小空闲连接数及空闲连接清理。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/672"&gt;#672&lt;/a&gt;] feat(grpc): 为 kitex grpc 添加了元信息传递相关 api，包括 header，tailer，以及 peer 远端地址的获取接口。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/613"&gt;#613&lt;/a&gt;] feat(exception): 支持用户自定义异常用以区分 RPC 异常。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/670"&gt;#670&lt;/a&gt;] feat(exception): 支持 DetailError 格式化。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/678"&gt;#678&lt;/a&gt;] feat(tool): 为 kitex cmd 添加 git 和 record 参数。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/662"&gt;#662&lt;/a&gt;] feat(tool): 支持在创建 client 或者 server 的时候进行 frugal “预编译” (pretouch)。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/657"&gt;#657&lt;/a&gt;] feat(tool): 支持模板拓展。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/527"&gt;#527&lt;/a&gt;] feat(profiler): 为不同的 RPC 请求提供成本分析统计的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/690"&gt;#690&lt;/a&gt;] optimize(meta): 移除 #503 添加 default metahandler 的错误逻辑。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/638"&gt;#638&lt;/a&gt;] optimize(generic): httppb 泛化支持 map/list 元素类型为 struct。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/641"&gt;#641&lt;/a&gt;] optimize(tool): 给 oneway 方法增加警告注释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/611"&gt;#611&lt;/a&gt;] fix(client): 在频繁重复创建 Client 场景下，修复由于 finalizer 未触发执行导致的资源泄漏。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/698"&gt;#698&lt;/a&gt;] fix(connpool): 根据 Get 返回的连接数减少值来调整 globalIdle。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/636"&gt;#636&lt;/a&gt;] fix(connpool): 修复当连接池在 &lt;code&gt;ForwardProxy&lt;/code&gt; 实现中被重置后，连接池的 CloseCallback、统计上报失效的问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/647"&gt;#647&lt;/a&gt;] fix(grpc): 修复 grpc 连接级别窗口初始化时没有通知对端的问题，并同步了 grpc pr #5459。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/639"&gt;#639&lt;/a&gt;] fix(generic): 泛化调用支持 list&lt;byte&gt; 类型，map 读泛化增加 forJSON 选项。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/655"&gt;#655&lt;/a&gt;] fix(generic): 数值型常量作为泛化默认值时无法被正确解析。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/654"&gt;#654&lt;/a&gt;] fix(frugal): 修复较低版本 go 编译失败的问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/682"&gt;#682&lt;/a&gt;] fix(profiler): 修复 profiler 停止 pprof profile 采集的问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/637"&gt;#637&lt;/a&gt;] fix(tool): 修复 handler.go 模板里的 imports。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/630"&gt;#630&lt;/a&gt;] fix(tool): 对于没有声明 “service” 的 pb 文件，去掉生成文件末尾冗余的 kitex 声明。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/627"&gt;#627&lt;/a&gt;] fix(tool): 修复当一个 import 拥有不同的别名时 import 会丢失的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/651"&gt;#651&lt;/a&gt;] refactor(server): 重构 server trans handler 的 read/write 接口，返回新的 context。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="docs"&gt;Docs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/656"&gt;#656&lt;/a&gt;] docs: 删除 CONTRIBUTING 文档中的错误信息。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/683"&gt;#683&lt;/a&gt;] docs(kerrors): 修改了 kerrors WithCauseAndExtraMsg 方法注释。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/625"&gt;#625&lt;/a&gt;] chore: 修正 pull request 模板的语法问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/623"&gt;#623&lt;/a&gt;] chore: 修改 pull request 模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test--ci"&gt;Test &amp;amp; CI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/646"&gt;#646&lt;/a&gt;] test: 修复 InitRPCInfoFunc 未设置 rpcinfo 导致的单测失败。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/680"&gt;#680&lt;/a&gt;] test: 修复重试单测的 race 问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/661"&gt;#661&lt;/a&gt;] test: 增强 wpool 测试稳定性。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/643"&gt;#643&lt;/a&gt;] test: 为 detection server handler 添加测试。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/632"&gt;#632&lt;/a&gt;] test: 用 gomock 自动生成类替换手动编写的 mock 类。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/697"&gt;#697&lt;/a&gt;] chore(ci): 固定 skywalking-eyes 版本号。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/652"&gt;#652&lt;/a&gt;] chore(ci): 删除重复的测试，以减少单测所花费的时间。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/588"&gt;#588&lt;/a&gt;] chore(ci): 支持 codecov。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Hertz v0.4.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/10/28/hertz-v0.4.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/10/28/hertz-v0.4.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/289"&gt;#289&lt;/a&gt;] feat: render 支持 IndentedJSON。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/304"&gt;#304&lt;/a&gt;] feat: recovery 中间件支持用户自定义错误输出格式。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/278"&gt;#278&lt;/a&gt;] feat: 增加编译 tag 控制实际使用的 json 库。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/239"&gt;#239&lt;/a&gt;] feat: 给 client 扩展复杂重试能力。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/265"&gt;#265&lt;/a&gt;] feat: 在标准网络库扩展上添加 CloseNoResetBuffer 方法。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/258"&gt;#258&lt;/a&gt;] feat: 支持 &lt;code&gt;errors&lt;/code&gt; 的格式化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/295"&gt;#295&lt;/a&gt;] optimize: 服务端忽略客户端主动断连的写错误。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/322"&gt;#322&lt;/a&gt;] optimize: 修改 recovery 中间件的默认日志。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/266"&gt;#266&lt;/a&gt;] optimize(hlog): 区分系统日志和默认日志，提供更自由的 logger 定制化能力。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/280"&gt;#280&lt;/a&gt;] optimize: 使用标准库时 listen 前添加日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/318"&gt;#318&lt;/a&gt;] refactor: 添加 SetRetryIf 保持兼容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test"&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/299"&gt;#299&lt;/a&gt;] test: 提高对 &lt;code&gt;hertz/pkg/protocol/header&lt;/code&gt; 的单测覆盖率。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/290"&gt;#290&lt;/a&gt;] test: 为 &lt;code&gt;pkg/app/server/option.go&lt;/code&gt; 补充单元测试。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/274"&gt;#274&lt;/a&gt;] test: 增加 internal/bytesconv 包测试覆盖率，覆盖率从 1.68% 提高到了 82.35%。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/285"&gt;#285&lt;/a&gt;] test: 给 &lt;code&gt;pkg/protocol/request.go&lt;/code&gt; 文件单测覆盖率 51.31% 提高到 85.3%。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/271"&gt;#271&lt;/a&gt;] test: 为 &lt;code&gt;pkg/network&lt;/code&gt; 补充单元测试。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/264"&gt;#264&lt;/a&gt;] test: 增加对 &lt;code&gt;hertz/pkg/common/adaptor&lt;/code&gt; 的单测，覆盖率从 76.6% 提高到了 92.3%。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/267"&gt;#267&lt;/a&gt;] test(pkg/common/config): 增加 pkg/common/config 包测试覆盖率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/328"&gt;#328&lt;/a&gt;] docs: 添加 lark 扩展到 readme.md。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/325"&gt;#325&lt;/a&gt;] docs: 更新 README 和 README_cn 的性能数据。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/307"&gt;#307&lt;/a&gt;] docs(README): 将 Hertz 扩展添加到 readme 列表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="style"&gt;Style&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/316"&gt;#316&lt;/a&gt;] style: 去掉 license 顶层的空注释。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/272"&gt;#272&lt;/a&gt;] chore: 更新 sonic 版本。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/310"&gt;#310&lt;/a&gt;] chore: 修改注释信息为行注释避免 buildtag 格式问题的导致 ci 报错。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo v0.2.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/10/26/volo-v0.2.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/10/26/volo-v0.2.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/61"&gt;#61&lt;/a&gt;] 优化了 Volo-Thrift 的代码，移除了一些不必要的泛型参数，简化代码。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/63"&gt;#63&lt;/a&gt;] 跟进了 2022-10-20 后 nightly 编译器不再允许 TAIT elition lifetime 的问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/73"&gt;#73&lt;/a&gt;] 绕过了 Rust 编译器的 #100013 issue: non-defining opaque type use in defining scope。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/65"&gt;#65&lt;/a&gt;] feat: 升级 Volo-cli 的 clap 版本到 4.x。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/72"&gt;#72&lt;/a&gt;] feat: 为 volo::net::Conn 支持了 writev 操作。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo v0.2.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/10/18/volo-v0.2.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/10/18/volo-v0.2.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/31"&gt;#31&lt;/a&gt;] 支持 Windows。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/26"&gt;#26&lt;/a&gt;] volo-grpc 增加对 service discovery 和 load balance 的支持。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/45"&gt;#45&lt;/a&gt;] volo-grpc 支持 uds。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/32"&gt;#32&lt;/a&gt;] volo-grpc 支持 metainfo 进行元信息传递。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/30"&gt;#30&lt;/a&gt;] volo-grpc Server 增加 &lt;code&gt;layer_front&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/42"&gt;#42&lt;/a&gt;] volo-thrift 支持 multiplex。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/53"&gt;#53&lt;/a&gt;] 优化 &lt;code&gt;write_field_begin&lt;/code&gt; 函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/34"&gt;#34&lt;/a&gt;] 修复连接超时设置。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/46"&gt;#46&lt;/a&gt;] 增加对可重试错误的判断。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/33"&gt;#33&lt;/a&gt;] volo-grpc 修复对 Error 类型的约束。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: 助力字节降本增效，大规模企业级 HTTP 框架 Hertz 设计实践</title><link>https://www.cloudwego.io/zh/blog/2022/09/27/%E5%8A%A9%E5%8A%9B%E5%AD%97%E8%8A%82%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E4%BC%81%E4%B8%9A%E7%BA%A7-http-%E6%A1%86%E6%9E%B6-hertz-%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/09/27/%E5%8A%A9%E5%8A%9B%E5%AD%97%E8%8A%82%E9%99%8D%E6%9C%AC%E5%A2%9E%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E4%BC%81%E4%B8%9A%E7%BA%A7-http-%E6%A1%86%E6%9E%B6-hertz-%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h2 id="字节跳动内部-go-http-框架的变迁"&gt;字节跳动内部 Go HTTP 框架的变迁&lt;/h2&gt;
&lt;p&gt;在正式开始介绍第一部分的内容之前，先展示一组关键词。2020 年初 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 立项，2020 年 10 月，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 发布&lt;strong&gt;第一个可用版本&lt;/strong&gt; 。
&lt;strong&gt;2022 年 6 月，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 正式开源。&lt;/strong&gt; 截至目前，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 在字节内部已经支撑&lt;strong&gt;超过 1.4 万个业务服务&lt;/strong&gt; ， &lt;strong&gt;日峰值 QPS 超过 5000 万&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 不仅支持业务服务，同时还会横向支持字节内部的各种基础组件，包括但不限于字节跳动服务网格控制面、公司级别压测平台以及 FaaS，还包括各种业务网关等等。
&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的高性能和极强的稳定性可以支撑业务复杂多变的场景。在公司内部 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 接替了大量基于 Gin 框架开发的存量服务，大幅度降低了业务资源使用成本以及服务延时，助力公司层面的降本增效。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;下面我们可以从 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 出现的背景以及 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的设计目标和思路体会到，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的出现绝不是偶然。&lt;/p&gt;
&lt;h3 id="基于-gin-封装"&gt;基于 Gin 封装&lt;/h3&gt;
&lt;p&gt;众所周知，字节内部使用 Golang 比较早，在大约 2014 年左右，公司就已经开始尝试做一些 Golang 业务的转型。2016 年，我们基于已开源的 Golang HTTP 框架 Gin 框架，封装了 Ginex，这是 Ginex 刚开始出现的时期。&lt;/p&gt;
&lt;p&gt;同时，2016 年还是一个开荒的时代，这个时期框架伴随着业务快速野蛮地生长，我们的口号是“大力出奇迹”，把优先解决业务需求作为第一要务。Ginex 的迭代方式是业务侧和框架侧在同一个仓库里面共同维护和迭代。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/2.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="问题显现"&gt;问题显现&lt;/h3&gt;
&lt;p&gt;2017 - 2019 年期间，也就是 Ginex 发布之后，问题逐渐显现。主要有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;迭代受开源项目限制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ginex 是一个基于 Gin 的开源封装，所以它本身在迭代方面是受到一些限制的。一旦有针对公司级的需求开发，以及 Bugfix 等等，我们都需要和开源框架 Gin 做联合开发和维护，这个周期不能完全由我们自己控制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码混乱膨胀、维护困难&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于我们和业务同学共同开发和维护 Ginex 框架，因此我们对于控制整个框架的走向没有完全的自主权，从而导致了整体代码混乱膨胀，到后期我们发现越来越难维护。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无法满足性能敏感业务需求&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，我们能用 Gin 做的性能优化非常少，因为 Gin 的底层是基于 Golang 的一个原生库，所以如果我们要做优化，需要在原生库的基础上做很多改造，这个其实是非常困难的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无法满足不同场景的功能需求&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们内部逐渐出现了一些新的场景，因此会有对 HTTP Client 的需求，支持 Websocket、支持 HTTP/2 以及支持 HTTP/3 等等需求，而在原生的 Ginex 上还是很难扩展的这些功能需求。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/3.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="魔改开源框架"&gt;魔改开源框架&lt;/h3&gt;
&lt;p&gt;逐渐地，某些业务线开始做初步的尝试，他们会对另外的一些开源框架进行魔改。比较典型的例子是有一些业务线尝试基于 Fasthttp 进行魔改，Fasthttp 是一款主打高性能的开源框架，基于它进行魔改可以短期内帮助业务解决问题。
这种魔改现象带来的问题是，框架魔改是一些业务线自发的行为，各个业务线可能会基于自身业务特性进行各自维护，从而导致维护成本上升非常严重。&lt;/p&gt;
&lt;p&gt;到这里我们仿佛陷入了 Ginex 的怪圈。如前段时间爆火的电视剧《开端》一样，我们仿佛是从一辆开往学院南路的 45 路公交车上醒来，发现自己要前往公司进行下一代 Ginex 框架的维护工作。&lt;/p&gt;
&lt;p&gt;大家也可以思考一下，如果是你来应对这样的场景，你会怎么做呢？&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/4.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;第一章节的内容总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;早期基于开源框架封装&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于早期开源的 Golang HTTP 框架，实现了 Ginex 的封装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;随着实践发展，问题逐渐出现&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;框架混乱膨胀，框架的维护越来越困难，业务的新需求无法得到很好地满足。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为了解决问题出现基于另外的开源框架魔改的萌芽&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们需要思考如何跳出魔改的怪圈，把字节内部的企业级框架做得更好。&lt;/p&gt;
&lt;p&gt;另外，还有一个遗留问题，就是应该如何跳出这个魔改的怪圈呢？这个问题第二章节会为大家进行解答。&lt;/p&gt;
&lt;h2 id="企业级-http-框架的设计考量和落地思路"&gt;企业级 HTTP 框架的设计考量和落地思路&lt;/h2&gt;
&lt;h3 id="跳出怪圈"&gt;跳出怪圈&lt;/h3&gt;
&lt;p&gt;为了跳出魔改的怪圈，我们决定从以下三个方面开始着手。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自主研发&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然 Ginex 是因为基于开源框架 Gin，没法做一些灵活的控制，那我们就改为完全自主研发框架。自主研发框架的代码全链路自主可控，也可以避免引入任何三方不可控因素，这样我们能够对自己的框架有一个比较完备的掌控力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;质量控制&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图列举了一些常规的质量控制手段。我要着重强调的是模糊测试，模糊测试在字节内部是广泛应用于 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 框架的稳定性测试中。它的核心点在于 &lt;strong&gt;通过一系列的模拟服务，尝试模拟出线上用户在使用我们的框架时，
实际遇到的一些场景和使用方式&lt;/strong&gt; 。然后通过一些随机的算法，生成尽可能复杂、覆盖各种 Case 的场景，这可以让我们 &lt;strong&gt;检测出一些潜在的问题&lt;/strong&gt; 。这套测试也在 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 早期的质量建设中，帮助我们将一些问题防患于未然。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;严格准入&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然 Ginex 的问题是大家都在向里面写入内容，那么我们可以控制入口，建立一套完备的需求开发以及 Review 的闭环，控制迭代的整体流程，从而控制代码准入。同时我们配备统一的需求管理以及严格的发版准入规范，做一个标准的公司级别的框架。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/5.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;举一个比较形象的例子，如果我们把下一代框架比作一个人——“框架人”，自主研发表示这个“框架人”首先会拥有对自己身体的主导权，他不会受到来自于环境或者他人的影响；
质量控制表示“框架人”能够定期体检，提早发现一些潜在的疾病，将其扼杀于摇篮；严格准入表示“框架人”有科学的饮食摄入和自律的生活习惯。可想而知，如果我们能够做到以上三点，我们的“框架人”就能够拥有一个健康的体魄。&lt;/p&gt;
&lt;h3 id="痛点梳理"&gt;痛点梳理&lt;/h3&gt;
&lt;p&gt;明确了应该如何跳出怪圈之后，我们还应该明确知道这个框架要具备哪些功能和特性，也就是首先应该聚焦到框架的核心痛点上。“框架人”不能只有健康的体魄，还应该拥有有趣的思想和灵魂。
一个成熟的框架不仅仅要&lt;strong&gt;应对来自业务侧的需求&lt;/strong&gt; ，如功能需求、性能需求和易用稳定等，还要考虑&lt;strong&gt;框架自身的发展&lt;/strong&gt; ，而这一点恰恰是我们在 Ginex 的迭代过程中忽略的。&lt;/p&gt;
&lt;p&gt;如下图右侧金字塔所示，最上层是&lt;strong&gt;高效支撑&lt;/strong&gt; ，毋庸置疑框架的存在肯定是为了支撑我们的业务需求。中间层是一个&lt;strong&gt;质量保证&lt;/strong&gt;的红线框架，框架需要保证它自身的质量，
只有以高质量完成的框架才能有自信承担字节内部的 5000 万 QPS，以及各种各样的使用场景。金字塔的最底层是&lt;strong&gt;长期、可持续性发展&lt;/strong&gt; ，这也是作为未来想要保持持续迭代的框架最重要的一点。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/6.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="框架科学发展观"&gt;框架科学发展观&lt;/h3&gt;
&lt;p&gt;基于上一部分，我们可以进一步梳理出框架的需求痛点。&lt;strong&gt;痛点&lt;/strong&gt;主要有两个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多样的需求&lt;/strong&gt;：支撑支撑各个业务线及基础设施 （横向扩展性）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活的结构&lt;/strong&gt;：贯穿 HTTP 生命周期的掌控力 （纵向模块化）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在此基础上进一步抽象出框架的 &lt;strong&gt;科学发展观&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;聚类需求&lt;/strong&gt;：面向通用能力展开设计。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跳出局部&lt;/strong&gt;：针对一些复杂问题，在更大范围内寻求最优解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/7.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;后续我会针对这个科学发展观进一步阐述 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 究竟是如何实现的。&lt;/p&gt;
&lt;h3 id="小结-1"&gt;小结&lt;/h3&gt;
&lt;p&gt;第二章节的内容总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跳出怪圈&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引入“框架人”的概念，帮助大家理解框架的自研、质量控制和严格准入。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;痛点梳理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为“框架人”注入有趣的灵魂，框架需要应对来自业务侧的多样化需求，还要保证自己的可持续性发展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;框架科学发展观&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需求聚类，跳出局部。&lt;/p&gt;
&lt;h2 id="hertz-的核心特点"&gt;Hertz 的核心特点&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 框架是如何实现第二章节中提到的框架痛点和科学发展观的呢？本章节将具体进行介绍。&lt;/p&gt;
&lt;h3 id="分层抽象"&gt;分层抽象&lt;/h3&gt;
&lt;p&gt;首先介绍 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 框架的架构设计。下图是一个请求从建立、连接到完成的全过程。&lt;strong&gt;左侧是客户端，右侧是服务端&lt;/strong&gt; ，在我们发起链接建立请求之后，链接建立完成；
之后客户端发起请求到服务端，服务端进行路由处理，然后将路由导向业务逻辑处理；业务逻辑处理完毕后，服务端返回这个请求，完成一次 HTTP 请求的调用。&lt;/p&gt;
&lt;p&gt;那么在这个过程中我们的框架到底做了哪些事情呢？从图中不难发现，首先框架进行了&lt;strong&gt;链接处理&lt;/strong&gt; ，其次是&lt;strong&gt;协议处理&lt;/strong&gt; ，之后基于路由做了逻辑分发，
即&lt;strong&gt;路由处理&lt;/strong&gt; ，最后做了&lt;strong&gt;业务逻辑处理&lt;/strong&gt; 。我们把框架做成一个结构之后会发现，这个结构包含的就是这四部分。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/8.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;基于这个逻辑，我们可以看一下 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的整体架构图。如下图所示，从下往上看红线框圈住的部分，可以发现这就是上文提到的请求建立的全过程。各层的能力及作用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输层 Transport：抽象网络接口；&lt;/li&gt;
&lt;li&gt;协议层 Protocol：解析请求，渲染响应编码；&lt;/li&gt;
&lt;li&gt;路由层 Route：基于URL进行逻辑分发；&lt;/li&gt;
&lt;li&gt;应用层 Application：业务直接交互，出现大量 API。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以看到图中除了中间部分包含的四层，左右两侧各有两列。&lt;strong&gt;右侧是通用层 Common&lt;/strong&gt; ，主要负责&lt;strong&gt;提供通用能力、常用的日志接口、链路追踪以及一些配置处理相关的能力&lt;/strong&gt;等。
&lt;strong&gt;左侧是 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的代码生成工具 Hz，又称脚手架工具&lt;/strong&gt; ，它可以帮助我们在内部 &lt;strong&gt;基于 IDL 快速地生成项目骨架&lt;/strong&gt; ，以加速业务迭代。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/9.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的分层设计是能够和代码组织结构一一映射的。下图是 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 仓库里面的代码组织结构，可以看到根目录下的 cmd 包里面存放着 Hz 工具，
在 pkg 包下存放着上述主要四层以及通用层 Common。因此同学们看到架构设计图之后，可以直接在 Github 学习 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/10.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;总体来说，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的架构设计理念就是 &lt;strong&gt;“简洁有序，保证让所有开发者轻松理解，在开发的过程中持续贯彻”&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id="易用可扩展"&gt;易用可扩展&lt;/h3&gt;
&lt;p&gt;那么基于 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的架构设计，应该如何展开易用性和可扩展性呢？下图是 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 架构主要四个层级的抽象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用层提供了一些通用能力，包括&lt;strong&gt;绑定请求、响应渲染、服务发现/注册/负载均衡以及服务治理&lt;/strong&gt;等等。其中，&lt;strong&gt;洋葱模型中间件&lt;/strong&gt;的核心目的是让业务开发同学&lt;strong&gt;基于这个中间件快速地给业务逻辑进行扩展&lt;/strong&gt;，
扩展方式是可以在业务逻辑处理前和处理后分别插桩埋点做相应处理。一些比较有代表性的应用，包括日志打点、前置的安全检测，都是通过洋葱模型中间件进行处理的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;路由层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;路由层也是非常通用的，主要提供&lt;strong&gt;静态路由、参数路由、为路由配置优先级以及路由修复&lt;/strong&gt;的能力，如果我们的路由层没办法满足用户需求，
它还能支撑用户做&lt;strong&gt;自定义路由&lt;/strong&gt;的扩展。但实际应用中这些路由能力完全能够满足绝大多数用户的需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 同时提供 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 和 &lt;strong&gt;HTTP/2&lt;/strong&gt;，&lt;strong&gt;HTTP/3&lt;/strong&gt; 也是我们在建设中的能力，我们还会提供 &lt;strong&gt;Websocket 等 HTTP 相关的多协议支持&lt;/strong&gt; ，以及支持完全由业务决定的&lt;strong&gt;自定义协议层扩展&lt;/strong&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前我们已经内置了两个高性能的传输层实现。一个是&lt;strong&gt;基于 CloudWeGo 开源的高性能网络库 &lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt;&lt;/strong&gt; 的传输层扩展，另一个是支持&lt;strong&gt;基于标准库&lt;/strong&gt;的传输层扩展。此外，我们也同样能支持在传输层上进行&lt;strong&gt;自定义传输层协议扩展&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;下图每一层中标红的能力都能够体现出，我们能够在框架的任何一个分层上支撑用户做最大程度的自由定制，这样可以最大程度地满足企业级内部用户和潜在用户的业务需求。
如果同学们想要深入了解 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;，可以参考 CloudWeGo 官网的 &lt;a href="https://www.cloudwego.io/zh/docs/hertz/"&gt;Hertz&lt;/a&gt; 部分，上述所有内容均有具体描述。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/11.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="性能探索"&gt;性能探索&lt;/h3&gt;
&lt;p&gt;在性能方面，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 又是如何在自主可控的范围内做高性能探索的呢？&lt;/p&gt;
&lt;h4 id="场景描述"&gt;场景描述&lt;/h4&gt;
&lt;p&gt;熟悉 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 代码的同学会发现，我们的 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 协议借鉴了一些 Fasthttp 的优化思路和手段。HTTP/1.1 协议中的 Header 为不定长数据段，往往需要解析到最后一行，才能够确定是否完成解析。
同时，为了减少系统调用次数，提升整体解析效率，涉及 IO 操作时，我们通常引入带 buffer 的 IO 数据结构。如下图所示，它的核心点是最下层的 buffer，buffer 是一个类似于一块完整的内存空间，我们可以将 IO 读到的数据放进这个空间做暂存。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/12.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="bufioreader-的问题"&gt;bufio.Reader 的问题&lt;/h4&gt;
&lt;p&gt;这样做出现的问题是，原生的 bufio.Reader 长度是固定的，请求的 Header 大小超出 buffer 长度后，&lt;code&gt;.Peek()&lt;/code&gt; 方法直接报错 &lt;code&gt;(ErrBufferFull)&lt;/code&gt;，无法完成既定语义功能。&lt;/p&gt;
&lt;h4 id="一些可能的解"&gt;一些可能的解&lt;/h4&gt;
&lt;p&gt;对于上述问题，其实有一些可能的解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接利用 bufio.Reader 的局限当做 Feature，通过 buffer 大小作为 Header 大小的限制。如果超出这个大小，Header 直接解析报错，这也是 Fasthttp 的做法。
但实际上超出 buffer 长度后报错会导致我们没办法处理这部分请求，从而导致框架 &lt;strong&gt;功能受限&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;header 解析带状态，暂存中间数据，通过在上层堆叠额外复杂度的方式突破 bufio 本身的限制。但是暂存中间态会涉及到一些内存的拷贝，必然会导致 &lt;strong&gt;性能受限&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="真实使用环境复杂多变"&gt;真实使用环境复杂多变&lt;/h4&gt;
&lt;p&gt;字节内部的使用场景非常多，我们不仅要支持各种业务线的开发，还要支持一些横向的基础组件。不同的业务，不同的场景，数据规模各异。
如何成为通用且高效的地解决 bufio.Reader 的问题成为 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 面临的内部重要挑战。我们既然已经站在 Fasthttp 这个“巨人”的肩膀上了，能否往前再走一步呢？&lt;/p&gt;
&lt;p&gt;答案是肯定的。基于内部的使用场景，同时结合 &lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt; 的优势，我们设计出了 &lt;strong&gt;自适应 linked buffer&lt;/strong&gt; ，并且用它替代掉了原生的 bufio.Reader。
从下图可以看到，我们的 buffer 不再是一个固定长度的 buffer，而是一条链，这条链上的每一个 buffer 大小能够&lt;strong&gt;根据线上真实请求进行动态扩缩容调整&lt;/strong&gt; ，同时搭配 &lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt; 中&lt;strong&gt;基于 LT 触发的模型做数据预拷贝&lt;/strong&gt; 。
从实施效果上来看，这个自适应调整能够让我们的业务方完全无感地支撑任何他们的业务特性。也是因为我们能够将 buffer 进行动态扩缩容调整，从而能够保证在&lt;strong&gt;协议层最大程度做到零拷贝协议解析&lt;/strong&gt; ，这能够带来整体解析上的性能提升，时延也会更低。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/13.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="针对-http11-进行中的优化"&gt;针对 HTTP/1.1 进行中的优化&lt;/h4&gt;
&lt;p&gt;因为目前在字节内部 HTTP/1.1 还是一个比较主流的协议，所以我们基于 HTTP/1.1 做了很多尝试。&lt;/p&gt;
&lt;p&gt;首先是&lt;strong&gt;协议层探索&lt;/strong&gt; 。我们正在尝试基于 &lt;strong&gt;Header Passer 的重构&lt;/strong&gt; ，把解析 Header 的流程做得更高效。我们还尝试了做一些&lt;strong&gt;传输层预解析&lt;/strong&gt; ，将一些比较固化的逻辑下沉到传输层做加速。&lt;/p&gt;
&lt;p&gt;其次是&lt;strong&gt;传输层探索&lt;/strong&gt; 。这包括&lt;strong&gt;使用 writev 整合发送 Header &amp;amp; Body&lt;/strong&gt; 达到减少系统调用次数的目的，以及通过&lt;strong&gt;新增接口整合 &lt;code&gt;.Peek() + .Skip()&lt;/code&gt;&lt;/strong&gt; 语义，在内部提供一个更高效的实现。&lt;/p&gt;
&lt;h4 id="hertz-benchmark"&gt;Hertz Benchmark&lt;/h4&gt;
&lt;p&gt;下图是 Benchmark 的开源数据。左侧第一张图是在同等的机器环境上，&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 和横向的框架 Gin、Fasthttp 极限 QPS 比较情况，蓝线是 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 处于较高极限 QPS 的状态。
第二张图是 TP99 时延状态，第三张图是 TP999 时延状态，可以看到 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的整体时延是处于一个更低的水平上。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/14.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="字节跳动服务网格控制面从-gin-迁移至-hertz"&gt;字节跳动服务网格控制面从 Gin 迁移至 Hertz&lt;/h4&gt;
&lt;p&gt;CloudWeGo 公众号曾发布关于字节跳动服务网格控制面的文章，讲述字节跳动服务网格从 Gin 框架迁移到 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 的落地实践。下图是他们代码展示的真实收益，从 Gin 框架替换成为 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 框架后，
&lt;strong&gt;CPU 流量从大概快到 4K 降到大约只有 2.5K，Goroutine 数量从 6w 降到不足 100 个&lt;/strong&gt; ，Goroutine 稳定性得到极大地提升。
同时替换成 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 后，&lt;strong&gt;框架相关的开销已经基本消失，服务网格在线上稳定承载了超过 13M QPS 的流量&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;字节跳动服务网格基于 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 框架的实践：https://mp.weixin.qq.com/s/koi9q_57Vk59YYtO9cyAFA&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_HTTP_Hertz/15.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="小结-2"&gt;小结&lt;/h3&gt;
&lt;p&gt;第三章节的内容总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分层抽象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解构 HTTP 框架，分层解耦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易用可扩展&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供了更丰富 API 和足够灵活的拓展能力，在每一层抽象中都提供了一个足够灵活的扩展能力应对可能的需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自主可控的高性能探索&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自适应 buffer，零拷贝解析，未来将会进行更多的高性能探索。&lt;/p&gt;
&lt;h2 id="未来规划和挑战"&gt;未来规划和挑战&lt;/h2&gt;
&lt;p&gt;我认为 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 未来的发展规划主要围绕以下几个方面：首先，&lt;strong&gt;打造泛 HTTP 框架&lt;/strong&gt; 。我们的最终目标是希望 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 能够解决在 HTTP 领域内的所有问题；其次，&lt;strong&gt;助力 CloudWeGo&lt;/strong&gt; ，希望 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 能够助力 CloudWeGo 打造一个企业级云原生微服务矩阵；最后希望 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 能够&lt;strong&gt;持续服务更多的用户&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id="总结"&gt;总结&lt;/h3&gt;
&lt;p&gt;本次分享的主要内容总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字节跳动内部 Go HTTP 框架的变迁：从基于开源封装，到开启自研之路；&lt;/li&gt;
&lt;li&gt;企业级 HTTP 框架的设计考量和落地思路：破圈、需求提炼、框架科学发展观；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 核心特点：分层抽象、易用可扩展、自主可控的性能探索；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 未来的规划和挑战：框架持续打磨、助力 CloudWeGo、服务更多用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后欢迎对 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 感兴趣的同学积极参与到 CloudWeGo 社区中，我们一起完善 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;，共同建设 CloudWeGo！&lt;/p&gt;</description></item><item><title>Blog: Hertz v0.3.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/09/20/hertz-v0.3.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/09/20/hertz-v0.3.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/198"&gt;#198&lt;/a&gt;] feat: 添加获取 Hertz client dialer 名称的方法。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/251"&gt;#251&lt;/a&gt;] feat: Hertz server 启动日志添加网络库的名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/238"&gt;#238&lt;/a&gt;] refactor: 重构 Hertz client 初始化 HostClient 和 TLSHostClient 的逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/226"&gt;#226&lt;/a&gt;] optimize: 使用 &amp;ldquo;warning&amp;rdquo; 日志提示非法的 http 状态码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/249"&gt;#249&lt;/a&gt;] fix: 修复 Hertz server 优雅退出时无法执行完全部 hook 函数的问题。&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/232"&gt;#232&lt;/a&gt;] fix: 修复路由尾斜线重定向在边缘情况失效的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/217"&gt;#217&lt;/a&gt;] chore: 更新提交 PR 时的填写模板。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: 高性能 RPC 框架 CloudWeGo-Kitex 内外统一的开源实践</title><link>https://www.cloudwego.io/zh/blog/2022/09/20/%E9%AB%98%E6%80%A7%E8%83%BD-rpc-%E6%A1%86%E6%9E%B6-cloudwego-kitex-%E5%86%85%E5%A4%96%E7%BB%9F%E4%B8%80%E7%9A%84%E5%BC%80%E6%BA%90%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/09/20/%E9%AB%98%E6%80%A7%E8%83%BD-rpc-%E6%A1%86%E6%9E%B6-cloudwego-kitex-%E5%86%85%E5%A4%96%E7%BB%9F%E4%B8%80%E7%9A%84%E5%BC%80%E6%BA%90%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h2 id="由内至外---开源过渡"&gt;由内至外 - 开源过渡&lt;/h2&gt;
&lt;p&gt;很多同学可能刚刚了解 CloudWeGo，先介绍一下 CloudWeGo 和 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的关系。&lt;/p&gt;
&lt;h3 id="cloudwego-和-kitex"&gt;CloudWeGo 和 Kitex&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 是 CloudWeGo 开源的第一个微服务框架，它是一个 &lt;strong&gt;支持多协议的 Golang RPC 框架&lt;/strong&gt; ，从网络库、序列化库到框架的实现&lt;strong&gt;基本完全自研&lt;/strong&gt;的。
特别地，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 对 gRPC 协议的支持使用了 gRPC 官方的源码，但是我们对 gRPC 的实现做了 &lt;strong&gt;深度且定制的优化&lt;/strong&gt; ，所以 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 支持的 gRPC 协议性能优于 gRPC 官方框架。
同时这也是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 与目前已经开源的、支持 gRPC 协议的其他 Golang 框架的主要差异。如果用户想使用 gRPC 又对性能有很高的要求，那么 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 框架将会是一个很不错的选择。&lt;/p&gt;
&lt;p&gt;继 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 开源后，今年 CloudWeGo 又陆续开源了 Golang HTTP 框架 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;，Rust RPC 框架 &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;，同时围绕这些微服务框架和微服务的一些通用能力，
我们还开源了一些高性能的基础库。关于更多 CloudWeGo 开源的子项目，可以进入 CloudWeGo &lt;a href="https://www.cloudwego.io/zh/"&gt;官网&lt;/a&gt;详细了解。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.cloudwego.io/zh/"&gt;CloudWeGo 官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;根据社区同学反馈，在一些开源群里大家会讨论 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 会不会是一个字节跳动的开源 KPI 项目呢？它的稳定性、持续性能够得到保障吗？我可以负责任地讲，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 不是一个 KPI 项目，它是来自字节跳动内部大规模实践的真实项目。
在 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 开源后始终保持内外统一，基于内外代码的统一我们保证了 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的持续迭代。为了进一步消除大家的顾虑，下面具体介绍一下 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的诞生和开源历程。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/2.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="kitex-发展历史"&gt;Kitex 发展历史&lt;/h3&gt;
&lt;p&gt;2014 年，字节跳动开始引入 Golang。2015 年，字节跳动内部的服务化开启。在 RPC 调用的场景选择了 Thrift 协议，在内部开始支持 RPC 框架。2016 年，第一个 Golang RPC 框架 Kite 正式发布。
通常在一个公司高速发展的初期，基础能力都是为了快速支持需求落地，面对的需求场景也较单一，设计上不会有较多考量，其实这也是合理的，因为探索阶段并不完全清楚还需要支持哪些场景，过多的考虑反而会出现过度设计的问题。&lt;/p&gt;
&lt;p&gt;但是，随着业务场景复杂化，需求也会多样化，而且接入服务及调用量逐年增长，Kite 已经不足以支持后续的迭代，在线上服役三年多后，2019 年我们开启了新的项目 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;，2020 年初发布了正式版本，在 2020 年底字节内部已经有 1w+ 服务接入 Kitex。&lt;/p&gt;
&lt;p&gt;从 2014 年到 2020 年，Golang 已经是字节跳动内部主要的业务开发语言，应该是业界 Golang 应用最多的公司。我们的服务框架支持着数万个 Golang 微服务的可靠通信，
经过数量众多的微服务和海量流量的验证，我们已经有了较为成熟的微服务最佳实践，于是考虑将内部的实践开源出去丰富云原生社区的 Golang 产品体系。
在 2021年，我们以 CloudWeGo 品牌正式开源了第一个服务框架 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;。截至今年 8 月，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 已经为字节跳动内部 &lt;strong&gt;6w+&lt;/strong&gt; 的服务提供支持， &lt;strong&gt;峰值 QPS 达到上亿级别&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;大家或许还有疑问，完整的微服务体系离不开基础的云生态，无论在公有云、私有云，都需要搭建额外的服务以很好地支持微服务的治理，比如治理平台、注册中心、配置中心、监控、链路跟踪、服务网格等，而且还存在一些定制的规范。
字节跳动自然也有完善的内部服务支持微服务体系，但这些服务短期还无法开源，那 CloudWeGo 如何内外维护一套代码，统一迭代呢？&lt;/p&gt;
&lt;p&gt;关于这个问题，我们看一下 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的模块划分。&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的模块分为三个部分：中间是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 主干部分 &lt;strong&gt;Kitex Core&lt;/strong&gt; ，它定义了框架的层次结构、接口核心逻辑的实现以及接口的默认实现；
左边的 &lt;strong&gt;Kitex Tool&lt;/strong&gt; 则是与生成代码相关的实现，我们的生成代码工具就是编译这个包得到的，其中包括 IDL 的解析、校验、代码生成、插件支持等。
不过为了便于用户使用同时提供更友好的扩展，主要能力也做了拆分作为基础库独立开源，如 Thriftgo、Thrift-validator 插件、Fastpb；
右边的 &lt;strong&gt;Kitex Byted&lt;/strong&gt; 是对字节内部基础能力集成的扩展实现，我们在开始就将内部的能力作为扩展收敛到一个 package 下。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;如此，我们就可以将 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; Core 和 Tool 部分开源出去。我们将代码做了拆分，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的核心代码和工具部分迁移到开源库，集成内部扩展的模块作为 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的扩展保留在内部库，同时内部库封装一层壳保证内部用户可以无感知地升级。&lt;/p&gt;
&lt;p&gt;那么 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的开源就只是代码拆分这么简单吗？显然不是。2021 年 2 月，我们开始筹备 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的开源，虽然基于 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的扩展性，我们可以与内部基础设施集成的能力解耦，但是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 仍然依赖内部的一些基础库，如果要开源必须先开源基础库的能力。
所以我们首先做了依赖库的梳理，与相关的同学合作首先开源了 &lt;strong&gt;bytedance/gopkg&lt;/strong&gt; 库。这个库由 CloudWeGo 与字节跳动的语言团队合作维护，里面包含也了对 Golang 标准库能力的增强，感兴趣的同学可以关注使用。&lt;/p&gt;
&lt;p&gt;bytedance/gopkg: &lt;a href="https://github.com/bytedance/gopkg"&gt;https://github.com/bytedance/gopkg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/5.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;在 gopkg 库开源后，我们调整代码进行开源适配。2021 年 7 月，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 正式开源，在内部发布中版本使用开源库。
但 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 毕竟支持了内部几万的微服务，我们必须要确保内部服务在这个变更后可以平滑过渡，所以在开源初我们没有对外官宣，在确认稳定性后，&lt;strong&gt;2021 年 9 月，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 正式对外官宣开源&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;介绍了 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 诞生、开源的历程，希望能够解除外部同学关于“Kitex 会不会是一个 KPI 项目？”的顾虑。&lt;/p&gt;
&lt;h3 id="开源的价值"&gt;开源的价值&lt;/h3&gt;
&lt;p&gt;第一部分的最后，简单讲一下开源能为我们带来的价值。 &lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 不是为了开源而实现的，但它的实现是面向开源的。&lt;/strong&gt; &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 本身是一个经过内部大规模实现的项目，
我们希望 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 开源后能帮助更多用户在内部快速搭建微服务，同时开源能让我们收集更多社区和企业的反馈，也能吸引外部开发者共建，
促进 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 面向多元场景支持的演进，丰富产品能力，然后能在更多场景和企业得到落地，这是一个正向循环，互利共赢的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/6.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="开源一年变更回顾"&gt;开源一年变更回顾&lt;/h2&gt;
&lt;h3 id="框架的衡量指标"&gt;框架的衡量指标&lt;/h3&gt;
&lt;p&gt;在介绍 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 开源一年变更前，先分享一下框架的衡量指标，这是大家在选择一个框架时要考虑的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个框架与内部能力强耦合，就无法移植到其他平台，或框架的支持场景单一也无法进行扩展，这样的框架很难得到外部的使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易用性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;框架的易用性体现在两个方面。第一是面向&lt;strong&gt;业务开发者&lt;/strong&gt; ，如果一个框架在使用过程中需要让用户关注很多框架的细节，那么对研发效率要求很高的团队可能无法接受。
第二是面向&lt;strong&gt;框架的二次开发者&lt;/strong&gt; ，他们需要对框架做一些定制支持，如果框架提供的扩展能力过于宽泛，扩展成本很高，或者可扩展的能力不够多，那么这个框架也是存在局限性的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能的丰富度&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然基于扩展性可以对框架进行定制，但不是所有开发者都有足够的精力做定制开发，如果框架本身对各种扩展能力提供了不同选择的支持，对于开发者来说只需要根据自己的基础设施进行组合就能在自己的环境中运行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面三点是初期选择框架需要重点关注的指标，但随着服务规模和资源消耗变大，性能就成了不容忽视的问题。从长期的角度来说，选择框架的时候一定要关注性能，否则后续只能面临框架替换的问题，或者被迫对这个框架做定制维护。&lt;/p&gt;
&lt;p&gt;关于以上四点框架的衡量指标，虽然 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 目前还没做到最好，但是这四个要素都是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 设计和实现中一直在兼顾的，我们不会顾此失彼。&lt;/p&gt;
&lt;h3 id="功能特性"&gt;功能特性&lt;/h3&gt;
&lt;p&gt;下面就几个开源一年来重要的功能特性进行介绍。&lt;/p&gt;
&lt;h4 id="proxyless"&gt;Proxyless&lt;/h4&gt;
&lt;p&gt;Proxyless 是 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 面向开源场景提供的支持。在 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 开源初期，我们内部讨论过是否要支持 xDS 对接 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt;，对于外部用户来说，使用 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt; 可以快速搭建一套基本的微服务架构，
解决服务发现、流量路由、配置下发等问题，但是如果使用完整的 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt; 的解决方案，就要引入 Envoy，这会增加运维成本，而且直接使用官方的 Envoy 方案对性能有损，会引入额外的 CPU 开销且增加延迟。
&lt;strong&gt;如果 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 能直接对接 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt;，既能让用户享受到部分 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt; 的能力，又可以避免 Envoy 带来的性能损失和部署运维成本。&lt;/strong&gt; 但是在开源初期，我们没有看到很明确的用户诉求，因此没有对此做高优的支持。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/7.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;后来 gRPC 官方也发布了 Proxyless 的支持，同时 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt; 的官方也将 Proxyless 作为使用 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt; 的一种方式。&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 现在也已完成支持，目前主要是对接服务发现，
xDS 支持的扩展单独开源到了 &lt;a href="https://github.com/kitex-contrib/xds"&gt;kitex-contrib/xds&lt;/a&gt; 库中，后续还会完善。大家可以根据 README 了解如何使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 对接 &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id="json-和-protobuf-泛化调用支持"&gt;JSON 和 Protobuf 泛化调用支持&lt;/h4&gt;
&lt;p&gt;之前，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 支持了应用在网关场景的 HTTP 泛化，以及支持了应用在一些通用服务场景的 Map 和二进制泛化。开源后，根据用户的需求反馈又新增了 JSON 和 Protobuf 的泛化。&lt;/p&gt;
&lt;p&gt;Protobuf 的泛化也是应用在 API 网关的场景。原来的 HTTP 泛化传输的数据格式是 JSON，但是 JSON 的序列化体积大、效率低，对性能有影响，所以很多移动端的接口选择使用 Protobuf 传输数据，因此增加了 Protobuf 泛化的支持。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/8.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目前 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的泛化主要针对后端的 Thrift 服务，无论是 Protobuf、Map 还是 JSON，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 都会在调用端结合 IDL 解析，将这些数据映射编码为 Thrift 包发给后端服务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么为什么把泛化放在调用端而不是服务端呢？大家广泛了解的泛化都是服务端对泛化请求做了解析处理，当然调用端也要相应地提供泛化的 Client。
但是泛化面向的是通用服务，泛化使用成本其实是比较高的，它并不适用于普通的 RPC 场景，而通用服务面向的是所有后端的服务，有 Golang/Java/C++/Python/Rust，如果每一种语言框架都支持泛化，成本是非常高的。
就算各个语言都对泛化做了支持，框架版本收敛又是一个漫长的过程，对于通用服务来说，对接所有的服务就显得不太现实。综合以上原因，泛化放在调用端支持。&lt;/p&gt;
&lt;h4 id="重试能力增强"&gt;重试能力增强&lt;/h4&gt;
&lt;p&gt;去年开源时，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 已经支持了重试功能。之前支持的重试有两类，一个是超时重试，一个是 Backup Request。&lt;/p&gt;
&lt;p&gt;对于超时来重试来说，我们只会对超时这一种异常进行重试，但为了进一步提高请求成功率，用户希望对其他的异常也进行重试，或者用户可能会定义一些用户请求的状态码，结合用户状态码进行重试，
在这种情况下，显然我们只支持超时重试是不满足用户需求的。基于这个背景， &lt;strong&gt;Kitex 新增了指定结果重试&lt;/strong&gt; ，用户可以指定其他异常或指定某一类 Response，框架会结合用户指定的结果进行重试。&lt;/p&gt;
&lt;p&gt;其次，用户在配置重试时，如果通过代码配置的方式设置重试，它会对整个 Client 的所有 RPC 方法生效，但是用户希望针对不同的 RPC 方法应用不同的重试策略，甚至同一个方法也希望可以采用不同的重试策略，
因为不同链路上发起的同一个方法的请求对指标要求也会不同。比如有些想使用 Backup Request 减少延迟，有些想做异常重试提高成功率，对于这种情况， &lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 新的版本支持了请求粒度配置重试&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;下图是使用示例。以请求粒度重试配置为例，比如 RPC 方法是 &lt;code&gt;Mock&lt;/code&gt;，那么我们在发起 RPC 调用的时候，在后面可以配置一个 &lt;code&gt;callopt&lt;/code&gt; 指定重试策略，此次请求就会使用这个重试策略。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="thrift-validator"&gt;Thrift Validator&lt;/h4&gt;
&lt;p&gt;Thrift-gen-validator 是 Thriftgo 的一个工具插件，它可以根据 Thrift IDL 中定义的注解描述约束给对应的 &lt;code&gt;struct&lt;/code&gt; 生成 &lt;code&gt;IsValid() error&lt;/code&gt; 方法，校验值的合法性。
通常做 RPC 调用的时候，用户可能会对一些字段校验合法性，用户如果直接写这些校验代码，投入的成本会很高。所以我们就提供了注解支持， &lt;strong&gt;只要用户在 IDL 中根据规范定义注解，Kitex 就可以帮助用户生成校验代码&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;下图是代码生成的命令和一个 IDL 注解定义示例，在生成代码的时候指定 Thrift Validator 的插件，我们的插件工具就会解析注解，为用户生成这一套合法性校验的代码。
目前我们也将 Thrift Validator 的功能贡献给了 Apache Thrift。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="性能优化"&gt;性能优化&lt;/h3&gt;
&lt;p&gt;介绍完几个重要的功能特性，再介绍几个在性能上的优化特性。&lt;/p&gt;
&lt;h4 id="thrift-高性能编解码"&gt;Thrift 高性能编解码&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 是一个无需生成编解码代码、基于 JIT 的高性能动态 Thrift 编解码器。&lt;/strong&gt; 虽然我们针对官方 Thrift 编解码已经做了优化，支持了 FastThrift，这个在我们开源前发布的优化实践里也有介绍，
但我们希望能有进一步的性能提升，参考我们开源的高性能 JSON 库 Sonic 的设计，实现了 Thrift JIT 编解码器。下图中的表格是 &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 结合 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 与 FastThrift 的性能对比。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/11.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;可以看到在大部分场景 RPC 性能表现都较优。除了性能上的优势，&lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 还有另一个优势是无需生成编解码生成代码。Thrift 的生成代码比 Protobuf 繁重，一个复杂的 IDL 代码生成文件可以达到几万行，
而这些代码本来对用户来说无需关注，却需要由用户来维护。&lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 只需要生成结构体代码，不需生成编解码代码，就大大解决了这个问题。&lt;/p&gt;
&lt;p&gt;关于如何在 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 中使用 &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt;，可以参考仓库的 &lt;a href="https://github.com/cloudwego/frugal#readme"&gt;Readme&lt;/a&gt;。当然用户也可以单独使用 &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; 作为 Thrift 高性能编解码器，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 后续也会考虑默认使用 &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id="protobuf-高性能编解码"&gt;Protobuf 高性能编解码&lt;/h4&gt;
&lt;p&gt;虽然我们内部主要支持 Thrift，但开源之后我们发现外部用户对于 Protobuf 或 gRPC 的关注会更多，所以参考 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; FastThrift 的优化思路，重新实现了 Protobuf 的生成代码。
在 v0.4.0 版本，如果用户使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的工具生成 Protobuf 的代码，就会默认生成 &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; 的编解码代码，在发起 RPC 调用的时候，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 也会默认使用 &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面列出的是 &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; 与官方 Protobuf 序列化的性能对比，可以看到无论是编码还是解码，在效率和内存分配上，&lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; 都远远优于官方 Protobuf 序列化库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FastWrite: &lt;strong&gt;(ns/op) ↓67.8% ，(B/op) ↓83.9%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;FastRead: &lt;strong&gt;(ns/op) ↓41.5% ，(B/op) ↓4.5%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="grpc-性能优化"&gt;gRPC 性能优化&lt;/h4&gt;
&lt;p&gt;开源初期，我们对 gRPC 整体稳定性和性能的关注是比较少的。因为内部使用的场景不是很多。开源后收到了很多外部同学的反馈，
所以我们针对 gRPC 做了一个专项的问题治理以及性能优化。今年中旬我们已经把相关的优化正式提交到开源库，在 v0.4.0 版本发布。&lt;/p&gt;
&lt;p&gt;Kitex v0.4.0: &lt;a href="https://mp.weixin.qq.com/s/ezifbQkHcZQP6MygmJABYA"&gt;https://mp.weixin.qq.com/s/ezifbQkHcZQP6MygmJABYA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下图中左侧是优化前 Kitex-gRPC 和官方 gRPC 框架对 &lt;strong&gt;Unary 请求&lt;/strong&gt;的压测吞吐对比，在并发比较低的情况下，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的吞吐并不具有优势，
使用 &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; 的时候，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的吞吐表现会好一些，但低并发的吞吐依然低于官方 gRPC。在优化之后，吞吐对比如右图所示。&lt;strong&gt;相比优化前吞吐提升 46% - 70%，相比官方 gRPC 框架，吞吐高 51% - 70%。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/13.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;下图中右侧是优化后 &lt;strong&gt;Unary 请求&lt;/strong&gt;的延迟对比，在吞吐比官方 gRPC 高出很多的情况下，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的延迟也显著低于官方的 gRPC。同时就 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 自身而言，在优化后延迟表现也好了很多。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/14.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们再看下 &lt;strong&gt;Streaming 请求&lt;/strong&gt;的压测性能对比，优化前 Streaming 请求的表现同样在低并发的情况下，相对 gRPC 框架没有优势。
经过优化后，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 吞吐显著高于官方 gRPC，如下图，同时低并发下吞吐高但延迟持平，增加并发后能看到延迟出现分叉。所以在性能上， &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 支持的 gRPC 协议相对官方有明显的优势。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/15.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;虽然在部分功能上，&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 还没有完全对齐，但是目前已经可以满足大部分的场景需求，我们后续也会继续进行功能对齐。&lt;/p&gt;
&lt;h2 id="社区共建完善生态及企业落地"&gt;社区共建完善生态及企业落地&lt;/h2&gt;
&lt;h3 id="社区共建的-kitex-扩展生态"&gt;社区共建的 Kitex 扩展生态&lt;/h3&gt;
&lt;p&gt;开源后，我们很欣慰得到了很多开发者的关注，坦白说内部团队精力有限，无法快速建立起面向外部用户的 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 扩展生态。但是一年以来借助社区的力量，
&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 在 &lt;strong&gt;服务注册/发现&lt;/strong&gt;、 &lt;strong&gt;可观测性&lt;/strong&gt;、&lt;strong&gt;服务治理&lt;/strong&gt;几部分的扩展得到了很多补充，尤其是服务注册/发现相关的扩展，目前开源的主流注册中心都已完成对接，
虽然在功能丰富度上我们还有待加强，但结合已有的支持，对于外部用户已经具备了搭建微服务架构的能力。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/16.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;衷心感谢积极参与 CloudWeGo 社区建设的同学们！关于 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 相关的生态支持，大家可以进入 &lt;a href="https://github.com/kitex-contrib"&gt;kitex-contrib&lt;/a&gt; 了解更多的开源仓库。&lt;/p&gt;
&lt;h3 id="对接外部企业协助落地"&gt;对接外部企业，协助落地&lt;/h3&gt;
&lt;p&gt;我们开源的初衷是为了助力其他外部企业快速地搭建企业级的云原生架构。开源后，森马、华兴证券、贪玩游戏、禾多科技先后主动与我们联系，反馈使用问题、提出需求，
的确让我们发现了一些和内部场景不一样的问题，需要我们去关注、支持和优化，我们很开心 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 能在这些企业内部得到应用。
在今年 6 月 25 日的 CloudWeGo Meetup 中，森马和华兴证券的研发同学也分享了他们使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的内部实践。&lt;/p&gt;
&lt;p&gt;森马：https://mp.weixin.qq.com/s/JAurW4P2E3NIduFaVY6jew&lt;/p&gt;
&lt;p&gt;华兴证券：https://mp.weixin.qq.com/s/QqGdzp-7rTdlxedy6bsXiw&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/17.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;除了以上企业，还有一些公司也私下向我们咨询过使用问题，我们非常感谢这些企业用户的支持，以及向我们提出的反馈信息。
如第一部分所讲，收集社区和企业的反馈可以促进 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 面向多元场景支持的演进，企业用户如果有相关需求，欢迎联系我们。&lt;/p&gt;
&lt;h3 id="如何使用-kitex-与内部基础设施集成"&gt;如何使用 Kitex 与内部基础设施集成&lt;/h3&gt;
&lt;p&gt;这里再简单介绍下如何使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 与大家的内部基础设施集成。以字节内部为例，内部仓库里有开源库中的扩展实现，集成内部的能力，
在 bytedSuite 中，我们针对不同场景对 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 进行初始化。如下面的代码示例，用户只需要在构造 Client 和 Server 时增加一个 option 配置就可以完成集成，
不过为了让用户完全不需关注内部能力的集成，我们将该配置放在了生成的脚手架代码中，关于配置如何内嵌在生成代码中，后续我们也会开放出来，方便外部的框架二次开发者能以同样的方式为业务开发同学提供集成能力。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/18.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="总结和展望"&gt;总结和展望&lt;/h2&gt;
&lt;h3 id="总结"&gt;总结&lt;/h3&gt;
&lt;p&gt;本次分享主要介绍了以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 如何保持内外统一地从内部应用较广的框架转为开源框架；&lt;/li&gt;
&lt;li&gt;开源一年以来发布了哪些重要的功能特性，做了哪些性能优化；&lt;/li&gt;
&lt;li&gt;借助社区的力量现在 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 的周边生态如何、企业落地情况以及如何使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 优雅地集成内部能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="展望"&gt;展望&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;与社区同学共建，持续丰富社区生态；&lt;/li&gt;
&lt;li&gt;结合工程实践，为微服务开发者提供更多便利；&lt;/li&gt;
&lt;li&gt;完善好 BDThrift 生态，持续优化 Protobuf/gRPC；&lt;/li&gt;
&lt;li&gt;更多特性支持或开源，ShmIPC、QUIC、Protobuf 泛化…&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: 开源社区的长期主义与新变化 — CloudWeGo 开源社区实践</title><link>https://www.cloudwego.io/zh/blog/2022/09/13/%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E9%95%BF%E6%9C%9F%E4%B8%BB%E4%B9%89%E4%B8%8E%E6%96%B0%E5%8F%98%E5%8C%96-cloudwego-%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/09/13/%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E9%95%BF%E6%9C%9F%E4%B8%BB%E4%B9%89%E4%B8%8E%E6%96%B0%E5%8F%98%E5%8C%96-cloudwego-%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h2 id="概述"&gt;概述&lt;/h2&gt;
&lt;p&gt;CloudWeGo 开源一周年以来收获了超过 &lt;strong&gt;1w&lt;/strong&gt; 的 star 数，这一年 CloudWeGo 从项目的数量、性能的提升、社区的活跃、生态的拓展等各个方面都有一些整体的变化。
同时，通过一周年的开源，我们收获了非常多的开源社区用户，这些用户在社区里也提供了很多项目的使用反馈。基于这些反馈，我们发现随着技术发展和用户业务的不停迭代，用户需求也在发生着变化。
因此我们梳理了新一代关于云原生微服务用户的画像，作为指导我们社区持续演进的重要参考。&lt;/p&gt;
&lt;h2 id="cloudwego-开源一周年的变化"&gt;CloudWeGo 开源一周年的变化&lt;/h2&gt;
&lt;h3 id="全景图"&gt;全景图&lt;/h3&gt;
&lt;p&gt;CloudWeGo 是一套由字节跳动开源的云原生微服务架构中间件集合。在 2021 年 9 月正式推出的时候，只开源了 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 高性能 RPC 框架、高性能网络库 &lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt;，还有相关的辅助工具和基础库。&lt;/p&gt;
&lt;p&gt;经过一年的建设，CloudWeGo 社区目前有 &lt;strong&gt;11&lt;/strong&gt; 个重点项目齐头并进。我们不仅有 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 框架，还有基于 HTTP 相关的高性能框架 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;，同时开源了高性能的 Rust RPC 框架 &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;，这也是国内首个开源 Rust RPC 框架。&lt;/p&gt;
&lt;p&gt;从 CloudWeGo 开源的项目也能感受到我们对性能的极致追求，我们不仅开源了框架相关的项目，同时也把深度优化的一些编解码库、网络库都进行了开源。
在 CloudWeGo 整体的项目中，始终都保持着三高的特性，即 &lt;strong&gt;高性能&lt;/strong&gt; 、&lt;strong&gt;高可靠性&lt;/strong&gt;和 &lt;strong&gt;高扩展性&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;与此同时，这一年我们也在致力于开源社区的建设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易用性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CloudWeGo 非常重视整个项目的易用性建设。我们有非常完整的官方文档体系，包括整体的扩展和 Example 的建设，以及各大云厂商生态的对接等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;落地支持&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了帮助更多对高性能微服务架构有需求的用户，能够让他们真实地把高性能的技术解决方案落地，我们提供了 Benchmark 的性能测试和选型参考，同时提供免费的企业支持，帮助用户解决自己业务特异性上的一些问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;活动 &amp;amp; 布道&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了让更多有需求的用户能够在社区找到高性能技术解决方案，我们开设了相关的活动和布道体系的建设。在 CloudWeGo 开源一周年之际，项目整体收获了很多用户支持，也收获了很多企业用户的使用反馈。&lt;/p&gt;
&lt;h3 id="cloudwego-开源社区的长期主义"&gt;CloudWeGo 开源社区的长期主义&lt;/h3&gt;
&lt;h4 id="高性能技术解决方案的持续探索"&gt;高性能技术解决方案的持续探索&lt;/h4&gt;
&lt;p&gt;CloudWeGo 开源一周年的历程，其实就是对高性能技术解决方案持续探索的历程。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/2.png" alt="image"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CloudWeGo 从 2021 年 9 月 8 日正式开源。推出高性能的 RPC 框架 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;、配合 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 使用的高性能网络库 &lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt;、基于 Thrift 代码生成工具 Thriftgo 和基础库 Sonic。&lt;/li&gt;
&lt;li&gt;2022 年 5 月，开源了基于 JIT 的编解码工具 Frugal。&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 配合 Frugal 的使用，能够带来 5 倍的性能提升。&lt;/li&gt;
&lt;li&gt;2022 年 6 月，开源高性能 HTTP 框架 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;。&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 不仅仅是一个 高性能的 HTTP 的开源框架，同时也是一个超大规模的企业落地实践。在我们内部的网关场景下，替换 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 框架之后的 CPU 使用节省了超过 40%。&lt;/li&gt;
&lt;li&gt;2022 年 7 月，我们响应社区呼声最高的关于 Protobuf 的性能优化，带来了高性能的 Protobuf 序列化反序列化库 FastPB，再次对相关的性能进行提升。&lt;/li&gt;
&lt;li&gt;开源一周年之际，我们又进行了更深度的高性能框架能力探索，开源了国内首个 Rust RPC 框架 &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;CloudWeGo 开源一周年的时间线，隐藏着 CloudWeGo 社区运营的第一个长期主义关键词：&lt;strong&gt;高性能技术解决方案的持续探索&lt;/strong&gt; 。&lt;/p&gt;
&lt;h4 id="活跃--高可靠性的长期承诺"&gt;活跃 &amp;amp; 高可靠性的长期承诺&lt;/h4&gt;
&lt;p&gt;CloudWeGo 开源一年来，收获了超过 1w 的 star 数，整个社区的活跃度也有了飞速提升。&lt;/p&gt;
&lt;p&gt;社区保持着 2-3 个月发布一次中版本的发版频率，PR 和 Issue 数量在开源一年的时间内实现稳步提升，从每月 47 条 PR 合入增加到每月超过 160 条 PR 合入。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;其实高活跃的社区并不少见，但是我们社区还有一个关键词：&lt;strong&gt;坚持活跃 &amp;amp; 高可靠性的长期承诺&lt;/strong&gt;。CloudWeGo 社区对可靠性的坚持，要求我们不仅要维持活跃，还要保持活跃且可靠。&lt;/p&gt;
&lt;p&gt;CloudWeGo 开源社区一直保持着我们所有的开源项目内外一致的承诺，同时我们开源到外部的所有能力和项目都是在内部经过可靠性验证的。这也正是 CloudWeGo 开源社区坚持的另一个长期主义。&lt;/p&gt;
&lt;h4 id="高易用性设计"&gt;高易用性设计&lt;/h4&gt;
&lt;p&gt;我们非常希望 CloudWeGo 开源出来的高性能技术解决方案，能够更好地帮助更多用户搭建自己的微服务架构体系。因此，CloudWeGo 在社区建设上围绕着易用性建设做了非常多的拓展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CloudWeGo 文档建设&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，在文档建设方面，CloudWeGo 官网上线了近 3 万字较为完善的文档体系。内容覆盖从 1 分钟快速上手，到各个相关模块的基本特性介绍，再到一些拓展能力的建设。&lt;/p&gt;
&lt;p&gt;其次，我们为了达到真正的开箱即用，节省用户对接各个扩展项目的使用成本，上线了 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 和 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 相关的 Example，帮忙建设了相关从注册发现，到各个中间件使用的一些开箱即用的 Demo。&lt;/p&gt;
&lt;p&gt;另外，为了提升更多开发者的使用体验，官网也上线了静态文档的搜索能力。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/4.png" alt="image"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CloudWeGo 生态建设&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想在内部构建一套完整的云原生微服务架构体系，仅仅使用 CloudWeGo 的一个框架项目，是远远不够的。因此，CloudWeGo 在易用性方面大力拓展相关的生态建设。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CloudWeGo 在 2021 年加入 CNCF Landscape，希望给用户一个更加明确的产品定位。同时，支持对接各大云厂商，为 CloudWeGo 项目的用户提供更多公有云的使用选择。&lt;/li&gt;
&lt;li&gt;为帮助大家减少相关的使用成本，我们非常积极地和上下游的开源项目进行深度合作，建设了一整套微服务开源供应链的合作体系，搭建了 CloudWeGo 框架对接各个项目的相关 Demo 和开箱即用的 Example。&lt;/li&gt;
&lt;li&gt;从考虑未来发展的角度而言，当企业落地了一整套微服务架构之后，可能会存在易用性或性能方面的问题。当出现更好的技术解决和性能提升方案，基于原有架构的耦合和复杂度，很难推进新的架构进行整体的迭代。
因此，我们也非常积极地在推进建设云原生微服务治理的整体标准。希望更多的项目，能够形成统一的接入和对接的标准，从而在未来的一些新的、更高性能的技术解决方案的迁移和过渡上，能够让迁移和使用成本降到最低。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/5.png" alt="image"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CloudWeGo 的开发者活动&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CloudWeGo 项目包括整个社区都对高性能有非常热烈的追求。因此，我们也在不停地迭代。&lt;/p&gt;
&lt;p&gt;CloudWeGo 一直在不断追求高性能框架以及高性能技术解决最新方案。每次上线新的技术解决方案和一些相关能力之后，我们都期望让更多的用户知道这些方案是怎样的，让用户能够更便捷地学习到一些相关的技术指南。&lt;/p&gt;
&lt;p&gt;因此，我们针对性地设计了 CloudWeGo Study Group 学习计划，这是为了将一些全新的性能解决方案进行体系化的学习分享，即通过一些类似于从框架入门到核心能力的解读、再到一些学习路径的分享以及扩展知识的相关介绍对外开放给社区。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/6.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们会提供一份完整的学习资料，降低用户学习新的技术解决方案的成本，也能够让用户了解到自己的学习是否适合其业务场景。在整个学习和使用的过程中，降低最终学习的时长，通过体系化的学习更快地理解技术方案的性能亮点和需要学习的相关点。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/7.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="小结"&gt;小结&lt;/h4&gt;
&lt;p&gt;CloudWeGo 开源社区坚持的长期主义：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/8.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="cloudwego-的用户"&gt;CloudWeGo 的用户&lt;/h3&gt;
&lt;p&gt;基于开源社区长期主义的坚持，CloudWeGo 自 2021 年 9 月开源，至今开源 1 年，获得超过 1w star，支持完成了证券、电商、中台、社交、游戏、AI 等行业企业客户的落地使用。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="cloudwego-的贡献者"&gt;CloudWeGo 的贡献者&lt;/h3&gt;
&lt;p&gt;在活跃的社区氛围下，我们收获了从最初刚开源只有 20 个内部贡献者，到现在已经有了超过 200 个代码贡献者。这些贡献者在深度使用了 CloudWeGo 开源项目之后，也为 CloudWeGo 开源项目贡献了大量生态方面相关对接能力。&lt;/p&gt;
&lt;h4 id="贡献者体系更新"&gt;贡献者体系更新&lt;/h4&gt;
&lt;p&gt;基于越来越多的贡献者在我们的开源社区里做了大量深度贡献，CloudWeGo 开源社区在一周年的周年庆之际，推出 &lt;strong&gt;全新的贡献者激励体系&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;我们新增开放了三个角色体系，希望通过这种完善的角色机制，赋予社区开发者更多的社区治理权限。同时我们也鼓励更多的贡献者能够成为项目的维护者，希望长期的维护者能够真正带领我们的项目持续进行高性能的优化和相关的演进。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="贡献者多样化"&gt;贡献者多样化&lt;/h4&gt;
&lt;p&gt;在开源项目的运营和维护中，包括开源社区的建设，不仅仅是依赖代码贡献者的参与，还有很多其他方面的贡献，其中包括企业支持场景的贡献、布道活动的贡献、整体活动组织的贡献等多元参与。
这些贡献者在 CloudWeGo 社区也是被大力支持的，因此我们专门针对多元贡献上线了 CloudWeGo 年度激励计划。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/11.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;社区在 8 月份刚刚完成了 2021 - 2022 年度 CloudWeGo Awesome Contributor 的评选，我们非常荣幸地收获了 84 位年度优秀贡献者。
在完成了社区的提名与公示后，这些同学已经顺利成为了 CloudWeGo 年度优秀贡献者，之后我们会为这些优秀贡献者送上 CloudWeGo 一周年的荣誉纪念徽章。&lt;/p&gt;
&lt;h3 id="cloudwego-社区遇到的问题"&gt;CloudWeGo 社区遇到的问题&lt;/h3&gt;
&lt;p&gt;正是因为社区较高的活跃度以及众多贡献者的参与，大量用户加入了 CloudWeGo 社区。我们逐渐发现用户的使用场景开始慢慢发生了拓展。
从最初可能只是想了解一下微服务的框架、单独一个项目如何去落地和使用，到后来慢慢变成探索一整套微服务架构的设计，以及多个项目之间的实践配合和相关生态能力的建设。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/12.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;这些其实是非常体系化、大规模的需求，因此我们联合一些企业用户进行了相关场景的实践贡献。CloudWeGo 之前支持了包括证券、电商、AI 和各个行业用户场景落地，我们也和这些企业用户进行了相关场景的梳理。&lt;/p&gt;
&lt;h3 id="cloudwego-的企业用户贡献"&gt;CloudWeGo 的企业用户贡献&lt;/h3&gt;
&lt;h4 id="华兴证券"&gt;华兴证券&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.cloudwego.io/zh/cooperation/huaxingsec/"&gt;案例链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;华兴证券的张天老师团队向社区贡献了来自证券行业使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 完成混合云部署下跨机房使用场景的案例。&lt;/p&gt;
&lt;p&gt;我们在跟张天老师团队合作的时候发现，他们遇到的最大的问题是有的业务部署在金融云机房上，有的业务部署在私有机房上，所以存在跨机房调用的问题。
因为他们使用 K8s 集群，还会出现同集群调用和跨集群调用的问题。整个调用的链路非常长，这中间就会出现很多不可观测的问题，当出现问题的时候，排查难度就极其大。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/13.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;于是张天老师团队在和 CloudWeGo 合作之后，整体搭建了一个 &lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; + K8s&lt;/strong&gt; 的可观测性系统，也将相关的搭建实践贡献到了开源社区。感兴趣的同学可以通过 CloudWeGo 公众号查看相关的企业案例和最终的实践场景。&lt;/p&gt;
&lt;h4 id="森马"&gt;森马&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.cloudwego.io/zh/cooperation/semir/"&gt;案例链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CloudWeGo 和森马共同梳理了与电商行业相关的一个整体使用场景。非常感谢森马团队，贡献了电商行业使用 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 接入 Istio，以提高对高并发订单处理能力的使用场景。&lt;/p&gt;
&lt;p&gt;森马团队还贡献了基于微服务架构的两种模式，为有相关高性能业务需求的用户提供了&lt;strong&gt;服务网格 + &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;&lt;/strong&gt; 治理模式相关的选型依据，并且给出了相关的压测报告，也给社区有相同需求的小伙伴提供重要参考。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/14.png" alt="image"&gt;&lt;/p&gt;
&lt;h4 id="飞书"&gt;飞书&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.cloudwego.io/zh/cooperation/feishu/"&gt;案例链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 开源后，很多用户会问到内部网关平台架构的设计思路，包括内部网关平台如何配合 &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; 整体使用？&lt;/p&gt;
&lt;p&gt;飞书之前是一个 all-in-one 的套件开发模式，各个业务团队会将业务代码提交到飞书网关平台的代码仓里面，由飞书网关相关的同学来做 web 逻辑的开发。
这就导致他们所有的服务都是融在一起的，没有办法做到发布隔离，极大地阻碍了网关平台架构的演进和迭代速度。&lt;/p&gt;
&lt;p&gt;因此，飞书团队将前端 Node 单体服务做了微前端架构拆分，配合 &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; 泛化调用各个业务的微服务，实现了各个业务发布完全隔离，这使得他们不再依赖网关平台的业务开发，进而加快了整个网关业务迭代的速度。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/15.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="来自社区的用户具体问题"&gt;来自社区的用户具体问题&lt;/h3&gt;
&lt;p&gt;我们非常感谢企业用户贡献的相关问题，CloudWeGo 配合企业用户的场景案例也获得了社区用户的众多好评。与此同时，有更多的用户也提出了新的问题，这些问题非常具体。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/16.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;通过总结发现，这些问题具有显著的业务特异性。我们也很好奇这些用户在内部到底是如何搭建其微服务体系的？&lt;/p&gt;
&lt;p&gt;因此我们开始梳理 CloudWeGo 开源社区的云原生微服务用户画像。&lt;/p&gt;
&lt;h2 id="新一代云原生微服务用户画像"&gt;新一代云原生微服务用户画像&lt;/h2&gt;
&lt;p&gt;我们将社区的用户大概分成了三种类型：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/17.png" alt="image"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字节跳动&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字节跳动是我们目前最大的用户。字节跳动的线上微服务数量已经超过了 10 万，服务端峰值 QPS 已经达到了数亿的级别，业务复杂性非常大，存在跨语言、跨平台、跨终端、跨集群、跨机房等多种复杂的问题。&lt;/p&gt;
&lt;p&gt;同时字节跳动内部有非常完善的微服务架构体系，整体的微服务治理已经全面迈入了 2.0 的时代，用微服务框架配合服务网格携手并进。&lt;/p&gt;
&lt;p&gt;在这个场景之下，字节跳动最大的需求就是高性能和可扩展性，这也是 CloudWeGo 作为字节跳动内部孵化的一个优秀的高性能技术解决方案最初开源时所具有的特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;处于转型期的用户&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;社区里数量最大的群体，这些用户可能是电商的、证券的、后台的以及一些创业公司，他们的节点数量不是特别多，可能在 5-1000 以内，
线上微服务数量处于 5000 以内的水平，但这些用户可能本身就是云原生架构，或者已经在往这方面做一些相关的迁移。&lt;/p&gt;
&lt;p&gt;这类用户在 CloudWeGo 开源社区的诉求，主要是针对业务的特异性方面存在高性能相关的需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非云原生架构企业用户&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一类用户属于非云原生架构的企业，他们的服务可能还没有完全云化，具有一定的历史迁移负担。这类用户着重会优先考虑如何将自己的服务迁移上云。&lt;/p&gt;
&lt;p&gt;因此可以看到，第二类用户是目前社区数量最大，且最需求最迫切的一类用户。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/18.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;我们认为理想状态下用户整个云原生架构体系的搭建过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一个阶段：服务上云&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似第三类用户，当前面临的问题就是怎么把自己的业务迁移上云。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第二个阶段：云原生部署&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似第二类社区大量的用户，其实已经是云原生部署的企业，用到了相关容器化和编排调度的技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第三个阶段：微服务架构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继续往前演进，开始搭建相关的微服务架构，以及会做服务的拆分和通信的治理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第四个阶段：微服务治理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当用户在线上有了一定数量的微服务之后，会开始出现依赖管理和一致性保障的问题。&lt;/p&gt;
&lt;p&gt;但是我们在跟用户沟通过程中发现，这其实不是一种绝对意义上的区分。&lt;/p&gt;
&lt;p&gt;因为很多公司其实并不是完全属于其中一种状态，而是一种长久的中间态，公司的业务会处于不同的状态。同时，我们在和相关用户进行深度的沟通时，发现这些业务场景其实并不是完全不可复制的，而是具有一定的行业聚合性和相似性。&lt;/p&gt;
&lt;p&gt;于是，我们开始探索如何通过社区更好地帮助这些开发者解决痛点问题，这也正是 CloudWeGo 开源社区接下来整体的演进方向。&lt;/p&gt;
&lt;h2 id="持续演进的-cloudwego-开源社区"&gt;持续演进的 CloudWeGo 开源社区&lt;/h2&gt;
&lt;p&gt;CloudWeGo 1.0 社区搭建的主要方向，是将字节跳动内部孵化的高性能框架解决方案触达给更多的用户，让更多对高性能解决方案有需求的用户能够真正地在内部落地和使用这些方案。&lt;/p&gt;
&lt;p&gt;当我们发现用户出现特异性的行业需求后，ClouWeGo 2.0 希望社区建设以开发者服务为主，能真正地帮助到社区的开发者，解决其在微服务治理过程中遇到的一些真实存在的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/19.png" alt="image"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行业解决方案&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过用户问题、场景和解决方案的行业共建，形成社区的 Go 云原生微服务最佳实践，希望能够针对有特异性需求的用户给到一定的参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;易用性建设&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们会持续和开源链条的上下游深入合作，建设云原生微服务相关的标准治理。致力于后续易用性的建设，希望能够给到成本更低的迁移，以及建立后期维护的治理标准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;持续投资高性能方案&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继续维持 CloudWeGo 开源社区的长期主义。我们会深入投入对高性能解决方案的持续探索，也会在 Rust 领域持续开展相关生态和开源的建设，共建 Rust 中国的开源生态。&lt;/p&gt;
&lt;p&gt;基于此，引出 CloudWeGo 开源社区 2.0：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_community/20.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;CloudWeGo 2.0 的阶段，我们希望社区能够跨越项目边界，真正能够帮助社区用户搭建一套高性能的微服务治理架构和整体的微服务治理体系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Go 领域相关微服务治理的标准和最佳实践的建设，为一些通用性技术和行业最佳实践提供参考；&lt;/li&gt;
&lt;li&gt;对接开源项目上下游进行深度合作，极大地提升整个项目的易用性；&lt;/li&gt;
&lt;li&gt;推进高性能 Rust 解决方案的落地，持续探索 Rust 高性能技术解决方案，构建 Rust 相关生态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果大家对 CloudWeGo 开源社区，以及刚才提到的一些技术解决方案、企业的落地支持有任何的疑问，可以关注 CloudWeGo 公众号，
我们会在公众号上发布一些新闻动态以及各个相关场景的案例报道，同时我们也会在公众号上提供相关的技术支持。感谢大家的关注！&lt;/p&gt;</description></item></channel></rss>