<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudWeGo – Kitex</title><link>https://www.cloudwego.io/zh/projects/kitex/</link><description>Recent content in Kitex on CloudWeGo</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 03 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.cloudwego.io/zh/projects/kitex/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Kitex Release</title><link>https://www.cloudwego.io/zh/blog/releases/kitex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/releases/kitex/</guid><description/></item><item><title>Blog: Kitex Release v0.12.0</title><link>https://www.cloudwego.io/zh/blog/2025/01/03/kitex-release-v0.12.0/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2025/01/03/kitex-release-v0.12.0/</guid><description>
&lt;h2 id="重要变更介绍">&lt;strong>重要变更介绍&lt;/strong>&lt;/h2>
&lt;h3 id="精简产物建议---去-apache-thrift">精简产物建议 - 去 Apache Thrift&lt;/h3>
&lt;p>强烈建议去 Apache Codec，解决 Apache 不兼容变更带来的编译体验问题，并能&lt;strong>减少 50% 产物体积&lt;/strong>。&lt;/p>
&lt;p>请使用 Kitex 的 Thrift Codec：FastCodec 或 Frugal，不会依赖 Apache Thrift Codec。&lt;/p>
&lt;p>后续版本计划：Kitex 会默认去除 Apache 产物，用户指南见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/best-practice/remove_apache_codec/">Kitex 去 Apache Thrift 用户手册&lt;/a>&lt;/p>
&lt;h3 id="new-features">New Features&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Thrift Streaming over TTHeader - 自定义流式协议&lt;/strong>&lt;/p>
&lt;p>支持了基于 TTheader 协议的流式调用，优化因 gRPC streaming 协议复杂度过高而引入的稳定性问题；&lt;/p>
&lt;p>提供了新的流式接口 StreamX，解决原流式接口各类使用体验问题，并提供流式接口的最佳实践。&lt;/p>
&lt;p>用户文档：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/streamx/">StreamX 用户文档与最佳实践&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>gRPC Streaming 支持优雅退出&lt;/strong>&lt;/p>
&lt;p>支持了优雅退出功能，用于解决因为服务升级/更新而导致的上游报错问题。&lt;/p>
&lt;p>用户文档：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/graceful_shutdown/">gRPC Streaming 优雅退出&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>JSON 泛化调用支持 gRPC Streaming&lt;/strong>&lt;/p>
&lt;p>JSON 泛化调用支持 gRPC Streaming 流式接口（仅限 client），经过 v0.10.0 试用，正式发布。&lt;/p>
&lt;p>用户文档：&lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/generic_streaming">User Guide to Generic Call for Streaming&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="体验优化">体验优化&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>gRPC Streaming 日志优化&lt;/strong>&lt;/p>
&lt;p>对于流式串联场景，若下游 Stream 出错是由于上游 Stream 退出，将会在错误中包含&amp;quot;[triggered by {serviceName}]&amp;ldquo;后缀，方便定位问题；&lt;/p>
&lt;p>Send 返回的 the stream is done 错误将变成导致流被关闭的真正错误。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码生成工具 Kitex Tool&lt;/strong>&lt;/p>
&lt;p>&lt;strong>生成速度和工具安装优化&lt;/strong>：无需再安装或升级 Thriftgo ，内置到 Kitex，在 IDL 特别庞大的场景，生成速度有较大提升。&lt;/p>
&lt;p>&lt;strong>最小化产物体积&lt;/strong>：产物体积最小化可以使用 Frugal，如果希望灰度开启，支持指定结构体使用 Frugal 序列化。详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/">代码生成工具&lt;/a>关于 -frugal-struct、-gen-frugal 参数的说明。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="不兼容变更-对99用户无影响">不兼容变更-对99%用户无影响&lt;/h3>
&lt;p>Kitex 会尽量保证常规使用方式的兼容性，个别用户可能对 Kitex 部分代码定义有依赖，Kitex 本次版本调整对这部分用户有影响。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>删除 &lt;code>thrift.NewBinaryProtocol&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>thrift.NewBinaryProtocol&lt;/code>是 Kitex 对 Apache thrift.TProtocol 接口的实现，因为 trans 部分直接使用 Kitex 的 ByteBuffer，相比 apache thrift.TBinaryProtocol 性能更好。在 v0.11.0 已经加了弃用注释。&lt;/p>
&lt;p>&lt;strong>删除原因&lt;/strong>: 因为要去除 Apache Thrift 依赖，所以需要删除该实现。&lt;/p>
&lt;p>&lt;strong>用户修改说明&lt;/strong>: 该实现本就是配套 Apache Codec 使用，如果你还需要依赖 Apache Codec，请直接使用 Apache 的TBinaryProtocol。如果觉得对性能有影响，可以把 Kitex 旧版本实现 fork 下来，参考 github/cloudwego/kitex v0.10.0。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;github.com/apache/thrift/lib/go/thrift&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">tProt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">thrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTBinaryProtocol&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">thrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTMemoryBufferLen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除 &lt;code>generic.ServiceInfo&lt;/code>&lt;/strong>&lt;/p>
&lt;p>泛化部分删除 &lt;code>generic.ServiceInfo&lt;/code> API。&lt;/p>
&lt;p>&lt;strong>删除原因&lt;/strong>: 因为多 Service 的支持需要对泛化部分定义做重构。&lt;/p>
&lt;p>&lt;strong>用户修改说明&lt;/strong>: 新 API 用 &lt;code>generic.ServiceInfoWithGeneric&lt;/code> 替代。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;github.com/cloudwego/kitex/pkg/generic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// removed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">ServiceInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pcType&lt;/span> &lt;span style="color:#000">serviceinfo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">PayloadCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">serviceinfo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ServiceInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// please use this instead&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">ServiceInfoWithGeneric&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">g&lt;/span> &lt;span style="color:#000">Generic&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">serviceinfo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ServiceInfo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="full-release-log">&lt;strong>Full Release Log&lt;/strong>&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1541">#1541&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1633">#1633&lt;/a>] feat(ttstream): support ttheader streaming and streamv2 interface&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1623">#1623&lt;/a>] feat(gRPC): optimize gRPC error prompt and metrics, assisting in troubleshooting problems&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1556">#1556&lt;/a>] feat(gRPC): support gRPC graceful shutdown&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1467">#1467&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1627">#1627&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1619">#1619&lt;/a>] feat(generic): support thrift streaming(over gRPC) for json generic client&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1607">#1607&lt;/a>] feat(tool): kitex tool support gen frugal codec for certain struct&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1526">#1526&lt;/a>] feat(generic): support an option to remove go.tag annotation&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1536">#1536&lt;/a>] feat(generic): support an option to set IDL ParseMode for each client&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1510">#1510&lt;/a>] feat: register service with service level middleware&lt;/p>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1635">#1635&lt;/a>] optimize: add two function for binary protocol to get bufiox reader and writer&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1630">#1630&lt;/a>] optimize(tool): implement no recursive generate to support incremental update&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1617">#1617&lt;/a>] optimize(retry): optimize UpdatePolicy and add test cases to check invalid retry policy. &amp;lt;v0.11.0, if the FailurePolicy is nil and type is 0 or &amp;gt;1, will trigger nil panic. The bug has been fixed in v0.11.0, this pr is to add test cases and optimize UpdatePolicy to ignore the nil panic&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1606">#1606&lt;/a>] optimize(tool): use embedded thriftgo as default option&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1595">#1595&lt;/a>] optimize(tool): optimize pb tool code&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1599">#1599&lt;/a>] optimize(tool): call FastWriteNocopy in FastWrite to avoid misuse by users&lt;/p>
&lt;h3 id="refactor">Refactor:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1615">#1615&lt;/a>] refactor: get rid of apache thrift in go.mod&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1611">#1611&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1614">#1614&lt;/a>] refactor: move ttheader codec logic to gopkg&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1553">#1553&lt;/a>] refactor(codec/thrift): unified typecodec implementation and adjust new file layout&lt;/p>
&lt;h3 id="perf">Perf:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1581">#1581&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1628">#1628&lt;/a>] perf(timeout): refactor new rpctimeout implementation to improve performance&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1564">#1564&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1567">#1567&lt;/a>] perf: reduce object allocation for circuitbreak middleware and retry context&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1557">#1557&lt;/a>] perf(rpcinfo): remove lock for rpcinfo.RPCStats&lt;/p>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1622">#1622&lt;/a>] fix(generic): use jsoniter instead of sonic for json generic-call, since sonic doesn&amp;rsquo;t support map[interface{}]interface{}&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1562">#1562&lt;/a>] fix: deep copy function of the generated code cannot copy the empty string&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1602">#1602&lt;/a>] fix(gRPC): check if the type assertion succeed in ProtocolMatch to avoid panic&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1598">#1598&lt;/a>] fix(retry): fix issue that mixed retry cannot update its config correctly&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1590">#1590&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1572">#1572&lt;/a>] fix(generic): set default values for optional fields of primitive types with generic with dynamicgo&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1580">#1580&lt;/a>] fix(netpoll): fix timeout caused by partial use of the Read method of remote.ByteBuffer&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1574">#1574&lt;/a>] fix(trace): stream event handler ignore io.EOF event&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1563">#1563&lt;/a>] fix(generic): fix the issue where the generic client sets the parse mode of CombineServices and then requests causes &amp;ldquo;unknown service&amp;rdquo; error&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1568">#1568&lt;/a>] fix(wpool): fix the issue of wpool object allocation, and incorrect ctx causing profiler errors.&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1558">#1558&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1555">#1555&lt;/a>] fix(bthrift): fix the issue of no recursion conversion of unknown field type under bthrift&lt;/p>
&lt;h3 id="chore">Chore:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1593">#1593&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1560">#1560&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1561">#1561&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1559">#1559&lt;/a>] chore(test): fix data race issue, unstable issue and long time running issue of some test cases&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1634">#1634&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1632">#1632&lt;/a>][&lt;a href="https://github.com/cloudwego/kitex/pull/1573">#1573&lt;/a>] chore(dep): upgrade frugal, localsession and other cloudwego dependency versions&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1616">#1616&lt;/a>] chore(generic): remove deprecated apis/interfaces/variables&lt;/p></description></item><item><title>Blog: 如何让你的 Kitex 生成代码击败 99% 的用户</title><link>https://www.cloudwego.io/zh/blog/2024/09/20/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84-kitex-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%87%BB%E8%B4%A5-99-%E7%9A%84%E7%94%A8%E6%88%B7/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/09/20/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84-kitex-%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%87%BB%E8%B4%A5-99-%E7%9A%84%E7%94%A8%E6%88%B7/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;h3 id="为什么要生成代码">为什么要生成代码&lt;/h3>
&lt;p>框架开发有两种常见的风格： Code First 和 Schema First&lt;/p>
&lt;p>简单来说，Code First 就是先写代码，再由代码生成数据模型和接口规范（比如先代码写一个 http 接口，然后用 Swagger 来生成 API 信息）&lt;/p>
&lt;p>而 RPC 开发更多是 Schema First ，因为 RPC 服务可能是跨语言的，不一定会先写代码，而是用 Thrift、Protobuf 这些通用的 IDL 来描述接口和结构体，再生成对应语言、对应框架的具体代码。&lt;/p>
&lt;p>（btw，用 IDL 生成 RPC 代码通常也比手搓一堆结构体和 Getter Setter 要方便不少）&lt;/p>
&lt;p>Kitex RPC 开发步骤也是先写 IDL，再由 Kitex Tool 生成 Golang 代码：&lt;/p>
&lt;ol>
&lt;li>IDL 里的结构体定义会被生成为 Golang 的桩结构体（和一些 Getter Setter）&lt;/li>
&lt;li>IDL 里 Service 和 Method 会被生成为 NewKitexClient、NewKitexServer、KitexServiceInfo 这些框架使用相关的脚手架函数&lt;/li>
&lt;/ol>
&lt;p>但如果你仔细观察过 kitex_gen 的内容，会发现上面代码占比并不多，主要是 FastRead、FastWrite 这些序列化相关的函数占了很多行。&lt;/p>
&lt;p>这是因为静态生成的序列化方性能会更高一些。（可以 hardcode 生成 hardcode 类型、字段名称等，不用走反射、减少函数调用等等&amp;hellip;..）&lt;/p>
&lt;p>此外，一些 Kitex 的功能特性也是基于生成的代码来实现的，例如 Unknown Fields 和 Field Mask&lt;/p>
&lt;p>所以，如果你想运行一个 Kitex RPC 服务，就需要根据 IDL 来生成这些桩代码。&lt;/p>
&lt;h3 id="生成代码里有什么">生成代码里有什么&lt;/h3>
&lt;p>以 Thrift 场景为例，Kitex Tool 生成内容的目录如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex_gen/
├── base
│ ├── base.go // 结构体桩代码 + 普通的序列化代码
│ ├── k-base.go // FastCodec 序列化代码
│ └── k-consts.go
└── test
├── example.go // 结构体桩代码 + 普通的序列化代码
├── k-consts.go
├── k-example.go // FastCodec 序列化代码
└── myservice // 创建 Kitex Client/Server 的脚手架
├── client.go
├── invoker.go
├── myservice.go
└── server.go
&lt;/code>&lt;/pre>&lt;p>其中，结构体相关的代码占据了大部分体积，例如 Getter Setter、FastRead、FastWrite：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法名&lt;/th>
&lt;th>描述&amp;amp;用途&lt;/th>
&lt;th>CodeGen 内容长度&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>InitDefault&lt;/td>
&lt;td>Frugal 场景需要&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GetXXXField/SetXXXField/IsSetXXXX&lt;/td>
&lt;td>GetterSetter，部分 interface 需要&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Read/ReadFieldX/Write/writeFieldX&lt;/td>
&lt;td>原生 Apache Codec&lt;/td>
&lt;td>长&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String&lt;/td>
&lt;td>Stringer&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DeepEqual/FieldXXXDeepEqual&lt;/td>
&lt;td>set 去重提速&lt;/td>
&lt;td>长&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DeepCopy&lt;/td>
&lt;td>RPAL 场景需要&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ThriftService 模板&lt;/td>
&lt;td>ServiceInterface 描述接口定义&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>XXXClientFactory、XXXClientProtocol&lt;/td>
&lt;td>旧的 ThriftClient 代码，不再有用&lt;/td>
&lt;td>较长&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>XXXProcessor&lt;/td>
&lt;td>旧的 Thrift Processor 代码，不再有用&lt;/td>
&lt;td>较长&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>XXXServiceMethodArgs/Result&lt;/td>
&lt;td>Thrift 为 Method 的入参和返回值单独生成的类型&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GetFirstArgument/GetResult&lt;/td>
&lt;td>args、result 专用&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FastRead/FastReadFieldX/FastWrite/FastWriteNocopy/BLength/fastWriteFieldX/fieldXLength&lt;/td>
&lt;td>FastCodec 编解码&lt;/td>
&lt;td>长&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GetOrSetBase/GetOrSetBaseResp&lt;/td>
&lt;td>特殊的 Base 相关接口，框架内部使用&lt;/td>
&lt;td>短&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="产物过大会怎么样">产物过大会怎么样&lt;/h3>
&lt;p>现在很多服务都有了自己的 IDL 大仓库，在字节的内部场景中，甚至出现了 6.8G 的超大型 IDL 仓库，包含了上百万个 commit&lt;/p>
&lt;p>这种情况下，随着业务迭代，IDL 的内容新增和相互引用不断增加（大家没事都不会去删 IDL，所以只会越来越大），所以生成 kitex_gen 之后，不管有的没的，产物体积可能会非常大&lt;/p>
&lt;p>体积太大了，会导致：&lt;/p>
&lt;ol>
&lt;li>生成耗时也很长，影响研发效率&lt;/li>
&lt;li>Goland 加载索引要很久，或者根本无法加载，没自动补全了，代码都不知道怎么写了&lt;/li>
&lt;li>Git 提交的时候内容巨大，Git 仓库也越来越大了，当 Git 仓库超过 500MB 后，&lt;a href="https://github.com/golang/go/issues/29210">甚至可能 go get 都拉不下来了&lt;/a>&lt;/li>
&lt;li>编译很慢、甚至编译时符号表过大&lt;a href="https://github.com/golang/go/issues/17378">直接编译失败&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>所以这种时候，不得不提到产物优化治理了（顺便能让生成速度更快）&lt;/p>
&lt;h2 id="优化手段">优化手段&lt;/h2>
&lt;p>过去半年，我们对生成速度和体积优化进行了一轮探索，总结了不少有用的手段。&lt;/p>
&lt;p>虽然由于历史包袱或其他原因，我们没把这些手段直接作为 kitex tool 的默认行为，但也经过了稳定的验证和一些字节内部场景的落地接入&lt;/p>
&lt;p>如果你的服务也受代码生成的困扰，下面的方法总有一款适合你~&lt;/p>
&lt;h3 id="idl-裁切">IDL 裁切&lt;/h3>
&lt;p>特点：大幅减少产物体积、提高生成速度&lt;/p>
&lt;h4 id="简介">简介&lt;/h4>
&lt;p>简单来说，很多项目的 Thrift IDL 有大量冗余内容，只需要生成所有 Method 直接或者间接引用到的结构体就好了，其他无关内容可以剔除掉。&lt;/p>
&lt;p>IDL 裁切工具能自动完成这个过程，使得 Kitex 代码生成速度和产物体积都得到很大的优化。根据一些字节内部大仓库的试点，生成耗时减半、产物体积减少 60%+ （你的 IDL 越大，里面的冗余内容越多，效果越好）&lt;/p>
&lt;h4 id="使用">使用&lt;/h4>
&lt;p>在 kitex 命令执行时，额外添加 &lt;code>-thrift trim_idl&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex -module xx -thrift trim_idl xxxx.thrift
&lt;/code>&lt;/pre>&lt;p>工具在执行时，会解析 IDL 然后只保留所有 Method 直接或间接用到的结构体，以最快的速度生成最简洁的产物，并同时输出一个裁切效果的报告：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_codegen_practices/wanring.jpg" alt="image">&lt;/p>
&lt;h4 id="进阶">进阶&lt;/h4>
&lt;blockquote>
&lt;p>有这样一种场景，某个超大 IDL 有 100 个 Method，但 A 团队只用其中 5 个 Method，B 团队只用另外 10 个 Method，对于每个团队而言，不需要生成 100 个 Method 以及所有的结构体&lt;/p>
&lt;/blockquote>
&lt;p>裁切工具提供了 -method ，细粒度到方法级别做裁切，以解决上面提到的场景，详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/idl_trimmer">指定 Method 裁切&lt;/a>&lt;/p>
&lt;h3 id="no_fmt-提速">no_fmt 提速&lt;/h3>
&lt;p>特点：代码生成提速 50%&lt;/p>
&lt;h4 id="简介-1">简介&lt;/h4>
&lt;p>在分析一些复杂 IDL 场景生成慢的火焰图时，发现 Kitex Tool 里有一个比较 interesting 的情况：生成代码后，对产物进行 go fmt 整理的耗时居然占了一半&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_codegen_practices/profile.png" alt="image">&lt;/p>
&lt;p>所以，如果你不是很关心产物代码的格式整不整齐，可以直接跳过这个操作，生成速度马上就快 50% 了&lt;/p>
&lt;p>虽然很粗暴，但确实很有用 😂&lt;/p>
&lt;p>（当然我们也试过对火焰图左边的 template 底层的反射开销做优化，预估快 20%，但改造和影响有点大。直接无脑去掉 no_fmt 提速 50% 后，速度就已经可以接受了，所以就没继续搞了）&lt;/p>
&lt;p>字节内部的产物平台通过该方式，代码生成耗时 P90 从 80s 下降到了 20s ，节约了了 60s (70%)&lt;/p>
&lt;h4 id="使用-1">使用&lt;/h4>
&lt;p>在 kitex 命令执行时，额外添加 &lt;code>-thrift no_fmt&lt;/code> 即可&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex -module xx -thrift no_fmt xxxx.thrift
&lt;/code>&lt;/pre>&lt;p>产物会有一些空行或者缩进上的不整齐，但往往 kitex_gen 里面的大量内容都是没人看的，所以也无所谓了&lt;/p>
&lt;h3 id="删除-processor">删除 Processor&lt;/h3>
&lt;p>特点：产物体积减小约 10%，速度等比提升&lt;/p>
&lt;p>v0.10.0+ 后的 kitex tool 已默认使用该策略&lt;/p>
&lt;h4 id="简介-2">简介&lt;/h4>
&lt;p>因为一些历史原因（以前对照 apache thrift 的一些无用实现），kitex_gen 会有些没用的代码，形如 XXXClientFactory、XXXClientProtocol、XXXProcessor：&lt;/p>
&lt;p>这部分代码原本是 apache thrift 场景用来创建 service 和 client 的，但在 kitex 中，会单独生成 xxxservice 目录，以及 client.go、server.go 这些 kitex server 和 kitex client 的实现。&lt;/p>
&lt;p>经确认，在 Kitex 场景下，这部分内容已经完全没被使用了（业务代码里也不会引用到），所以可以从生成代码里逐渐把这些内容移除掉。从 IDL 测试的平均值来看，产物体积优化约 10%，速度略微提升&lt;/p>
&lt;h4 id="使用-2">使用&lt;/h4>
&lt;p>在 Kitex 代码生成工具 v0.10.0 之后，会自动不生成这部分内容&lt;/p>
&lt;p>如果你的工具是旧版本，添加 &lt;code>-thrift no_processor&lt;/code> 参数即可&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex -module xx -thrift no_processor xxxx.thrift
&lt;/code>&lt;/pre>&lt;p>补充说明&lt;/p>
&lt;p>一般情况下，你可以放心的去掉这部分代码，因为确实用不到。但以防意外，如果 v0.10.0 的默认去除行为确实影响到你的代码了，导致编译失败等情况，可以通过 &lt;code>-thrift no_processor=false&lt;/code> 来阻止这一行为：&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex -module xx -thrift no_processor=false xxxx.thrift
&lt;/code>&lt;/pre>&lt;p>并联系 Cloudwego 社区，进行后续支持&lt;/p>
&lt;h3 id="删除-deep-equal">删除 Deep Equal&lt;/h3>
&lt;p>特点：产物体积减小约 20%，速度等比例提升&lt;/p>
&lt;h4 id="简介-3">简介&lt;/h4>
&lt;p>Kitex 对 Thrift IDL 的 set 类型生成是数组，会进行去重检查&lt;/p>
&lt;p>默认情况下，会为每个结构体生成 DeepEqual 方法，因为静态生成的性能好。如果不生成，就默认用反射库的 reflect.DeepEqual （性能慢）&lt;/p>
&lt;p>如果在用不到 set 或用的不多的场景下，可以不生成 DeepEqual 方法来节约体积&lt;/p>
&lt;h4 id="使用-3">使用&lt;/h4>
&lt;p>添加参数 &lt;code>-thrift gen_deep_equal=false&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex -module xxx -thrift gen_deep_equal=false xxx.thrift
&lt;/code>&lt;/pre>&lt;h4 id="注意">注意&lt;/h4>
&lt;p>剔除这个来优化产物的前提是不对 set 有大量使用，如果 set 使用的地方很多，或者 set 里的元素数量很大，那么可能会有性能下降的问题&lt;/p>
&lt;p>但如果你在使用 set 之前，已经对写入的元素做了去重检查，那其实 Kitex 框架里的这步二次检查就是多余的了，可以考虑使用 -thrift validate_set=false 来关闭检查，反而节约一次多余的计算开销&lt;/p>
&lt;p>后续我们会针对 Deep Equal 以及 Set 的去重用法做更合理的实现，保证产物精简高效&lt;/p>
&lt;h3 id="删除-apache-codec">删除 Apache Codec&lt;/h3>
&lt;p>特点：产物体积减小约 50%，速度等比例提升&lt;/p>
&lt;h4 id="背景">背景&lt;/h4>
&lt;blockquote>
&lt;p>为什么 Kitex 代码里有两套编解码&lt;/p>
&lt;/blockquote>
&lt;p>kitex_gen 里会生成 Apache Codec 和 Fast Codec 两套编解码。Fast Codec 性能更好，但需要从协议里读到 payload size 才能用，所以只有 TTHeader、Framed 场景能用
绝大多服务都接入了使用 TTHeader，或手动设置了 Framed，所以直接用 Fast Codec&lt;/p>
&lt;p>这就有了一个想法： 对大部分服务，Apache Codec 占了快 50% 的体积，而且基本没用，只是用来兜底的
如果能让 Thrift Buffered 也能走 Fast Codec，就没必要保留 Apache Codec 了
可以把服务的默认协议从 Buffered 改为 Framed&lt;/p>
&lt;h4 id="简介-4">简介&lt;/h4>
&lt;p>在 Kitex v0.10.0 里，我们实现了一个 SkipDecoder，可以让 Thrift Buffered 场景也能走 Fast Codec 编解码，而不需要 Apache Codec 兜底了，通过这个功能，你就可以在仓库里少生成一半的代码&lt;/p>
&lt;p>同时 Kitex v0.10.0 也把默认协议设置为了 Framed，进一步减少了线上的 Apache Codec 使用空间。&lt;/p>
&lt;h4 id="使用-4">使用&lt;/h4>
&lt;p>保证你的 Kitex 版本高于 v0.10.0
重新做代码生成，添加 &lt;code>-thrift no_default_serdes&lt;/code> 参数&lt;/p>
&lt;pre tabindex="0">&lt;code>kitex -module xxx -thrift no_default_serdes xxx.thrift
&lt;/code>&lt;/pre>&lt;p>这样生成的代码就没有 Apache Codec 内容，少了一大半体积
开启 Skip Decoder，在 NewClient 或 NewServer 的时候添加如下参数：&lt;/p>
&lt;pre tabindex="0">&lt;code>import (
&amp;#34;github.com/cloudwego/kitex/pkg/remote/codec/thrift&amp;#34;
&amp;#34;demo/kitex_gen/kitex/samples/echo/echoservice&amp;#34;
)
func main() {
cli := echoservice.MustNewClient(&amp;#34;kitex.samples.echo&amp;#34;,
client.WithPayloadCodec(thrift.NewThriftCodecWithConfig(thrift.FastRead|thrift.FastWrite|thrift.EnableSkipDecoder)),
)
srv := echoservice.NewServer(handler,
server.WithPayloadCodec(thrift.NewThriftCodecWithConfig(thrift.FrugalWrite|thrift.FrugalRead|thrift.EnableSkipDecoder)),
)
}
&lt;/code>&lt;/pre>&lt;p>这样，当你的服务收到 Thrift Buffered 报文时，会通过 SkipDecoder + FastCodec 完成编解码，不再依赖 Apache Codec&lt;/p>
&lt;h4 id="注意-1">注意&lt;/h4>
&lt;p>Skip Decoder 功能已经正式发布了，但还需手动开启。后续计划 Skip Decoder 默认启用&lt;/p>
&lt;p>一旦使用了 &lt;code>-thrift no_default_serdes&lt;/code> 从生成代码里去除了 Apache Codec，对应的 Kitex Client / Kitex Server 要添加 Skip Decoder 配置，否则当收到对端的 Thrift Buffered 报文时，会无法解析，所有请求报错失败！&lt;/p>
&lt;p>Apache Codec 的序列化实现是读一段内容解析一段内容，而 Skip Decoder 和 Fast Codec 的序列化实现都是一次读完所有内容然后整体解析，这样虽然速度更快了，但占用内存会多一些。绝大部分情况无所谓。但如果你的服务比较特殊，比如一次读的内容非常大，为了避免内存过大，明确设置过禁用 Fast Codec，通过 Apache Codec 来编解码，这种场景下，请谨慎考虑这个特性。&lt;/p>
&lt;h4 id="低版本如何操作">低版本如何操作&lt;/h4>
&lt;p>如果 Kitex 版本低于 v0.10.0，没有 SkipDecoder 能力来兜底 Thrift Buffered 场景，但也想删除 Apache Codec 来治理产物体积，思路如下&lt;/p>
&lt;ol>
&lt;li>
&lt;p>确保你的服务，以及上下游服务，都不采用 Thrift Buffered 协议，如果是 Kitex，那么把他们至少都设置为 Framed 协议，这样就走不到 Apache Codec 的逻辑了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成代码添加 &lt;code>-thrift no_default_serdes&lt;/code> 来减少一半的产物体积&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这样做有一些风险点：&lt;/p>
&lt;p>如果某个服务考虑漏了，发送了 Buffered 协议，那么这些请求都会失败&lt;/p>
&lt;p>如果你的下游有一些很旧的其他框架（例如老版本的 Java 框架），不支持 Buffered 协议，那么这条链路就不能这么搞&lt;/p>
&lt;p>所以推荐还是升级 Kitex 版本到 v0.10.0，用 Skip Decoder 的能力来兜底&lt;/p>
&lt;h3 id="frugal">Frugal&lt;/h3>
&lt;p>特点：产物体积减小约 90%，速度等比例提升&lt;/p>
&lt;h4 id="简介-5">简介&lt;/h4>
&lt;p>Frugal 是一款动态的不需要编解码代码的 Thrift 编解码器，通过启用 slim 模板，Kitex 可以只生成 Golang Types，上文提到的 Apache Codec 和 Fast Codec 都不需要了，编解码在运行时通过反射或 JIT 实现。这样可以大幅减少生成的代码量，减少 IDE 加载时间，相比正常的 kitex_gen，体积缩小 90%，且性能仍然较高。&lt;/p>
&lt;h4 id="使用-5">使用&lt;/h4>
&lt;p>说来话长，步骤相对较多，详见：https://github.com/cloudwego/frugal&lt;/p>
&lt;h4 id="注意-2">注意&lt;/h4>
&lt;p>目前 Frugal 是基于 JIT 实现的，所以：&lt;/p>
&lt;ul>
&lt;li>JIT 首次编解码耗时会长一些，可能会影响首批请求的耗时&lt;/li>
&lt;li>也可以在服务启动时就通过 Pretouch 预热，但当 IDL 非常复杂的时候，启动时间会增加&lt;/li>
&lt;li>目前不支持 Unknown Fields 特性&lt;/li>
&lt;li>在 ARM64 场景还处在试验性的支持中&lt;/li>
&lt;/ul>
&lt;h4 id="其他">其他&lt;/h4>
&lt;p>近期我们实现了一个基于 Golang 反射版的 Frugal，对不同系统的兼容性较好，而且也不会有太严重的首次耗时，后续会更新文档和相关使用方式&lt;/p>
&lt;p>长期规划中，我们期望 Frugal 能逐渐广泛落地，让绝大多数 Kitex 项目不再需要生成大量代码，只有当对性能有更高要求的场景，才使用 FastCodec 这种静态生成的编解码。&lt;/p>
&lt;h3 id="进阶-工具-sdk-化">进阶: 工具 SDK 化&lt;/h3>
&lt;p>速度预计优化 10%~25%，易用性和维护性有提升&lt;/p>
&lt;blockquote>
&lt;p>这是个进阶功能，如果你是某个 Kitex Tool 相关的代码生成项目维护者，可能会对你有帮助&lt;/p>
&lt;/blockquote>
&lt;h4 id="简介-6">简介&lt;/h4>
&lt;p>当要使用 Kitex Tool 生成代码，以往都只能安装 Kitex Tool （以及 Thriftgo、Validator 等工具链），然后执行命令来触发。一些代码生成项目，是通过在 Golang 代码里起一个进程，通过 os.Exec 来调用本地的 Kitex Tool，实现代码生成的。&lt;/p>
&lt;p>之前这样设计是想着能跨语言、插件进程可拔插，不过实际场景用到的很少。所以在 v0.11.0 之后，Kitex Tool 提供了 SDK 化调用的能力，可以通过引入依赖包 + Golang 函数来生成代码，而无需再安装 Kitex Tool、Thriftgo、Validator 插件等一系列工具链了&lt;/p>
&lt;h4 id="使用-6">使用&lt;/h4>
&lt;p>首先引入依赖包： &lt;code>import &amp;quot;github.com/cloudwego/kitex/tool/cmd/kitex/sdk&amp;quot;&lt;/code>&lt;/p>
&lt;p>接口签名如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>func RunKitexTool(wd string, plugins []plugin.SDKPlugin, kitexArgs ...string) error
&lt;/code>&lt;/pre>&lt;p>参数含义：&lt;/p>
&lt;ul>
&lt;li>wd：想在哪个路径下执行 kitex tool 命令&lt;/li>
&lt;li>plugins：想同时内嵌执行哪些插件，例如 Validator 插件，也实现了对应的接口。一般用不到，写 nil 即可&lt;/li>
&lt;li>kitexArgs：想执行哪些参数，按 kitex tool 的常规写法来，然后空格拆分成数组传入即可&lt;/li>
&lt;li>一个例子：想在当前目录执行 kitex -module my_mod xxx.thrift，按下面方式写就可以了&lt;/li>
&lt;li>err := sdk.RunKitexTool(os.Getwd(), nil, &amp;ldquo;-module&amp;rdquo;, &amp;ldquo;my_mod&amp;rdquo;, &amp;ldquo;xxx.thrift&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>适用场景&lt;/p>
&lt;blockquote>
&lt;p>普通开发者不用太关心，日常用不到&lt;/p>
&lt;/blockquote>
&lt;p>这种使用方式中，不需要安装 thriftgo（而且不会有自升级行为），直接内嵌 thriftgo 函数调用省掉了进程调用和数据传输的开销，在一些复杂场景，生成速度能提高 10%~25%，而且更易于维护或集成使用。&lt;/p>
&lt;p>如果你在开发某种封装了 Kitex 的代码生成器或者代码生成平台，那么可以通过这种方式来代替 os.Exec 调用 Kitex 命令行，同时也省去了维护本地 kitex tool、thriftgo 二进制文件。&lt;/p>
&lt;p>后续 Kitex Tool 将默认内嵌 Thriftgo SDK，就不再需要单独安装 Thriftgo 或者关系工具版本关系了&lt;/p>
&lt;h2 id="我们还在做什么">我们还在做什么&lt;/h2>
&lt;p>一些还在探索的产物优化&amp;amp;生成提速手段&lt;/p>
&lt;h3 id="fastcodec-高性能重构">FastCodec 高性能重构&lt;/h3>
&lt;p>我们正在重构一版 FastCodec 的代码生成实现，预期会占用更少的代码体积，具有更好的编解码性能，并且与现在的实现完全兼容。开发完成后，我们会生成这套更好的 FastCodec 内容。&lt;/p>
&lt;h3 id="增量代码更新">增量代码更新&lt;/h3>
&lt;p>有时候一组 IDL 有上千个，但每次改动 diff 只有一点（比如添加了一个字段之类的），刷新生成代码就要等上很久，大部分生成的内容都和之前没区别，在做无用功。如果能对变动的 IDL 单独更新，就能极大缩短时间&lt;/p>
&lt;p>目前 Kitex Tool 从技术上是可以做到这点的，但需要结合具体的生成场景来看如何集成&lt;/p>
&lt;h3 id="冗余字段消除">冗余字段消除&lt;/h3>
&lt;p>当前由于代码产物过大、版本管理困难等原因，各业务线往往使用 公共代码生成仓库来管理生成产物。但是同一套 IDL 面向不同服务场景往往有不同的数据字段下发规则，此时某一使用公共结构体的客户端就会产生冗余字段。此外，随着业务逻辑的迭代，IDL 中也可能有大量 事实上无用但是并未删除的废弃 Field 字段。这些情况都会转化为不必要的 thrift 编解码开销，最终导致服务性能下降。因此我们希望通过某种方式来判断业务主进程中 实际没有使用到的字段，前置到 kitex tool 中进行预处理，最终优化掉其产生的不必要性能开销。（前文提到的 IDL 裁切是删减没用的结构体，而这种手动能更精准的清理无用的结构体字段、并减少编译和序列化开销）&lt;/p></description></item><item><title>Blog: Kitex Release v0.11.0</title><link>https://www.cloudwego.io/zh/blog/2024/09/12/kitex-release-v0.11.0/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/09/12/kitex-release-v0.11.0/</guid><description>
&lt;blockquote>
&lt;p>建议直接升级 Kitex 版本到 v0.11.3, 因为我们对 v0.11.0 里的一些性能问题进行了优化&lt;/p>
&lt;/blockquote>
&lt;h2 id="重要变更介绍">&lt;strong>重要变更介绍&lt;/strong>&lt;/h2>
&lt;h3 id="新特性">新特性&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>重试：新增混合重试功能&lt;/strong>：支持同时开启「失败重试」+「Backup Request」两种策略，能够在降低长尾请求的同时提高请求的重试成功率，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/retry/">请求重试&lt;/a>&lt;/li>
&lt;li>&lt;strong>自定义 Payload 校验&lt;/strong>：为避免硬件故障或数据篡改导致收发的数据不一致，Kitex 提供了对 Payload 报文的校验功能，并支持自定义扩展，使用方式参见: &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/payload_validator/">payload 校验&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="功能优化">功能优化&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Frugal ARM 性能优化&lt;/strong>：Frugal 支持了基于反射的高性能编解码，升级到 Frugal v0.2.0 即可&lt;/li>
&lt;li>&lt;strong>Kitex Tool 代码生成提速&lt;/strong>：提供了 &lt;code>-rapid&lt;/code> 参数，可以无需安装 Thriftgo ，且速度略有提高。下个版本之后将作为默认行为。&lt;/li>
&lt;li>&lt;strong>多 Service 多 Handler 生成&lt;/strong>：从该版本开始，Kitex Tool 支持为每个 service 生成 handler 并统一注册到 server，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/multi_handler/">多 Service 多 Handler 生成&lt;/a>&lt;/li>
&lt;li>&lt;strong>Streaming JSON 泛化[试用阶段]&lt;/strong>：JSON 泛化调用支持了 streaming 流式接口（仅限 client），目前正在持续优化中，并未正式发布，有兴趣可以试用，详见 &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/generic_streaming/">Generic Streaming&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="其他">其他&lt;/h3>
&lt;ol>
&lt;li>支持版本 Go 1.18~1.23，最低支持变为 Go 1.18，如果你的 Go 版本过低，编译时会有提示：&lt;code>note: module requires Go 1.18&lt;/code>&lt;/li>
&lt;li>逐步移除对 Apache Thrift 的依赖，将对 Thrift 编解码相关的逻辑逐步收敛到 github.com/cloudwego/gopkg/thrift 库中&lt;/li>
&lt;/ol>
&lt;h2 id="详细变更">&lt;strong>详细变更&lt;/strong>&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1509">#1509&lt;/a>] feat(retry): support Mixed Retry which integrating Failure Retry and Backup Request&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1478">#1478&lt;/a>] feat: customized payload validator&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1514">#1514&lt;/a>] feat(grpc): server returns cancel reason&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1513">#1513&lt;/a>] feat(tool): support updating import path for PkgInfo&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1425">#1425&lt;/a>] feat(tool): support generating multiple handlers for multiple services&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1491">#1491&lt;/a>] feat(grpc): add GetTrailerMetadataFromCtx&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1492">#1492&lt;/a>] feat: add GetCallee to kitexutil to get the service name of callee&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1479">#1479&lt;/a>] feat(tool): embed thriftgo into kitex tool&lt;/p>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1485">#1485&lt;/a>] optimize: add cachekey to discovery event for debug&lt;/p>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1525">#1525&lt;/a>] fix: move json-iterator back to support marshal &lt;code>map[any]any&lt;/code>&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1471">#1471&lt;/a>] fix(streaming): resolve ctx diverge in server-side streaming&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1515">#1515&lt;/a>] fix(gRPC): pass error when client transport is closed&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1501">#1501&lt;/a>] fix(generic): judge business error directly&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1503">#1503&lt;/a>] fix: return an unknown service/method exception to client correctly under multi_service server scenario&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1487">#1487&lt;/a>] fix(generic): fix a generic serviceInfo compatible issue&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1489">#1489&lt;/a>] fix(codec): wrap trans error for apache thrift read error&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1486">#1486&lt;/a>] fix(trans/netpoll): log when panic in onConnRead&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1476">#1476&lt;/a>] fix: fix GetServerConn interface assert for streamWithMiddleware&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1481">#1481&lt;/a>] fix(gonet): adjust gonet server read timeout to avoid read error&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1466">#1466&lt;/a>] fix: allow HEADERS frame with empty header block fragment&lt;/p>
&lt;h3 id="refactor">Refactor:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1512">#1512&lt;/a>] refactor: thrift and generic codec uses bufiox interface for encoding and decoding&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1490">#1490&lt;/a>] refactor: optimized apache codec without reflection&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1483">#1483&lt;/a>] refactor: use github.com/cloudwego/gopkg/protocol/thrift/apache&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1474">#1474&lt;/a>] refactor: rm apache thrift in internal/mocks&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1470">#1470&lt;/a>] refactor: rm apache thrift in pkg/generic &amp;amp; netpollmux&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1450">#1450&lt;/a>] refactor(generic): remove apache thrift.TProtocol from generic&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1441">#1441&lt;/a>] refactor: deprecate bthrift, use cloudwego/gopkg&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1455">#1455&lt;/a>] refactor(test): perf optimize and log loc correct&lt;/p>
&lt;h3 id="tests">Tests:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1469">#1469&lt;/a>] test: replace judgement of mem stats of client finalizer by closed count check&lt;/p>
&lt;h3 id="perf">Perf:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1527">#1527&lt;/a>] perf(grpc): bdp ping rate limit&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1511">#1511&lt;/a>] perf(thrift): encodeBasicThrift write logic didn&amp;rsquo;t use kitex BinaryProtocol&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1504">#1504&lt;/a>] perf(grpc): zero allocation in hot path&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1497">#1497&lt;/a>] perf: add option to enable spancache for fastpb&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1495">#1495&lt;/a>] perf(thrift): use kitex BinaryProtocol replace apache BinaryProtocol for apache thrift codec&lt;/p>
&lt;h3 id="chore">Chore:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1532">#1532&lt;/a>] chore: update dependency&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1522">#1522&lt;/a>] chore(generic): make generic streaming APIs internal&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1465">#1465&lt;/a>] chore(generic): add an external method to create service info for generic streaming client&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1468">#1468&lt;/a>] build: adapt to go1.23rc2&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1482">#1482&lt;/a>] chore(generic): add generic base using gopkg base&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1463">#1463&lt;/a>] chore: fix grpc keepalive test by start server responsiblly&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1462">#1462&lt;/a>] chore(test): fix xorshift64 in consist_test.go&lt;/p>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1454">#1454&lt;/a>] chore(ci): speed up multiple ci processes 8min -&amp;gt; 1min&lt;/p></description></item><item><title>Blog: Kitex Release v0.10.0</title><link>https://www.cloudwego.io/zh/blog/2024/06/12/kitex-release-v0.10.0/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/06/12/kitex-release-v0.10.0/</guid><description>
&lt;h2 id="重要变更介绍">&lt;strong>重要变更介绍&lt;/strong>&lt;/h2>
&lt;h3 id="性能优化">性能优化&lt;/h3>
&lt;p>新版本探索了更多性能优化的方向和非常规的一些优化手段。&lt;/p>
&lt;ol>
&lt;li>长连接池: 100 并发 qps 提升 4%, p99 降低 18%&lt;/li>
&lt;li>多路复用: 100 并发 qps 提升 7%, p99 降低 24%&lt;/li>
&lt;li>gRPC: 100 并发 qps优化 8%，p99优化 10%&lt;/li>
&lt;/ol>
&lt;h3 id="代码产物精简优化">代码产物精简优化&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>移除非序列化代码（默认）&lt;/strong>：原 kitex_gen Thrift 产物代码为保持与 Apache 的一致性，会生成 Processor 代码，但 Kitex 并不需要这些代码。为解决大家的产物痛点问题，此版本默认去除这部分代码，生成速度提升约10%。&lt;/li>
&lt;li>&lt;strong>移除 Apache Codec 代码（配置移除）&lt;/strong>：Kitex 有自定义的 FastCodec 代码，旧版本仅在 Buffered 包需要使用 Apache Codec。Kitex 新版本实现 SkipDecoder，在开启后就可以完全不依赖 Apache Codec，进而移除代码，产物体积可减少约50%。使用方式见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/skip_decoder/">SkipDecoder&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="新特性">新特性&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Thrift 按需序列化&lt;/strong>：支持定义 FieldMask 实现数据按需序列化（字段裁剪、合并，RPC性能优化等），详见 &lt;a href="https://github.com/cloudwego/thriftgo/tree/main/fieldmask">Thrift FieldMask RFC&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="功能优化">功能优化&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>熔断&lt;/strong>：支持自定义熔断的错误类型&lt;/li>
&lt;li>&lt;strong>异常重试&lt;/strong>：代码配置的自定义结果重试增加 ctx 参数，方便用户结合 ctx 信息判断是否重试&lt;/li>
&lt;li>&lt;strong>移除一致性哈希中的缓存&lt;/strong>：解决hash key分散导致的延迟变高、内存上涨的问题。移除缓存后，面对 Key 特别分散甚至接近随机分布的场景，可以有效降低内存占用与管理缓存的消耗。&lt;/li>
&lt;/ol>
&lt;h3 id="用户体验优化">用户体验优化&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Kitex 工具兼容性检测&lt;/strong>：优化过去产物引入新定义导致的 undefined 编译问题。Kitex 工具在生成代码前会检查 go.mod 中使用的 Kitex 版本。若 Kitex 工具和 Kitex 版本不兼容，则不会生成代码并给出相应的升降级提示。&lt;/li>
&lt;/ol>
&lt;h2 id="详细变更">&lt;strong>详细变更&lt;/strong>&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1370">#1370&lt;/a>] feat(loadbalance): do not cache all the keys for Consistent Hash&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1359">#1359&lt;/a>] feat:(generic) jsonpb using dynamicgo support parse IDL from memory&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1353">#1353&lt;/a>] feat(retry): add ctx param for customized result retry funcs&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1352">#1352&lt;/a>] feat: add option to specify ip version for default HTTPResolver&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1316">#1316&lt;/a>] feat(kitex tool): support dependencies compatibility checking&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1346">#1346&lt;/a>] feat(generic): set dynamicgo parse mode&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1336">#1336&lt;/a>] feat(tool): fast-codec supports Thrift Fieldmask&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1313">#1313&lt;/a>, #1378] feat(thrift codec): implement skipDecoder to enable Frugal and FastCodec for standard Thrift Buffer Protocol&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1257">#1257&lt;/a>] feat: CBSuite custom GetErrorType func&lt;/li>
&lt;/ol>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1349">#1349&lt;/a>] optimize(gRPC): gRPC onError uses CtxErrorf to print log with information in ctx&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1326">#1326&lt;/a>] optimize(tool): remove thrift processor for less codegen&lt;/li>
&lt;/ol>
&lt;h3 id="perf">Perf:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1369">#1369&lt;/a>] perf(thrift): optimized skip decoder&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1314">#1314&lt;/a>] perf: use dirtmake to reduce memclr cost&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1322">#1322&lt;/a>] perf(codec): support fast write nocopy when using netpoll link buffer&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1276">#1276&lt;/a>] perf: linear allocator for fast codec ReadString/ReadBinary&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1320">#1320&lt;/a>] perf(codec): fast codec use batch alloc&lt;/li>
&lt;/ol>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1379">#1379&lt;/a>] fix: fix a bug &amp;ldquo;unknown service xxx&amp;rdquo; when using generic client by not writing IDLServiceName when it&amp;rsquo;s generic service&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1368">#1368&lt;/a>] fix(remote): modify the error message thrown when no target service is found&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1374">#1374&lt;/a>] fix: init default values when using liner allocator&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1361">#1361&lt;/a>] fix: span cache re-cap bytes when using Make&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1362">#1362&lt;/a>] fix(payloadCodec): replace the registered PayloadCodec if the type is same when using WithPayloadCodec for server-side&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1364">#1364&lt;/a>] fix: fix grpc compressor mcache free panic when data is empty&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1328">#1328&lt;/a>] fix(gRPC): release connection in DoFinish for grpc streaming to close the short connection&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1307">#1307&lt;/a>] fix(connpool): kitex long pool reset idleList element to nil to prevent conn leak&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1294">#1294&lt;/a>] fix(netpollmux): fix a bug that disables multi-service by assigning the first svcInfo to targetSvcInfo&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1308">#1308&lt;/a>] fix(generic): not write generic method name for binary generic exception to align with method names of services not using binary generic&lt;/li>
&lt;/ol>
&lt;h3 id="refactor">Refactor:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1344">#1344&lt;/a>] refactor(tool): export thriftgo template definition in kitextool&lt;/li>
&lt;/ol>
&lt;h3 id="chore">Chore:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1385">#1385&lt;/a>] chore: update dynamicgo to v0.2.8&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1383">#1383&lt;/a>] chore: upgrade netpoll to v0.6.1&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1376">#1376&lt;/a>] chore: integration test use go 1.20 to solve the compatibility issue of official gRPC in kitex-tests repo&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1355">#1355&lt;/a>] chore: upgrade netpoll to v0.6.1 pre-release version&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1338">#1338&lt;/a>] chore: correct the comment of FreezeRPCInfo&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1347">#1347&lt;/a>] chore: use runtimex to replace choleraehyq/pid&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1342">#1342&lt;/a>] chore: update sonic/loader to v0.1.1&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1334">#1334&lt;/a>] chore: update dynamicgo to v0.2.3&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1324">#1324&lt;/a>] chore: update dynamicgo and sonic version&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1317">#1317&lt;/a>] chore: frugal v0.1.15 (with migrated iasm)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong>
@XiaoYi-byte&lt;/p></description></item><item><title>Blog: kitexcall：用 JSON 发起 RPC 请求的命令行神器</title><link>https://www.cloudwego.io/zh/blog/2024/05/31/kitexcall%E7%94%A8-json-%E5%8F%91%E8%B5%B7-rpc-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8/</link><pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/05/31/kitexcall%E7%94%A8-json-%E5%8F%91%E8%B5%B7-rpc-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A5%9E%E5%99%A8/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Kitex 是字节跳动基础架构服务框架团队推出的 Go 微服务 RPC 框架，支持 Thrift、Kitex Protobuf、gRPC 等消息协议，具有高性能、强可扩展的特点。Kitex 于 2021 年 9 月正式开源后，已在多家外部企业成功落地，为他们带来了真实的成本、性能和稳定性收益。
然而，对于开发者来说，有一个痛点是，为了验证 Server 端代码，发起 RPC 测试请求的流程比较繁琐。&lt;/p>
&lt;h2 id="痛点">痛点&lt;/h2>
&lt;p>给 Kitex 服务发送 RPC 测试请求的过程通常包括：&lt;/p>
&lt;ol>
&lt;li>生成客户端代码：根据 IDL 文件生成 Kitex Client 相关代码。&lt;/li>
&lt;li>构造测试请求：构建请求、调用方法、处理响应。&lt;/li>
&lt;li>配置多种选项：设置传输协议、元信息、异常处理等。
这一过程不仅耗时，且在频繁测试时，每次都需修改和编译代码，效率较低。一个能简化这些步骤、快速发送 RPC 请求的工具，将大幅提升开发效率。&lt;/li>
&lt;/ol>
&lt;h2 id="kitexcall-介绍">kitexcall 介绍&lt;/h2>
&lt;blockquote>
&lt;p>详情可以参考：https://github.com/kitex-contrib/kitexcall&lt;/p>
&lt;/blockquote>
&lt;p>为了简化开发者的工作，社区推出了 kitexcall 这个命令行工具，基于 Kitex 提供的 JSON 泛化调用，极大地简化了 Kitex 客户端的编写过程。开发者只需通过简单的命令行操作，就可以轻松发起 Kitex 请求，而不再需要编写繁琐的代码。&lt;/p>
&lt;p>kitexcall 目前已发布 v0.1.1 版本，具备以下功能特点：&lt;/p>
&lt;ul>
&lt;li>支持 Thrift/Protobuf：可以处理 Thrift 和 Protobuf 格式的 IDL。&lt;/li>
&lt;li>支持多种传输协议：包括 Buffered、TTHeader、Framed、TTHeaderFramed，未来还将支持 gRPC。&lt;/li>
&lt;li>灵活的客户端选项：支持指定常用的客户端选项，如 &lt;code>client.WithHostPorts&lt;/code>。&lt;/li>
&lt;li>多种数据输入方式：请求数据可以从命令行参数或本地文件读取。&lt;/li>
&lt;li>元信息传递：支持单跳透传和持续透传的元信息，并接收服务器返回的反向透传元信息。&lt;/li>
&lt;li>业务异常处理：接收并处理业务自定义的异常错误码和信息。&lt;/li>
&lt;li>多种输出格式：默认输出人类友好的可读格式，未来将支持可解析的格式，便于与其他自动化工具集成。
下面，我们通过一个简单的例子，展示如何使用 kitexcall 发起一个 Kitex 请求。&lt;/li>
&lt;/ul>
&lt;h2 id="使用示例">使用示例&lt;/h2>
&lt;p>首先安装 kitexcall 命令行工具：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">go&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">github&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">kitex&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">contrib&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">kitexcall&lt;/span>&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">latest&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以 &lt;a href="https://github.com/cloudwego/kitex-examples">kitex-examples&lt;/a> 的 Echo 服务为例，将其 IDL 文件保存为 echo.thrift。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">namespace&lt;/span> &lt;span style="color:#204a87;font-weight:bold">go&lt;/span> &lt;span style="color:#000">api&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Request&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">message&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Response&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">message&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">service&lt;/span> &lt;span style="color:#000">Echo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Response&lt;/span> &lt;span style="color:#000">Echo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Request&lt;/span> &lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为方便测试，你可以用如下步骤在本机启动这个 Echo 服务（默认监听 8888 端口）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">git&lt;/span> &lt;span style="color:#000">clone&lt;/span> &lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//github.com/cloudwego/kitex-examples.git&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#000">cd&lt;/span> &lt;span style="color:#000">kitex&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">examples&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">basic&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">$&lt;/span> &lt;span style="color:#204a87;font-weight:bold">go&lt;/span> &lt;span style="color:#000">run&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Info&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">KITEX&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">server&lt;/span> &lt;span style="color:#000">listen&lt;/span> &lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">=[::]:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8888&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 kitexcall 发起请求非常简单，只要在命令行中指定 IDL 文件、方法名称、请求报文（JSON 格式）和 Server 地址即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">kitexcall&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">idl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">path&lt;/span> &lt;span style="color:#000">echo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">thrift&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#000">echo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8888&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后就可以看到 kitexcall 输出服务端返回的响应报文：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span> &lt;span style="color:#000">Success&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你希望从文件中读入请求数据，也可以先创建请求数据文件 input.json：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>并在 kitexcall 的参数中用 -f 参数指定文件名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">kitexcall&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">idl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">path&lt;/span> &lt;span style="color:#000">echo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">thrift&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#000">echo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">json&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">127.0.0.1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8888&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="原理简介">原理简介&lt;/h2>
&lt;p>kitexcall 工具基于 Kitex 提供的 JSON 泛化调用实现。其原理简单介绍如下：&lt;/p>
&lt;ol>
&lt;li>Descriptor Provider&lt;/li>
&lt;/ol>
&lt;p>kitexcall 使用 Kitex 提供的 DescriptorProvider 接口来解析 Thrift 或 Protobuf 的 IDL 文件，获取服务定义。&lt;/p>
&lt;ol start="2">
&lt;li>泛化对象创建&lt;/li>
&lt;/ol>
&lt;p>解析 IDL 文件后，kitexcall 创建泛化对象（如 JSONThriftGeneric 或 JSONPbGeneric），将 JSON 数据转换为内部请求格式，并将响应数据转换回 JSON 格式。&lt;/p>
&lt;ol start="3">
&lt;li>客户端初始化&lt;/li>
&lt;/ol>
&lt;p>kitexcall 使用泛化对象和客户端选项（如传输协议、元信息处理等）来创建泛化客户端。该客户端可以调用 IDL 文件中定义的任何服务方法。&lt;/p>
&lt;ol start="4">
&lt;li>请求构建与发送&lt;/li>
&lt;/ol>
&lt;p>kitexcall 从命令行输入或文件中读取 JSON 格式的请求数据，构建请求对象并发送请求，同时设置传输协议和元信息。&lt;/p>
&lt;ol start="5">
&lt;li>响应处理
接收到响应后，kitexcall 将其格式化为 JSON 并输出。如果启用了元信息回传机制，还会输出从服务端返回的元信息。&lt;/li>
&lt;/ol>
&lt;h2 id="未来展望">未来展望&lt;/h2>
&lt;p>kitexcall 作为一个社区驱动的项目，致力于简化开发者使用 Kitex 进行 RPC 调用的过程。未来，我们计划在以下几个方面进行改进和扩展：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>计划支持 gRPC（含基于 gRPC/HTTP2 的 Thrift Streaming）协议，以适应更多的使用场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持通过服务发现获取 Kitex Server 地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 Kitex Server 支持 Reflection 能力之后，kitexcall 将跟进，实现无需 IDL 文件，即可获取服务详情和进行服务调用，使用将会更加便捷。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持可解析的输出格式（如 JSON），以便与其他自动化工具集成（例如 CI/CD、IDE 插件等场景）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>欢迎对 Kitex 和 kitexcall 感兴趣的开发者加入社区，共同贡献代码和创意。我们相信，在大家的共同努力下，kitexcall 将成为 Kitex 开发者手中的一把利器，让微服务开发变得更加高效和便捷。访问 &lt;a href="https://github.com/kitex-contrib/kitexcall">kitexcall&lt;/a> 了解更多信息，并加入我们吧！&lt;/p>
&lt;h3 id="项目地址">项目地址&lt;/h3>
&lt;p>GitHub：https://github.com/cloudwego&lt;/p></description></item><item><title>Blog: Kitex 支持 Dubbo 协议：助力多语言云原生生态融合</title><link>https://www.cloudwego.io/zh/blog/2024/03/16/kitex-%E6%94%AF%E6%8C%81-dubbo-%E5%8D%8F%E8%AE%AE%E5%8A%A9%E5%8A%9B%E5%A4%9A%E8%AF%AD%E8%A8%80%E4%BA%91%E5%8E%9F%E7%94%9F%E7%94%9F%E6%80%81%E8%9E%8D%E5%90%88/</link><pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/03/16/kitex-%E6%94%AF%E6%8C%81-dubbo-%E5%8D%8F%E8%AE%AE%E5%8A%A9%E5%8A%9B%E5%A4%9A%E8%AF%AD%E8%A8%80%E4%BA%91%E5%8E%9F%E7%94%9F%E7%94%9F%E6%80%81%E8%9E%8D%E5%90%88/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Kitex 是字节跳动基础架构服务框架团队推出的 Go 微服务 RPC 框架，支持 Thrift、Kitex Protobuf、gRPC 等消息协议，具有高性能、强可扩展的特点。于 2021 年 9 月正式开源后，已在多家外部企业成功落地，为他们带来了真实的成本、性能和稳定性收益。&lt;/p>
&lt;p>很多企业用户在使用 Kitex 改造服务的过程中，需要 Kitex 能与现有的 Dubbo 框架实现的服务进行通信，这与 CloudWeGo 社区积极拓展生态的目标不谋而合，因此 Dubbo 互通项目 &lt;a href="https://github.com/kitex-contrib/codec-dubbo">codec-dubbo&lt;/a> 应运而生。&lt;/p>
&lt;p>在社区同学的热情帮助下，目前 codec-dubbo 能做到 Kitex 与 Dubbo-Java，Kitex 与 Dubbo-Go 互通，支持 Dubbo 用户向 Kitex 迁移。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Dubbo_interoperate/kitex_dubbo_interoperate.png" alt="image">&lt;/p>
&lt;p>本文将以方正证券利用 Kitex 与 codec-dubbo 成功进行服务改造为例，对改造过程中使用到的 codec-dubbo 主要功能进行阐述，并简要分析其中的实现细节。&lt;/p>
&lt;h2 id="企业落地案例">企业落地案例&lt;/h2>
&lt;p>方正证券原有的服务采用 Java 和 Dubbo 框架编写，两者稳定且经过了大量场景的验证，符合他们的生产和开发需求。以请求量较大的小方个股详情页为例，高峰期的接口 QPS 在 3-4k，使用 16 台 16 Core 64G 虚拟机进行承载。&lt;/p>
&lt;p>随着云原生架构的兴起，凭借内存占用与执行效率的优势以及天然适配云原生，Go 逐渐成为构建企业服务的重要技术选项。为了更好地降本增效，综合考虑成本、性能和稳定性等因素后，他们决定在新建应用上由 Java 转向 Go，引入 Kitex，Hertz 等 CloudWeGo 项目进行服务开发与重构，并整体迁移至 Kubernetes 环境。&lt;/p>
&lt;p>在重构过程中，codec-dubbo 凭借接近原生 Kitex + Thrift 的使用体验以及对 Dubbo 概念的良好支持，降低了使用和理解成本，成功帮助他们解决了 Kitex &amp;lt;-&amp;gt; Dubbo 的互通问题，让 Kitex 服务顺利调用原有的 Dubbo 服务。&lt;/p>
&lt;p>目前，使用了 codec-dubbo 的 Kitex 服务已成功上线，稳定运行两个月。还是以小方个股详情页为例，Kitex 和 Hertz 承载了该页面一半左右的接口，在 QPS 不变的情况下，只需要提供 12 个 4 Core 4G Pod，降低资源占用效果显著。&lt;/p>
&lt;h2 id="codec-dubbo-功能特性">codec-dubbo 功能特性&lt;/h2>
&lt;h3 id="dubbo-协议编解码器">Dubbo 协议编解码器&lt;/h3>
&lt;p>Dubbo 服务主要使用 Dubbo 协议进行通信，为了支持 Kitex &amp;lt;-&amp;gt; Dubbo 互通，我们需要在 Kitex 中实现 Dubbo 协议。得益于 Kitex 优秀的扩展性，codec-dubbo 根据 Kitex 提供的 Codec 接口实现了 DubboCodec 这一核心编解码器，只需在初始化时注入 DubboCodec 便能使用 Dubbo 协议。&lt;/p>
&lt;h3 id="类型映射与拓展">类型映射与拓展&lt;/h3>
&lt;h4 id="类型映射">类型映射&lt;/h4>
&lt;p>Dubbo 主要使用 Hessian2 序列化协议进行 Payload 的编解码，它最大的特点是自描述序列化类型，即不依赖外部 Schema 或接口定义。序列化过程依赖编程语言类型和 Hessian2 类型之间的映射，以 Go 类型转化为 Java 类型为例：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Dubbo_interoperate/types_convert_process.png" alt="image">&lt;/p>
&lt;p>经过分析，我们发现 Hessian2 的基础类型系统与 Thrift 基本重合。为了保证 Kitex + codec-dubbo 的使用体验与 Kitex + Thrift 基本一致，我们基于 Thrift IDL 来生成 Kitex Dubbo-Hessian2 脚手架代码，此时类型转化过程如下所示：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Dubbo_interoperate/types_convert_process_with_thrift.png" alt="image">&lt;/p>
&lt;p>参考 Dubbo 官方的 &lt;a href="https://github.com/apache/dubbo-go-hessian2">dubbo-go-hessian2&lt;/a> 类型映射，codec-dubbo 提供如下类型映射(此处仅包含部分映射，更多注意事项请参考 codec-dubbo Readme )：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>THRIFT 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>Go 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>HESSIAN2 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>JAVA 类型&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">i32&lt;/td>
&lt;td style="text-align: center">int32&lt;/td>
&lt;td style="text-align: center">int&lt;/td>
&lt;td style="text-align: center">java.lang.Integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">double&lt;/td>
&lt;td style="text-align: center">float64&lt;/td>
&lt;td style="text-align: center">double&lt;/td>
&lt;td style="text-align: center">java.lang.Double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">string&lt;/td>
&lt;td style="text-align: center">string&lt;/td>
&lt;td style="text-align: center">string&lt;/td>
&lt;td style="text-align: center">java.lang.String&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">list&lt;i32>&lt;/td>
&lt;td style="text-align: center">[]int32&lt;/td>
&lt;td style="text-align: center">list&lt;/td>
&lt;td style="text-align: center">List&lt;Integer>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">list&lt;double>&lt;/td>
&lt;td style="text-align: center">[]float64&lt;/td>
&lt;td style="text-align: center">list&lt;/td>
&lt;td style="text-align: center">List&lt;Double>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">list&lt;string>&lt;/td>
&lt;td style="text-align: center">[]string&lt;/td>
&lt;td style="text-align: center">list&lt;/td>
&lt;td style="text-align: center">List&lt;String>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">map&amp;lt;bool, i32&amp;gt;&lt;/td>
&lt;td style="text-align: center">map[bool]int32&lt;/td>
&lt;td style="text-align: center">map&lt;/td>
&lt;td style="text-align: center">Map&amp;lt;Boolean, Integer&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">map&amp;lt;bool, double&amp;gt;&lt;/td>
&lt;td style="text-align: center">map[bool]float64&lt;/td>
&lt;td style="text-align: center">map&lt;/td>
&lt;td style="text-align: center">Map&amp;lt;Boolean, Double&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">map&amp;lt;bool, string&amp;gt;&lt;/td>
&lt;td style="text-align: center">map[bool]string&lt;/td>
&lt;td style="text-align: center">map&lt;/td>
&lt;td style="text-align: center">Map&amp;lt;Boolean, String&amp;gt;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>根据 codec-dubbo 提供的类型映射，我们能很轻松地将 Dubbo 接口定义转化为 Thrift IDL，并使用 Kitex 命令行工具生成项目脚手架代码，最终注入 DubboCodec 完成 Kitex -&amp;gt; Dubbo 的通信。以下方 Dubbo 接口定义为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">org.cloudwego.kitex.samples.api&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">GreetProvider&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetResponse&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Greet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">throws&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">implements&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Serializable&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">req&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">GreetResponse&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">implements&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Serializable&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">resp&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的 api.thrift 文件如下所示，需要注意到其中的结构体定义都需要加上 &lt;code>JavaClassName&lt;/code> 的注解，对应 Dubbo 接口定义中的 package + 类名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;org.cloudwego.kitex.samples.api.GreetRequest&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetResponse&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;org.cloudwego.kitex.samples.api.GreetResponse&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetService&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetResponse&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Greet&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 Kitex 命令行工具，并指定协议为 Hessian2：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>kitex -module demo-client -protocol Hessian2 ./api.thrift
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后初始化 DubboCodec 并将其注入 Kitex ，利用生成代码编写以下 Client 端代码即可实现 Kitex -&amp;gt; Dubbo 调用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">javaClass&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;org.cloudwego.kitex.samples.api.GreetProvider&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">greetservice&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;helloworld&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 指定想要访问的服务端地址，也支持 ZooKeeper 服务发现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">client&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithHostPorts&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;127.0.0.1:21000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 配置 DubboCodec&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">client&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 指定想要调用的 Dubbo Interface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">dubbo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewDubboCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">dubbo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithJavaClassName&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">javaClass&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Greet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Background&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Req&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">klog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">klog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Infof&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;resp: %s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Resp&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Kitex + codec-dubbo Server 端流程与 Client 端基本类似，具体例子可参考项目主页。&lt;/p>
&lt;h4 id="类型拓展">类型拓展&lt;/h4>
&lt;p>Hessian2 schema-free 的特性导致 Dubbo 的实现“过于灵活”，可以使用任意类型。为了适配 Dubbo Hessian2 的类型使用灵活性，codec-dubbo 支持类型拓展，其中主要包括自定义映射与 Java 常用类型拓展。&lt;/p>
&lt;h5 id="自定义映射">自定义映射&lt;/h5>
&lt;p>Java 的基础类型有与之对应的包装类型，例如 &lt;code>boolean&lt;/code> 与 &lt;code>java.lang.Boolean&lt;/code>。类型映射中默认将 Go 的 类型映射到 Java 的 &lt;code>java.lang.Boolean&lt;/code> 类型并不能覆盖到使用 &lt;code>boolean&lt;/code> 的情况。&lt;/p>
&lt;p>为了统一用户使用体验，让他们在 Kitex 侧只需使用 &lt;code>bool&lt;/code> 类型，我们可以在 Thrift 的方法定义后面加上 &lt;code>hessian.argsType=&amp;quot;boolean&amp;quot;&lt;/code> 注解，利用 thriftgo 的 IDL 反射功能，提前生成 IDL 元信息并注入 codec-dubbo，便可以在运行时动态地将默认映射类型 &lt;code>java.lang.Boolean&lt;/code> 改写成 &lt;code>boolean&lt;/code> 。具体 Thrift 定义如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoService&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoBoolean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">hessian.argsType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;boolean&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与 &lt;code>boolean&lt;/code> 和 &lt;code>java.lang.Boolean&lt;/code> 类似，其他 Java 基础类型和包装类型也能通过这种方式进行自定义映射，此时 codec-dubbo 提供的完整类型映射如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;strong>THRIFT 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>GO 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>HESSIAN2 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>默认 JAVA 类型&lt;/strong>&lt;/th>
&lt;th style="text-align: center">&lt;strong>可拓展 JAVA 类型&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">i32&lt;/td>
&lt;td style="text-align: center">int32&lt;/td>
&lt;td style="text-align: center">int&lt;/td>
&lt;td style="text-align: center">java.lang.Integer&lt;/td>
&lt;td style="text-align: center">int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">double&lt;/td>
&lt;td style="text-align: center">float64&lt;/td>
&lt;td style="text-align: center">double&lt;/td>
&lt;td style="text-align: center">java.lang.Double&lt;/td>
&lt;td style="text-align: center">double float / java.lang.Float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">string&lt;/td>
&lt;td style="text-align: center">string&lt;/td>
&lt;td style="text-align: center">string&lt;/td>
&lt;td style="text-align: center">java.lang.String&lt;/td>
&lt;td style="text-align: center">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">list&lt;i32>&lt;/td>
&lt;td style="text-align: center">[]int32&lt;/td>
&lt;td style="text-align: center">list&lt;/td>
&lt;td style="text-align: center">List&lt;Integer>&lt;/td>
&lt;td style="text-align: center">int[] / ArrayList&lt;Integer>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">list&lt;double>&lt;/td>
&lt;td style="text-align: center">[]float64&lt;/td>
&lt;td style="text-align: center">list&lt;/td>
&lt;td style="text-align: center">List&lt;Double>&lt;/td>
&lt;td style="text-align: center">double[] / ArrayList&lt;Double> float[]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">list&lt;string>&lt;/td>
&lt;td style="text-align: center">[]string&lt;/td>
&lt;td style="text-align: center">list&lt;/td>
&lt;td style="text-align: center">List&lt;String>&lt;/td>
&lt;td style="text-align: center">String[] / ArrayList&lt;String>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">map&amp;lt;bool, i32&amp;gt;&lt;/td>
&lt;td style="text-align: center">map[bool]int32&lt;/td>
&lt;td style="text-align: center">map&lt;/td>
&lt;td style="text-align: center">Map&amp;lt;Boolean, Integer&amp;gt;&lt;/td>
&lt;td style="text-align: center">HashMap&amp;lt;Boolean, Integer&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">map&amp;lt;bool, double&amp;gt;&lt;/td>
&lt;td style="text-align: center">map[bool]float64&lt;/td>
&lt;td style="text-align: center">map&lt;/td>
&lt;td style="text-align: center">Map&amp;lt;Boolean, Double&amp;gt;&lt;/td>
&lt;td style="text-align: center">HashMap&amp;lt;Boolean, Double&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">map&amp;lt;bool, string&amp;gt;&lt;/td>
&lt;td style="text-align: center">map[bool]string&lt;/td>
&lt;td style="text-align: center">map&lt;/td>
&lt;td style="text-align: center">Map&amp;lt;Boolean, String&amp;gt;&lt;/td>
&lt;td style="text-align: center">HashMap&amp;lt;Boolean, String&amp;gt;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="java-常用类型拓展">java 常用类型拓展&lt;/h5>
&lt;p>由于 Thrift 类型的局限性，我们无法直接使用 Java 类库中提供的常用类型。为此，codec-dubbo 在 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/tree/main/java">codec-dubbo/java&lt;/a> 包中维护了 Thrift 不支持的 Java 类型(例如 &lt;code>java.lang.Object&lt;/code> 、 &lt;code>java.util.Date&lt;/code> )以及与之对应的 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/java/java.thrift">java.thrift&lt;/a> ，同时借助 thriftgo 提供的 idl-ref 功能，我们可以直接在 Thrift IDL 中引用这些类型并生成相应代码。当前的 java.thrift 如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Object&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;java.lang.Object&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Date&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;java.util.Date&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;java.lang.Exception&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了启用这些类型，我们需要在 Thrift IDL 中使用 &lt;code>include &amp;quot;java.thrift&amp;quot;&lt;/code> 导入它们，并且在使用 Kitex 命令行工具生成代码时添加 &lt;code>-hessian2 java_extension&lt;/code> 参数来拉取该拓展包。&lt;/p>
&lt;p>Kitex 命令行工具会自动下载 java.thrift ，你也可以手动下载后放到项目的根目录。引用 java.thrift 中类型的 Thrift IDL 示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">include&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;java.thrift&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoService&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// java.lang.Object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoString2ObjectMap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">java.Object&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// java.util.Date
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoDate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">java.Date&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="方法重载">方法重载&lt;/h3>
&lt;p>Go 原生不支持方法重载，只能通过定义多个方法来达到类似重载的效果。为了将 Go 中的多个方法映射到 Java 中的重载方法，与自定义映射一节类似，我们在 Thrift 的方法定义后面加上 &lt;code>JavaMethodName&lt;/code> 标签，借助 thriftgo 的 IDL 反射功能在运行时动态地将 Go 侧原本的方法名改写成 &lt;code>JavaMethodName&lt;/code> 指定的 Java 侧中的重载方法。&lt;/p>
&lt;p>以 Java 侧的 EchoMethod 为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Boolean&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Boolean&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Integer&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req2&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们编写如下 Thrift 定义，即可完成 Go 与 Java 间的重载方法映射，注意到 &lt;code>JavaMethodName&lt;/code> 和 &lt;code>hessian.argsType&lt;/code> 可以同时使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoService&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethodA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaMethodName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;EchoMethod&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethodB&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaMethodName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;EchoMethod&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethodC&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaMethodName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;EchoMethod&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">hessian.argsType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;int&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">EchoMethodD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">req2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">JavaMethodName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;EchoMethod&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="异常处理">异常处理&lt;/h3>
&lt;p>codec-dubbo 将 Java 中的异常映射为 Go 中的错误，这些错误统一实现以下接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Throwabler&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">GetStackTrace&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">StackTraceElement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据 Dubbo 官方推荐的异常处理实践以及企业用户目前的需求，我们将异常划分为常见异常与自定义异常，同时兼顾用户的基础需求以及可扩展需求。&lt;/p>
&lt;h4 id="常见异常">常见异常&lt;/h4>
&lt;p>codec-dubbo 在 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/tree/main/pkg/hessian2/exception">pkg/hessian2/exception&lt;/a> 包中提供了 Java 常见的异常，目前支持 &lt;code>java.lang.Exception&lt;/code> 。&lt;/p>
&lt;p>常见异常无需 Kitex 命令行工具的支持，直接引用即可，以下是 Client 端提取异常和 Server 端返回异常的示例。&lt;/p>
&lt;h5 id="client端提取异常">Client端提取异常&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Greet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Background&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Req&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// FromError 返回 Throwabler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">exceptionRaw&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">hessian2_exception&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FromError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 视作常规错误处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 若不关心 exceptionRaw 的具体类型，直接调用 Throwabler 提供的方法即可&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">klog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;get %s type Exception&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">exceptionRaw&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 若想获得 exceptionRaw 的具体类型，需要进行类型转换，但前提是已知该具体类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">exceptionRaw&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">hessian2_exception&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="server端返回异常">Server端返回异常&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GreetServiceImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Greet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">req&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GreetRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resp&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">hello&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GreetResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">hessian2_exception&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewException&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Your detailed message&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="自定义异常">自定义异常&lt;/h4>
&lt;p>Java 中的自定义异常往往会继承一个基础异常，这里以 &lt;code>CustomizedException&lt;/code> 为例，&lt;code>CustomizedException&lt;/code> 继承了 &lt;code>java.lang.Exception&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">CustomizedException&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">extends&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Exception&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">private&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">final&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">customizedMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomizedException&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">customizedMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">super&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">customizedMessage&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">customizedMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>得益于 thriftgo 支持生成嵌套结构体，为了在 Kitex 侧定义与之对应的异常，我们在 Thrift 中编写如下定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-thrift" data-lang="thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">exception&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">CustomizedException&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// thrift.nested=“true” 注解让 thriftgo 生成嵌套结构体
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">java.Exception&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">exception&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">thrift.nested&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">customizedMessage&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}(&lt;/span>&lt;span style="color:#000">JavaClassName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;org.cloudwego.kitex.samples.api.CustomizedException&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意 &lt;code>exception&lt;/code> 字段的注解 &lt;code>thrift.nested=&amp;quot;true&amp;quot;&lt;/code> ，它让 thriftgo 生成嵌套结构体，达到类似继承的效果。&lt;/p>
&lt;p>和 Java 常用类型扩展一样，需要在使用 kitex 脚手架工具生成代码时添加 &lt;code>-hessian2 java_extension&lt;/code> 参数来拉取拓展包，生成代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">EchoCustomizedException&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">java&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Exception&lt;/span> &lt;span style="color:#4e9a06">`thrift:&amp;#34;exception,1,required&amp;#34; frugal:&amp;#34;1,required,java.Exception&amp;#34; json:&amp;#34;exception&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">CustomizedMessage&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`thrift:&amp;#34;customizedMessage,2,required&amp;#34; frugal:&amp;#34;2,required,string&amp;#34; json:&amp;#34;customizedMessage&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用方法与常见异常一致，此处不再赘述。&lt;/p>
&lt;h3 id="服务注册与发现">服务注册与发现&lt;/h3>
&lt;p>Dubbo 同时提供&lt;strong>接口级&lt;/strong>与&lt;strong>应用级&lt;/strong>服务注册发现模型，根据企业用户当前的生产环境需要，我们选择优先实现基于 zookeeper 的&lt;strong>接口级&lt;/strong>模型：Dubbo registry-zookeeper。&lt;/p>
&lt;p>与我们熟知的应用级模型不同，接口级模型需要维护接口名 =&amp;gt; 服务(不同于微服务，更接近 Handler )的映射关系，一个接口名会映射到多个服务 ，这些服务可能会存在于同一个进程中。&lt;/p>
&lt;p>考虑到 Dubbo 的接口级服务模型与 Kitex 的服务模型差别较大，且 Dubbo registry-zookeeper 应绑定 codec-dubbo 使用，因此不考虑修改 kitex-contrib 中原有的 registry-zookeeper，让 dubbo registry-zookeeper 成为 codec-dubbo 的一个子 go module 统一进行开发与维护。&lt;/p>
&lt;p>综合考虑 Dubbo 接口级服务模型、Kitex API 与用户的使用体验，我们提供以下的配置层次：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/registries/zookeeper/registry/options.go">registry/options.go&lt;/a> 与 &lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/registries/zookeeper/resolver/options.go">resolver/options.go&lt;/a> 中的 WithServers 和 WithRegistryGroup 函数提供注册中心级别的配置，分别指定 zookeeper 的地址和这些 zookeeper 所属的组。用户使用这些函数生成 Kitex 中 &lt;code>registry.Registry&lt;/code> 和 &lt;code>discovery.Resolver&lt;/code> 实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务级别的配置由 &lt;code>client.WithTag&lt;/code> 与 &lt;code>server.WithRegistryInfo&lt;/code> 进行传递，&lt;a href="https://github.com/kitex-contrib/codec-dubbo/blob/main/registries/common.go">registries/common.go&lt;/a> 提供 Tag keys ，这些 key 与 Dubbo 中的服务元数据一一对应。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="resolver-示例">resolver 示例&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">intfName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;org.cloudwego.kitex.samples.api.GreetProvider&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">resolver&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewZookeeperResolver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 指定 zookeeper 服务器的地址，可指定多个，请至少指定一个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">resolver&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithServers&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;127.0.0.1:2181&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">cli&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">greetservice&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;helloworld&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 配置 ZookeeperResolver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">client&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithResolver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 指定想要调用的 dubbo Interface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">client&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithTag&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">registries&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DubboServiceInterfaceKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">intfName&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 使用 cli 进行 RPC 调用&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="registry-示例">registry 示例&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">intfName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;org.cloudwego.kitex.samples.api.GreetProvider&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">reg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">registry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewZookeeperRegistry&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 指定 zookeeper 服务器的地址，可指定多个，请至少指定一个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">registry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithServers&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;127.0.0.1:2181&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">svr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">greetservice&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewServer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GreetServiceImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithRegistry&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">reg&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// 配置dubbo URL元数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithRegistryInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">kitex_registry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Info&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Tags&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">registries&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DubboServiceInterfaceKey&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">intfName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// application请与dubbo所设置的ApplicationConfig保持一致，此处仅为示例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">registries&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DubboServiceApplicationKey&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;application-name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 启动 svr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Kitex 支持了 Dubbo 协议，是 CloudWeGo 助力多语言云原生生态融合的一大步，解决了众多企业用户 Java 转 Go 、 Java 与 Go 并存的痛点，欢迎大家试用和接入；如果在使用过程遇到任何问题，可以加入我们的飞书用户群，或者在 Github 上给我们提反馈。&lt;/p></description></item><item><title>Blog: Kitex Release v0.9.0</title><link>https://www.cloudwego.io/zh/blog/2024/03/04/kitex-release-v0.9.0/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2024/03/04/kitex-release-v0.9.0/</guid><description>
&lt;p>v0.9.0 针对 Thrift 提供了两个重要的功能：Thrift Streaming 和 Multi-Service，发布多个 RC 版本在内部试点收集反馈，所以正式版本姗姗来迟。&lt;/p>
&lt;p>下面就重要变更做一些介绍：&lt;/p>
&lt;h2 id="重要变更介绍">&lt;strong>重要变更介绍&lt;/strong>&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>&lt;strong>1. Thrift Streaming&lt;/strong>&lt;/p>
&lt;p>基于 gRPC(HTTP2) 的 Thrift Streaming 功能正式 Release，用户可以使用 Thrift IDL 定义自己的 Streaming 请求，为保持 IDL 解析的兼容性，Kitex 的 Streaming 方法的定义通过注解的方式，使用方式见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/thrift_streaming/">Thrift Streaming Usage&lt;/a>。本版本也对 Streaming 请求的监控上报做了改进，同样适用于 gRPC-Protobuf。注意，Thrift 主要用于结构体序列化，并没有使用 Thrift 消息协议。&lt;/p>
&lt;p>由于 HTTP2 协议的复杂性对性能有一定有影响，后续计划发布自研 Streaming 协议提升性能。&lt;/p>
&lt;p>&lt;strong>2. 完整的 Thrift MultiService 支持&lt;/strong>&lt;/p>
&lt;p>在 v0.8.0 版本中，Kitex 对 gRPC 对齐了多 Service 的能力，而 Thrift 多 Service 之前为保证协议的兼容性提供了 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/combine_service/">Combine Service&lt;/a> 支持，但该功能的使用要求不同 IDL Service 的方法不能相同，并不是真正的多 Service。本次版本中 Kitex 基于 TTHeader 提供了协议层面真正的多 Service 功能，支持在一个 Server 里注册多个 Thrift IDL Service，同时兼容旧的 CombineService。使用方式见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/">Multi-Service&lt;/a>。&lt;/p>
&lt;p>注：Thrift Multi-Service 需使用 TTHeader 传输协议。&lt;/p>
&lt;p>&lt;strong>3. Frugal 对 ARM64 的实验性支持&lt;/strong>&lt;/p>
&lt;p>支持在 ARM64 机器上使用 Frugal，暂时是 Fallback 支持。&lt;/p>
&lt;p>&lt;strong>4. 服务端超时&lt;/strong>&lt;/p>
&lt;p>增加 &lt;code>server.WithEnableContextTimeout&lt;/code> option 支持在服务端给 context 增加 timeout，同时新版本里，Kitex 会默认透传 Client 超时配置给下游 Server。详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/timeout/">超时配置&lt;/a>。&lt;/p>
&lt;p>注：需使用 TTHeader 传输协议。&lt;/p>
&lt;p>&lt;strong>5. KitexProtobuf 协议支持 JSON 泛化调用&lt;/strong>&lt;/p>
&lt;p>与 Thrift 的 JSON 泛化调用使用方式一样，新版本对 KitexProtobuf 也做了同样的支持。见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/#jsonpbgeneric">JSONPbGeneric&lt;/a>。&lt;/p>
&lt;p>注：需使用 TTHeader 传输协议。&lt;/p>
&lt;p>&lt;strong>6. 负载均衡新增策略&lt;/strong>&lt;/p>
&lt;p>新增 Alias Method 的负载均衡方法，来减少权重随机负载均衡算法的时间复杂度。通过 &lt;code>client.WithLoadBalancer(loadbalance.NewWeightedRandomWithAliasMethodBalancer())&lt;/code> 指定。&lt;/p>
&lt;h3 id="特别的变更">特别的变更&lt;/h3>
&lt;p>v0.9.0 要求 Go 版本必须 &amp;gt;= 1.17，不再兼容 Go &amp;lt;= v1.16 (稳定性要求必须升级 golang.org/x/ 库引入的 Go 版本限制)&lt;/p>
&lt;h2 id="配置中心的扩展生态完善">&lt;strong>配置中心的扩展生态完善&lt;/strong>&lt;/h2>
&lt;blockquote>
&lt;p>注意与 v0.9.0 版本无关，仅同步社区扩展的状态&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>主流的配置中心对接均完成 Release&lt;/strong>&lt;/p>
&lt;p>Kitex 对超时、重试、熔断、限流的策略支持通过远程配置中心来控制，感谢社区的贡献者们，目前&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/third-party/config-center/">主流的配置中心&lt;/a>均已完成扩展对接并 Release，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/third-party/config-center/">配置中心&lt;/a>。&lt;/p>
&lt;h2 id="详细变更">&lt;strong>详细变更&lt;/strong>&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1208">#1208&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/1251">#1251&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/1230">#1230&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/1226">#1226&lt;/a>] feat: support thrift streaming (replacing the protobuf payload of GRPC/HTTP2 with thrift binary)&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1217">#1217&lt;/a>] feat: support thrift and pb multi service&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1268">#1268&lt;/a>] feat(thrift): support frugal fallback for arm&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/951">#951&lt;/a>] feat(bizerr): support returning biz status error for json/map generic server&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1199">#1199&lt;/a>] feat(loadbalance): add loadbalancer using Alias Method (#1184)&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1244">#1244&lt;/a>] feat(timeout): add option server.WithEnableContextTimeout to enable server timeout&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1228">#1228&lt;/a>] feat(streaming): Adding Recv/End events to streaming requests to improve trace information&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1062">#1062&lt;/a>] feat(generic): supports JSON and Map generic call for the KitexProtobuf protocol, &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/#jsonpbgeneric">doc&lt;/a>&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1225">#1225&lt;/a>] feat(timeout): support timeout transparent transmission by default when using TTHeader transport protocol&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1211">#1211&lt;/a>] feat(hessian2): support nested struct for hessian2 customized Exception&lt;/li>
&lt;/ol>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1222">#1222&lt;/a>] optimize(frugal): enable frugal by default when the generated code is using slim template&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1209">#1209&lt;/a>] optimize: split encoder interface to customize meta and payload encoding implementation&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1206">#1206&lt;/a>] optimize(tool): add IsDir judge in readTemplate and add template register func&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1198">#1198&lt;/a>] optimize(kitexutil): add util api for getting real request and response&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1197">#1197&lt;/a>] optimize(kitexutil): add GetCallerIP util method in kitexutil to fetch Caller IP&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1195">#1195&lt;/a>] optimize(error): more specific instruction when panic in server handler&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1235">#1235&lt;/a>] optimize(tool): add IDLName field in PackageInfo for cwgo tool rendering&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1238">#1238&lt;/a>] optimize(bizerr): support biz status error for streaming mode&lt;/li>
&lt;/ol>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1236">#1236&lt;/a>] fix(hessian2): correct code-ref behavior when thrift file is not in project dir&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1234">#1234&lt;/a>] fix(hessian2): still perform replacement on handler.go when -service is not specified for hessian2&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1232">#1232&lt;/a>] fix(gRPC): append &amp;ldquo;h2&amp;rdquo; to next proto in gRPC tlsConfig to enable protocol negotiation in TLS&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1215">#1215&lt;/a>] fix: bugfix for hessian2 tpl codegen&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1203">#1203&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/1205">#1205&lt;/a>] fix: fix the issue where disabling rpcinfo reuse on the server side does not take effect&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1227">#1227&lt;/a>] fix: idl-ref overwritten when using hessian2&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1194">#1194&lt;/a>] fix(retry): always set RespOp &amp;amp;&amp;amp; preventive panic to avoid dead loop&lt;/li>
&lt;/ol>
&lt;h3 id="chore--tests">Chore &amp;amp; Tests&lt;/h3>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1273">#1273&lt;/a>] chore: upgrade netpoll to v0.6.0&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1263">#1263&lt;/a>] chore: update sonic to v1.11.1&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1255">#1255&lt;/a>] chore: upgrade netpoll to v0.6.0 pre-release version&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1252">#1252&lt;/a>] chore: upgrade golang.org/x/net&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1254">#1254&lt;/a>] chore: upgrade sonic to v1.11.0 to support go1.22&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1231">#1231&lt;/a>] chore: frugal support go1.22&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1220">#1220&lt;/a>] test: correct the cachekey in the benchmark test of balancer&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1196">#1196&lt;/a>] test: add just biz handler message error&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong>
@DMwangnima @jizhuozhi @NX-Official @jieqiboh @Lvnszn @Skyenought&lt;/p></description></item><item><title>Blog: Kitex 两周年回顾 — 能力升级、社区合作与未来展望</title><link>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-%E4%B8%A4%E5%91%A8%E5%B9%B4%E5%9B%9E%E9%A1%BE-%E8%83%BD%E5%8A%9B%E5%8D%87%E7%BA%A7%E7%A4%BE%E5%8C%BA%E5%90%88%E4%BD%9C%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-%E4%B8%A4%E5%91%A8%E5%B9%B4%E5%9B%9E%E9%A1%BE-%E8%83%BD%E5%8A%9B%E5%8D%87%E7%BA%A7%E7%A4%BE%E5%8C%BA%E5%90%88%E4%BD%9C%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/</guid><description>
&lt;blockquote>
&lt;p>本篇文章是 CloudWeGo 两周年庆典系列的第一篇。&lt;/p>
&lt;/blockquote>
&lt;p>今天的分享主要分成三个部分，首先是 &lt;a href="http://github.com/cloudwego/kitex">Kitex&lt;/a> 的能力升级，看一下过去一年在&lt;strong>性能&lt;/strong>、&lt;strong>功能&lt;/strong>和&lt;strong>易用性&lt;/strong>这个方面上的一些进展。第二个是社区合作项目的进展，特别是其中两个重点项目 &lt;strong>Kitex-Dubbo 互通&lt;/strong>以及&lt;strong>配置中心集成&lt;/strong>。第三个是给大家剧透一下我们目前在做以及计划做的一些事情。&lt;/p>
&lt;h2 id="能力升级">能力升级&lt;/h2>
&lt;h3 id="性能">性能&lt;/h3>
&lt;p>在2021年9月，我们曾发布了一篇&lt;a href="https://www.cloudwego.io/zh/blog/2020/05/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%9C%A8-go-%E7%BD%91%E7%BB%9C%E5%BA%93%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/">字节跳动 Go RPC框架 Kitex 性能优化实践&lt;/a>，
这篇文章介绍了如何通过自研网络库 &lt;a href="http://github.com/cloudwego/netpoll">Netpoll&lt;/a>、及自研的 Thrift 编解码器 fastCodec 来优化 &lt;a href="http://github.com/cloudwego/kitex">Kitex&lt;/a> 的性能。&lt;/p>
&lt;p>自那时起，提升 Kitex 核心请求链路上的性能就非常困难了，实际上我们是要努力，在不断地添加新功能的同时，避免 Kitex 性能下降。&lt;/p>
&lt;p>尽管如此，我们一直没有停止优化 Kitex 性能的尝试。在字节内部，我们已经在试验、推广一些在核心链路上的性能提升，稍后会再给各位介绍。&lt;/p>
&lt;h4 id="基于-dynamicgo-的泛化调用">基于 DynamicGo 的泛化调用&lt;/h4>
&lt;p>首先介绍一个已经发布的性能优化：基于 &lt;a href="http://github.com/cloudwego/dynamicgo">DynamicGo&lt;/a> 的泛化调用。&lt;strong>泛化调用&lt;/strong>是 Kitex 的一个高级特性，能够在不预先生成 SDK 代码（也就是 Kitex Client）的前提下，使用 Kitex Generic Client 直接调用目标服务的 API。&lt;/p>
&lt;p>例如字节跳动内部的 接口测试工具、API 网关等，就使用了 Kitex 的泛化 Client，能够接收一个 HTTP 请求（请求体是 JSON 格式），转换成 Thrift Binary 后，发送给 Kitex Server。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/generic_call.jpeg" alt="image">&lt;/p>
&lt;p>其实现方案是依赖一个 &lt;code>map[string]interface{}&lt;/code> 作为泛型容器，请求时先将 json 转换为 map，在基于 Thrift IDL 完成 map -&amp;gt; thrift 的转换；对响应的处理则反过来。&lt;/p>
&lt;ul>
&lt;li>这样做的好处是灵活性高，不需要依赖预先生成的静态代码，只需要有 IDL 就可以请求目标服务；&lt;/li>
&lt;li>但是其代价是性能较差，这样一个泛型容器依赖 Go 的 GC 和 内存管理，开销巨大，不仅需要分配大量内存，还需要多次数据拷贝。&lt;/li>
&lt;/ul>
&lt;p>因此我们开发了 &lt;a href="http://github.com/cloudwego/dynamicgo">DynamicGo&lt;/a>，可用于提升协议转换的性能。项目 &lt;a href="https://github.com/cloudwego/dynamicgo/blob/main/introduction.md">introduction&lt;/a> 里有非常详细的介绍，这里只给大家介绍其核心设计思路：基于&lt;strong>原始字节流&lt;/strong>，原地完成&lt;strong>数据处理和转换&lt;/strong>。&lt;/p>
&lt;p>&lt;a href="http://github.com/cloudwego/dynamicgo">DynamicGo&lt;/a> 通过池化技术，能实现只需要预分配一次内存，并使用 SSE、AVX 等 SIMD 指令集进行加速，最终实现了非常可观的性能提升。&lt;/p>
&lt;p>如下图所示，相比原泛化调用的实现，在 6KB 数据的编解码测试中，性能提升了 &lt;strong>4~9 倍&lt;/strong>，甚至优于预先生成的静态代码。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/dynamicgo.png" alt="image">&lt;/p>
&lt;p>其实际原理很简单：根据解析 IDL 生成类型描述符 Descriptor，执行如下协议转换过程&lt;/p>
&lt;ol>
&lt;li>每次从 JSON 字节流中读取一个 Key/Value pair；&lt;/li>
&lt;li>根据 IDL Descriptor 里找到 key 对应的 Thrift 字段；&lt;/li>
&lt;li>按相应类型的 Thrift 编码规范完成 Value 的编码，并写入输出字节流；&lt;/li>
&lt;li>循环这个过程，直到处理完整个 JSON。&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="http://github.com/cloudwego/dynamicgo">DynamicGo&lt;/a> 除了可以优化 JSON/Thrift 的协议转换，还提供了 Thrift DOM 方式用于优化数据编排场景的性能。例如抖音某业务团队需要擦除请求中的违规数据，但仅限请求中的某一个字段；使用 DynamicGo 的 Thrift DOM API 就非常适合，可以实现 10 倍的性能提升，详情可参考 DynamicGo 的文档，这里就不展开了。&lt;/p>
&lt;h4 id="frugal---基于-jit-的高性能-thrift-编解码器">Frugal - 基于 JIT 的高性能 Thrift 编解码器&lt;/h4>
&lt;p>&lt;a href="http://github.com/cloudwego/frugal">Frugal&lt;/a> 是一个 基于 &lt;strong>JIT&lt;/strong> 编译技术的高性能 Thrift 编解码器。&lt;/p>
&lt;p>Thrift 官方以及 Kitex 默认的编解码器都是基于解析 Thrift IDL，生成相应的编解码 Go 代码。通过 JIT 技术，我们能够在&lt;strong>运行时动态生成&lt;/strong>性能更好的编解码代码：
生成更紧凑的机器码、减少 cache miss、减少 branch miss，用 &lt;strong>SIMD&lt;/strong> 指令来加速，使用基于寄存器的函数调用（Go 默认是基于栈）。&lt;/p>
&lt;p>这里给出了编解码测试的性能指标：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/frugal_performance.png" alt="image">&lt;/p>
&lt;p>可以看到，&lt;a href="http://github.com/cloudwego/frugal">Frugal&lt;/a> 性能显著高于传统方式。&lt;/p>
&lt;p>除了性能上的优势，由于可以不生成编解码代码，也有额外的好处。&lt;/p>
&lt;p>一方面&lt;strong>仓库更简洁&lt;/strong>了，我们有一个项目，生成的代码有 700MB，切换到 frugal 后只有 37M，大约只有原来的 5%，在仓库维护方面压力大幅缩小，修改 IDL 以后也不会生成一大堆实际上无法 review 的代码；
另一方面 IDE 的&lt;strong>加载速度&lt;/strong>、项目的&lt;strong>编译速度&lt;/strong>也能显著提高。&lt;/p>
&lt;p>其实 Frugal 去年就已经发布了，但是当时的早期版本覆盖不够充分。今年我们重点优化了它的稳定性，修复了所有已知问题，
最近发版的 v0.1.12 版本，可以稳定地使用在生产业务上。例如字节跳动电商业务线，某服务的峰值 QPS 约 25K，已经全量切换到 Frugal，稳定运行了数月。&lt;/p>
&lt;p>&lt;a href="http://github.com/cloudwego/frugal">Frugal&lt;/a> 目前支持 Go1.16 ~ Go1.21，暂时只支持 AMD64 架构，未来也将支持 ARM64 架构；我们可能会在未来某个版本将 Frugal 作为 Kitex 的默认编解码器。&lt;/p>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>Kitex 在过去一年中从 v0.4.3 升级到 v0.7.2，其中 Feature 相关的 Pull Request 共有 40 多个，涵盖了&lt;strong>命令行工具&lt;/strong>、&lt;strong>gRPC&lt;/strong>、&lt;strong>Thrift 编解码&lt;/strong>、&lt;strong>重试&lt;/strong>、&lt;strong>泛化调用&lt;/strong>、&lt;strong>服务治理配置&lt;/strong>等多个方面，这里重点介绍几个比较重要的特性。&lt;/p>
&lt;h4 id="fallback---业务自定义降级">Fallback - 业务自定义降级&lt;/h4>
&lt;p>首先是 Kitex 在 v0.5.0 版本新增的 fallback 功能。&lt;/p>
&lt;p>需求背景是，业务代码在 RPC 请求失败、无法获得响应时，往往需要执行一些降级策略。&lt;/p>
&lt;p>例如信息流业务，API 接入层在请求推荐服务时，如遇到偶发错误（例如超时），简单粗暴的做法是告诉用户出错了，让用户重试，但这样体验就很差。一个比较好的降级策略是，尝试返回一些热门条目，用户几乎无感，体验相对就好了很多。&lt;/p>
&lt;p>旧版 Kitex 的问题是，业务自定义的 中间件 在熔断、超时等内置中间件之后，因此无法在 middleware 里实现降级策略，只能直接修改业务代码，侵入性较大，且需要修改每一处方法调用，容易遗漏。在新增调用某方法的业务逻辑时，没有机制保证不被遗漏。&lt;/p>
&lt;p>通过新增的 fallback 功能， 允许业务&lt;strong>在初始化 Client 时指定一个 fallback 方法&lt;/strong>来实现降级策略。&lt;/p>
&lt;p>下面是一个简单的使用示例：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/fallback_example.png" alt="image">&lt;/p>
&lt;p>初始化 client 时指定的这个方法会在每次请求结束前被调用，可以获得这次请求的 context、请求参数、响应，基于此实现自定义的降级策略，这样就把策略的实现都收敛起来了。&lt;/p>
&lt;h4 id="thrift-fastcodec---支持-unknown-fields">Thrift FastCodec - 支持 unknown fields&lt;/h4>
&lt;p>在实际的业务场景中，一个请求链路往往涉及多个节点。&lt;/p>
&lt;p>以链路 A -&amp;gt; B -&amp;gt; C -&amp;gt; D 为例，A 节点的某个 struct 需要通过 B、C 透传到 D 节点。在以往的实现里，如果在 A 新增一个字段，例如 &lt;code>Extra&lt;/code>，
我需要使用&lt;strong>新的 IDL 重新生成所有节点的代码&lt;/strong>，重新部署，才能在 D 节点获得 Extra 字段的值。整个流程比较复杂，更新周期也比较长，如果中间节点是其他团队的服务，还需要跨团队协调，非常吃力。&lt;/p>
&lt;p>在 Kitex v0.5.2 里，我们在自研的 fastCodec 里实现了 Unknown Fields 这个特性，可以很好地解决这个问题。&lt;/p>
&lt;p>例如同样是 A -&amp;gt; B -&amp;gt; C -&amp;gt; D 这个链路，B、C节点代码不变（如下图所示），在解析时，发现有个字段 id=2，在 struct 里找不到对应的字段，于是就写入这个未导出的 &lt;code>_unknownFields&lt;/code> 字段（实际上就是一个 byte slice 的别名）；&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/old_code.png" alt="image">&lt;/p>
&lt;p>而 A、D 服务是用新 IDL 重新生成过的（如下图所示），包含了 Extra 字段，因此解析到 id=2 的字段时，可以写到这个 Extra 字段，业务代码就可以正常使用了。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/new_code.png" alt="image">&lt;/p>
&lt;p>此外，我们在 v0.7.0 还对这个特性进行了一次性能优化，使用「无序列化」（直接拷贝字节流）的方式，将 unknown fields 的编解码性能提升了约 6~7 倍。&lt;/p>
&lt;h4 id="基于-gls-的-session-传递机制">基于 GLS 的 Session 传递机制&lt;/h4>
&lt;p>另一个值得给各位介绍的特性也和长链路有关。&lt;/p>
&lt;p>在字节内部，我们用 LogID 来追踪整个调用链，这就要求链路中所有节点都能按要求透传这个票据。在我们的实现中，LogID 不是放在请求体里，而是以 metadata（元数据）的形式透传。&lt;/p>
&lt;p>以 A -&amp;gt; B -&amp;gt; C 这个链路为例，A 调用 B 的 &lt;code>A_Call_B&lt;/code> 方法，传入的 LogID 会存放在 handler 入参的 &lt;code>ctx&lt;/code> 里；B 在请求 C 时，正确的用法是，将这个 &lt;code>ctx&lt;/code> 传给 &lt;code>clientC.B_Call_C&lt;/code> 方法，这样才能把 LogID 继续传递下去。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/call_example.png" alt="image">&lt;/p>
&lt;p>但是实际情况往往是，请求 C 服务的代码被多层包装，&lt;strong>ctx 的透传就容易被遗漏&lt;/strong>；我们遇到的情况更麻烦，对 C 服务的请求是由第三方库完成的，而该库的接口就不支持传入 ctx，而这样的代码改造成本很高，可能需要协调多个团队才能完成。&lt;/p>
&lt;p>为了解决这个痛点，我们引入了基于 GLS（goroutine local storage）的 session 传递机制。具体方案是：&lt;/p>
&lt;ol>
&lt;li>在 Kitex Server 这边，收到请求后，先将 context 备份在 GLS 里，然后再调用 Handler ，也就是业务代码；&lt;/li>
&lt;li>在业务代码里调用 client 发送请求时，先检查入参的 ctx 里是否包含期望的票据，如果没有，则从 GLS 的备份里取出，再发出请求。&lt;/li>
&lt;/ol>
&lt;p>下面是一个具体例子：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/GLS_example.png" alt="image">&lt;/p>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>初始化 Server 的时候打开 &lt;code>ContextBackup&lt;/code> 开关&lt;/li>
&lt;li>初始化 Client 的时候指定一个 &lt;code>backupHandler&lt;/code>&lt;/li>
&lt;li>每次发出请求前，会调用该 handler，检查入参是否包含了 &lt;code>LogID&lt;/code>&lt;/li>
&lt;li>如果不包含，从备份的 &lt;code>ctx&lt;/code> 里读出，合并到当前 &lt;code>ctx&lt;/code> 里返回（返回 &lt;code>useNewCtx = true&lt;/code> 表示 Kitex 应使用这个新的 &lt;code>ctx&lt;/code> 发请求）&lt;/li>
&lt;/ol>
&lt;p>在开启上述设置后，即使业务代码使用了错误的 context，也能够串联起整个链路。&lt;/p>
&lt;p>最后再介绍下 server 初始化的 async 参数，它解决的是在 handler 里新建 goroutine 里发送请求的情况。
由于不是同一个 goroutine，无法直接共享 Local Storage；我们借鉴 pprof 给 goroutine 染色的机制，将备份的 ctx 也传递给新的 goroutine，这样就实现了在&lt;strong>异步场景&lt;/strong>也能&lt;strong>隐式传递票据&lt;/strong>的能力。&lt;/p>
&lt;h3 id="易用性">易用性&lt;/h3>
&lt;p>除了高性能和丰富的功能，我们也很注重提高 Kitex 的易用性。&lt;/p>
&lt;h4 id="文档">文档&lt;/h4>
&lt;p>众所皆知，程序员最讨厌的两件事：一是写文档，二是别人不写文档。因此我们很注重降低编写文档的启动成本，并努力推进文档建设。&lt;/p>
&lt;p>在字节跳动内部，Kitex 的文档是以飞书知识库的形式组织的，能够更好地集成到飞书的搜索，方便字节员工查询；由于飞书文档更新方便，因此比官网文档更新更及时；新功能在开发时往往也是先在飞书知识库中撰写文档，有些没有及时同步到官网。各种原因导致内外两个分支差别越来越大。&lt;/p>
&lt;p>因此最近两个季度，我们发起了新一轮文档优化工作：根据用户的反馈，重新整理所有文档，添加更多示例；将所有文档翻译成英文，同步到官网。这项工作预计今年能完成，目前已经能在官网看到一些更新后的文档了，例如超时控制、Frugal、panic 处理等，欢迎各位到官网围观、帮忙捉虫。&lt;/p>
&lt;p>此外，我们还在搭建一套机制，用于自动化将内部文档同步到官网，希望能让开源用户以后也能像内部用户一样得到及时更新的文档。&lt;/p>
&lt;h4 id="其他优化">其他优化&lt;/h4>
&lt;p>除了文档， Kitex 还做了一些其他易用性相关的工作。&lt;/p>
&lt;p>我们发布了一个示例项目&lt;a href="https://github.com/cloudwego/kitex-examples/tree/main/bizdemo/easy_note">笔记服务&lt;/a>，在实例中展示中间件、限流、重试、超时控制等各种特性的用法，通过真实的项目代码给 Kitex 用户提供参考。&lt;/p>
&lt;p>其次我们也在努力提高问题排查的效率，例如我们根据日常 oncall 的需求，在报错信息里添加了更具体的上下文信息（诸如超时报错增加具体原因、panic 信息增加 method name、thrift 编解码错误信息增加具体字段名称等），方便快速定位到具体的问题点。&lt;/p>
&lt;p>此外，Kitex 命令行工具也在持续改进。&lt;/p>
&lt;ul>
&lt;li>例如很多企业用户是在 Windows 上开发，之前 Kitex 无法正常在 Windows 下生成代码，导致这些用户还需要一个 Linux 环境来辅助，非常不方便，我们根据这些用户的反馈做了优化。&lt;/li>
&lt;li>我们还实现了一个 IDL 裁剪工具，能够识别出没有被引用的结构体，在生成代码时直接过滤掉，这对于一些包浆的老项目非常有帮助。&lt;/li>
&lt;/ul>
&lt;h2 id="社区合作项目">社区合作项目&lt;/h2>
&lt;p>过去的一年里，在 CloudWeGo 社区的支持下，我们也取得了很多成果，特别是 Dubbo 互通和配置中心集成这两个项目。&lt;/p>
&lt;h3 id="dubbo-互通">Dubbo 互通&lt;/h3>
&lt;p>虽然 Kitex 最初是一个 Thrift RPC 框架，但是其架构设计有较好的扩展性，如图所示，增加新的协议，核心工作是按 Codec 接口实现一个对应的协议编解码器（Codec 或者 PayloadCodec）：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/kitex_transport.png" alt="image">&lt;/p>
&lt;p>Dubbo 互通项目源于某企业用户提出的需求，他们有一些供应商是用 Dubbo Java 实现的外围服务，他们希望也能够使用 Kitex 来请求这些服务，降低项目的管理成本。&lt;/p>
&lt;p>这个项目得到了社区同学的热情支持，有很多同学参与到这个项目中。特别地，承担核心任务之一的 @&lt;a href="https://github.com/DMwangnima">DMwangnima&lt;/a> 同学，同时也是 Dubbo 社区的开发者，由于他对 Dubbo 比较熟悉，开发过程也少走了很多弯路。&lt;/p>
&lt;p>在具体实现方案上，我们采用了和 Dubbo 官方不同的思路。根据对 hessian2 协议的分析，其基础类型系统基本上是和 Thrift 重合的，因此我们基于 Thrift IDL 来生成 Kitex Dubbo-Hessian2 项目脚手架。&lt;/p>
&lt;p>一期为了快速实现功能，我们直接借用了 Dubbo-go 框架的 hessian2 库来做序列化和反序列化，并参考 Dubbo 官方文档和 Dubbo-Go 的源码，实现了 Kitex 自己的 DubboCodec；&lt;/p>
&lt;p>在 10 月我们已经完成了第一版代码，项目地址是 &lt;a href="https://github.com/kitex-contrib/codec-dubbo">code-dubbo&lt;/a> ，感兴趣的用户可以按照上面的文档试用，在具体的使用上，和 Kitex Thrift 类似，写好 Thrift IDL，用 kitex 命令行生成脚手架（注意需要指定 Protocol 为 hessian2），然后在代码里初始化 client、server 的地方指定 DubboCodec，就可以开始编写业务代码了。&lt;/p>
&lt;p>这不仅降低了用户使用门槛，而且用 IDL 来管理接口相关信息，可维护性也更好。&lt;/p>
&lt;p>目前我们已经能够做到 &lt;strong>Kitex 和 Dubbo-Java&lt;/strong>、&lt;strong>Kitex 和 Dubbo-Go&lt;/strong> 互通：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/kitex_dubbo.jpeg" alt="image">&lt;/p>
&lt;p>未来计划：&lt;/p>
&lt;ul>
&lt;li>首先是提高与 dubbo-java 的兼容性，以及允许用户在 IDL 注解里指定对应的 Java 类型。&lt;/li>
&lt;li>其次是与注册中心的对接。虽然 Kitex 已经有对应的注册中心模块，但具体的数据格式和 Dubbo 不一致，这块还需要一些改造，相关工作即将完成。&lt;/li>
&lt;li>最后是性能问题，目前和 Kitex Thrift 相比有较大差距，因为 dubbo-go-hessian2 这个库完全基于反射实现，性能还有很大优化空间。计划实现 Hessian2 的 FastCodec，从而解决编解码的性能瓶颈。&lt;/li>
&lt;/ul>
&lt;p>在这个项目的推进过程中，我们深切体验到跨社区合作的积极影响，Kitex 吸收了 Dubbo 社区的成果，同时也发现了 Dubbo-go 项目可以改进的地方，上面说到的兼容性和性能的解决方案，预计也能反哺 dubbo 社区。&lt;/p>
&lt;p>在此也特别向这个项目的社区贡献者 @&lt;a href="https://github.com/DMwangnima">DMwangnima&lt;/a>、@&lt;a href="https://github.com/Lvnszn">Lvnszn&lt;/a>、@&lt;a href="https://github.com/ahaostudy">ahaostudy&lt;/a>、@&lt;a href="https://github.com/jasondeng1997">jasondeng1997&lt;/a>、@&lt;a href="https://github.com/VaderKai">VaderKai&lt;/a> 等同学致谢，感谢他们抽出大量业余时间完成这个项目。&lt;/p>
&lt;h3 id="配置中心集成">配置中心集成&lt;/h3>
&lt;p>另一个社区合作的重点项目是「配置中心集成」。&lt;/p>
&lt;p>Kitex 提供了可动态配置的服务治理能力，包括客户端的超时、重试、熔断，以及服务端的限流。&lt;/p>
&lt;p>这些服务治理能力在字节内部都是被重度使用的，微服务的开发者可以在字节自建的服务治理配置平台上编辑这些配置，粒度细化到这个五元组，并且是准实时生效，这些能力对提高微服务的 SLA 非常有帮助。&lt;/p>
&lt;p>然而我们和企业用户沟通，发现这些能力通常只有非常简单的使用，粒度很粗，而且时效性较差，可能只是硬编码指定配置，或者通过简单的文件配置，需要重启才能生效。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/config_cases.png" alt="image">&lt;/p>
&lt;p>为了让用户能够更好地用上 Kitex 的服务治理能力，我们启动了配置中心集成项目，让 Kitex 能够从用户的配置中心&lt;strong>动态获取服务治理配置&lt;/strong>，并准实时生效。&lt;/p>
&lt;p>我们已经发布了 &lt;a href="https://github.com/kitex-contrib/config-nacos">config-nacos&lt;/a> 的 v0.1.1 版本（注：截至发文时已更新至 v0.3.0，感谢 @&lt;a href="https://github.com/whalecold">whalecold&lt;/a> 同学的持续投入），通过在现有 Kitex 项目上给 client 增加 NacosClientSuite，可以很简单地让 Kitex 从 Nacos 加载对应的服务治理配置。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/nacos_code.png" alt="image">&lt;/p>
&lt;p>由于我们使用 nacos client 本身提供的 watch 能力，可以准实时地收到配置的变更通知，因此时效性也很强，不需要重启服务。&lt;/p>
&lt;p>此外，我们还预留了修改配置粒度的能力，例如默认的配置粒度是 client + server，在 Nacos 的 data id 里按这个格式填写即可；用户也可以通过指定这个 data id 的模板，例如加上机房、集群等，从而更精细化地调整这些配置。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/nacos_config.png" alt="image">&lt;/p>
&lt;p>我们计划完成对接常见的配置中心，在这个 &lt;a href="https://github.com/cloudwego/kitex/issues/973">issue&lt;/a> 里有更详细的说明，欢迎大家围观。
目前的进展是：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kitex-contrib/config-file">file&lt;/a>、&lt;a href="https://github.com/kitex-contrib/config-apollo">apollo&lt;/a>、&lt;a href="https://github.com/kitex-contrib/config-etcd">etcd&lt;/a>、&lt;a href="https://github.com/kitex-contrib/config-zookeeper">zookeeper&lt;/a> 已经完成；&lt;/li>
&lt;li>&lt;a href="https://github.com/kitex-contrib/config-consul">consul&lt;/a> 正在开发中；&lt;/li>
&lt;/ul>
&lt;p>感兴趣的同学的同学也可以参与进来，一起 review、测试验证这些扩展模块。&lt;/p>
&lt;h2 id="未来展望">未来展望&lt;/h2>
&lt;p>最后给大家剧透一下我们目前正在尝试的一些方向。&lt;/p>
&lt;h3 id="合并部署">合并部署&lt;/h3>
&lt;h4 id="亲和性部署">亲和性部署&lt;/h4>
&lt;p>我们之前的优化大多是针对服务内，而随着可优化点逐渐减少，我们开始考虑其他目标，比如优化 RPC 请求在网络通信上的开销。
具体的方案如下：&lt;/p>
&lt;ul>
&lt;li>首先是亲和性调度，通过修改容器化调度机制，我们将 Client 和 Server 尽量调度到相同的物理机上；&lt;/li>
&lt;li>于是我们就可以用同机通信来降低开销。&lt;/li>
&lt;/ul>
&lt;p>目前我们已经实现的同机通信包括如下三种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Unix Domain Socket&lt;/strong>，比标准的 TCP Socket 性能要好一些，但不太多；&lt;/li>
&lt;li>&lt;a href="https://github.com/cloudwego/shmipc-go">ShmIPC&lt;/a>，基于共享内存的进程间通信，这个可以直接省略序列化数据的传递，只需要把内存地址告诉接收方即可；&lt;/li>
&lt;li>最后是 &lt;strong>RPAL&lt;/strong> 这个「黑科技」，这是 Run Process As Library 的缩写，我们和字节的内核组合作，通过定制化的内核，将两个进程放在同一个地址空间，在满足一定条件的情况下，我们甚至可以不需要做序列化；&lt;/li>
&lt;/ul>
&lt;p>目前我们已经在 100 多个服务上开启了这个能力，也取得了一些性能收益，对于效果比较好的服务，能够节省约 5&lt;del>10% 的 CPU，耗时也能减少 10&lt;/del>70%；当然实际表现取决于服务的一些特性，例如数据包的大小等。&lt;/p>
&lt;h4 id="编译期合并">编译期合并&lt;/h4>
&lt;p>另一个思路是编译期合并。&lt;/p>
&lt;p>该方案的出发点是，我们发现微服务虽然提升了团队协作的效率，但是也增加了系统整体复杂性，尤其是在服务部署、资源占用、通信开销等方面。&lt;/p>
&lt;p>因此我们希望实现一种方案：让业务既能够以微服务的形式开发，又能够按单体服务的形式部署，俗称既要又要。&lt;/p>
&lt;p>然后我们把这个方案做出来了 —— 我们开发了一个工具，能够把两个微服务的 git repo 合并在一起，并通过 namespace 隔离可能有冲突的资源，然后编译成一个可执行程序，用于部署。&lt;/p>
&lt;p>目前在字节跳动内部，已经有数十组服务接入，效果最好的服务，CPU 节省约80%，延迟则能降低最多 67%;当然，实际表现也取决于该服务的特性，比如请求包的大小。&lt;/p>
&lt;p>以上是我们在亲和性方面的尝试。&lt;/p>
&lt;h3 id="序列化">序列化&lt;/h3>
&lt;p>在序列化方面，我们也还在做一些努力和尝试。&lt;/p>
&lt;h4 id="frugal---ssa-backend">Frugal - SSA Backend&lt;/h4>
&lt;p>首先是 Frugal，前面介绍过它的性能已经显著优于传统的 Thrift 编解码代码，但它还有提升空间。&lt;/p>
&lt;p>目前 Frugal 的实现是用 Go 直接生成对应的汇编代码。我们在具体实现中也应用了一些优化手段，例如生成更紧凑的代码，减少分支等；但光靠我们自己这样写，无法充分利用现有的编译器优化技术。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/frugal_current.png" alt="image">&lt;/p>
&lt;p>我们计划将 Frugal 重构后，能够基予 go struct 先生成符合 SSA 的 LLVM IR（即 Intermediate Representation，中间表示），这样就能够充分利用 LLVM 的编译优化能力。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/2nd_Kitex_retrospect/frugal_future.png" alt="image">&lt;/p>
&lt;p>预计这样改造后，性能可以提升至少 30%。&lt;/p>
&lt;h4 id="按需序列化">按需序列化&lt;/h4>
&lt;p>在另外一个探索方向是按需序列化，具体又可以分成三块。&lt;/p>
&lt;p>首先是编译前。我们目前已经发布了一个 IDL 裁剪工具，能够识别出没有被引用的类型；但是被引用的类型也可能是不需要的，例如A、B两个服务依赖同一个类型，但其中有一个字段可能A需要，B不需要。我们考虑在这个工具上增加用户标注能力，允许用户指定不需要的字段，从而进一步降低序列化开销。&lt;/p>
&lt;p>其次是编译中。其思路是根据编译器的编译报告来获取实际违背业务代码引用的字段进行裁剪。具体的方案和正确性还需要一些验证。&lt;/p>
&lt;p>最后是编译后，在运行时，也允许业务通过指定不需要的字段，从而节省编解码的开销。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>最后我们整体回顾一下：&lt;/p>
&lt;p>在能力升级方面，&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://github.com/cloudwego/kitex">Kitex&lt;/a> 通过 &lt;a href="http://github.com/cloudwego/dynamicgo">DynamicGo&lt;/a> 优化了泛化调用的性能，高性能 &lt;a href="http://github.com/cloudwego/frugal">Frugal&lt;/a> 编解码器也已经稳定，可用于生产环境了；&lt;/li>
&lt;li>过去一年新增了 fallback 方便业务实现自定义降级策略，并通过 unknown fields 和 session 传递机制来解决长链路的改造问题；&lt;/li>
&lt;li>我们还通过文档优化、demo 项目、问题排查效率改造 和 增强命令行工具等方式提升了 Kitex 的易用性；&lt;/li>
&lt;/ul>
&lt;p>在社区合作方面，&lt;/p>
&lt;ul>
&lt;li>我们通过 Kitex - Dubbo &lt;a href="https://github.com/kitex-contrib/codec-dubbo">互通项目&lt;/a>支持了 Dubbo 的 hessian2 协议，可以和 Dubbo Java、Dubbo-Go 框架互通，并且还有后续的优化，也能反哺 Dubbo 社区；&lt;/li>
&lt;li>在配置中心集成项目中，我们发布了 &lt;a href="https://github.com/kitex-contrib/config-nacos">Nacos&lt;/a> 扩展，方便用户集成，目前还在继续推进其他配置中心的对接；&lt;/li>
&lt;/ul>
&lt;p>未来还有一些探索方向，&lt;/p>
&lt;ul>
&lt;li>在合并部署方面，我们通过亲和性部署、编译其合并这两种方式，既能保留微服务的好处，又能享受一部分单体不服务的优势；&lt;/li>
&lt;li>在序列化方面，我们还继续进一步优化 &lt;a href="http://github.com/cloudwego/frugal">Frugal&lt;/a>，并且通过编译前中后各环节来实现按需序列化的能力；&lt;/li>
&lt;/ul>
&lt;p>以上是在 CloudWeGo 两周年之际，关于 &lt;a href="http://github.com/cloudwego/kitex">Kitex&lt;/a> 的回顾和展望，希望对大家有帮助，谢谢。&lt;/p></description></item><item><title>Blog: Kitex Release v0.8.0</title><link>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-release-v0.8.0/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/11/30/kitex-release-v0.8.0/</guid><description>
&lt;h2 id="重要变更介绍">&lt;strong>重要变更介绍&lt;/strong>&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>&lt;strong>1. gRPC 协议支持多 Service&lt;/strong>&lt;/p>
&lt;p>Kitex gRPC 支持多 Service 的能力，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/">Multiple Services&lt;/a>.&lt;/p>
&lt;p>&lt;strong>2. Acquire Kitex RPCInfo&lt;/strong>&lt;/p>
&lt;p>提供 kitexutil 方法以方便从 RPCInfo 获取 rpc 信息, 详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/">Acquire RPC information&lt;/a>.&lt;/p>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>&lt;strong>1. Map 泛化调用&lt;/strong>&lt;/p>
&lt;p>Map 泛化支持通过 SetBinaryWithByteSlice 设置对 binary 字段返回 []byte。&lt;/p>
&lt;p>&lt;strong>2. RPCInfo 异步使用&lt;/strong>&lt;/p>
&lt;p>允许关闭 RPCInfo 复用，简化异步使用方式，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/#12-%E5%BC%82%E6%AD%A5%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F">Acquire RPC information&lt;/a>.&lt;/p>
&lt;h3 id="其它">其它&lt;/h3>
&lt;p>升级 Frugal &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.12">v0.1.12&lt;/a>, 修复同时使用 frugal 和 sonic 时极小概率出现的并发问题。
强烈建议同时升级 frugal 和 sonic 到较新的版本。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> go get github.com/cloudwego/frugal@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go get github.com/bytedance/sonic@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="详细变更">&lt;strong>详细变更&lt;/strong>&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1051">#1051&lt;/a>] feat(grpc): support gRPC multi-service on a server&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1189">#1189&lt;/a>] feat(rpcinfo): add kitexutil methods for the convenience to fetch rpc information from RPCInfo&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1176">#1176&lt;/a>] feat(tool): add an environment variable to make it easier to debug kitex tool&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1173">#1173&lt;/a>] feat(rpcinfo): allow disable rpcinfo reuse for async reference&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1172">#1172&lt;/a>] feat(retry): client.WithSpecifiedResultRetry should have higher priority&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1150">#1150&lt;/a>] feat(proxy): add an interface to customize proxy middleware to replace the default implementation&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1159">#1159&lt;/a>] feat(generic): support returning []byte for binary fields in map generic&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1153">#1153&lt;/a>] feat(retry): add Extra for retry.FailurePolicy for better extension&lt;/p>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1187">#1187&lt;/a>] optimize(tool): add an option to keep resp for kitex tool&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1183">#1183&lt;/a>] optimize(meshheader): retrieve rip from meshheader and write it to TransInfo&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1178">#1178&lt;/a>] optimize(bizErr): recurse to obtain BizErr to avoid additional Error encapsulation in the middle, resulting in unwrap results that are not BizErr&lt;/p>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1126">#1126&lt;/a>] fix(generic): the issue of structs cache of generic call has dirty data under multiple services scene&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1168">#1168&lt;/a>] fix(tool): remove the pointer to java.Object in generated file for &lt;a href="https://github.com/kitex-contrib/codec-dubbo">CodecDubbo&lt;/a>&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1169">#1169&lt;/a>] fix(tool): empty struct generate wrong struct&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1166">#1166&lt;/a>] fix(generic): issue of deep copy function generation when map key type is binary&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1155">#1155&lt;/a>] fix(tool): add import package &amp;lsquo;context&amp;rsquo; for gRPC client.go&lt;/p>
&lt;h3 id="tests">Tests:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1177">#1177&lt;/a>] test: avoid port conflict&lt;/p>
&lt;h3 id="chore">Chore:&lt;/h3>
&lt;p>[&lt;a href="https://github.com/cloudwego/kitex/pull/1190">#1190&lt;/a>] chore: update thriftgo version to v0.3.3&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1186">#1186&lt;/a>] chore: update readme with examples and new blogs&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1185">#1185&lt;/a>] chore: add ci for windows&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1182">#1182&lt;/a>] chore: update dynamicgo to v0.1.6&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1152">#1152&lt;/a>] chore: update dynamicgo and sonic version&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1164">#1164&lt;/a>] chore: update frugal to v0.1.12 and allow disable frugal by build tag&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1161">#1161&lt;/a>] chore: update frugal to v0.1.10&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1157">#1157&lt;/a>] chore: update frugal to v0.1.9&lt;br>
[&lt;a href="https://github.com/cloudwego/kitex/pull/1151">#1151&lt;/a>] chore(test): upgrade mockey to latest to compatible with Go1.21&lt;/p></description></item><item><title>Blog: Kitex v0.7.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/09/27/kitex-v0.7.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/09/27/kitex-v0.7.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>&lt;strong>1. 重试: 限制重试请求占比&lt;/strong>&lt;/p>
&lt;p>该特性优化了备用请求的可用性：如某个请求超过重试等待时间，会触发一个备用请求，但如果该请求在RPC超时阈值之内，最终可以正常处理，因而不会被当做失败请求，这会在偶发网络异常时导致大量重试请求，增加服务端压力甚至引起雪崩。&lt;/p>
&lt;p>建议更新现有代码：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>retry.NewRetryContainerWithPercentageLimit()&lt;/code> 来构造 RetryContainer，限制重试请求占比；&lt;/li>
&lt;li>在 Client 初始化时添加选项 &lt;code>client.WithCloseCallbacks(container.Close)&lt;/code>，以便在 client 被回收时释放相关资源。&lt;/li>
&lt;/ol>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>&lt;strong>1. gRPC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>unary 请求发送 END_STREAM flag&lt;/li>
&lt;li>修复 grpc streaming 吞吐下降与压缩器选择逻辑&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 长连接池&lt;/strong>&lt;/p>
&lt;p>如果没有指定 &lt;code>MaxIdleGlobal&lt;/code> 则默认不限制，简化长连接池的使用配置。&lt;/p>
&lt;h3 id="其他">其他&lt;/h3>
&lt;ul>
&lt;li>更新 netpoll 至 &lt;a href="https://github.com/cloudwego/netpoll/releases/tag/v0.5.0">v0.5.0&lt;/a>&lt;/li>
&lt;li>升级 frugal 到 &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.8">v0.1.8&lt;/a>，支持在 go1.21 编译时使用 frugal (注: frugal 旧版本不支持 go1.21)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1117">#1117&lt;/a>] feat(retry): support retry percentage limit&lt;/li>
&lt;/ul>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1033">#1033&lt;/a>] optimize: no need to check svcInfo twice&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1115">#1115&lt;/a>] optimize: rm outdated framed suggestion&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1095">#1095&lt;/a>] optimize: add K_METHOD in serviceinline ctx&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1107">#1107&lt;/a>] optimize(connpool): set maxIdleGlobal to no limit if not set&lt;/li>
&lt;/ul>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1116">#1116&lt;/a>] fix: use the last rpcinfo to trace&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1104">#1104&lt;/a>] fix: move limiter handler to the last of the inbound handler to get rpcinfo in custom limiter&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1103">#1103&lt;/a>] fix: reset all fields of netpoll byte buffer when recycle it&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1106">#1106&lt;/a>] fix(grpc): fix grpc streaming tps decreasing and the selection logic of compressor&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1114">#1114&lt;/a>] fix(gRPC): client send END_STREAM flag in unary call (#1066)&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1096">#1096&lt;/a>] fix(tool): add backquote to handle filepath string invalid syntax under windows os&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1098">#1098&lt;/a>] fix(tool): fix import for codegen template when using slim and unknown fields&lt;/li>
&lt;/ul>
&lt;h3 id="tests">Tests:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1124">#1124&lt;/a>] test: fix codegen script&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1122">#1122&lt;/a>] test: add codegen test&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1119">#1119&lt;/a>] test(connpool): modify the idleTimeout&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1133">#1133&lt;/a>] chore: update version v0.7.2&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1125">#1125&lt;/a>] chore: upgrade netpoll to v0.5.0&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1123">#1123&lt;/a>] perf: replace concurrent string builder with lock&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1118">#1118&lt;/a>] perf: optimize remote addr setter interface to reduce lock cost of Address()&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1110">#1110&lt;/a>] chore: upgrade netpoll to v0.4.2 pre-release&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1061">#1061&lt;/a>] chore: netpoll pre release v0.4.2&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1100">#1100&lt;/a>] chore: enable frugal on go1.21&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.7.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/08/14/kitex-v0.7.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/08/14/kitex-v0.7.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>&lt;strong>1. gRPC 压缩支持&lt;/strong>&lt;/p>
&lt;p>实现了 KiteX gRPC 的压缩功能支持，可以使用例如 gzip 等压缩方法减小 payload 体积&lt;/p>
&lt;p>&lt;strong>2. GLS&lt;/strong>&lt;/p>
&lt;p>使用 &lt;a href="https://github.com/cloudwego/localsession">local-session&lt;/a> 组件兜底请求上下文传递，解决用户没有传递 ctx 导致的微服务断链问题&lt;/p>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>&lt;strong>1. Unknown Fields 无序列化优化&lt;/strong>&lt;/p>
&lt;p>实现无序列化的 unknown field 功能，无序列化unknown fields方案在FastCodec上性能提升约6x ~ 7x，详见：&lt;a href="https://github.com/cloudwego/kitex/pull/1017">#1017&lt;/a>&lt;/p>
&lt;p>&lt;strong>2. DynamicGo 集成&lt;/strong>&lt;/p>
&lt;p>在 KiteX 的泛化模块中集成 &lt;a href="https://github.com/cloudwego/dynamicgo">dynamicgo&lt;/a> 以提升 JSON\HTTP 泛化调用性能 （+50%～200%）&lt;/p>
&lt;h3 id="其他">其他&lt;/h3>
&lt;p>升级 Thriftgo 库依赖至 v0.3.0 ，支持了 Thriftgo 反射功能，可以在运行时获取 IDL 元信息&lt;/p>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h3 id="feature">Feature:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1053">#1053&lt;/a>] feat(retry): support to distinguish local retry request&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1058">#1058&lt;/a>] feat(retry): support delete retry policy dynamically&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1000">#1000&lt;/a>] feat(grpc): support grpc compress&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1018">#1018&lt;/a>] feat: use local-session to backup request context in case of missing&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1045">#1045&lt;/a>] feat(generic): support base64 codec for map generic&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1035">#1035&lt;/a>] feat(config): provide the ability to dynamically configure the rpctimeout config on the method hierarchy&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/825">#825&lt;/a>] feat(generic): integrate dynamicgo into kitex generic call&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1019">#1019&lt;/a>] feat(lb): interleaved weighted round-robin load balancer&lt;/li>
&lt;/ul>
&lt;h3 id="optimize">Optimize:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1064">#1064&lt;/a>] optimize: check header max size when ttheader encode&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1017">#1017&lt;/a>] optimize: implement unknown field function without serialization&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1036">#1036&lt;/a>] optimize(protobuf): ignore err when (un)marshal empty req/resp&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1056">#1056&lt;/a>] optimize(tool): optimize struct ref&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1043">#1043&lt;/a>] optimize: add method info to the error message of the server handler panic for easy troubleshooting&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1025">#1025&lt;/a>] optimize: use Tags of ServerBasicInfo as default Tags of RegistryInfo&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1020">#1020&lt;/a>] optimize: add nil check for MethodInfo which get from ServiceInfo in client.Call to ignore panic&lt;/li>
&lt;/ul>
&lt;h3 id="fix">Fix:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1073">#1073&lt;/a>] fix: fix failure retryer dump panic&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1067">#1067&lt;/a>] fix: slim template with deepcopy&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1055">#1055&lt;/a>] fix: ignore SIGHUP when run with nohup&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1048">#1048&lt;/a>] fix(retry): keep the behavior of retry policy consistent between initing and updating&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1047">#1047&lt;/a>] fix(tool): cli warning for unknown suffix&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1038">#1038&lt;/a>] fix(config): correct the function signature of the rpcinfo.TimeoutProvider implementation&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1034">#1034&lt;/a>] fix(generic): add case int16 into buildinTypeIntoString&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1023">#1023&lt;/a>] fix(generic): avoid dead-loop when marshal self-referenced struct&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1028">#1028&lt;/a>] fix:modify .licenserc.yaml&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1012">#1012&lt;/a>] fix: skip frugal on go 1.21&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/992">#992&lt;/a>] fix(grpc): use mcache to fix memory leak caused by grpc codec buffer to reuse memory incorrectly&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/994">#994&lt;/a>] fix(tool): fix kitex tool git repo pulling logic&lt;/li>
&lt;/ul>
&lt;h3 id="chore">Chore:&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1074">#1074&lt;/a>] chore: update thriftgo to v0.3.0&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1031">#1031&lt;/a>] chore: remove wechat group in readme&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1008">#1008&lt;/a>] chore: update dynamicgo to v0.1.1&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1006">#1006&lt;/a>] chore: remove unnecessary replace for frugal&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/1007">#1007&lt;/a>] chore: upgrade netpoll to v0.4.1&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.6.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/06/19/kitex-v0.6.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/06/19/kitex-v0.6.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="详细变更">&lt;strong>详细变更&lt;/strong>&lt;/h2>
&lt;h2 id="hotfix">Hotfix:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/988">#988&lt;/a>] hotfix(code_gen): 修复slim模板代码生成失败问题&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.6.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/06/14/kitex-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/06/14/kitex-v0.6.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>&lt;strong>1. GRPC 元信息传递&lt;/strong>&lt;/p>
&lt;p>client 默认将 header 设置到 ctx，外部方法可利用 &lt;code>GetHeaderMetadataFromCtx&lt;/code> 获取元信息。可用于 transmeta 内获取元信息并设置到 rpcinfo 中，或在中间件内获取 header 信息。&lt;/p>
&lt;p>&lt;strong>2. Kitex 配置模块重构&lt;/strong>&lt;/p>
&lt;p>增加重试、熔断、超时、限流的 config item，支持 &lt;a href="https://github.com/cloudwego/configmanager">configmanager&lt;/a> 中间件定义的接口，用于支持与外部配置中心的扩展集成。&lt;/p>
&lt;p>&lt;strong>3. Kitex - 工具&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>支持在 thrift 生成代码中插入对象深拷贝函数，用于深拷贝源对象到目标对象，使用方式为 kitex 命令增加 &lt;code>-deep-copy-api&lt;/code> 参数；&lt;/li>
&lt;li>支持在 thrift 生成代码中插入 IDL 描述符注册代码，用于在运行时加载对应生成代码后，注册 IDL 描述符信息到 &lt;code>github.com/cloudwego/kitex/pkg/reflection/thrift&lt;/code> 包内，并通过暴露的函数获取描述符信息，使用方式为在 kitex 命令 &lt;code>thrift&lt;/code> 参数添加 &lt;code>generate-reflection-info=true&lt;/code> ，如 &lt;code>kitex -thrift generate-reflection-info=true ...&lt;/code> ；Kitex 在 v1.12.0 只支持了 IDL 描述符信息注册，更丰富的查询接口将在后续版本进行发布，同时 IDL 描述符注册函数生成也将修改为默认生成。&lt;/li>
&lt;/ul>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>&lt;strong>1. 重构 detection server 支持多种协议的探测&lt;/strong>&lt;/p>
&lt;p>旧版本 detection server 写死了 http2 作为探测协议，v1.12.0 版本支持用户传入实现了 &lt;code>detection.DetectableServerTransHandler&lt;/code> 接口的 &lt;code>remote.ServerTransHandler&lt;/code> 对应的 &lt;code>remote.ServerTransHandlerFactory&lt;/code> 作为不定参数，配合默认的&lt;code>remote.ServerTransHandler&lt;/code>处理未匹配的协议，实现多种协议兼容的Kitex Server。&lt;/p>
&lt;p>&lt;strong>2. 一致性 hash&lt;/strong>&lt;/p>
&lt;p>一致性hash负载均衡中 &lt;code>buildVirtualNodes&lt;/code> 使用 &lt;code>virtualFactorLen&lt;/code> 初始化 &lt;code>bytes&lt;/code> 数组， 空间可能不足容纳下 &lt;code>VirtualNodeLen&lt;/code> 编号，导致 &lt;code>address&lt;/code> 部分被覆盖。&lt;/p>
&lt;p>&lt;strong>3. 长连接池埋点&lt;/strong>&lt;/p>
&lt;p>修复长连接池复用连接成功时打点未上报问题。&lt;/p>
&lt;h3 id="其他">其他&lt;/h3>
&lt;p>升级 netpoll 库依赖至 v0.4.0 ，同时支持 &lt;a href="https://github.com/cloudwego/configmanager">configmanager&lt;/a> v0.2.0 版本。&lt;/p>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h2 id="feature">Feature:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/923">#923&lt;/a>] feat(grpc): grpc 客户端将 header 和 trailer 设置到 context 内，并提供接口从 context 获取 header&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/891">#891&lt;/a>] feat: 支持 rpc client 和 server 的服务合并，它可以将远端 rpc 调用改成本地的函数级调用。这个特性需要生成工具支持&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/946">#946&lt;/a>] feat: default server handler 支持通过trans pipeline执行Read函数&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/936">#936&lt;/a>] feat(config): 增加 重试、熔断、超时、限流 的 config item&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/924">#924&lt;/a>] [&lt;a href="https://github.com/cloudwego/kitex/pull/939">#939&lt;/a>] feat(code_gen): 支持生成深拷贝API代码功能&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/926">#926&lt;/a>] feat: 支持thrift反射信息注册&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/897">#897&lt;/a>] feat: 自定义模板中支持 loop_service&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/961">#961&lt;/a>] optimize(tool): -use 参数支持自定义模板场景&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/966">#966&lt;/a>] optimize(ttheader): ttheader 的 headerFlags 处理增加类型检查&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/919">#919&lt;/a>] optimize: 使用 GoFunc 替代 go func 以避免 panic&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/960">#960&lt;/a>] optimize: 公开stats包以便在扩展仓库中重用&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/955">#955&lt;/a>] optimize: 移除 gonet transerver 中多余的 onRead 错误日志&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/954">#954&lt;/a>] optimize: 当 transHandler 没有实现 GracefulShutdown 接口时，不返回报错&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/941">#941&lt;/a>] optimize(callopt): 优化 callopt 的 debug 信息，减少 slice 扩张的可能性&lt;/li>
&lt;/ul>
&lt;h2 id="fix">Fix:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/963">#963&lt;/a>] fix(generic): 修复 map 泛化调用在 byte 类型字段 panic 的问题&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/901">#901&lt;/a>] fix(mux): 多路复用连接的 asynccallback 不创建新 goroutine，并且 server 等待所有 crrst 包都被 client 接收后再关闭&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/921">#921&lt;/a>] fix(loadbalance): 修复一致性 hash []byte 数组长度不够用的问题&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/922">#922&lt;/a>] fix(mux): 修复当开启 mux 并且使用 Kitex Protobuf 时，在退出时输出不合理的 error 问题&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/927">#927&lt;/a>] fix(connpool): 长连接池复用连接成功时进行上报&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/958">#958&lt;/a>] refactor(errorHandler): 重构 error handler 定义，可以获取更新信息处理 error&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/943">#943&lt;/a>] refactor(client): 重构 client.Call 提升代码可读性&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/560">#560&lt;/a>] refactor: 重构server detection trans handler以支持多种协议的探测&lt;/li>
&lt;/ul>
&lt;h2 id="tests">Tests:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/900">#900&lt;/a>] test(generic): 添加使用 dynamicgo 的 thrift 反射泛化调用示例&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/976">#976&lt;/a>] chore: 更新 netpoll 版本到 v0.4.0 并且更新 thriftgo 版本到 v0.2.11&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/956">#956&lt;/a>] chore: 更新 configmanager 版本到 v0.2.0&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/948">#948&lt;/a>] chore: 使用 goimports -local github.com/cloudwego/kitex 调整仓库格式&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.5.3 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/04/21/kitex-v0.5.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/04/21/kitex-v0.5.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>异常重试：添加配置，支持不对超时错误进行重试，用于请求非幂等的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码生成工具：支持 windows 环境使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>超时错误类型拆分：支持细粒度的超时错误类型，将 ErrRPCTimeout 细分为三个错误类型：超时、业务cancel、业务timeout。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thrift FastCodec：支持 unknown fields。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>unknown fields 使用背景：在 thrift 中，IDL 内增加字段对未更新 IDL 的一方是无感知的，必须更新 IDL 与生成代码以获取到新的字段。这会导致调用链路上某个节点更新 IDL 时，下游所有节点均需要进行更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>unknown fields 则支持保留未识别的字段，对于 IDL 内不存在的字段，读取并设置于结构体的 &lt;code>_unknownFields&lt;/code> 字段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用方法：&lt;code>kitex -thrift keep_unknown_fields your.thrift&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="修复">修复&lt;/h3>
&lt;ol>
&lt;li>失败重试策略：修复失败重试策略被动态修改后，结果重试 (resultRetry) 策略失效的问题。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h2 id="feature">Feature:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/887">#887&lt;/a>] feat(retry): 增加配置，支持异常重试场景下不对超时做重试，用于请求非幂等的场景&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/881">#881&lt;/a>] feat(tool): 支持 windows 场景下的代码生成&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/880">#880&lt;/a>] feat(rpctimeout): 支持细粒度的超时错误类型&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/872">#872&lt;/a>] feat(thrift): 在 fast codec 中支持 unknown fields 的序列化及反序列化&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/884">#884&lt;/a>] optimize(rpcinfo): RPCInfo.To().Tag() 优先使用服务发现的instance tag而不是remoteinfo tag&lt;/li>
&lt;/ul>
&lt;h2 id="fix">Fix:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/896">#896&lt;/a>] fix(remoteinfo): 修复 remoteinfo 中非深拷贝的 CopyFrom 引入的 race 问题&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/892">#892&lt;/a>] fix(grpc): 注释 ReadFrame error 时输出的 error 日志&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/889">#889&lt;/a>] fix(retry): 在失败重试策略被动态修改后，结果重试策略失效&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/866">#866&lt;/a>] fix(grpc): stream 的 sendMsg/recvMsg 返回的 ctx 无需赋值给 stream 的 ctx&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore:&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/898">#898&lt;/a>] chore: 更新 PR 的模板，对用户文档的更新做 check&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/854">#854&lt;/a>] style(nphttp2): 保证 receiver 的名字一致&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.5.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2023/03/08/kitex-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2023/03/08/kitex-v0.5.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>&lt;strong>1. Fallback 功能: 支持 Client 侧的 Fallback 功能&lt;/strong>&lt;/p>
&lt;p>业务在 RPC 请求失败后通常会有一些降级措施保证有效返回（比如在请求超时、熔断后，构造默认返回），Kitex 的 Fallback 支持对所有异常请求进行处理。
同时，因为业务异常通常会通过 BaseResp 字段返回，所以也支持对 Resp 进行处理。详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/fallback/">Fallback&lt;/a>。&lt;/p>
&lt;p>&lt;strong>2. Kitex - gRPC：Client 增加 TLS 的配置&lt;/strong>&lt;/p>
&lt;p>通过 client.WithGRPCTLSConfig option 配置。&lt;/p>
&lt;p>&lt;strong>3. Kitex - 工具&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>支持自定义脚手架模板&lt;/strong>，详见： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/custom_tpl/">自定义脚手架模板&lt;/a>&lt;/li>
&lt;li>&lt;strong>支持指定生成代码的目录&lt;/strong>，详见： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/#-gen-path">代码生成工具 -gen-path&lt;/a>&lt;/li>
&lt;li>&lt;strong>支持 protoc 插件选项&lt;/strong>，详见： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/#-protobuf-plugin">代码生成工具 -protobuf-plugin&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>&lt;strong>1. 负载均衡：使用权重轮询作为默认 Loadbalance 策略&lt;/strong>&lt;/p>
&lt;p>旧版本默认使用权重随机做 Loadbalance，Random 可以做到全局的均衡，但在服务端实例较少的情况下，随机有较大概率连续访问一个实例，导致下游节点最大并发请求数增加，所以新版本将默认策略调整为轮询。
详见：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/loadbalance/">负载均衡&lt;/a>。&lt;/p>
&lt;p>&lt;strong>2. 连接池协程问题&lt;/strong>&lt;/p>
&lt;p>旧版本在使用长连接时，每个 client 对应一个协程资源清理连接，在 client 较多时会导致协程过多，新版本改为共享协程避免 goroutine 数量随着 client 数量增长。&lt;/p>
&lt;h3 id="其他">其他&lt;/h3>
&lt;p>升级 frugal, pid 库依赖以支持 go 1.20。&lt;/p>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h3 id="feature">Feature&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/840">#840&lt;/a>] feat(fallback): support fallback ability for kitex client-side, usage guide refer to &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/fallback/">Fallback&lt;/a>&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/841">#841&lt;/a>] feat(tool): add GetResult() and GetFirstArgument() methods for service params of protobuf&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/791">#791&lt;/a>] feat(tool): merge two ways of passing extensions, to support two ways at sametime&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/797">#797&lt;/a>] feat(loadbalance): use smooth weighted round robin algo as default Loadbalance policy&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/760">#760&lt;/a>] feat(grpc): support TLS config in kitex grpc client&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/781">#781&lt;/a>] feat(tool): supports custom templates&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/783">#783&lt;/a>] feat(ttheader): add encode logic for gdpr token in TransInfo&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/775">#775&lt;/a>] feat(tool): support custom generate path&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/687">#687&lt;/a>] feat(tool): add protoc plugin flag&lt;/li>
&lt;/ul>
&lt;h3 id="optimize">Optimize&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/750">#750&lt;/a>] optimize(generic): generic call write zero value for required and default fields to meet the specification of apache thrift and keep consistent with normal thrift encode of Kitex.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/739">#739&lt;/a>] optimize(generic): modify the url routing to align with Hertz for HTTP generic call&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/752">#752&lt;/a>] optimize(ttheader): attach part of ttheader binary into error when readKVInfo failed, which is useful for troubleshooting&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/821">#821&lt;/a>] optimize(config): add DeepCopy() &amp;amp; Equals() to circuitbreaker.CBConfig and retry.Policy&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/827">#827&lt;/a>] optimize: revise the remoteInfo of retry call, using the remoteInfo of the RPCCall that returns&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/762">#762&lt;/a>] optimize(tool): add go mod auto replace to thrift 0.13 in thrift mode&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/755">#755&lt;/a>] optimize: improve client error msg when ctx cancel or timeout&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/756">#756&lt;/a>] optimize: use sync.Cond as the profiler event trigger&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/753">#753&lt;/a>] optimize: add recover for client&amp;rsquo;s Close&lt;/li>
&lt;/ul>
&lt;h3 id="fix">Fix&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/734">#734&lt;/a>] fix(retry): fix the panic problem caused by concurrent read and write of rpcinfo under backup retry&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/837">#837&lt;/a> &lt;a href="https://github.com/cloudwego/kitex/pull/842">#842&lt;/a>] fix(metahandler): adjust MetainfoHandler to the top of the MetaHandlers array to ensure that the logic of custom MetaHandlers that depends on MetainfoHandler works&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/812">#812&lt;/a>] fix: use detectionHandler to perform protocol detection in windows environment to support gRPC&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/851">#851&lt;/a>] fix: upgrade frugal to v0.1.6 for missing stop field&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/845">#845&lt;/a>] fix: fix the problem that RPCStat report status as success when biz handler return err&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/822">#822&lt;/a>] fix(loadbalance): don&amp;rsquo;t share balancer factory when loadbalance is defined by user&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/732">#732&lt;/a>] fix(mux): mux server waits for shardqueue close before shutdown&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/795">#795&lt;/a>] fix(grpc): zero first byte of grpc data frame, which could be random data from mcache&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/668">#668&lt;/a>] fix: fix race problem in queue.go/queue @dugenkui03&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/743">#743&lt;/a>] fix: use sharedTicker for long conn pool to prevent goroutine numbers increase as the number of client increases&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/799">#799&lt;/a>] fix(util): should return when get at least one GOPATH @StellarisW&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/807">#807&lt;/a>] fix(codec): fix fastpb nil ptr when struct fields are all default values&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/794">#794&lt;/a>] fix(tool): fix fastpb codegen by updating dependency&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/787">#787&lt;/a>] fix(tool): the import did not use the new method to render when template append content&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/785">#785&lt;/a>] fix(tool): remove useless combine service files&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/754">#754&lt;/a>] fix: fix the usage of metainfo in grpc scene&lt;/li>
&lt;/ul>
&lt;h3 id="refactor">Refactor&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/814">#814&lt;/a> &lt;a href="https://github.com/cloudwego/kitex/pull/843">#843&lt;/a>] refactor(trans): return error in onRead of defaultServerHandler and close conn in outer method&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/816">#816&lt;/a>] refactor(utils): add utils.GetEnvLogDir and deprecate utils.GetLogDir&lt;/li>
&lt;/ul>
&lt;h3 id="test--docs--chore">Test &amp;amp; Docs &amp;amp; Chore&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/839">#839&lt;/a> &lt;a href="https://github.com/cloudwego/kitex/pull/693">#693&lt;/a>] test: import mockey repo and add usage demo of mockey unit test&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/806">#806&lt;/a>] test(transmeta):add some test cases for tansmeta package&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/761">#761&lt;/a>] docs: update README.md @fuergaosi233&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/817">#817&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/832">#832&lt;/a>] chore: upgrade dependency lib to adapt go 1.20&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/772">#772&lt;/a>] chore: modify kitex gen code meta file name from kitex.yaml to kitex_info.yaml&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex Proxyless 之流量路由：配合 Istio 与 OpenTelemetry 实现全链路泳道</title><link>https://www.cloudwego.io/zh/blog/2022/11/08/kitex-proxyless-%E4%B9%8B%E6%B5%81%E9%87%8F%E8%B7%AF%E7%94%B1%E9%85%8D%E5%90%88-istio-%E4%B8%8E-opentelemetry-%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%93%BE%E8%B7%AF%E6%B3%B3%E9%81%93/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/11/08/kitex-proxyless-%E4%B9%8B%E6%B5%81%E9%87%8F%E8%B7%AF%E7%94%B1%E9%85%8D%E5%90%88-istio-%E4%B8%8E-opentelemetry-%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%93%BE%E8%B7%AF%E6%B3%B3%E9%81%93/</guid><description>
&lt;blockquote>
&lt;p>导语：Kitex Proxyless 是 Kitex 服务能够不借助 envoy sidecar 直接与 istiod 交互，基于 xDS 协议动态获取控制面下发的服务治理规则，并转换为 Kitex 对应规则来实现一些服务治理功能，如流量路由。基于 Kitex Proxyless，能够实现 Kitex 无需代理就可以被 ServiceMesh 统一管理，进而实现多种部署模式下的治理规则 Spec、治理控制面、治理下发协议、异构数据治理能力的统一。本文在 biz-demo 中使用 Kitex 和 Hertz 重写 bookinfo 项目，以实战的方式演示了如何使用 xDS 实现全链路的流量泳道。&lt;/p>
&lt;/blockquote>
&lt;h2 id="01-引言">01 引言&lt;/h2>
&lt;h3 id="kitex-proxyless">&lt;strong>Kitex Proxyless&lt;/strong>&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 是字节开源的 Golang RPC 框架，已经原生支持了 xDS 标准协议，支持以 Proxyless 的方式被 ServiceMesh 统一纳管。&lt;/p>
&lt;ul>
&lt;li>详细设计见：
&lt;a href="https://github.com/cloudwego/kitex/issues/461">Proposal: Kitex support xDS Protocol · Issue #461 · cloudwego/kitex&lt;/a>&lt;/li>
&lt;li>具体使用方式见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/xds/">官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Proxyless&lt;/strong> 简单来说就是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 服务能够不借助 envoy sidecar 直接与 istiod 交互，基于 xDS 协议动态获取控制面下发的服务治理规则，并转换为 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 对应规则来实现一些服务治理功能（例如本文的重点：&lt;strong>流量路由&lt;/strong>）。&lt;/p>
&lt;p>基于 &lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Proxyless&lt;/strong>，让我们实现 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 能够无需代理就可以被 ServiceMesh 统一管理，进而实现多种部署模式下的&lt;strong>治理规则 Spec、治理控制面、治理下发协议、异构数据治理能力&lt;/strong>的统一。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/1.png" alt="image">&lt;/p>
&lt;h3 id="流量路由">流量路由&lt;/h3>
&lt;blockquote>
&lt;p>流量路由是指，能够将流量&lt;strong>根据其自身特定的元数据标识路由&lt;/strong>到指定目的地。&lt;/p>
&lt;/blockquote>
&lt;p>流量路由属于服务治理中比较核心的能力之一，也是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Proxyless 优先支持的场景之一。&lt;/p>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 基于 xDS 实现&lt;strong>流量路由&lt;/strong>的方案大致如下：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/2.png" alt="image">&lt;/p>
&lt;p>具体流程：&lt;/p>
&lt;ol>
&lt;li>增加一个 &lt;strong>xDS Router MW&lt;/strong> 来负责 Pick Cluster（路由），并 watch 目标服务的 LDS 及 RDS。&lt;/li>
&lt;li>感知 LDS 变化，并提取目标服务的 LDS 中的 Filter Chain 及其 inline RDS。&lt;/li>
&lt;li>感知 RDS 变化，根据 &lt;strong>&lt;code>VirtualHost&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>ServiceName&lt;/code>&lt;/strong> 来匹配（支持前缀、后缀、精确、通配），获取目标服务的路由配置。&lt;/li>
&lt;li>遍历处理匹配到的 RDS 中的路由规则，路由规则主要分为两部分（参考：&lt;a href="https://github.com/envoyproxy/envoy/blob/v1.13.1/api/envoy/api/v2/route/route_components.proto#L349">路由规范定义&lt;/a>）：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Match&lt;/strong> （支持前缀、后缀、精确、通配等），目前版本我们支持以下两种即可：&lt;/p>
&lt;ul>
&lt;li>Path（必须项）：从 &lt;code>rpcinfo&lt;/code> 提取 &lt;code>Method&lt;/code> 进行匹配；&lt;/li>
&lt;li>HeaderMatcher（可选项）：从 metainfo 中提取对应元数据 KeyValue，并进行匹配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Route：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Cluster&lt;/strong> ：标准 Cluster。&lt;/li>
&lt;li>&lt;strong>WeightedClusters（权重路由）&lt;/strong> ：MW 内根据权重来选择 cluster。&lt;/li>
&lt;li>将选择到的 Cluster 写入 &lt;code>EndpointInfo.Tag&lt;/code>，用于之后的服务发现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>可以看到，流量路由其实是一个根据一定规则选择对应 SubCluster 的流程。&lt;/p>
&lt;h2 id="02-全链路泳道">02 全链路泳道&lt;/h2>
&lt;p>基于流量路由能力，我们可以延伸出很多使用场景，如：A/B 测试、金丝雀发布、蓝绿发布等等，以及本文重点：&lt;strong>全链路泳道&lt;/strong>。&lt;/p>
&lt;p>全链路泳道可以理解成是对一组服务实例按照一定方式进行拆分（例如部署环境），并基于全链路灰度路由能力，让流量能够精准按照规则在指定服务实例泳道中流动（逻辑上如同游泳场中的泳道）。&lt;/p>
&lt;p>在 Istio 中我们一般会通过 DestinationRule 的 subset 对实例进行分组，将一个服务拆分成不同子集（例如：按照版本、区域等属性拆分），然后配合 VirtualService 来定义对应的路由规则，将流量路由到对应子集中，从而完成泳道中的单跳路由能力。&lt;/p>
&lt;p>不过单单只有流量路由能力，还不足以实现&lt;strong>全链路泳道&lt;/strong>，因为当一个请求跨越多个服务的时候，我们需要有一个比较好的机制能够准确识别出该流量，并基于这个特征来为每一跳流量配置路由规则。&lt;/p>
&lt;p>如下图所示：假设我们要实现一个用户的请求能够精确灰度到 service-b 的 v1 版本。最先想到的做法可能是所有请求都带上 &lt;code>uid = 100&lt;/code> 的请求头，然后配置对应 VirtualService 来根据 header 里的 &lt;code>uid = 100&lt;/code> 匹配。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/3.png" alt="image">&lt;/p>
&lt;p>但这样的做法有几个明显的缺点：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>不够通用&lt;/strong>：以具体某个业务属性标识（如：uid）作为流量路由匹配规则，我们需要将这个业务属性手动在全链路里透传，这本身对业务侵入性较大，需要业务配合改造。并且当我们要使用其他业务属性的时候，又需要全链路业务都改造一遍，可想而知，是非常不通用的做法。&lt;/li>
&lt;li>&lt;strong>路由规则容易频繁变动，容易造成规则臃肿&lt;/strong>：以具体某个业务属性标识（如：uid）作为流量路由匹配规则，假设我们要换一个业务属性，或者给其他用户设置路由规则的时候，得去改造原有的路由规则，或者针对不同业务属性重复定义多套路由规则，很容易就会造成路由臃肿，以至于难以维护。&lt;/li>
&lt;/ol>
&lt;p>因此，要实现全链路的流量路由统一，我们还需要额外借助一个更通用的&lt;strong>流量染色&lt;/strong>与&lt;strong>染色标识全链路透传&lt;/strong>能力。&lt;/p>
&lt;h3 id="流量染色">流量染色&lt;/h3>
&lt;blockquote>
&lt;p>流量染色是指对请求流量打上特殊标识，并在整个请求链路中携带这个标识，而所谓的全链路泳道，就是整个链路基于统一的灰度流量染色标识来设置流量路由规则，使得流量能够精准控制在不同泳道中。&lt;/p>
&lt;/blockquote>
&lt;p>通常我们会在网关层进行流量染色，通常会根据原始请求中的元数据，来进行一定规则（条件、比例）转换成对应的染色标识。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>按条件染色&lt;/strong>：当请求元数据满足一定条件之后，就给当前请求打上染色标识，如：请求头中 &lt;code>uid = 100&lt;/code>、cookie 匹配等等。&lt;/li>
&lt;li>&lt;strong>按比例染色&lt;/strong>：按照一定比例，给请求打上染色标识。&lt;/li>
&lt;/ul>
&lt;p>有了一套统一的流量染色机制之后，我们配置路由规则的时候，就不需要关心具体的业务属性标识了，只需要根据&lt;strong>染色标识&lt;/strong>来配置即可。&lt;/p>
&lt;p>将具体的业务属性抽象成条件染色规则，使其更通用，即使业务属性发生了变化，路由规则也无需再频繁变动了。&lt;/p>
&lt;h3 id="染色标识全链路透传">染色标识全链路透传&lt;/h3>
&lt;blockquote>
&lt;p>染色标识通常会依靠 Tracing Baggage 来透传，Baggage 是用于在整个链路中传递业务自定义 KV 属性，例如传递流量染色标识、传递 AccountID 等业务标识等等。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/4.png" alt="image">&lt;/p>
&lt;p>要实现流量染色标识在全链路透传，我们通常会借助 Tracing Baggage 机制，在全链路中传递对应染色标识，大部分 Tracing 框架都支持 Baggage 概念机能力，如：OpenTelemetry、Skywalking、Jaeger 等等。&lt;/p>
&lt;p>有了一套通用的全链路透传机制，业务方就只需要接入一遍 tracing 即可，无需每次业务属性标识发生变化就配合改造一次。&lt;/p>
&lt;p>下面会借助一个&lt;strong>具体的工程案例&lt;/strong>介绍，来介绍并演示如何基于 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Proxyless 和 OpenTelemetry Baggage 实现全链路泳道功能。&lt;/p>
&lt;h2 id="03-案例介绍bookinfo">03 案例介绍：Bookinfo&lt;/h2>
&lt;blockquote>
&lt;p>该案例是使用 &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a>、&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 重写经典的 &lt;a href="https://istio.io/latest/zh/docs/examples/bookinfo/">Istio Bookinfo&lt;/a> 项目：&lt;/p>
&lt;ul>
&lt;li>使用 istiod 来作为 &lt;strong>xDS server&lt;/strong>，作为 CRD 配置和下发的入口；&lt;/li>
&lt;li>使用 wire 来实现&lt;strong>依赖注入&lt;/strong>；&lt;/li>
&lt;li>使用 opentelemetry 来实现&lt;strong>全链路追踪&lt;/strong>；&lt;/li>
&lt;li>使用 &lt;a href="https://github.com/kitex-contrib/xds">Kitex-xds&lt;/a> 和 opentelemetry baggage 来实现 &lt;strong>proxyless&lt;/strong> 模式下的全链路泳道;&lt;/li>
&lt;li>使用 arco-design 和 react 实现一个 &lt;strong>&lt;a href="https://github.com/cloudwego/biz-demo/blob/main/bookinfo/README_CN.md">Bookinfo&lt;/a> UI&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="架构">架构&lt;/h3>
&lt;p>整体架构与 &lt;a href="https://github.com/cloudwego/biz-demo/blob/main/bookinfo/README_CN.md">Bookinfo&lt;/a> 保持一致，分为四个单独的微服务：&lt;/p>
&lt;ul>
&lt;li>&lt;code>productpage.&lt;/code> 这个微服务会调 &lt;code>details&lt;/code> 和 &lt;code>reviews&lt;/code> 两个微服务；&lt;/li>
&lt;li>&lt;code>details.&lt;/code> 这个微服务中包含了书籍的信息；&lt;/li>
&lt;li>&lt;code>reviews.&lt;/code> 这个微服务中包含了书籍相关的评论。它还会调用 &lt;code>ratings&lt;/code> 微服务；&lt;/li>
&lt;li>&lt;code>ratings.&lt;/code> 这个微服务中包含了由书籍评价组成的评级信息。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>reviews&lt;/code> 微服务有 3 个版本：&lt;/p>
&lt;ul>
&lt;li>v1 版本会调用 &lt;code>ratings&lt;/code> 服务，并使用 1 颗 ⭐️ 显示评分；&lt;/li>
&lt;li>v2 版本会调用 &lt;code>ratings&lt;/code> 服务，并使用 5 颗 ⭐️⭐️⭐️⭐️⭐️⭐️ 显示评分；&lt;/li>
&lt;li>v3 版本不会调用 &lt;code>ratings&lt;/code> 服务。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/5.png" alt="image">&lt;/p>
&lt;h3 id="泳道示意图">泳道示意图&lt;/h3>
&lt;p>整体区分成 2 个泳道：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>基准泳道&lt;/strong>：未被染色的流量会被路由到基准泳道中。&lt;/li>
&lt;li>&lt;strong>分支泳道&lt;/strong>：被染色的流量会被路由到 reviews-v2 -&amp;gt;ratings-v2 的分支泳道中。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/6.png" alt="image">&lt;/p>
&lt;h3 id="流量染色-1">流量染色&lt;/h3>
&lt;p>网关统一负责对流量进行染色，例如请求 header 中 uid=100 的流量都统一进行染色，为请求携带上 &lt;code>env=dev&lt;/code> 的 &lt;strong>baggage&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/7.png" alt="image">&lt;/p>
&lt;p>染色方式可以根据不同的网关实现具体选择，例如当我们选择 istio ingress 作为网关的时候，我们可以借助 &lt;code>EnvoyFilter&lt;/code> + &lt;code>Lua&lt;/code> 的方式来编写网关染色规则。&lt;/p>
&lt;h3 id="为服务实例打标">为服务实例打标&lt;/h3>
&lt;ol>
&lt;li>为对应 &lt;strong>workload&lt;/strong> 打上对应 version 标识。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>以 reviews 为例，只需要给对应 pod 打上 version: v1 的 label 即可。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/8.png" alt="image">&lt;/p>
&lt;ol start="2">
&lt;li>基于 &lt;strong>DestinationRule&lt;/strong> 为服务设置一系列的 subsets：&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;ul>
&lt;li>Productpage: v1&lt;/li>
&lt;li>Reviews: v1、v2、v3&lt;/li>
&lt;li>Ratings: v1、v2&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/9.png" alt="image">&lt;/p>
&lt;h3 id="流量路由规则">流量路由规则&lt;/h3>
&lt;p>网关已经将请求头中携带了 &lt;code>uid=100&lt;/code> 的流量进行了染色，自动带上了 &lt;code>env=dev&lt;/code> 的 baggage，因此我们只需要根据 header 进行路由匹配即可，下面是具体的路由规则配置示例：&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/10.png" alt="image">&lt;/p>
&lt;h3 id="查看效果">查看效果&lt;/h3>
&lt;h4 id="基准泳道">基准泳道&lt;/h4>
&lt;p>入口流量请求头中不带 &lt;code>uid=100&lt;/code> 的请求，会自动路由到基准泳道服务，reviews v1 和 v3 服务间轮询，展示的效果是评分为 0 或 1 随机。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/11.png" alt="image">&lt;/p>
&lt;h4 id="分支泳道">分支泳道&lt;/h4>
&lt;ol>
&lt;li>我们这边通过浏览器 mod-header 插件，来模拟入口流量请求头中携带了 &lt;code>uid=100&lt;/code> 的场景。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/12.png" alt="image">&lt;/p>
&lt;ol start="2">
&lt;li>再点击刷新按钮，可以发现请求打到了分支泳道，流量泳道功能成功生效。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/13.png" alt="image">&lt;/p>
&lt;h2 id="04-总结与展望">04 总结与展望&lt;/h2>
&lt;p>至此我们已经基于 &lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Proxyless&lt;/strong> 与 &lt;strong>OpenTelemetry&lt;/strong> 实现了一个完整的全链路泳道，并且无需借助 Envoy sidecar，就能基于 Isito 标准治理规则 Spec，来为 Kitex 设置对应的路由规则了。&lt;/p>
&lt;p>当然，除了满足&lt;strong>流量路由&lt;/strong>能力之外，&lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Proxyless&lt;/strong> 也在持续迭代优化，满足更多数据面治理能力需求。Proxyless 作为一种 ServiceMesh 数据面探索和实践，除了能够丰富网格数据面部署形态之外，也希望可以不断打磨 &lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>&lt;/strong>，增强其在开源生态兼容方面的能力，打造一个开放包容的微服务生态体系。&lt;/p>
&lt;h2 id="05-相关项目链接">05 相关项目链接&lt;/h2>
&lt;p>下面是该案例涉及的项目清单：&lt;/p>
&lt;ul>
&lt;li>biz-demo: &lt;a href="https://github.com/cloudwego/biz-demo">https://github.com/cloudwego/biz-demo&lt;/a>&lt;/li>
&lt;li>kitex: &lt;a href="https://github.com/cloudwego/kitex">https://github.com/cloudwego/kitex&lt;/a>&lt;/li>
&lt;li>hertz: &lt;a href="https://github.com/cloudwego/hertz">https://github.com/cloudwego/hertz&lt;/a>&lt;/li>
&lt;li>kitex-xds: &lt;a href="https://github.com/kitex-contrib/xds">https://github.com/kitex-contrib/xds&lt;/a>&lt;/li>
&lt;li>kitex-opentelemetry: &lt;a href="https://github.com/kitex-contrib/obs-opentelemetry">https://github.com/kitex-contrib/obs-opentelemetry&lt;/a>&lt;/li>
&lt;li>hertz-opentelemetry: &lt;a href="https://github.com/hertz-contrib/obs-opentelemetry">https://github.com/hertz-contrib/obs-opentelemetry&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>该完整案例已提交在 &lt;a href="https://github.com/cloudwego/biz-demo">biz-demo&lt;/a> 仓库中，感兴趣的同学可以前往查阅。&lt;a href="https://github.com/cloudwego/biz-demo">biz-demo&lt;/a> 会包含一些基于 &lt;a href="https://github.com/cloudwego">CloudWeGo&lt;/a> 技术栈且具备一定业务场景的完整 Demo，初衷是能够为企业用户在生产中使用提供有价值的参考，非常欢迎更多同学能够参与到 &lt;a href="https://github.com/cloudwego">CloudWeGo&lt;/a> 相关场景与案例的贡献中来，一起来做一些有意思的尝试。&lt;/p></description></item><item><title>Blog: Kitex v0.4.3 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/11/02/kitex-v0.4.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/11/02/kitex-v0.4.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>扩展 client/server 生成模板&lt;/strong> ：新增 client/server 模板扩展功能，可以通过配置定制，适用于统一定制 suite 场景，详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/template_extension/">扩展 Service 代码生成模板&lt;/a>。&lt;/li>
&lt;li>&lt;strong>业务异常&lt;/strong> ：新增业务自定义异常支持，可区分于 RPC 异常返回 error，使用详见&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/bizstatuserr/">业务异常&lt;/a>，背景详见&lt;a href="https://github.com/cloudwego/kitex/issues/511">Proposal&lt;/a>。&lt;/li>
&lt;li>&lt;strong>请求 Profiler&lt;/strong> ：新增功能可用于为不同的 RPC 请求提供成本分析统计的能力。&lt;/li>
&lt;li>&lt;strong>Context Middleware&lt;/strong> : 新增 Context Middleware，用于请求粒度添加 Middleware。&lt;/li>
&lt;/ol>
&lt;h3 id="优化">优化&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Frugal 性能优化&lt;/strong> ：支持在创建 Client/Server 阶段进行 Frugal “预编译”，减少动态编译对延迟的影响。&lt;/li>
&lt;li>&lt;strong>连接池优化&lt;/strong> ：重构连接池，完善空闲连接清理能力。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h3 id="feature">Feature&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/691">#691&lt;/a>] feat(client): 为 Client 添加上下文中间件，用于请求粒度添加中间件。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/649">#649&lt;/a>] feat(connpool): 长连接池的新实现，支持最小空闲连接数及空闲连接清理。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/672">#672&lt;/a>] feat(grpc): 为 kitex grpc 添加了元信息传递相关 api，包括 header，tailer，以及 peer 远端地址的获取接口。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/613">#613&lt;/a>] feat(exception): 支持用户自定义异常用以区分 RPC 异常。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/670">#670&lt;/a>] feat(exception): 支持 DetailError 格式化。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/678">#678&lt;/a>] feat(tool): 为 kitex cmd 添加 git 和 record 参数。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/662">#662&lt;/a>] feat(tool): 支持在创建 client 或者 server 的时候进行 frugal “预编译” (pretouch)。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/657">#657&lt;/a>] feat(tool): 支持模板拓展。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/527">#527&lt;/a>] feat(profiler): 为不同的 RPC 请求提供成本分析统计的能力。&lt;/li>
&lt;/ul>
&lt;h3 id="optimize">Optimize&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/690">#690&lt;/a>] optimize(meta): 移除 #503 添加 default metahandler 的错误逻辑。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/638">#638&lt;/a>] optimize(generic): httppb 泛化支持 map/list 元素类型为 struct。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/641">#641&lt;/a>] optimize(tool): 给 oneway 方法增加警告注释。&lt;/li>
&lt;/ul>
&lt;h3 id="fix">Fix&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/611">#611&lt;/a>] fix(client): 在频繁重复创建 Client 场景下，修复由于 finalizer 未触发执行导致的资源泄漏。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/698">#698&lt;/a>] fix(connpool): 根据 Get 返回的连接数减少值来调整 globalIdle。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/636">#636&lt;/a>] fix(connpool): 修复当连接池在 &lt;code>ForwardProxy&lt;/code> 实现中被重置后，连接池的 CloseCallback、统计上报失效的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/647">#647&lt;/a>] fix(grpc): 修复 grpc 连接级别窗口初始化时没有通知对端的问题，并同步了 grpc pr #5459。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/639">#639&lt;/a>] fix(generic): 泛化调用支持 list&lt;byte> 类型，map 读泛化增加 forJSON 选项。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/655">#655&lt;/a>] fix(generic): 数值型常量作为泛化默认值时无法被正确解析。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/654">#654&lt;/a>] fix(frugal): 修复较低版本 go 编译失败的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/682">#682&lt;/a>] fix(profiler): 修复 profiler 停止 pprof profile 采集的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/637">#637&lt;/a>] fix(tool): 修复 handler.go 模板里的 imports。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/630">#630&lt;/a>] fix(tool): 对于没有声明 “service” 的 pb 文件，去掉生成文件末尾冗余的 kitex 声明。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/627">#627&lt;/a>] fix(tool): 修复当一个 import 拥有不同的别名时 import 会丢失的问题。&lt;/li>
&lt;/ul>
&lt;h3 id="refactor">Refactor&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/651">#651&lt;/a>] refactor(server): 重构 server trans handler 的 read/write 接口，返回新的 context。&lt;/li>
&lt;/ul>
&lt;h3 id="docs">Docs&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/656">#656&lt;/a>] docs: 删除 CONTRIBUTING 文档中的错误信息。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/683">#683&lt;/a>] docs(kerrors): 修改了 kerrors WithCauseAndExtraMsg 方法注释。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/625">#625&lt;/a>] chore: 修正 pull request 模板的语法问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/623">#623&lt;/a>] chore: 修改 pull request 模板。&lt;/li>
&lt;/ul>
&lt;h3 id="test--ci">Test &amp;amp; CI&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/646">#646&lt;/a>] test: 修复 InitRPCInfoFunc 未设置 rpcinfo 导致的单测失败。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/680">#680&lt;/a>] test: 修复重试单测的 race 问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/661">#661&lt;/a>] test: 增强 wpool 测试稳定性。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/643">#643&lt;/a>] test: 为 detection server handler 添加测试。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/632">#632&lt;/a>] test: 用 gomock 自动生成类替换手动编写的 mock 类。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/697">#697&lt;/a>] chore(ci): 固定 skywalking-eyes 版本号。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/652">#652&lt;/a>] chore(ci): 删除重复的测试，以减少单测所花费的时间。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/588">#588&lt;/a>] chore(ci): 支持 codecov。&lt;/li>
&lt;/ul></description></item><item><title>Blog: 高性能 RPC 框架 CloudWeGo-Kitex 内外统一的开源实践</title><link>https://www.cloudwego.io/zh/blog/2022/09/20/%E9%AB%98%E6%80%A7%E8%83%BD-rpc-%E6%A1%86%E6%9E%B6-cloudwego-kitex-%E5%86%85%E5%A4%96%E7%BB%9F%E4%B8%80%E7%9A%84%E5%BC%80%E6%BA%90%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/09/20/%E9%AB%98%E6%80%A7%E8%83%BD-rpc-%E6%A1%86%E6%9E%B6-cloudwego-kitex-%E5%86%85%E5%A4%96%E7%BB%9F%E4%B8%80%E7%9A%84%E5%BC%80%E6%BA%90%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h2 id="由内至外---开源过渡">由内至外 - 开源过渡&lt;/h2>
&lt;p>很多同学可能刚刚了解 CloudWeGo，先介绍一下 CloudWeGo 和 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的关系。&lt;/p>
&lt;h3 id="cloudwego-和-kitex">CloudWeGo 和 Kitex&lt;/h3>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 是 CloudWeGo 开源的第一个微服务框架，它是一个 &lt;strong>支持多协议的 Golang RPC 框架&lt;/strong> ，从网络库、序列化库到框架的实现&lt;strong>基本完全自研&lt;/strong>的。
特别地，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 对 gRPC 协议的支持使用了 gRPC 官方的源码，但是我们对 gRPC 的实现做了 &lt;strong>深度且定制的优化&lt;/strong> ，所以 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 支持的 gRPC 协议性能优于 gRPC 官方框架。
同时这也是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 与目前已经开源的、支持 gRPC 协议的其他 Golang 框架的主要差异。如果用户想使用 gRPC 又对性能有很高的要求，那么 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 框架将会是一个很不错的选择。&lt;/p>
&lt;p>继 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 开源后，今年 CloudWeGo 又陆续开源了 Golang HTTP 框架 &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a>，Rust RPC 框架 &lt;a href="https://github.com/cloudwego/volo">Volo&lt;/a>，同时围绕这些微服务框架和微服务的一些通用能力，
我们还开源了一些高性能的基础库。关于更多 CloudWeGo 开源的子项目，可以进入 CloudWeGo &lt;a href="https://www.cloudwego.io/zh/">官网&lt;/a>详细了解。&lt;/p>
&lt;p>&lt;a href="https://www.cloudwego.io/zh/">CloudWeGo 官网&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/1.png" alt="image">&lt;/p>
&lt;p>根据社区同学反馈，在一些开源群里大家会讨论 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 会不会是一个字节跳动的开源 KPI 项目呢？它的稳定性、持续性能够得到保障吗？我可以负责任地讲，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 不是一个 KPI 项目，它是来自字节跳动内部大规模实践的真实项目。
在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 开源后始终保持内外统一，基于内外代码的统一我们保证了 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的持续迭代。为了进一步消除大家的顾虑，下面具体介绍一下 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的诞生和开源历程。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/2.png" alt="image">&lt;/p>
&lt;h3 id="kitex-发展历史">Kitex 发展历史&lt;/h3>
&lt;p>2014 年，字节跳动开始引入 Golang。2015 年，字节跳动内部的服务化开启。在 RPC 调用的场景选择了 Thrift 协议，在内部开始支持 RPC 框架。2016 年，第一个 Golang RPC 框架 Kite 正式发布。
通常在一个公司高速发展的初期，基础能力都是为了快速支持需求落地，面对的需求场景也较单一，设计上不会有较多考量，其实这也是合理的，因为探索阶段并不完全清楚还需要支持哪些场景，过多的考虑反而会出现过度设计的问题。&lt;/p>
&lt;p>但是，随着业务场景复杂化，需求也会多样化，而且接入服务及调用量逐年增长，Kite 已经不足以支持后续的迭代，在线上服役三年多后，2019 年我们开启了新的项目 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>，2020 年初发布了正式版本，在 2020 年底字节内部已经有 1w+ 服务接入 Kitex。&lt;/p>
&lt;p>从 2014 年到 2020 年，Golang 已经是字节跳动内部主要的业务开发语言，应该是业界 Golang 应用最多的公司。我们的服务框架支持着数万个 Golang 微服务的可靠通信，
经过数量众多的微服务和海量流量的验证，我们已经有了较为成熟的微服务最佳实践，于是考虑将内部的实践开源出去丰富云原生社区的 Golang 产品体系。
在 2021年，我们以 CloudWeGo 品牌正式开源了第一个服务框架 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。截至今年 8 月，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 已经为字节跳动内部 &lt;strong>6w+&lt;/strong> 的服务提供支持， &lt;strong>峰值 QPS 达到上亿级别&lt;/strong> 。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/3.png" alt="image">&lt;/p>
&lt;p>大家或许还有疑问，完整的微服务体系离不开基础的云生态，无论在公有云、私有云，都需要搭建额外的服务以很好地支持微服务的治理，比如治理平台、注册中心、配置中心、监控、链路跟踪、服务网格等，而且还存在一些定制的规范。
字节跳动自然也有完善的内部服务支持微服务体系，但这些服务短期还无法开源，那 CloudWeGo 如何内外维护一套代码，统一迭代呢？&lt;/p>
&lt;p>关于这个问题，我们看一下 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的模块划分。&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的模块分为三个部分：中间是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 主干部分 &lt;strong>Kitex Core&lt;/strong> ，它定义了框架的层次结构、接口核心逻辑的实现以及接口的默认实现；
左边的 &lt;strong>Kitex Tool&lt;/strong> 则是与生成代码相关的实现，我们的生成代码工具就是编译这个包得到的，其中包括 IDL 的解析、校验、代码生成、插件支持等。
不过为了便于用户使用同时提供更友好的扩展，主要能力也做了拆分作为基础库独立开源，如 Thriftgo、Thrift-validator 插件、Fastpb；
右边的 &lt;strong>Kitex Byted&lt;/strong> 是对字节内部基础能力集成的扩展实现，我们在开始就将内部的能力作为扩展收敛到一个 package 下。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/4.png" alt="image">&lt;/p>
&lt;p>如此，我们就可以将 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> Core 和 Tool 部分开源出去。我们将代码做了拆分，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的核心代码和工具部分迁移到开源库，集成内部扩展的模块作为 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的扩展保留在内部库，同时内部库封装一层壳保证内部用户可以无感知地升级。&lt;/p>
&lt;p>那么 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的开源就只是代码拆分这么简单吗？显然不是。2021 年 2 月，我们开始筹备 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的开源，虽然基于 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的扩展性，我们可以与内部基础设施集成的能力解耦，但是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 仍然依赖内部的一些基础库，如果要开源必须先开源基础库的能力。
所以我们首先做了依赖库的梳理，与相关的同学合作首先开源了 &lt;strong>bytedance/gopkg&lt;/strong> 库。这个库由 CloudWeGo 与字节跳动的语言团队合作维护，里面包含也了对 Golang 标准库能力的增强，感兴趣的同学可以关注使用。&lt;/p>
&lt;p>bytedance/gopkg: &lt;a href="https://github.com/bytedance/gopkg">https://github.com/bytedance/gopkg&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/5.png" alt="image">&lt;/p>
&lt;p>在 gopkg 库开源后，我们调整代码进行开源适配。2021 年 7 月，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 正式开源，在内部发布中版本使用开源库。
但 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 毕竟支持了内部几万的微服务，我们必须要确保内部服务在这个变更后可以平滑过渡，所以在开源初我们没有对外官宣，在确认稳定性后，&lt;strong>2021 年 9 月，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 正式对外官宣开源&lt;/strong> 。&lt;/p>
&lt;p>介绍了 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 诞生、开源的历程，希望能够解除外部同学关于“Kitex 会不会是一个 KPI 项目？”的顾虑。&lt;/p>
&lt;h3 id="开源的价值">开源的价值&lt;/h3>
&lt;p>第一部分的最后，简单讲一下开源能为我们带来的价值。 &lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 不是为了开源而实现的，但它的实现是面向开源的。&lt;/strong> &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 本身是一个经过内部大规模实现的项目，
我们希望 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 开源后能帮助更多用户在内部快速搭建微服务，同时开源能让我们收集更多社区和企业的反馈，也能吸引外部开发者共建，
促进 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 面向多元场景支持的演进，丰富产品能力，然后能在更多场景和企业得到落地，这是一个正向循环，互利共赢的过程。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/6.png" alt="image">&lt;/p>
&lt;h2 id="开源一年变更回顾">开源一年变更回顾&lt;/h2>
&lt;h3 id="框架的衡量指标">框架的衡量指标&lt;/h3>
&lt;p>在介绍 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 开源一年变更前，先分享一下框架的衡量指标，这是大家在选择一个框架时要考虑的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>扩展性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>如果一个框架与内部能力强耦合，就无法移植到其他平台，或框架的支持场景单一也无法进行扩展，这样的框架很难得到外部的使用。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>易用性&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>框架的易用性体现在两个方面。第一是面向&lt;strong>业务开发者&lt;/strong> ，如果一个框架在使用过程中需要让用户关注很多框架的细节，那么对研发效率要求很高的团队可能无法接受。
第二是面向&lt;strong>框架的二次开发者&lt;/strong> ，他们需要对框架做一些定制支持，如果框架提供的扩展能力过于宽泛，扩展成本很高，或者可扩展的能力不够多，那么这个框架也是存在局限性的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>功能的丰富度&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>虽然基于扩展性可以对框架进行定制，但不是所有开发者都有足够的精力做定制开发，如果框架本身对各种扩展能力提供了不同选择的支持，对于开发者来说只需要根据自己的基础设施进行组合就能在自己的环境中运行。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>高性能&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>前面三点是初期选择框架需要重点关注的指标，但随着服务规模和资源消耗变大，性能就成了不容忽视的问题。从长期的角度来说，选择框架的时候一定要关注性能，否则后续只能面临框架替换的问题，或者被迫对这个框架做定制维护。&lt;/p>
&lt;p>关于以上四点框架的衡量指标，虽然 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 目前还没做到最好，但是这四个要素都是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 设计和实现中一直在兼顾的，我们不会顾此失彼。&lt;/p>
&lt;h3 id="功能特性">功能特性&lt;/h3>
&lt;p>下面就几个开源一年来重要的功能特性进行介绍。&lt;/p>
&lt;h4 id="proxyless">Proxyless&lt;/h4>
&lt;p>Proxyless 是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 面向开源场景提供的支持。在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 开源初期，我们内部讨论过是否要支持 xDS 对接 &lt;a href="https://github.com/istio/istio">Istio&lt;/a>，对于外部用户来说，使用 &lt;a href="https://github.com/istio/istio">Istio&lt;/a> 可以快速搭建一套基本的微服务架构，
解决服务发现、流量路由、配置下发等问题，但是如果使用完整的 &lt;a href="https://github.com/istio/istio">Istio&lt;/a> 的解决方案，就要引入 Envoy，这会增加运维成本，而且直接使用官方的 Envoy 方案对性能有损，会引入额外的 CPU 开销且增加延迟。
&lt;strong>如果 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 能直接对接 &lt;a href="https://github.com/istio/istio">Istio&lt;/a>，既能让用户享受到部分 &lt;a href="https://github.com/istio/istio">Istio&lt;/a> 的能力，又可以避免 Envoy 带来的性能损失和部署运维成本。&lt;/strong> 但是在开源初期，我们没有看到很明确的用户诉求，因此没有对此做高优的支持。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/7.png" alt="image">&lt;/p>
&lt;p>后来 gRPC 官方也发布了 Proxyless 的支持，同时 &lt;a href="https://github.com/istio/istio">Istio&lt;/a> 的官方也将 Proxyless 作为使用 &lt;a href="https://github.com/istio/istio">Istio&lt;/a> 的一种方式。&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 现在也已完成支持，目前主要是对接服务发现，
xDS 支持的扩展单独开源到了 &lt;a href="https://github.com/kitex-contrib/xds">kitex-contrib/xds&lt;/a> 库中，后续还会完善。大家可以根据 README 了解如何使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 对接 &lt;a href="https://github.com/istio/istio">Istio&lt;/a>。&lt;/p>
&lt;h4 id="json-和-protobuf-泛化调用支持">JSON 和 Protobuf 泛化调用支持&lt;/h4>
&lt;p>之前，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 支持了应用在网关场景的 HTTP 泛化，以及支持了应用在一些通用服务场景的 Map 和二进制泛化。开源后，根据用户的需求反馈又新增了 JSON 和 Protobuf 的泛化。&lt;/p>
&lt;p>Protobuf 的泛化也是应用在 API 网关的场景。原来的 HTTP 泛化传输的数据格式是 JSON，但是 JSON 的序列化体积大、效率低，对性能有影响，所以很多移动端的接口选择使用 Protobuf 传输数据，因此增加了 Protobuf 泛化的支持。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/8.png" alt="image">&lt;/p>
&lt;p>&lt;strong>目前 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的泛化主要针对后端的 Thrift 服务，无论是 Protobuf、Map 还是 JSON，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 都会在调用端结合 IDL 解析，将这些数据映射编码为 Thrift 包发给后端服务。&lt;/strong>&lt;/p>
&lt;p>那么为什么把泛化放在调用端而不是服务端呢？大家广泛了解的泛化都是服务端对泛化请求做了解析处理，当然调用端也要相应地提供泛化的 Client。
但是泛化面向的是通用服务，泛化使用成本其实是比较高的，它并不适用于普通的 RPC 场景，而通用服务面向的是所有后端的服务，有 Golang/Java/C++/Python/Rust，如果每一种语言框架都支持泛化，成本是非常高的。
就算各个语言都对泛化做了支持，框架版本收敛又是一个漫长的过程，对于通用服务来说，对接所有的服务就显得不太现实。综合以上原因，泛化放在调用端支持。&lt;/p>
&lt;h4 id="重试能力增强">重试能力增强&lt;/h4>
&lt;p>去年开源时，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 已经支持了重试功能。之前支持的重试有两类，一个是超时重试，一个是 Backup Request。&lt;/p>
&lt;p>对于超时来重试来说，我们只会对超时这一种异常进行重试，但为了进一步提高请求成功率，用户希望对其他的异常也进行重试，或者用户可能会定义一些用户请求的状态码，结合用户状态码进行重试，
在这种情况下，显然我们只支持超时重试是不满足用户需求的。基于这个背景， &lt;strong>Kitex 新增了指定结果重试&lt;/strong> ，用户可以指定其他异常或指定某一类 Response，框架会结合用户指定的结果进行重试。&lt;/p>
&lt;p>其次，用户在配置重试时，如果通过代码配置的方式设置重试，它会对整个 Client 的所有 RPC 方法生效，但是用户希望针对不同的 RPC 方法应用不同的重试策略，甚至同一个方法也希望可以采用不同的重试策略，
因为不同链路上发起的同一个方法的请求对指标要求也会不同。比如有些想使用 Backup Request 减少延迟，有些想做异常重试提高成功率，对于这种情况， &lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 新的版本支持了请求粒度配置重试&lt;/strong> 。&lt;/p>
&lt;p>下图是使用示例。以请求粒度重试配置为例，比如 RPC 方法是 &lt;code>Mock&lt;/code>，那么我们在发起 RPC 调用的时候，在后面可以配置一个 &lt;code>callopt&lt;/code> 指定重试策略，此次请求就会使用这个重试策略。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/9.png" alt="image">&lt;/p>
&lt;h4 id="thrift-validator">Thrift Validator&lt;/h4>
&lt;p>Thrift-gen-validator 是 Thriftgo 的一个工具插件，它可以根据 Thrift IDL 中定义的注解描述约束给对应的 &lt;code>struct&lt;/code> 生成 &lt;code>IsValid() error&lt;/code> 方法，校验值的合法性。
通常做 RPC 调用的时候，用户可能会对一些字段校验合法性，用户如果直接写这些校验代码，投入的成本会很高。所以我们就提供了注解支持， &lt;strong>只要用户在 IDL 中根据规范定义注解，Kitex 就可以帮助用户生成校验代码&lt;/strong> 。&lt;/p>
&lt;p>下图是代码生成的命令和一个 IDL 注解定义示例，在生成代码的时候指定 Thrift Validator 的插件，我们的插件工具就会解析注解，为用户生成这一套合法性校验的代码。
目前我们也将 Thrift Validator 的功能贡献给了 Apache Thrift。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/10.png" alt="image">&lt;/p>
&lt;h3 id="性能优化">性能优化&lt;/h3>
&lt;p>介绍完几个重要的功能特性，再介绍几个在性能上的优化特性。&lt;/p>
&lt;h4 id="thrift-高性能编解码">Thrift 高性能编解码&lt;/h4>
&lt;p>&lt;strong>&lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a> 是一个无需生成编解码代码、基于 JIT 的高性能动态 Thrift 编解码器。&lt;/strong> 虽然我们针对官方 Thrift 编解码已经做了优化，支持了 FastThrift，这个在我们开源前发布的优化实践里也有介绍，
但我们希望能有进一步的性能提升，参考我们开源的高性能 JSON 库 Sonic 的设计，实现了 Thrift JIT 编解码器。下图中的表格是 &lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a> 结合 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 与 FastThrift 的性能对比。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/11.png" alt="image">&lt;/p>
&lt;p>可以看到在大部分场景 RPC 性能表现都较优。除了性能上的优势，&lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a> 还有另一个优势是无需生成编解码生成代码。Thrift 的生成代码比 Protobuf 繁重，一个复杂的 IDL 代码生成文件可以达到几万行，
而这些代码本来对用户来说无需关注，却需要由用户来维护。&lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a> 只需要生成结构体代码，不需生成编解码代码，就大大解决了这个问题。&lt;/p>
&lt;p>关于如何在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 中使用 &lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a>，可以参考仓库的 &lt;a href="https://github.com/cloudwego/frugal#readme">Readme&lt;/a>。当然用户也可以单独使用 &lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a> 作为 Thrift 高性能编解码器，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 后续也会考虑默认使用 &lt;a href="https://github.com/cloudwego/frugal">Frugal&lt;/a>。&lt;/p>
&lt;h4 id="protobuf-高性能编解码">Protobuf 高性能编解码&lt;/h4>
&lt;p>虽然我们内部主要支持 Thrift，但开源之后我们发现外部用户对于 Protobuf 或 gRPC 的关注会更多，所以参考 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> FastThrift 的优化思路，重新实现了 Protobuf 的生成代码。
在 v0.4.0 版本，如果用户使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的工具生成 Protobuf 的代码，就会默认生成 &lt;a href="https://github.com/cloudwego/fastpb">Fastpb&lt;/a> 的编解码代码，在发起 RPC 调用的时候，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 也会默认使用 &lt;a href="https://github.com/cloudwego/fastpb">Fastpb&lt;/a>。&lt;/p>
&lt;p>下面列出的是 &lt;a href="https://github.com/cloudwego/fastpb">Fastpb&lt;/a> 与官方 Protobuf 序列化的性能对比，可以看到无论是编码还是解码，在效率和内存分配上，&lt;a href="https://github.com/cloudwego/fastpb">Fastpb&lt;/a> 都远远优于官方 Protobuf 序列化库。&lt;/p>
&lt;ul>
&lt;li>FastWrite: &lt;strong>(ns/op) ↓67.8% ，(B/op) ↓83.9%&lt;/strong>&lt;/li>
&lt;li>FastRead: &lt;strong>(ns/op) ↓41.5% ，(B/op) ↓4.5%&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="grpc-性能优化">gRPC 性能优化&lt;/h4>
&lt;p>开源初期，我们对 gRPC 整体稳定性和性能的关注是比较少的。因为内部使用的场景不是很多。开源后收到了很多外部同学的反馈，
所以我们针对 gRPC 做了一个专项的问题治理以及性能优化。今年中旬我们已经把相关的优化正式提交到开源库，在 v0.4.0 版本发布。&lt;/p>
&lt;p>Kitex v0.4.0: &lt;a href="https://mp.weixin.qq.com/s/ezifbQkHcZQP6MygmJABYA">https://mp.weixin.qq.com/s/ezifbQkHcZQP6MygmJABYA&lt;/a>&lt;/p>
&lt;p>下图中左侧是优化前 Kitex-gRPC 和官方 gRPC 框架对 &lt;strong>Unary 请求&lt;/strong>的压测吞吐对比，在并发比较低的情况下，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的吞吐并不具有优势，
使用 &lt;a href="https://github.com/cloudwego/fastpb">Fastpb&lt;/a> 的时候，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的吞吐表现会好一些，但低并发的吞吐依然低于官方 gRPC。在优化之后，吞吐对比如右图所示。&lt;strong>相比优化前吞吐提升 46% - 70%，相比官方 gRPC 框架，吞吐高 51% - 70%。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/13.png" alt="image">&lt;/p>
&lt;p>下图中右侧是优化后 &lt;strong>Unary 请求&lt;/strong>的延迟对比，在吞吐比官方 gRPC 高出很多的情况下，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的延迟也显著低于官方的 gRPC。同时就 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 自身而言，在优化后延迟表现也好了很多。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/14.png" alt="image">&lt;/p>
&lt;p>我们再看下 &lt;strong>Streaming 请求&lt;/strong>的压测性能对比，优化前 Streaming 请求的表现同样在低并发的情况下，相对 gRPC 框架没有优势。
经过优化后，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 吞吐显著高于官方 gRPC，如下图，同时低并发下吞吐高但延迟持平，增加并发后能看到延迟出现分叉。所以在性能上， &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 支持的 gRPC 协议相对官方有明显的优势。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/15.png" alt="image">&lt;/p>
&lt;p>虽然在部分功能上，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 还没有完全对齐，但是目前已经可以满足大部分的场景需求，我们后续也会继续进行功能对齐。&lt;/p>
&lt;h2 id="社区共建完善生态及企业落地">社区共建完善生态及企业落地&lt;/h2>
&lt;h3 id="社区共建的-kitex-扩展生态">社区共建的 Kitex 扩展生态&lt;/h3>
&lt;p>开源后，我们很欣慰得到了很多开发者的关注，坦白说内部团队精力有限，无法快速建立起面向外部用户的 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 扩展生态。但是一年以来借助社区的力量，
&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在 &lt;strong>服务注册/发现&lt;/strong>、 &lt;strong>可观测性&lt;/strong>、&lt;strong>服务治理&lt;/strong>几部分的扩展得到了很多补充，尤其是服务注册/发现相关的扩展，目前开源的主流注册中心都已完成对接，
虽然在功能丰富度上我们还有待加强，但结合已有的支持，对于外部用户已经具备了搭建微服务架构的能力。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/16.png" alt="image">&lt;/p>
&lt;p>衷心感谢积极参与 CloudWeGo 社区建设的同学们！关于 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 相关的生态支持，大家可以进入 &lt;a href="https://github.com/kitex-contrib">kitex-contrib&lt;/a> 了解更多的开源仓库。&lt;/p>
&lt;h3 id="对接外部企业协助落地">对接外部企业，协助落地&lt;/h3>
&lt;p>我们开源的初衷是为了助力其他外部企业快速地搭建企业级的云原生架构。开源后，森马、华兴证券、贪玩游戏、禾多科技先后主动与我们联系，反馈使用问题、提出需求，
的确让我们发现了一些和内部场景不一样的问题，需要我们去关注、支持和优化，我们很开心 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 能在这些企业内部得到应用。
在今年 6 月 25 日的 CloudWeGo Meetup 中，森马和华兴证券的研发同学也分享了他们使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的内部实践。&lt;/p>
&lt;p>森马：https://mp.weixin.qq.com/s/JAurW4P2E3NIduFaVY6jew&lt;/p>
&lt;p>华兴证券：https://mp.weixin.qq.com/s/QqGdzp-7rTdlxedy6bsXiw&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/17.png" alt="image">&lt;/p>
&lt;p>除了以上企业，还有一些公司也私下向我们咨询过使用问题，我们非常感谢这些企业用户的支持，以及向我们提出的反馈信息。
如第一部分所讲，收集社区和企业的反馈可以促进 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 面向多元场景支持的演进，企业用户如果有相关需求，欢迎联系我们。&lt;/p>
&lt;h3 id="如何使用-kitex-与内部基础设施集成">如何使用 Kitex 与内部基础设施集成&lt;/h3>
&lt;p>这里再简单介绍下如何使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 与大家的内部基础设施集成。以字节内部为例，内部仓库里有开源库中的扩展实现，集成内部的能力，
在 bytedSuite 中，我们针对不同场景对 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 进行初始化。如下面的代码示例，用户只需要在构造 Client 和 Server 时增加一个 option 配置就可以完成集成，
不过为了让用户完全不需关注内部能力的集成，我们将该配置放在了生成的脚手架代码中，关于配置如何内嵌在生成代码中，后续我们也会开放出来，方便外部的框架二次开发者能以同样的方式为业务开发同学提供集成能力。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/1st_RPC_Kitex/18.png" alt="image">&lt;/p>
&lt;h2 id="总结和展望">总结和展望&lt;/h2>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>本次分享主要介绍了以下内容：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 如何保持内外统一地从内部应用较广的框架转为开源框架；&lt;/li>
&lt;li>开源一年以来发布了哪些重要的功能特性，做了哪些性能优化；&lt;/li>
&lt;li>借助社区的力量现在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的周边生态如何、企业落地情况以及如何使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 优雅地集成内部能力。&lt;/li>
&lt;/ul>
&lt;h3 id="展望">展望&lt;/h3>
&lt;ul>
&lt;li>与社区同学共建，持续丰富社区生态；&lt;/li>
&lt;li>结合工程实践，为微服务开发者提供更多便利；&lt;/li>
&lt;li>完善好 BDThrift 生态，持续优化 Protobuf/gRPC；&lt;/li>
&lt;li>更多特性支持或开源，ShmIPC、QUIC、Protobuf 泛化…&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.4.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/08/26/kitex-v0.4.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/08/26/kitex-v0.4.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="重要变更介绍">重要变更介绍&lt;/h2>
&lt;h3 id="功能">功能&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>重试功能增强&lt;/strong>：支持自定义结果重试；支持请求粒度配置重试，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/retry/">重试指南&lt;/a>&lt;/li>
&lt;li>&lt;strong>Frugal(thrift)&lt;/strong>: 支持了 IDL 默认值；使用 Frugal 可以支持不生成编解码代码，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/codec_frugal/#2-%E5%B8%A6%E4%B8%8A--thrift-frugal_tag-%E5%8F%82%E6%95%B0%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E4%B8%80%E6%AC%A1%E4%BB%A3%E7%A0%81">frugal&lt;/a>&lt;/li>
&lt;li>&lt;strong>Tool-Protobuf&lt;/strong>：结合 go_package 配置支持依赖外部库，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/code_generation/#%E4%BD%BF%E7%94%A8-protobuf-idl-%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">protobuf IDL 的注意事项&lt;/a>；支持从文件扩展名猜测 IDL 的类型，生成 proto 代码时无需再指定 type 参数&lt;/li>
&lt;li>&lt;strong>Fastpb(protobuf)&lt;/strong>: 支持 fastpb 优化 pb 编解码，并默认集成到 Kitex，详见 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/fastpb/">fastpb&lt;/a>&lt;/li>
&lt;li>&lt;strong>泛化调用&lt;/strong>：支持 HTTP+Protobuf 泛化调用&lt;/li>
&lt;li>&lt;strong>Kitex 依赖库支持 Windows&lt;/strong>：便于 Windows 环境运行（工具暂未支持）&lt;/li>
&lt;/ol>
&lt;h3 id="优化和修复">优化和修复&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>性能优化&lt;/strong>：gRPC Unary 吞吐提升 46-70%，相比官方 gRPC 吞吐高 51%-70%，详见 &lt;a href="https://github.com/cloudwego/kitex-benchmark">benchmark &lt;/a>&lt;/li>
&lt;li>&lt;strong>泛化调用&lt;/strong>：HTTP / Map / JSON 泛化调用支持了 Thrift 默认值&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="详细变更">详细变更&lt;/h2>
&lt;h3 id="feature">Feature&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/571">#571&lt;/a>] 功能(protobuf): 默认集成 &lt;a href="https://github.com/cloudwego/fastpb">fastpb&lt;/a> 到 Kitex，详情参考 &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/code-gen/fastpb/">doc&lt;/a>。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/592">#592&lt;/a>] 功能(generic): HTTP/Map/JSON 泛化调用支持 Thrift 默认值。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/600">#600&lt;/a>] 功能(thrift): 支持当使用 frugal 时不生成编解码代码。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/607">#607&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/610">#610&lt;/a>] 功能(proxyless): 提供 xDS 扩展的接口。支持基于 xDS 的流量路由，超时配置及服务发现。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/541">#541&lt;/a>] 功能(trans): 传输层增加 go net 作为扩展，并在 Windows OS 下作为默认网络库。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/540">#540&lt;/a>] 功能(retry): Retry 支持指定 error 或 resp 重试，同时新增 option 用来支持为方法设置重试策略。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/533">#533&lt;/a>] 功能(generic): 泛化调用 js_conv 注解支持 map 类型转换。&lt;/li>
&lt;/ul>
&lt;h3 id="optimize">Optimize&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/522">#522&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/538">#538&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/605">#605&lt;/a>] 优化(grpc): 优化 gRPC 协议性能。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/590">#590&lt;/a>] 优化(tool): 支持从文件扩展名猜测 IDL 的类型。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/559">#559&lt;/a>] 优化(timeout): 在超时中间件中使用超时封装方法判断底层超时，用来忽略一些定制超时错误日志。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/581">#581&lt;/a>] 优化(tool): Kitex 命令增加使用示例。&lt;/li>
&lt;/ul>
&lt;h3 id="bugfix">Bugfix&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/564">#564&lt;/a>] 修复(oneway): 当 oneway 请求发送完毕后，关闭对应的连接，否则后续的发送到该连接上的请求会被阻塞在 server 端，直到 server 端把上一个 oneway 请求处理完。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/577">#577&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/584">#584&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/602">#602&lt;/a>] 修复(rpcinfo): 修复长连接场景下 rpcinfo 复用问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/578">#578&lt;/a>] 修复: 修复 long pool dump 可能导致 panic 的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/583">#583&lt;/a>] 修复(tool): 修复 protobuf 生成代码引用了错误的 package 名字的问题&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/587">#587&lt;/a>] 修复(tool): 生成代码的时候跳过指定了外部 import path 的 proto 文件。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/594">#594&lt;/a>] 修复(generic): 泛化调用支持单引号中双引号带转义符的 tag 格式以兼容旧版本逻辑。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/595">#595&lt;/a>] 修复: 修复 union 为 nil 时 BLength 会 panic 的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/589">#589&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/596">#596&lt;/a>] 修复(frugal): 修复 frugal build tag。&lt;/li>
&lt;/ul>
&lt;h3 id="refactor">Refactor&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/566">#566&lt;/a>] refactor(metainfo): 移除 HTTP2 header 中没有使用的 meta keys。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/593">#593&lt;/a>] refactor(trans): 服务端支持通过 WithListener 配置 listener，其优先级高于 WithServiceAddr。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/582">#582&lt;/a>] refactor(tool): kitex 工具以文件嵌入方式使用模板并导出部分 API 供外部使用。&lt;/li>
&lt;/ul>
&lt;h3 id="test">Test&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/579">#579&lt;/a>] test: 长连接池 dump 增加单测。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/608">#608&lt;/a>] test: 修复 TestClientConnDecoupledFromApplicationRead 的 data race 问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/609">#609&lt;/a>] test: 修复 gonet 单测中的端口冲突问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/480">#480&lt;/a>] test: 给 client package 增加单测。&lt;/li>
&lt;/ul>
&lt;h3 id="chore">Chore&lt;/h3>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/558">#558&lt;/a>] ci: 修复 ci 中 setup-python 的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/487">#487&lt;/a>] ci: Workflow 中增加 golangci-lint。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/580">#580&lt;/a>] chore: 修复 remote 模块中 go net 相关的错误拼写。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/601">#601&lt;/a>] chore: 修复错误拼写并替换掉一些功能重复的代码。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/604">#604&lt;/a>] chore: 升级 fastpb 到 v0.0.2。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/603">#603&lt;/a>] chore: 升级 frugal 到 v0.1.2。&lt;/li>
&lt;/ul>
&lt;h3 id="dependency-change">Dependency Change&lt;/h3>
&lt;p>github.com/cloudwego/frugal v0.1.1 -&amp;gt; v0.1.3&lt;/p>
&lt;p>github.com/cloudwego/netpoll v0.2.5 -&amp;gt; v0.2.6&lt;/p>
&lt;p>github.com/cloudwego/thriftgo v0.1.2 -&amp;gt; v0.2.0&lt;/p>
&lt;p>google.golang.org/protobuf v1.26.0 -&amp;gt; v1.28.0&lt;/p>
&lt;p>github.com/choleraehyq/pid v0.0.13 -&amp;gt; v0.0.15&lt;/p>
&lt;p>新增&lt;/p>
&lt;p>github.com/cloudwego/fastpb v0.0.2&lt;/p>
&lt;p>github.com/jhump/protoreflect v1.8.2&lt;/p></description></item><item><title>Blog: Kitex v0.3.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/06/02/kitex-v0.3.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/06/02/kitex-v0.3.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/473">#473&lt;/a>] 功能 (grpc): 为 Kitex gRPC unary 模式增加短连接功能。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/431">#431&lt;/a>] 功能 (limiter):
&lt;ol>
&lt;li>支持自定义的限流实现，接口增加了请求参数的传递；&lt;/li>
&lt;li>修复多路复用场景下 Server 的 QPS 限流器问题，添加基于 OnMessage 的限流；&lt;/li>
&lt;li>调整默认的限流生效时机，只有使用框架 QPS 限流且非多路复用的场景下，才使用基于 OnRead 的限流。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/465">#465&lt;/a>] 优化 (ttheader): Client 端在 TTHeader 解码结束后赋值 Remote Address (用于 Proxy 场景请求失败时获取对端地址)。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/466">#466&lt;/a>] 优化 (mux): 连接多路复用场景的 ErrReadTimeout 用 ErrRPCTimeout 封装返回。Proxy 场景请求失败时获取对端地址)。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/425">#425&lt;/a>] 优化 (limiter): 优化限流实现，保证第一秒的 Tokens 不会大幅超过限制。&lt;/li>
&lt;/ul>
&lt;h2 id="bugfix">Bugfix&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/485">#485&lt;/a>] 修复 (grpc): 修复 grpc 内不恰当的 int 类型转换。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/474">#474&lt;/a>] 修复 (trans): 在 detection handler 中增加检测。当 OnInactive 比 OnActive 先发生，或者 OnActive 返回 error 时，防止空指针 panic。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/445">#445&lt;/a>] 修复 (retry):
&lt;ol>
&lt;li>修复重试中 &lt;code>callTimes&lt;/code> 字段的 race 问题；&lt;/li>
&lt;li>修复 &lt;code>rpcStats&lt;/code> 中一些字段的 race 问题。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/471">#471&lt;/a>] 修复 (retry): 修复在 backup request 中的一个 race 问题。&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/404">#404&lt;/a>] test: 增加 pkg/retry 的单测。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/439">#439&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/472">#472&lt;/a>] test: 增加 pkg/remote/remotecli 的单测。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/462">#462&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/457">#457&lt;/a>] test: 增加 pkg/remote/trans/nphttp2/grpc 的单测。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/420">#420&lt;/a>] test: 增加 pkg/remote/trans/nphttp2 的单测。&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/464">#464&lt;/a>] refactor (ttheader): 修改 Kitex Protobuf 在 TTHeader 中的 protocolID，同时保证该变更与低版本的兼容性。&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/453">#453&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/475">#475&lt;/a>] chore: 更新 netpoll 和 bytedance/gopkg 的版本。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/458">#458&lt;/a>] chore: 修复了 reviewdog 失效的问题与 fork pr 单测的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/454">#454&lt;/a>] chore: 现在的 CI 受限于 github runner 的性能经常会失败，尝试改成 self-hosted runner 来提升性能。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/449">#449&lt;/a>] chore: 更新 issue template，修改为更适合 Kitex 项目的问题模板。&lt;/li>
&lt;/ul>
&lt;h2 id="style">Style&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/486">#486&lt;/a>] style (trans): 为 detection trans handler 增加注释信息。&lt;/li>
&lt;/ul>
&lt;h2 id="docs">Docs&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/482">#482&lt;/a>] docs: 在 Readme 中增加 FAQ 链接。&lt;/li>
&lt;/ul>
&lt;h2 id="dependency-change">Dependency Change&lt;/h2>
&lt;ul>
&lt;li>github.com/cloudwego/netpoll: v0.2.2 -&amp;gt; v0.2.4&lt;/li>
&lt;/ul></description></item><item><title>Blog: 字节微服务框架的挑战和演进</title><link>https://www.cloudwego.io/zh/blog/2022/05/19/%E5%AD%97%E8%8A%82%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%8C%91%E6%88%98%E5%92%8C%E6%BC%94%E8%BF%9B/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/05/19/%E5%AD%97%E8%8A%82%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%8C%91%E6%88%98%E5%92%8C%E6%BC%94%E8%BF%9B/</guid><description>
&lt;h2 id="字节微服务框架的挑战和演进">字节微服务框架的挑战和演进&lt;/h2>
&lt;p>2014 年以来，字节跳动内部业务的快速发展，推动了长连接推送服务，它们面临着高并发的业务需求问题，对性能和开发效率都有很高要求。当时的业务，大部分都是由 Python 开发，难以应对新出现的问题。
项目负责人在一众现存的技术栈中选择了 Golang 这一门新兴的编程语言，快速解决了性能和开发效率的问题。随后，字节跳动内部开始逐渐推广使用 Golang 进行服务开发。&lt;/p>
&lt;p>2016 年， 第一代 Golang RPC 框架 Kite 正式发布。Kite 是一个基于 Apache Thrift 进行包装的 RPC 框架，它在 Facebook 开源的 Thrift 之上提供了结合字节跳动内部基础设施的治理功能，
同时还提供了一套简单易用的生成工具。随着 Kite 的发展，业务开始大规模使用 Golang。然而，在业务发展的过程中，由于研发专注于实现业务需求，对于框架的可维护性考量不足，Kite 逐渐背上了一些技术包袱，
越来越难以满足业务在高性能和新特性方面的需求。因此我们决定对 Kite 进行重新设计，于是出现了 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。&lt;/p>
&lt;p>2020 年，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在内部发布了 v1.0.0，并且直接接入了 1,000+ 服务。由于 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的优秀性能和易用性，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在内部得到了大规模发展。
直到 2021 年年中，字节跳动内部已有 2w+ 服务使用了 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。因此，我们决定全面优化 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>，将其实践成果进行开源，反馈给开源社区。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/GolangRPC.png" alt="image">&lt;/p>
&lt;p align="center">
字节跳动 Golang RPC 框架的演进
&lt;/p>
&lt;h3 id="kite-的缺陷">Kite 的缺陷&lt;/h3>
&lt;p>Kite 作为字节跳动第一代 Golang RPC 框架，主要存在以下缺陷：&lt;/p>
&lt;ol>
&lt;li>Kite 为了快速支持业务发展需求，不可避免地耦合了部分中台业务的功能；&lt;/li>
&lt;li>Kite 对 Go modules 支持不友好（Go modules 在 2019 年才进入语言核心）；&lt;/li>
&lt;li>Kite 自身的代码拆分成多仓库，版本更新时推动业务升级困难；&lt;/li>
&lt;li>Kite 强耦合了早期版本的 Apache Thrift，协议和功能拓展困难；&lt;/li>
&lt;li>Kite 的生成代码逻辑与框架接口强耦合，成为了性能优化的天花板。&lt;/li>
&lt;/ol>
&lt;p>因此，业务的快速发展和需求场景的多样化，催生了新一代 Golang RPC 框架 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。&lt;/p>
&lt;h3 id="kitex">Kitex&lt;/h3>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的架构主要包括四个部分：Kitex Tool、Kitex Core、Kitex Byted、Second Party Pkg。&lt;/p>
&lt;ul>
&lt;li>Kitex Core 是一个携带了一套微服务治理功能的 RPC 框架，它是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的核心部分。&lt;/li>
&lt;li>Kitex Byted 是一套结合了字节跳动内部基础设施的拓展集合。通过这一套拓展集合，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 能够在内部支持业务的发展。&lt;/li>
&lt;li>Kitex Tool 是一个命令行工具，能够在命令行生成我们的代码以及服务的脚手架，可以提供非常便捷的开发体验。&lt;/li>
&lt;li>Second Party Pkg，例如 &lt;a href="https://github.com/cloudwego/netpoll">Netpoll&lt;/a>， Netpoll-http2，是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 底层的网络库，这两个库也开源在 CloudWeGo 组织中。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Architecture_design.png" alt="image">&lt;/p>
&lt;p align="center">
Kitex 的架构设计
&lt;/p>
&lt;p>总的来说， &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 主要有五个特点：面向开源、功能丰富、灵活可拓展、支持多协议、高性能。&lt;/p>
&lt;h3 id="面向开源">面向开源&lt;/h3>
&lt;p>由于之前已经体验过了 Kite 维护的各种问题，我们在立项之初就考虑到了未来可能会开源 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。因此，我们设计的第一个宗旨就是不将 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 和公司内部的基础设施进行强耦合或者硬编码绑定。
Kitex Core 是一个非常简洁的框架，公司内部的所有基础设施都以拓展的方式注入到 Kitex Core 里。即使我们现在已经开源了，它也以这种形式存在。
公司内部基础设施的更新换代，和 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 自身的迭代是相互独立的，这对于业务来说是非常好的体验。同时，在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的接口设计上，我们使用了 Golang 经典的 Option 模式，
它是可变参数，通过 Option 能够提供各种各样的功能，这为我们的开发和业务的使用都带来了非常大的灵活性。&lt;/p>
&lt;h3 id="kitex-的功能特性">Kitex 的功能特性&lt;/h3>
&lt;h4 id="治理能力">治理能力&lt;/h4>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 内置了丰富的服务治理能力，例如超时熔断、重试、负载均衡、泛化调用、数据透传等功能。业务或者外部的用户使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 都是可以开箱即用的。
如果你有非常特殊的需求，你也可以通过我们的注入点去进行定制化操作，比如你可以自定义中间件去过滤或者拦截请求，定义跟踪器去注入日志、去注入服务发现等。
在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 中，几乎一切跟策略相关的东西都是可以定制的。&lt;/p>
&lt;p>以服务发现为例，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的核心库里定义了一个 Resolver interface 。任何一个实现了这四个方法的类型都可以作为一个服务发现的组件，然后注入到 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 来取代 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的服务发现功能。
在使用时，客户端只需要创建一个 Resolver 的对象，然后通过 client.WithResolver 注入客户端，就可以使用自己开发的服务发现组件。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Resolver.png" alt="image">&lt;/p>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的一个创新之处是使用 Suite 来打包自定义的功能，提供一键配置基础依赖的体验。&lt;/p>
&lt;p>它能在什么地方起作用呢？例如，一个外部企业想要启用或者接入 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>， 它不可能拥有字节跳动内部的所有基础设施。那么企业在使用的时候肯定需要定制化，他可能需要定义自己的注册中心、负载均衡、连接池等等。
如果业务方要使用这些功能的话，就需要加入非常非常多的参数。而 Suite 可以通过一个简单的类一次性包装这些功能，由此，业务方使用时，仍然是以单一的参数的方式添加，十分方便。
又例如，我现在开发一个叫 mysuite 的东西，我可能提供一个特殊的服务发现功能，提供了一个拦截的中间件，还有负载均衡功能等。
业务方使用时，不需要感知很多东西去配置，只需要添加一个 Suite 就足够了，这点非常方便一些中台方或者第三方去做定制。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Suite.png" alt="image">&lt;/p>
&lt;p align="center">
示例
&lt;/p>
&lt;h4 id="多协议">多协议&lt;/h4>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 网络层基于高性能网络库 &lt;a href="https://github.com/cloudwego/netpoll">Netpoll&lt;/a> 实现。在 &lt;a href="https://github.com/cloudwego/netpoll">Netpoll&lt;/a> 上，我们构建了 Thrift 和 Netpoll-http2；在 Thrift 上，我们还做了一些特殊的定制，例如，支持 Thrift 的泛化调用，还有基于 Thrift 的连接多路复用。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Multi-protocol.png" alt="image">&lt;/p>
&lt;p align="center">
多协议
&lt;/p>
&lt;h4 id="代码生成工具">代码生成工具&lt;/h4>
&lt;p>和 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 一同出现的，还有我们开发的一个简单易用的命令行工具 kitex。如果我们写了一个 IDL，只需要提供一个 module 参数和一个服务名称，kitex 就会为你生成服务代码脚手架。&lt;/p>
&lt;p>目前 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 支持了 Protobuf 和 Thrift 这两种 IDL 的定义。命令行工具内置丰富的选项，可以进行项目代码定制；同时，它底层依赖 Protobuf 官方的编译器，和我们自研的 Thriftgo 的编译器，两者都支持自定义的生成代码插件。&lt;/p>
&lt;h3 id="kitex-的性能表现">Kitex 的性能表现&lt;/h3>
&lt;p>字节跳动内部 RPC 框架使用的协议主要都是基于 Thrift，所以我们在 Thrift 上深耕已久。结合自研的 &lt;a href="https://github.com/cloudwego/netpoll">Netpoll&lt;/a> 能力，它可以直接暴露底层连接的 buffer。
在此基础上，我们设计出了 FastRead/FastWrite 编解码实现，测试发现它具有远超过 apache thrift 生成代码的性能。整体而言，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的性能相当不错，今年 1 月份的数据如下图所示，
可以看到，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在使用 Thrift 作为 Payload 的情况下，性能优于官方 gRPC，吞吐接近 gRPC 的两倍；此外，在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 使用定制的 Protobuf 协议时，性能也优于 gRPC。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Kitex_gRPC.png" alt="image">&lt;/p>
&lt;p align="center">
Kitex/gRPC 性能对比（2022 年 1 月数据）
&lt;/p>
&lt;h3 id="kitex一个-demo">Kitex：一个 demo&lt;/h3>
&lt;p>下面简单演示一下 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 是如何开发一个服务的。&lt;/p>
&lt;p>首先，定义 IDL。这里使用 Thrift 作为 IDL 的定义，编写一个名为 Demo 的 service。方法 Test 的参数是 String，它的返回也是 String。
编写完这个 demo.thrift 文件之后，就可以使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在命令行生成指定的生成代码。如图所示，只需要传入 module name，service name 和目标 IDL 就行了。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/IDL.png" alt="image">&lt;/p>
&lt;p align="center">
定义 IDL
&lt;/p>
&lt;p>随后，我们需要填充业务逻辑。文件中除了第 12 行，全部代码都是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 命令行工具生成的。通常一个 RPC 方法需要返回一个 Response，例如这里需要返回一个字符串，那么我们给 Response 赋值即可。
接下来需要通过 go mod tidy 把依赖拉下来，然后用 build.sh 构建，就可以启动服务了。&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 默认的接听端口是 8888。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Handler.png" alt="image">&lt;/p>
&lt;p align="center">
定义 Handler 方法
&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Compile_run.png" alt="image">&lt;/p>
&lt;p align="center">
编译、运行
&lt;/p>
&lt;p>对于刚刚启动的服务端，我们可以写一个简单的客户端去调用它。服务端写完之后，写客户端也是非常方便的。
这里同样是 import 刚刚生成的生成代码，创建 Client、指定服务名字、构成相应的参数，填上“ Hello，word！” ，然后就可以调用了。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Client.png" alt="image">&lt;/p>
&lt;p align="center">
编写 Client
&lt;/p>
&lt;h2 id="kitex-在字节内部的落地">Kitex 在字节内部的落地&lt;/h2>
&lt;h3 id="与内部基础设施的集成">与内部基础设施的集成&lt;/h3>
&lt;p>谈到落地，第一步就是 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 和字节跳动内部的基础设施进行结合。字节跳动内部的所有基础设施都是以依赖的方式注入到 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的。
我们将日志、监控、tracing 都定义为 tracer，然后通过 WithTracer 这个 Option 将其注入到 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 里；服务发现是 WithResolver；Service Mesh 则是 WithProxy 等。
字节跳动内部的基础设施都是通过 Option 被注入到 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的，而且所有的 Option 都是通过前面说的 Suite 打包，简单地添加到业务的代码里完成。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Integration.png" alt="image">&lt;/p>
&lt;p align="center">
与内部基础设施的集成
&lt;/p>
&lt;h3 id="内部落地的经典案例合并部署">内部落地的经典案例：合并部署&lt;/h3>
&lt;p>这里介绍一个内部落地的经典案例：合并部署。其背景是，在开发微服务时，由于业务拆分和业务场景的多样化，微服务容易出现过微的情况。
当服务数量越来越多，网络传输和序列化开销就会越来越大，变得不可忽视。因此，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 框架需要考虑如何减小网络传输和序列化的开销。&lt;/p>
&lt;p>字节跳动基础架构经过一系列的探索和实践，最终推出了合并部署的机制。&lt;strong>它的思路&lt;/strong>是：将有强依赖关系的服务进行同机部署，减少它们之间的调用开销。理论上说起来比较简单，实际过程中需要非常多的组件进行配合。&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的做法&lt;/strong>是：首先，它会依赖一套中心化的部署调度和流量控制；其次，我们开发了一套基于共享内存的通信协议，它可以使得我们两个不同的服务在同一台机器部署时，不需要通过网络进行数据传输，直接通过共享内存，减少额外的数据拷贝。&lt;/p>
&lt;p>在服务合并部署的模式下，我们需要特殊的服务发现和连接池的实现、定制化的服务启动和监听逻辑。这些在 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 框架里都是通过依赖注入的方式给添加进来的。
&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 服务在启动过程中会感知到我们 PaaS 平台提供的指定的环境变量。当它察觉到自己需要按合并部署的方式启动之后，就会启动一个预先注入的特定 Suite，随后将相应的功能全都添加进来再启动，就可以执行我们的合并部署。&lt;/p>
&lt;p>那么，它的效果如何呢？在 2021 年的实践过程中，我们对抖音的某个服务约 30% 的流量进行了合并，服务端的 CPU 的消耗减少了 19%， TP99 延迟下降到 29%，效果相当显著。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Merge_deployment.png" alt="image">&lt;/p>
&lt;p align="center">
内部落地的经典案例：合并部署
&lt;/p>
&lt;h3 id="微服务框架推进的痛点">微服务框架推进的痛点&lt;/h3>
&lt;ul>
&lt;li>升级慢&lt;/li>
&lt;/ul>
&lt;p>大家可能好奇 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在字节跳动内部推广是不是很顺畅？其实并不是。作为一个相对而言比较新的框架， &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 和其它新生项目一样，在推广的过程中都会遇到同样的问题。
特别是， &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 作为一个 RPC 框架，我们提供给用户的其实是一个代码的 SDK, 我们的更新是需要业务方的用户去感知、升级、部署上线，才能最终体现在他们的服务逻辑里，因此具有升级慢的问题。&lt;/p>
&lt;ul>
&lt;li>召回慢&lt;/li>
&lt;/ul>
&lt;p>同时，因为代码都是由研发人员编写，如果代码出现了 bug，我们就需要及时地去感知定位问题，通知负责人去更新版本。因此，会有召回慢的问题。&lt;/p>
&lt;ul>
&lt;li>问题排查困难&lt;/li>
&lt;/ul>
&lt;p>业务方的用户在写代码时，他们其实往往关注的是自己的业务逻辑，他们不会深入理解一个框架内部的实现。所以如果出现问题，他们往往会不知所措，需要依赖我们的业务同学才能进行相应的问题排查。所以会有问题排查困难的问题。&lt;/p>
&lt;p>针对&lt;strong>升级慢&lt;/strong>，我们有两个操作。一是，代码生成工具支持自动更新：当用户在使用时，我们会检查最新版本，然后直接将我们的版本更新到最新版本，这样可以及时把我们的框架新 feature、bug fix 直接推送到业务方；
二是，用户群发版周知：我们有一个几千人的用户群，当有了新版本，我们会在用群里周知，可以最大范围的覆盖到我们的目标用户。&lt;/p>
&lt;p>针对&lt;strong>召回慢&lt;/strong>，我们有三个操作。一是，我们在线上建立完整的版本分布统计，监控所有服务上线部署的框架的版本；
二是，我们会跟 PaaS 平台合作，在服务上线时进行卡点操作，检查它们使用的框架版本是不是有 bug，是否需要拦截；三是，针对有问题的版本，我们会及时封禁，及时推动用户更新。&lt;/p>
&lt;p>针对&lt;strong>问题排查困难&lt;/strong>，我们有两个操作。一是，我们积累了非常丰富的 Wiki 和问题排查手册，例如超时问题、 协议解析问题等。
二是，如果遇到难以解决的问题，我们在线上服务默认开启了 Debug 端口，保证框架开发同学可以第一时间赶到现场去排查。&lt;/p>
&lt;h2 id="kitex-在字节内部的发展">Kitex 在字节内部的发展&lt;/h2>
&lt;p>数据显示，在 2020 年，v1.0 版本发布的初始阶段，用户的接受度比较低。直到 2020 年 6 月，线上接受 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 的数量还不到 1000。
随后进入快速发展的阶段，到 2021 年年初，累积接近 1w+ 的服务开始使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。2021 年底，4w+服务使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Evolution_Kitex_High-performance/Number_of_AccessServices.png" alt="image">&lt;/p>
&lt;h2 id="kitex-的开源实践">Kitex 的开源实践&lt;/h2>
&lt;p>开源工作主要包括代码、文档和社区运营三个层面。&lt;/p>
&lt;p>&lt;strong>代码层面&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>代码拆分、脱敏；&lt;/li>
&lt;li>内部仓库引用开源仓库，避免内外多副本同时维护；&lt;/li>
&lt;li>在开源过程中确保内部用户平滑切换、体验无损；&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>文档层面&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>重新梳理用户文档，覆盖方方面面；&lt;/li>
&lt;li>建立详尽的用例仓库(CloudWeGo/Kitex-examples)。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>社区运营&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>官网建设；&lt;/li>
&lt;li>组建用户群，进行答疑解惑；&lt;/li>
&lt;li>飞书机器人对接 Github 的 Issue 管理、PR 管理之类的业务，可以快速响应；&lt;/li>
&lt;li>对优秀贡献者进行奖励。&lt;/li>
&lt;/ul>
&lt;p>在以上努力下，&lt;a href="https://github.com/cloudwego/kitex">CloudWeGo/Kitex&lt;/a> 仓库目前收获了 4.1k+ stars；&lt;a href="https://github.com/kitex-contrib">kitex-contrib&lt;/a> 获得多个外部用户贡献的仓库；CloudWeGo 飞书用户群近 950 个用户……&lt;/p>
&lt;h2 id="未来展望">未来展望&lt;/h2>
&lt;p>首先，我们仍然会持续向开源社区反馈最新的技术进展。例如在 Thrift 协议上，虽然对 Thrift 的编解码已经做到非常极致的优化了，我们还在探索利用 JIT 手段来提供更多的性能提升；
在 Protobuf 上，我们会补足短板，将在 Thrift 方面的优化经验迁移到 Protobuf 上，对 Protobuf 的生成代码和编解码进行优化； &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 后续也会进一步融入云原生社区，所以也在考虑支持 xDS 协议。
其次，我们会去拓展更多的开源组件，去对接现存的云原生社区的各种常用的或者热门组件。最后，我们也会尝试去对接更多的公有云基础设施，使得用户在公有云上使用 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 时能够拥有愉悦的体验。&lt;/p></description></item><item><title>Blog: Kitex v0.3.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/04/29/kitex-v0.3.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/04/29/kitex-v0.3.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/366">#366&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/426">#426&lt;/a> ] 功能(client): 客户端支持预热操作&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/395">#395&lt;/a> ] 功能(mux): 连接多路复用支持优雅关闭&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/399">#399&lt;/a> ] 功能(protobuf): 定义 fastpb protocol API 并在编解码模块对应支持&lt;/li>
&lt;/ul>
&lt;h2 id="optimise">Optimise&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/402">#402&lt;/a> ] 优化(connpool): 导出 pkg/remote/connpool 里的 getCommonReporter&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/389">#389&lt;/a> ] 优化(rpcinfo)：填充由 defaultCodec 解码得到的 rpcinfo 中缺失的 Invocation().PackageName, Invocation().ServiceName and Config().TransportProtocol 字段&lt;/li>
&lt;/ul>
&lt;h2 id="bugfix">Bugfix&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/413">#413&lt;/a> ] 修复(mux): 在 NetpollMux transHandler 中设置 sendMsg的PayloadCodec，以修复泛化请求编码报错问题&lt;a href="https://github.com/cloudwego/kitex/issues/411">issue #411&lt;/a>&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/406">#406&lt;/a> ] 修复(grpc): 修复 http2 framer 的读写逻辑，例如避免对端无法及时收到 framer&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/398">#398&lt;/a> ] 修复(utils)：修复了 Dump() 接口无法 dump 出 ring 里所有数据的 bug&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/428">#428&lt;/a> ] 修复(trans)：当写入失败时，关闭连接以避免内存泄漏&lt;/li>
&lt;/ul>
&lt;h2 id="tool">Tool&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/340">#340&lt;/a> ] tool(protobuf): 重新设计并实现 Protobuf 生成代码，不使用反射完成编解码，当前仅支持 proto3&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/396">#396&lt;/a> ] chore: 用 bytedance/gopkg 里的 xxhash3 替换掉 cespare/xxhash&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/400">#400&lt;/a> ] chore: 升级 workflow 的 go 版本到 1.18&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/407">#407&lt;/a> ] chore: 单独增加文件对 grpc 源码使用做声明&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/401">#401&lt;/a> ] test: 补充 kitex/server 的单测&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/393">#393&lt;/a> ] test: 补充 pkg/remote/bound package 单测&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/403">#403&lt;/a> ] test: 补充 netpollmux package 单测&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/401">#401&lt;/a> ] test: 补充 klog package 单测&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/392">#392&lt;/a> ] test: 补充 utils package 单测&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/373">#373&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/432">#432&lt;/a>, &lt;a href="https://github.com/cloudwego/kitex/pull/434">#434&lt;/a> ] test: 补充 gRPC transport 部分的单测，单测覆盖率提升到 76%&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/424">#424&lt;/a> ] test: 补充 transmeta 实现 handler 的单元测试&lt;/li>
&lt;/ul>
&lt;h2 id="dependency-change">Dependency Change&lt;/h2>
&lt;ul>
&lt;li>github.com/cloudwego/netpoll: v0.2.0 -&amp;gt; v0.2.2&lt;/li>
&lt;li>github.com/bytedance/gopkg: 20210910103821-e4efae9c17c3 -&amp;gt; 20220413063733-65bf48ffb3a7&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.2.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/03/24/kitex-v0.2.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/03/24/kitex-v0.2.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="bugfix">Bugfix&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/383">#383&lt;/a> ] 修复(generic)：在泛化调用的时候检查 IDL 是否有循环依赖。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/359">#359&lt;/a> ] 修复(tool)：修复 protobuf CombineService 缺失 streaming 引用的问题。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/363">#363&lt;/a> ] 修复(client)：修复 oneway 请求的 sequence ID 没有被编码的问题以及降低 oneway 调用的丢包率。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/367">#367&lt;/a> ] 修复(generic/tool)：修复 CombineServices 可能存在多次加载同一个 service 问题。&lt;/li>
&lt;/ul>
&lt;h2 id="optimise">Optimise&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/362">#362&lt;/a> ] 优化(diagnosis)：lbcaches 是全局的，无需为每个 client 注册 ProbeFunc 用于诊断查询。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/374">#374&lt;/a> ] 优化(rpcinfo)：RPCInfo.To().Tag() 优先使用服务发现的 instance tag 而不是 remoteinfo tag。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/355">#355&lt;/a> ] 优化(连接池)：修改默认的连接池最小空闲等待时间为 2s。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/354">#354&lt;/a> ] 优化(hook)：为 &lt;code>onServerStart&lt;/code>和 &lt;code>onShutdown&lt;/code>添加资源锁，当做一些如&lt;code>RegisterStartHook&lt;/code>和 &lt;code>server.Run&lt;/code>中的 &lt;code>range&lt;/code>之类的读写操作时请求对应的资源锁。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/331">#331&lt;/a> ] 优化(discovery)：增加「实例不存在」错误定义。&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/352">#352&lt;/a> ] 重构(event)：删除额外的原子操作并用普通赋值操作替换。&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/343">#343&lt;/a> ] 重构(loadbalancer)：将 buildWeightedVirtualNodes 函数合入 buildVirtualNodes 函数中，成为一个函数。&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/376">#376&lt;/a> ] 升级依赖 choleraehyq/pid 以兼容Go 1.18。&lt;/li>
&lt;/ul>
&lt;h2 id="docs">Docs&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/kitex/pull/364">#364&lt;/a> ] 更新 README 到新博客的链接。&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.2.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/02/24/kitex-v0.2.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/02/24/kitex-v0.2.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>Feat(grpc): gRPC 相关配置支持通过 options 来设置，并且为了兼容旧版本默认窗口大小调整为 64K&lt;/li>
&lt;li>Feat(kerror): 为 basicError 添加新的 error 封装 func WithCauseAndExtraMsg&lt;/li>
&lt;li>Feat(rpcinfo): 添加 FreezeRPCInfo 以支持异步 context 使用&lt;/li>
&lt;li>Feat(codec): 默认编解码器支持限定包体积大小&lt;/li>
&lt;/ul>
&lt;h2 id="bugfix">Bugfix&lt;/h2>
&lt;ul>
&lt;li>Fix(remotecli): 修复重置的连接可能被复用的问题&lt;/li>
&lt;li>Fix(generic): 修复泛化调用的客户端不能使用继承的 service 的方法的问题&lt;/li>
&lt;li>Fix(generic): 修复泛化调用 client 侧判断 Oneway 不准确的问题&lt;/li>
&lt;/ul>
&lt;h2 id="optimise">Optimise&lt;/h2>
&lt;ul>
&lt;li>Optimize(retry): 提高异常重试的重试成功率
&lt;blockquote>
&lt;p>如果超时的请求先于重试的请求返回，可能会导致重试请求也失败；同时也可以避免超时请求不必要的解码处理。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>Chore: 升级 netpoll 的版本至 v0.2.0&lt;/li>
&lt;li>Chore: 添加第三方库的license&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.1.4 版本发布</title><link>https://www.cloudwego.io/zh/blog/2022/01/18/kitex-v0.1.4-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2022/01/18/kitex-v0.1.4-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="功能优化">功能优化&lt;/h2>
&lt;ul>
&lt;li>在 rpctimeout 的 middleware 的输出日志中过滤掉超时日志&lt;/li>
&lt;li>调整默认日志级别为 Info&lt;/li>
&lt;li>给 sentAt 变量加锁，避免单测出现 DATA RACE，实际上不会有并发问题&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复&lt;/h2>
&lt;ul>
&lt;li>修复客户端编码失败时连接会泄漏的问题&lt;/li>
&lt;li>修复 middleware builder 中设置 TimeoutAdjust 不生效的问题&lt;/li>
&lt;/ul>
&lt;h2 id="工具">工具&lt;/h2>
&lt;ul>
&lt;li>修复 protobuf 的 handler 参数名
&lt;blockquote>
&lt;p>kitex 会给每个 stream server 生成一个名为 &amp;ldquo;{{.ServiceName}}&lt;em>{{.Name}}Server&amp;rdquo; 的 stream 类型，
但是在 handler.go 中使用的是 &amp;ldquo;{{.ServiceName}}&lt;/em>{{.RawName}}Server&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>删除不必要的类型转换&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.1.3 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/12/30/kitex-v0.1.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/12/30/kitex-v0.1.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="功能优化">功能优化&lt;/h2>
&lt;ul>
&lt;li>JSON 泛化调用场景，向服务端传递 Base 信息，从而服务端可获取 Caller 等信息&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复&lt;/h2>
&lt;ul>
&lt;li>修复 streaming 的 metric 上报（server侧）丢失 method 信息的问题&lt;/li>
&lt;li>修复 JSON 和 HTTP 泛化中 base64 和 binary 的不兼容改动&lt;/li>
&lt;li>修复 gRPC 流控相关的问题，该问题会导致 client 侧出现持续超时&lt;/li>
&lt;/ul>
&lt;h2 id="ci">CI&lt;/h2>
&lt;ul>
&lt;li>增加场景测试&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>更新了 &lt;a href="https://github.com/cloudwego/kitex/blob/develop/ROADMAP.md">ROADMAP&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.1.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/12/22/kitex-v0.1.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/12/22/kitex-v0.1.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="hotfix">Hotfix&lt;/h2>
&lt;ul>
&lt;li>修复 v0.1.0 gRPC 请求优化引入的部分问题&lt;/li>
&lt;li>修复 IDL 中未定义 package 时，gRPC 的方法信息错误问题&lt;/li>
&lt;/ul>
&lt;h2 id="依赖更新">依赖更新&lt;/h2>
&lt;ul>
&lt;li>更新 netpoll-http2 依赖，解决 streaming 场景下大包（&amp;gt;4K）请求报错的问题&lt;/li>
&lt;/ul>
&lt;h2 id="杂项">杂项&lt;/h2>
&lt;ul>
&lt;li>使用 GitHub 的 PR 模板，强制开发者提交 PR 时填写相关描述&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.1.0 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/12/13/kitex-v0.1.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/12/13/kitex-v0.1.0-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="功能">功能&lt;/h2>
&lt;h3 id="泛化调用">泛化调用&lt;/h3>
&lt;ul>
&lt;li>IDL 解析支持多 Service&lt;/li>
&lt;li>暴露 SetSeqID 方法便于二进制泛化场景 server 侧使用&lt;/li>
&lt;li>泛化 client 支持关闭，规避内存泄漏问题&lt;/li>
&lt;/ul>
&lt;h3 id="日志">日志&lt;/h3>
&lt;ul>
&lt;li>修改日志风格，使用 &amp;ldquo;key=value&amp;rdquo; 列出信息&lt;/li>
&lt;li>使用 klog 作为全局的日志输出工具&lt;/li>
&lt;li>使用全局的 default logger&lt;/li>
&lt;li>日志打印更多 context 信息，例如 logId，方便问题排查&lt;/li>
&lt;li>go func 传入服务信息用于 recover panic 后输出关键信息方便问题排查&lt;/li>
&lt;/ul>
&lt;h3 id="option">Option&lt;/h3>
&lt;ul>
&lt;li>增加 NewThriftCodecDisableFastMode 方法，来关闭 FastWrite 和 FastRead&lt;/li>
&lt;li>Kitex server 支持端口复用&lt;/li>
&lt;li>默认 RPC 超时设置为 0（在后续 PR 中，revert 了该变更）&lt;/li>
&lt;/ul>
&lt;h3 id="proxy">Proxy&lt;/h3>
&lt;ul>
&lt;li>Proxy 增加 ContextHandler 接口用于传递初始化ctx给 mwbuilder&lt;/li>
&lt;li>注册 lbcache 的 Dump 给 diagnosis，用于问题诊断&lt;/li>
&lt;li>将 PRCConfig 传递给 proxy.Config&lt;/li>
&lt;/ul>
&lt;h2 id="优化">优化&lt;/h2>
&lt;ul>
&lt;li>减少了对象的堆分配&lt;/li>
&lt;li>优化多路复用性能&lt;/li>
&lt;li>优化 grpc 编解码性能，通过 Release 时释放(Close) LinkBuffer&lt;/li>
&lt;li>在计算 backup request 的消耗(cost)时，区分 ErrRPCFinish&lt;/li>
&lt;li>多路复用分片队列逻辑移动至 netpoll/mux，并重命名分片字典&lt;/li>
&lt;li>优化Fast api中容器类型的长度编码逻辑&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复&lt;/h2>
&lt;ul>
&lt;li>修复 server 端 WithErrorHandler 配置不生效问题&lt;/li>
&lt;li>调整 lbcache 中的 Balancer 初始化逻辑&lt;/li>
&lt;li>修复 TraceCtl 可能为 nil 的问题(仅影响单测)&lt;/li>
&lt;li>设置默认的 rpc timeout, 并支持设置 WithRPCTimeout(0) 来关闭超时中间件&lt;/li>
&lt;li>修复 default logger 使用错误的 call depth&lt;/li>
&lt;li>重命名 BackwardProxy 为 ReverseProxy&lt;/li>
&lt;li>修复 grpc 场景下的 panic&lt;/li>
&lt;li>修复 grpc 场景下的潜在风险（keepalive 超时导致 panic）&lt;/li>
&lt;li>修复 void 方法中的异常缺失&lt;/li>
&lt;li>修复实例变更时 dump 信息不正确问题。&lt;/li>
&lt;/ul>
&lt;h2 id="文档">文档&lt;/h2>
&lt;ul>
&lt;li>修复失效的中文链接&lt;/li>
&lt;li>将全部 doc 移至官网 cloudwego.io&lt;/li>
&lt;/ul>
&lt;h2 id="netpoll-api-change">Netpoll API Change:&lt;/h2>
&lt;ul>
&lt;li>适应 netpoll.Writer.Append 的 API 改动，返回值从 2个 变为 1个&lt;/li>
&lt;/ul>
&lt;h2 id="依赖变化">依赖变化&lt;/h2>
&lt;ul>
&lt;li>github.com/cloudwego/netpoll: v0.0.4 -&amp;gt; v0.1.2&lt;/li>
&lt;/ul></description></item><item><title>Blog: RPC 框架 Kitex 实践入门：性能测试指南</title><link>https://www.cloudwego.io/zh/blog/2021/11/24/rpc-%E6%A1%86%E6%9E%B6-kitex-%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/11/24/rpc-%E6%A1%86%E6%9E%B6-kitex-%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</guid><description>
&lt;p>日前，字节跳动服务框架团队正式开源 CloudWeGo ，在抖音、今日头条均有深度应用的 Golang 微服务 RPC 框架 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 也包含在其中。&lt;/p>
&lt;p>本文旨在分享开发者在压测 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 时需要了解的场景和技术问题。这些建议有助于用户更好地结合真实 RPC 场景对 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 进行调优，使之更贴合业务需要、发挥最佳性能。用户也可以参考官方提供的压测项目 &lt;a href="https://github.com/cloudwego/kitex-benchmark">kitex-benchmark&lt;/a> 了解更多细节。&lt;/p>
&lt;h2 id="微服务场景的特点">微服务场景的特点&lt;/h2>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 诞生于字节跳动大规模微服务架构实践，面向的场景自然是微服务场景，因此下面会先介绍微服务的特点，方便开发者深入理解 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在其中的设计思考。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>RPC 通信模型&lt;/p>
&lt;p>微服务间的通信通常以 PingPong 模型为主，所以除了常规的吞吐性能指标外，每次 RPC 的平均时延也是开发者需要考虑的点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复杂的调用链路&lt;/p>
&lt;p>一次 RPC 调用往往需要多个微服务协作完成，而下游服务又会有其自身依赖，所以整个调用链路会是一个复杂的网状结构。
在这种复杂调用关系中，某个中间节点出现的延迟波动可能会传导到整个链路上，导致整体超时。当链路上的节点足够多时，即便每个节点的波动概率很低，最终汇聚到链路上的超时概率也会被放大。
所以单一服务的延迟波动 —— 即 P99 延迟指标，也是一个会对线上服务产生重大影响的关键指标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包体积大小&lt;/p>
&lt;p>虽然一个服务通信包的大小取决于实际业务场景，但在字节跳动的内部统计中，我们发现线上请求大多以小包（&amp;lt;2KB）为主，所以在兼顾大包场景的同时，也重点优化了小包场景下的性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="针对微服务场景进行压测">针对微服务场景进行压测&lt;/h2>
&lt;h3 id="确定压测对象">确定压测对象&lt;/h3>
&lt;p>衡量一个 RPC 框架的性能需要从两个视角分别去思考：Client 视角与 Server 视角。在大规模的业务架构中，上游 Client 不见得使用的也是下游的框架，而开发者调用的下游服务也同样如此，如果再考虑到 Service Mesh 的情况就更复杂了。&lt;/p>
&lt;p>一些压测项目通常会把 Client 和 Server 进程混部进行压测，然后得出&lt;strong>整个框架&lt;/strong>的性能数据，这其实和线上实际运行情况很可能是不符的。&lt;/p>
&lt;p>如果要压测 Server，应该给 Client 尽可能多的资源，把 Server 压到极限，反之亦然。如果 Client 和 Server 都只给了 4 核 CPU 进行压测，会导致开发者无法判断最终得出来的性能数据是哪个视角下的，更无法给线上服务做实际的参考。&lt;/p>
&lt;h3 id="对齐连接模型">对齐连接模型&lt;/h3>
&lt;p>常规 RPC 的连接模型主要有三种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>短连接&lt;/strong>：每次请求都创建新连接，得到返回后立即关闭连接&lt;/li>
&lt;li>&lt;strong>长连接池&lt;/strong>：单个连接同时只能处理一次完整请求与返回&lt;/li>
&lt;li>&lt;strong>连接多路复用&lt;/strong>：单个连接可以同时异步处理多个请求与返回&lt;/li>
&lt;/ul>
&lt;p>每类连接模型没有绝对好坏，取决于实际使用场景。连接多路复用虽然一般来说性能相对最好，但应用上必须依赖协议能够支持包序列号，且一些老框架服务可能也并不支持多路复用的方式调用。&lt;/p>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 最早为保证最大程度的兼容性，在 Client 端默认使用了短连接，而其他主流开源框架默认使用连接多路复用，这导致一些用户在使用默认配置压测时，出现了比较大的性能数据偏差。&lt;/p>
&lt;p>后来为了契合开源用户的常规使用场景，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在 v0.0.2 中也加入了&lt;a href="https://github.com/cloudwego/kitex/pull/40/files">默认使用长连接&lt;/a>的设置。&lt;/p>
&lt;h3 id="对齐序列化方式">对齐序列化方式&lt;/h3>
&lt;p>对于 RPC 框架来说，不考虑服务治理的话，计算开销主要都集中在序列化与反序列化中。&lt;/p>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 对于 Protobuf 的序列化使用的是官方的 &lt;a href="https://github.com/golang/protobuf">Protobuf&lt;/a> 库，对于 Thrift 的序列化，则专门进行了性能优化，这方面的内容在&lt;a href="https://www.cloudwego.io/zh/blog/2021/09/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-go-rpc-%E6%A1%86%E6%9E%B6-kitex-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/#thrift-%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BC%98%E5%8C%96">官网博客&lt;/a>中有介绍。&lt;/p>
&lt;p>当前开源框架大多优先支持 Protobuf，而部分框架内置使用的 Protobuf 其实是做了许多性能优化的 &lt;a href="https://github.com/gogo/protobuf">gogo/protobuf&lt;/a> 版本，但由于 gogo/protobuf 当前有&lt;a href="https://github.com/gogo/protobuf/issues/691">失去维护的风险&lt;/a>，所以出于可维护性角度考虑，我们依然决定只使用官方的 Protobuf 库，当然后续我们也会计划对 Protobuf 进行优化。&lt;/p>
&lt;h3 id="使用独占-cpu">使用独占 CPU&lt;/h3>
&lt;p>虽然线上应用通常是多个进程共享 CPU，但在压测场景下，Client 与 Server 进程都处于极端繁忙的状况，如果同时还共享 CPU 会导致大量上下文切换，从而使得数据缺乏可参考性，且容易产生前后很大波动。&lt;/p>
&lt;p>所以我们建议是将 Client 与 Server 进程隔离在不同 CPU 或者不同独占机器上进行。如果还想要进一步避免其他进程产生影响，可以再加上 nice -n -20 命令调高压测进程的调度优先级。&lt;/p>
&lt;p>另外如果条件允许，相比云平台虚拟机，使用真实物理机会使得测试结果更加严谨与具备可复现性。&lt;/p>
&lt;h2 id="性能数据参考">性能数据参考&lt;/h2>
&lt;p>在满足上述要求的前提下，我们对多个框架使用 Protobuf 进行了压测对比，压测代码在 kitex-benchmark 仓库。在充分压满 Server 的目标下，&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在连接池模式下的 P99 Latency 在所有框架中最低。而在多路复用模式下，Kitex 在各指标上也都具有更加明显的优势。&lt;/p>
&lt;p>&lt;strong>配置：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Client 16 CPUs，Server 4 CPUs&lt;/li>
&lt;li>1KB 请求大小，Echo 场景&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>参考数据：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>KITEX：连接池模式（默认模式）&lt;/li>
&lt;li>KITEX-MUX：多路复用模式&lt;/li>
&lt;li>其他框架均使用多路复用模式&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/kitex_performance_testing/qps.png" alt="image">
&lt;img src="https://www.cloudwego.io/img/blog/kitex_performance_testing/tp99.png" alt="image">&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>在当前主流的 Golang 开源 RPC 框架中，每个框架其实在设计目标上都各有侧重：有些框架侧重于通用性，有些侧重于类似 Redis 这种轻业务逻辑的场景，有些侧重于吞吐性能，而有些则更侧重 P99 时延。&lt;/p>
&lt;p>字节跳动的业务在日常迭代中，常常会出现因某个 feature 导致一个指标上升，另一个指标下降的情况，因此 &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 在设计之初就更倾向于解决大规模微服务场景下各种问题。&lt;/p>
&lt;p>&lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> 发布后，我们接到了大量来自用户的自测数据，感谢社区对我们的关注和支持，也欢迎广大开发者基于本文提供的测试指南，针对自己的实际场景选择合适的工具。更多问题，请在 GitHub 上提 Issue 交流。&lt;/p>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Kitex: &lt;a href="https://github.com/cloudwego/kitex">https://github.com/cloudwego/kitex&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Netpoll: &lt;a href="https://github.com/cloudwego/netpoll">https://github.com/cloudwego/netpoll&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>kitex-benchmark: &lt;a href="https://github.com/cloudwego/kitex-benchmark">https://github.com/cloudwego/kitex-benchmark&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>netpoll-benchmark: &lt;a href="https://github.com/cloudwego/netpoll-benchmark">https://github.com/cloudwego/netpoll-benchmark&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>官方 Protobuf 库: &lt;a href="https://github.com/golang/protobuf">https://github.com/golang/protobuf&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thriftgo: &lt;a href="https://github.com/cloudwego/thriftgo">https://github.com/cloudwego/thriftgo&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.0.8 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/11/05/kitex-v0.0.8-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/11/05/kitex-v0.0.8-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="优化">优化&lt;/h2>
&lt;ul>
&lt;li>使用分片 ring 减少连接池的锁开销。&lt;/li>
&lt;li>装填 TTHeader 中的上游服务信息到 rpcinfo 中，用于在 decode 出错时输出来源信息。&lt;/li>
&lt;li>Unlink uds 调整至 CreateListener 中。&lt;/li>
&lt;li>event.go 和 ring_single.go 中的 Mutex 改为 RWMutex。&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复&lt;/h2>
&lt;ul>
&lt;li>修复 netpollmux shard index 溢出的问题。&lt;/li>
&lt;li>移除 &lt;code>WithCircuitBreaker&lt;/code> option 里对参数的反射，避免 data-race。&lt;/li>
&lt;li>在重试场景下， 修复 rpc finish 错误导致的小概率失败的问题，并且加上了熔断 sample 的校验。&lt;/li>
&lt;li>修复 endpoint_test.go 中的一处单测错误。&lt;/li>
&lt;li>修改 conn_wrapper.go 中 longconn 变量命名为 conn.。&lt;/li>
&lt;/ul>
&lt;h2 id="生成工具">生成工具&lt;/h2>
&lt;ul>
&lt;li>代码生成工具支持透传thrift-go插件参数。&lt;/li>
&lt;/ul>
&lt;h2 id="文档">文档&lt;/h2>
&lt;ul>
&lt;li>将 README 中的性能结果改为引用 kitex-benchmark 仓库的数据。&lt;/li>
&lt;/ul>
&lt;h2 id="依赖变化">依赖变化&lt;/h2>
&lt;ul>
&lt;li>github.com/tidwall/gjson: v1.8.0 -&amp;gt; v1.9.3&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.0.5 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/09/26/kitex-v0.0.5-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/09/26/kitex-v0.0.5-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="功能">功能:&lt;/h2>
&lt;ul>
&lt;li>增加默认的 ErrorHandler 封装 Error（用户指定会被覆盖）。&lt;/li>
&lt;li>metainfo 支持反向传递。&lt;/li>
&lt;li>支持了 JSON 泛化调用，使用指南可参考：&lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/">Kitex 泛化调用使用指南&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h2 id="优化">优化:&lt;/h2>
&lt;ul>
&lt;li>多路复用场景下使用了新的 netpoll API 来改善吞吐和延迟。&lt;/li>
&lt;li>多路复用场景下支持 metainfo 的正向和反向传递。&lt;/li>
&lt;li>Client 会在需要的时候默认使用 RPCTimeout 中间件。&lt;/li>
&lt;li>连接池配置增加全局空闲连接和单实例空闲连接合法性校验。&lt;/li>
&lt;li>当更新 QPS 最大限制时会重置计数器。&lt;/li>
&lt;li>减小 QPS 限流的误差。&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复:&lt;/h2>
&lt;ul>
&lt;li>修复 WithExitWaitTime 没有正确设置退出等待时间的问题。&lt;/li>
&lt;li>修复更新 QPS 限制器更新间隔时，协程泄漏的问题。&lt;/li>
&lt;li>服务注册使用真实监听的地址。&lt;/li>
&lt;/ul>
&lt;h2 id="工具">工具:&lt;/h2>
&lt;ul>
&lt;li>修复了当 protobuf 文件只有 unary 方法时，生成出错的问题。&lt;/li>
&lt;/ul>
&lt;h2 id="文档">文档:&lt;/h2>
&lt;ul>
&lt;li>提供了英文版的README和其他文档。&lt;/li>
&lt;li>补充了泛化调用手册： &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/">English&lt;/a> | &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/">中文&lt;/a>。&lt;/li>
&lt;li>README 中增加了 landsapce 和 roadmap。&lt;/li>
&lt;/ul>
&lt;h2 id="依赖变化">依赖变化:&lt;/h2>
&lt;ul>
&lt;li>github.com/cloudwego/netpoll: v0.0.3 -&amp;gt; v0.0.4&lt;/li>
&lt;li>github.com/bytedance/gopkg: v0.0.0-20210709064845-3c00f9323f09 -&amp;gt; v0.0.0-20210910103821-e4efae9c17c3&lt;/li>
&lt;/ul></description></item><item><title>Blog: 字节跳动 Go RPC 框架 Kitex 性能优化实践</title><link>https://www.cloudwego.io/zh/blog/2021/09/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-go-rpc-%E6%A1%86%E6%9E%B6-kitex-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</link><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/09/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-go-rpc-%E6%A1%86%E6%9E%B6-kitex-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid><description>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Kitex 是字节跳动框架组研发的下一代高性能、强可扩展性的 Go RPC 框架。除具备丰富的服务治理特性外，相比其他框架还有以下特点：
集成了自研的网络库 Netpoll；支持多消息协议（Thrift、Protobuf）和多交互方式（Ping-Pong、Oneway、 Streaming）；提供了更加灵活可扩展的代码生成器。&lt;/p>
&lt;p>目前公司内主要业务线都已经大范围使用 Kitex，据统计当前接入服务数量多达 8k。Kitex 推出后，我们一直在不断地优化性能，本文将分享我们在 Netpoll 和 序列化方面的优化工作。&lt;/p>
&lt;h2 id="自研网络库-netpoll-优化">自研网络库 Netpoll 优化&lt;/h2>
&lt;p>自研的基于 epoll 的网络库 —— Netpoll，在性能方面有了较为显著的优化。测试数据表明，当前版本(2020.12) 相比于上次分享时(2020.05)，吞吐能力 ↑30%，延迟 AVG ↓25%，TP99 ↓67%，性能已远超官方 net 库。以下，我们将分享两点显著提升性能的方案。&lt;/p>
&lt;h3 id="epoll_wait-调度延迟优化">epoll_wait 调度延迟优化&lt;/h3>
&lt;p>Netpoll 在刚发布时，遇到了延迟 AVG 较低，但 TP99 较高的问题。经过认真研究 epoll_wait，我们发现结合 polling 和 event trigger 两种模式，并优化调度策略，可以显著降低延迟。&lt;/p>
&lt;p>首先我们来看 Go 官方提供的 syscall.EpollWait 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">EpollWait&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">epfd&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">events&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">EpollEvent&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里共提供 3 个参数，分别表示 epoll 的 fd、回调事件、等待时间，其中只有 msec 是动态可调的。&lt;/p>
&lt;p>通常情况下，我们主动调用 EpollWait 都会设置 msec=-1，即无限等待事件到来。事实上不少开源网络库也是这么做的。但是我们研究发现，msec=-1 并不是最优解。&lt;/p>
&lt;p>epoll_wait 内核源码(如下) 表明，msec=-1 比 msec=0 增加了 fetch_events 检查，因此耗时更长。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">ep_poll&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">eventpoll&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">ep&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">epoll_event&lt;/span> &lt;span style="color:#000">__user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">events&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">maxevents&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">long&lt;/span> &lt;span style="color:#000">timeout&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">timeout&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">timeout&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">goto&lt;/span> &lt;span style="color:#000">send_events&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">fetch_events&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">eavail&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">goto&lt;/span> &lt;span style="color:#000">send_events&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">send_events&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Benchmark 表明，在有事件触发的情况下，msec=0 比 msec=-1 调用要快 18% 左右，因此在频繁事件触发场景下，使用 msec=0 调用明显是更优的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Benchmark&lt;/th>
&lt;th style="text-align: left">time/op&lt;/th>
&lt;th style="text-align: left">bytes/op&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">BenchmarkEpollWait, msec=0&lt;/td>
&lt;td style="text-align: left">270 ns/op&lt;/td>
&lt;td style="text-align: left">0 B/op&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkEpollWait, msec=-1&lt;/td>
&lt;td style="text-align: left">328 ns/op&lt;/td>
&lt;td style="text-align: left">0 B/op&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">EpollWait Delta&lt;/td>
&lt;td style="text-align: left">-17.68%&lt;/td>
&lt;td style="text-align: left">~&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>而在无事件触发的场景下，使用 msec=0 显然会造成无限轮询，空耗大量资源。&lt;/p>
&lt;p>综合考虑后，我们更希望在有事件触发时，使用 msec=0 调用，而在无事件时，使用 msec=-1 来减少轮询开销。伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">syscall&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EpollWait&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">epfd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">events&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">msec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么这样就可以了吗？事实证明优化效果并不明显。&lt;/p>
&lt;p>我们再做思考：&lt;/p>
&lt;p>msec=0 仅单次调用耗时减少 50ns，影响太小，如果想要进一步优化，必须要在调度逻辑上做出调整。&lt;/p>
&lt;p>进一步思考：&lt;/p>
&lt;p>上述伪代码中，当无事件触发，调整 msec=-1 时，直接 continue 会立即再次执行 EpollWait，而由于无事件，msec=-1，当前 goroutine 会 block 并被 P 切换。
但是被动切换效率较低，如果我们在 continue 前主动为 P 切换 goroutine，则可以节约时间。因此我们将上述伪代码改为如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">syscall&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EpollWait&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">epfd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">events&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">msec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">runtime&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Gosched&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msec&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试表明，调整代码后，吞吐量 ↑12%，TP99 ↓64%，获得了显著的延迟收益。&lt;/p>
&lt;h3 id="合理利用-unsafepointer">合理利用 unsafe.Pointer&lt;/h3>
&lt;p>继续研究 epoll_wait，我们发现 Go 官方对外提供的 syscall.EpollWait 和 runtime 自用的 epollwait 是不同的版本，即两者使用了不同的 EpollEvent。以下我们展示两者的区别：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// @syscall&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">EpollEvent&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Events&lt;/span> &lt;span style="color:#204a87;font-weight:bold">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Fd&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Pad&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// @runtime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">epollevent&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">events&lt;/span> &lt;span style="color:#204a87;font-weight:bold">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// unaligned uintptr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到，runtime 使用的 epollevent 是系统层 epoll 定义的原始结构；而对外版本则对其做了封装，将 epoll_data(epollevent.data) 拆分为固定的两字段：Fd 和 Pad。
那么 runtime 又是如何使用的呢？在源码里我们看到这样的逻辑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">pollDesc&lt;/span>&lt;span style="color:#000;font-weight:bold">)(&lt;/span>&lt;span style="color:#000">unsafe&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Pointer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">ev&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pd&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#000">pollDesc&lt;/span>&lt;span style="color:#000;font-weight:bold">)(&lt;/span>&lt;span style="color:#000">unsafe&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Pointer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">ev&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>显然，runtime 使用 epoll_data(&amp;amp;ev.data) 直接存储了 fd 对应结构体(pollDesc)的指针，这样在事件触发时，可以直接找到结构体对象，并执行相应逻辑。
而对外版本则由于只能获得封装后的 Fd 参数，因此需要引入额外的 Map 来增删改查结构体对象，这样性能肯定相差很多。&lt;/p>
&lt;p>所以我们果断抛弃了 syscall.EpollWait，转而仿照 runtime 自行设计了 EpollWait 调用，同样采用 unsafe.Pointer 存取结构体对象。测试表明，该方案下 吞吐量 ↑10%，TP99 ↓10%，获得了较为明显的收益。&lt;/p>
&lt;h2 id="thrift-序列化反序列化优化">Thrift 序列化/反序列化优化&lt;/h2>
&lt;p>序列化是指把数据结构或对象转换成字节序列的过程，反序列化则是相反的过程。RPC 在通信时需要约定好序列化协议，client 在发送请求前进行序列化，
字节序列通过网络传输到 server，server 再反序列进行逻辑处理，完成一次 RPC 请求。Thrift 支持 Binary、Compact 和 JSON 序列化协议。目前公司内部使用的基本都是 Binary，这里只介绍 Binary 协议。&lt;/p>
&lt;p>Binary 采用 TLV 编码实现，即每个字段都由 TLV 结构来描述，TLV 意为：Type 类型， Length 长度，Value 值，Value 也可以是个 TLV 结构，其中 Type 和 Length 的长度固定，Value 的长度则由 Length 的值决定。
TLV 编码结构简单清晰，并且扩展性较好，但是由于增加了 Type 和 Length，有额外的内存开销，特别是在大部分字段都是基本类型的情况下有不小的空间浪费。&lt;/p>
&lt;p>序列化和反序列的性能优化从大的方面来看可以从空间和时间两个维度进行优化。从兼容已有的 Binary 协议来看，空间上的优化似乎不太可行，只能从时间维度进行优化，包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>减少内存操作次数，包括内存分配和拷贝，尽量预分配内存，减少不必要的开销；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>减少函数调用次数，比如可调整代码结构和 inline 等手段进行优化；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="调研">调研&lt;/h3>
&lt;p>根据 go_serialization_benchmarks 的压测数据，我们找到了一些性能卓越的序列化方案进行调研，希望能够对我们的优化工作有所启发。&lt;/p>
&lt;p>通过对 protobuf、gogoprotobuf 和 Cap&amp;rsquo;n Proto 的分析，我们得出以下结论：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>网络传输中出于 IO 的考虑，都会尽量压缩传输数据，protobuf 采用了 Varint 编码在大部分场景中都有着不错的压缩效果；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>gogoprotobuf 采用预计算方式，在序列化时能够减少内存分配次数，进而减少了内存分配带来的系统调用、锁和 GC 等代价；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cap&amp;rsquo;n Proto 直接操作 buffer，也是减少了内存分配和内存拷贝（少了中间的数据结构），并且在 struct pointer 的设计中把固定长度类型数据和非固定长度类型数据分开处理，针对固定长度类型可以快速处理；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>从兼容性考虑，不可能改变现有的 TLV 编码格式，因此数据压缩不太现实，但是 2 和 3 对我们的优化工作是有启发的，事实上我们也是采取了类似的思路。&lt;/p>
&lt;h3 id="思路">思路&lt;/h3>
&lt;h4 id="减少内存操作">减少内存操作&lt;/h4>
&lt;p>&lt;strong>buffer 管理&lt;/strong>&lt;/p>
&lt;p>无论是序列化还是反序列化，都是从一块内存拷贝数据到另一块内存，这就涉及到内存分配和内存拷贝操作，尽量避免内存操作可以减少不必要的系统调用、锁和 GC 等开销。&lt;/p>
&lt;p>事实上 Kitex 已经提供了 LinkBuffer 用于 buffer 的管理，LinkBuffer 设计上采用链式结构，由多个 block 组成，其中 block 是大小固定的内存块，构建对象池维护空闲 block，由此复用 block，减少内存占用和 GC。&lt;/p>
&lt;p>刚开始我们简单地采用 sync.Pool 来复用 netpoll 的 LinkBufferNode，但是这样仍然无法解决对于大包场景下的内存复用（大的 Node 不能回收，否则会导致内存泄漏）。
目前我们改成了维护一组 sync.Pool，每组中的 buffer size 都不同，新建 block 时根据最接近所需 size 的 pool 中去获取，这样可以尽可能复用内存，从测试来看内存分配和 GC 优化效果明显。&lt;/p>
&lt;p>&lt;strong>string / binary 零拷贝&lt;/strong>&lt;/p>
&lt;p>对于有一些业务，比如视频相关的业务，会在请求或者返回中有一个很大的 Binary 二进制数据代表了处理后的视频或者图片数据，同时会有一些业务会返回很大的 String（如全文信息等）。
这种场景下，我们通过火焰图看到的热点都在数据的 copy 上，那我们就想了，我们是否可以减少这种拷贝呢？&lt;/p>
&lt;p>答案是肯定的。既然我们底层使用的 Buffer 是个链表，那么就可以很容易地在链表中间插入一个节点。&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/buffer-linkerd-list.png" alt="!image">&lt;/p>
&lt;p>我们就采用了类似的思想，当序列化的过程中遇到了 string 或者 binary 的时候， 将这个节点的 buffer 分成两段，在中间原地插入用户的 string / binary 对应的 buffer，这样可以避免大的 string / binary 的拷贝了。&lt;/p>
&lt;p>这里再介绍一下，如果我们直接用 []byte(string) 去转换一个 string 到 []byte 的话实际上是会发生一次拷贝的，原因是 Go 的设计中 string 是 immutable 的但是 []byte 是 mutable 的，
所以这么转换的时候会拷贝一次；如果要不拷贝转换的话，就需要用到 unsafe 了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">StringToSliceByte&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)(&lt;/span>&lt;span style="color:#000">unsafe&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Pointer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">reflect&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SliceHeader&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">reflect&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">StringHeader&lt;/span>&lt;span style="color:#000;font-weight:bold">)(&lt;/span>&lt;span style="color:#000">unsafe&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Pointer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">))).&lt;/span>&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Len&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Cap&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码的意思是，先把 string 的地址拿到，再拼装上一个 slice byte 的 header，这样就可以不拷贝数据而将 string 转换成 []byte 了，不过要注意这样生成的 []byte 不可写，否则行为未定义。&lt;/p>
&lt;p>&lt;strong>预计算&lt;/strong>&lt;/p>
&lt;p>线上存在某些服务有大包传输的场景，这种场景下会引入不小的序列化 / 反序列化开销。一般大包都是容器类型的大小非常大导致的，如果能够提前计算出 buffer，一些 O(n) 的操作就能降到 O(1)，减少了函数调用次数，在大包场景下也大量减少了内存分配的次数，带来的收益是可观的。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基本类型&lt;/p>
&lt;ul>
&lt;li>如果容器元素为基本类型（bool, byte, i16, i32, i64, double）的话，由于基本类型大小固定，在序列化时是可以提前计算出总的大小，并且一次性分配足够的 buffer，O(n) 的 malloc 操作次数可以降到 O(1)，从而大量减少了 malloc 的次数，同理在反序列化时可以减少 next 的操作次数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>struct 字段重排&lt;/p>
&lt;ul>
&lt;li>
&lt;p>上面的优化只能针对容器元素类型为基本类型的有效，那么对于元素类型为 struct 的是否也能优化呢？答案是肯定的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>沿用上面的思路，假如 struct 中如果存在基本类型的 field，也可以预先计算出这些 field 的大小，在序列化时为这些 field 提前分配 buffer，写的时候也把这些 field 顺序统一放到前面写，这样也能在一定程度上减少 malloc 的次数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>一次性计算&lt;/p>
&lt;ul>
&lt;li>上面提到的是基本类型的优化，如果在序列化时，先遍历一遍 request 所有 field，便可以计算得到整个 request 的大小，提前分配好 buffer，在序列化和反序列时直接操作 buffer，这样对于非基本类型也能有优化效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>定义新的 codec 接口：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">thriftMsgFastCodec&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">BLength&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// count length of whole req/resp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">FastWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">FastRead&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在 Marshal 和 Unmarshal 接口中做相应改造：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#000">thriftCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Marshal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Message&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">out&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ByteBuffer&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#000">thriftMsgFastCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msgBeginLen&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MessageBeginLength&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">methodName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">thrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TMessageType&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msgType&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#204a87">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">seqID&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msgEndLen&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MessageEndLength&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">out&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Malloc&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msgBeginLen&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">BLength&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">msgEndLen&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// malloc once&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">perrors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewProtocolErrorWithMsg&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;thrift marshal, Malloc failed: %s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteMessageBegin&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">methodName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">thrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TMessageType&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msgType&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#204a87">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">seqID&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FastWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteMessageEnd&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#000">thriftCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Unmarshal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">message&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Message&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ByteBuffer&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Data&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#000">thriftMsgFastCodec&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">PayloadLen&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">msgBeginLen&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MessageBeginLength&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">methodName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">msgType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">seqID&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">tProt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">PayloadLen&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">msgBeginLen&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MessageEndLength&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// next once&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTransError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">PROTOCOL_ERROR&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FastRead&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTransError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">PROTOCOL_ERROR&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">tProt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadMessageEnd&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTransError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">remote&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">PROTOCOL_ERROR&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">tProt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Recycle&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>生成代码中也做相应改造：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Demo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">BLength&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">StructBeginLength&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Demo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">field1Length&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">field2Length&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">field3Length&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FieldStopLength&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">StructEndLength&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">l&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Demo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">FastWrite&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteStructBegin&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:],&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Demo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fastWriteField2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fastWriteField4&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fastWriteField1&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fastWriteField3&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteFieldStop&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">bthrift&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Binary&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteStructEnd&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">offset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-simd-优化-thrift-编码">使用 SIMD 优化 Thrift 编码&lt;/h4>
&lt;p>公司内广泛使用 list&amp;lt;i64/i32&amp;gt; 类型来承载 ID 列表，并且 list&amp;lt;i64/i32&amp;gt; 的编码方式十分符合向量化的规律，于是我们用了 SIMD 来优化 list&amp;lt;i64/i32&amp;gt; 的编码过程。&lt;/p>
&lt;p>我们使用了 avx2，优化后的结果比较显著，在大数据量下针对 i64 可以提升 6 倍性能，针对 i32 可以提升 12 倍性能；在小数据量下提升更明显，针对 i64 可以提升 10 倍，针对 i32 可以提升 20 倍。&lt;/p>
&lt;h4 id="减少函数调用">减少函数调用&lt;/h4>
&lt;p>&lt;strong>inline&lt;/strong>&lt;/p>
&lt;p>inline 是在编译期间将一个函数调用原地展开，替换成这个函数的实现，它可以减少函数调用的开销以提高程序的性能。&lt;/p>
&lt;p>在 Go 中并不是所有函数都能 inline，使用参数-gflags=&amp;quot;-m&amp;quot;运行进程，可显示被 inline 的函数。以下几种情况无法内联：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>包含循环的函数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包含以下内容的函数：闭包调用，select，for，defer，go 关键字创建的协程；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>超过一定长度的函数，默认情况下当解析 AST 时，Go 申请了 80 个节点作为内联的预算。每个节点都会消耗一个预算。比如，a = a + 1 这行代码包含了 5 个节点：AS, NAME, ADD, NAME, LITERAL。当一个函数的开销超过了这个预算，就无法内联。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>编译时通过指定参数-l可以指定编译器对代码内联的强度（go 1.9+），不过这里不推荐大家使用，在我们的测试场景下是 buggy 的，无法正常运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// The debug[&amp;#39;l&amp;#39;] flag controls the aggressiveness. Note that main() swaps level 0 and 1, making 1 the default and -l disable. Additional levels (beyond -l) may be buggy and are not supported.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 0: disabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 1: 80-nodes leaf functions, oneliners, panic, lazy typechecking (default)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 2: (unassigned)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 3: (unassigned)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// 4: allow non-leaf functions&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内联虽然可以减少函数调用的开销，但是也可能因为存在重复代码，从而导致 CPU 缓存命中率降低，所以并不能盲目追求过度的内联，需要结合 profile 结果来具体分析。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go &lt;span style="color:#204a87">test&lt;/span> -gcflags&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-m=2&amp;#39;&lt;/span> -v -test.run TestNewCodec 2&amp;gt;&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;function too complex&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">48&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go &lt;span style="color:#204a87">test&lt;/span> -gcflags&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;-m=2 -l=4&amp;#39;&lt;/span> -v -test.run TestNewCodec 2&amp;gt;&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;function too complex&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> wc -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0000cf;font-weight:bold">25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的输出结果可以看出，加强内联程度确实减少了一些&amp;quot;function too complex&amp;quot;，看下 benchmark 结果：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Benchmark&lt;/th>
&lt;th style="text-align: left">time/op&lt;/th>
&lt;th style="text-align: left">bytes/op&lt;/th>
&lt;th style="text-align: left">allocs/op&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">BenchmarkOldMarshal-4&lt;/td>
&lt;td style="text-align: left">309 µs ± 2%&lt;/td>
&lt;td style="text-align: left">218KB&lt;/td>
&lt;td style="text-align: left">11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkNewMarshal-4&lt;/td>
&lt;td style="text-align: left">310 µs ± 3%&lt;/td>
&lt;td style="text-align: left">218KB&lt;/td>
&lt;td style="text-align: left">11&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上面开启最高程度的内联强度，确实消除了不少因为“function too complex”带来无法内联的函数，但是压测结果显示收益不太明显。&lt;/p>
&lt;h3 id="测试结果">测试结果&lt;/h3>
&lt;p>我们构建了基准测试来对比优化前后的性能，下面是测试结果。&lt;/p>
&lt;p>环境：Go 1.13.5 darwin/amd64 on a 2.5 GHz Intel Core i7 16GB&lt;/p>
&lt;p>&lt;strong>小包&lt;/strong>&lt;/p>
&lt;p>data size: 20KB&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Benchmark&lt;/th>
&lt;th style="text-align: left">time/op&lt;/th>
&lt;th style="text-align: left">bytes/op&lt;/th>
&lt;th style="text-align: left">allocs/op&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">BenchmarkOldMarshal-4&lt;/td>
&lt;td style="text-align: left">138 µs ± 3%&lt;/td>
&lt;td style="text-align: left">25.4KB&lt;/td>
&lt;td style="text-align: left">19&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkNewMarshal-4&lt;/td>
&lt;td style="text-align: left">29 µs ± 3%&lt;/td>
&lt;td style="text-align: left">26.4KB&lt;/td>
&lt;td style="text-align: left">11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Marshal Delta&lt;/td>
&lt;td style="text-align: left">-78.97%&lt;/td>
&lt;td style="text-align: left">3.87%&lt;/td>
&lt;td style="text-align: left">-42.11%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkOldUnmarshal-4&lt;/td>
&lt;td style="text-align: left">199 µs ± 3%&lt;/td>
&lt;td style="text-align: left">4720&lt;/td>
&lt;td style="text-align: left">1360&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkNewUnmarshal-4&lt;/td>
&lt;td style="text-align: left">94µs ± 5%&lt;/td>
&lt;td style="text-align: left">4700&lt;/td>
&lt;td style="text-align: left">1280&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Unmarshal Delta&lt;/td>
&lt;td style="text-align: left">-52.93%&lt;/td>
&lt;td style="text-align: left">-0.24%&lt;/td>
&lt;td style="text-align: left">-5.38%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>大包&lt;/strong>&lt;/p>
&lt;p>data size: 6MB&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Benchmark&lt;/th>
&lt;th style="text-align: left">time/op&lt;/th>
&lt;th style="text-align: left">bytes/op&lt;/th>
&lt;th style="text-align: left">allocs/op&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">BenchmarkOldMarshal-4&lt;/td>
&lt;td style="text-align: left">58.7ms ± 5%&lt;/td>
&lt;td style="text-align: left">6.96MB&lt;/td>
&lt;td style="text-align: left">3350&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkNewMarshal-4&lt;/td>
&lt;td style="text-align: left">13.3ms ± 3%&lt;/td>
&lt;td style="text-align: left">6.84MB&lt;/td>
&lt;td style="text-align: left">10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Marshal Delta&lt;/td>
&lt;td style="text-align: left">-77.30%&lt;/td>
&lt;td style="text-align: left">-1.71%&lt;/td>
&lt;td style="text-align: left">-99.64%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkOldUnmarshal-4&lt;/td>
&lt;td style="text-align: left">56.6ms ± 3%&lt;/td>
&lt;td style="text-align: left">17.4MB&lt;/td>
&lt;td style="text-align: left">391000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkNewUnmarshal-4&lt;/td>
&lt;td style="text-align: left">26.8ms ± 5%&lt;/td>
&lt;td style="text-align: left">17.5MB&lt;/td>
&lt;td style="text-align: left">390000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Unmarshal Delta&lt;/td>
&lt;td style="text-align: left">-52.54%&lt;/td>
&lt;td style="text-align: left">0.09%&lt;/td>
&lt;td style="text-align: left">-0.37%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="无拷贝序列化">无拷贝序列化&lt;/h2>
&lt;p>在一些 request 和 response 数据较大的服务中，序列化和反序列化的代价较高，有两种优化思路：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如前文所述进行序列化和反序列化的优化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以无拷贝序列化的方式进行调用&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="调研-1">调研&lt;/h3>
&lt;p>通过无拷贝序列化进行 RPC 调用，最早出自 Kenton Varda 的 Cap&amp;rsquo;n Proto 项目，Cap&amp;rsquo;n Proto 提供了一套数据交换格式和对应的编解码库。&lt;/p>
&lt;p>Cap&amp;rsquo;n Proto 本质上是开辟一个 bytes slice 作为 buffer ，所有对数据结构的读写操作都是直接读写 buffer，读写完成后，
在头部添加一些 buffer 的信息就可以直接发送，对端收到后即可读取，因为没有 Go 语言结构体作为中间存储，所有无需序列化这个步骤，反序列化亦然。&lt;/p>
&lt;p>简单总结下 Cap&amp;rsquo;n Proto 的特点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>所有数据的读写都是在一段连续内存中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将序列化操作前置，在数据 Get/Set 的同时进行编解码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在数据交换格式中，通过 pointer（数据存储位置的 offset）机制，使得数据可以存储在连续内存的任意位置，进而使得结构体中的数据可以以任意顺序读写&lt;/p>
&lt;ul>
&lt;li>对于结构体的固定大小字段，通过重新排列，使得这些字段存储在一块连续内存中&lt;/li>
&lt;li>对于结构体的不定大小字段（如 list），则通过一个固定大小的 pointer 来表示，pointer 中存储了包括数据位置在内的一些信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>首先 Cap&amp;rsquo;n Proto 没有 Go 语言结构体作为中间载体，得以减少一次拷贝，然后 Cap&amp;rsquo;n Proto 是在一段连续内存上进行操作，编码数据的读写可以一次完成，因为这两个原因，使得 Cap&amp;rsquo; Proto 的性能表现优秀。&lt;/p>
&lt;p>下面是相同数据结构下 Thrift 和 Cap&amp;rsquo;n Proto 的 Benchmark，考虑到 Cap&amp;rsquo;n Proto 是将编解码操作前置了，所以对比的是包括数据初始化在内的完整过程，即结构体数据初始化+（序列化）+写入 buffer +从 buffer 读出+（反序列化）+从结构体读出数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Thrift" data-lang="Thrift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">MyTest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Num&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Ano&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Ano&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">list&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Nums&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 长度131072 大小1MB
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Ano&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Num&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Benchmark&lt;/th>
&lt;th style="text-align: left">Iter&lt;/th>
&lt;th style="text-align: left">time/op&lt;/th>
&lt;th style="text-align: left">bytes/op&lt;/th>
&lt;th style="text-align: left">alloc/op&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">BenchmarkThriftReadWrite&lt;/td>
&lt;td style="text-align: left">172&lt;/td>
&lt;td style="text-align: left">6855840 ns/op&lt;/td>
&lt;td style="text-align: left">3154209 B/op&lt;/td>
&lt;td style="text-align: left">545 allocs/op&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">BenchmarkCapnpReadWrite&lt;/td>
&lt;td style="text-align: left">1500&lt;/td>
&lt;td style="text-align: left">844924 ns/op&lt;/td>
&lt;td style="text-align: left">2085713 B/op&lt;/td>
&lt;td style="text-align: left">9 allocs/op&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">ReadWrite Delta&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">-87.68%&lt;/td>
&lt;td style="text-align: left">-33.88%&lt;/td>
&lt;td style="text-align: left">-98.35%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>（反序列化）+读出数据，视包大小，Cap&amp;rsquo;n Proto 性能大约是 Thrift 的 8-9 倍。写入数据+（序列化），视包大小，Cap&amp;rsquo;n Proto 性能大约是 Thrift 的 2-8 倍。整体性能 Cap&amp;rsquo; Proto 性能大约是 Thrift 的 4-8 倍。&lt;/p>
&lt;p>前面说了 Cap&amp;rsquo;n Proto 的优势，下面总结一下 Cap&amp;rsquo;n Proto 存在的一些问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Cap&amp;rsquo;n Proto 的连续内存存储这一特性带来的一个问题：当对不定大小数据进行 resize ，且需要的空间大于原有空间时，只能在后面重新分配一块空间，导致原来数据的空间成为了一个无法去掉的 hole 。
这个问题随着调用链路的不断 resize 会越来越严重，要解决只能在整个链路上严格约束：尽量避免对不定大小字段的 resize ，当不得不 resize 的时候，重新构建一个结构体并对数据进行深拷贝。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cap&amp;rsquo;n Proto 因为没有 Go 语言结构体作为中间载体，使得所有的字段都只能通过接口进行读写，用户体验较差。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="thrift-协议兼容的无拷贝序列化">Thrift 协议兼容的无拷贝序列化&lt;/h3>
&lt;p>Cap&amp;rsquo;n Proto 为了更好更高效地支持无拷贝序列化，使用了一套自研的编解码格式，但在现在 Thrift 和 ProtoBuf 占主流的环境中难以铺开。为了能在协议兼容的同时获得无拷贝序列化的性能，我们开始了 Thrift 协议兼容的无拷贝序列化的探索。&lt;/p>
&lt;p>Cap&amp;rsquo;n Proto 作为无拷贝序列化的标杆，那么我们就看看 Cap&amp;rsquo;n Proto 上的优化能否应用到 Thrift 上：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自然是无拷贝序列化的核心，不使用 Go 语言结构体作为中间载体，减少一次拷贝。此优化点是协议无关的，能够适用于任何已有的协议，自然也能和 Thrift 协议兼容，但是从 Cap&amp;rsquo;n Proto 的使用上来看，用户体验还需要仔细打磨一下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cap&amp;rsquo;n Proto 是在一段连续内存上进行操作，编码数据的读写可以一次完成。Cap&amp;rsquo;n Proto 得以在连续内存上操作的原因：有 pointer 机制，数据可以存储在任意位置，允许字段可以以任意顺序写入而不影响解码。
但是一方面，在连续内存上容易因为误操作，导致在 resize 的时候留下 hole，另一方面，Thrift 没有类似于 pointer 的机制，故而对数据布局有着更严格的要求。这里有两个思路：&lt;/p>
&lt;ul>
&lt;li>坚持在连续内存上进行操作，并对用户使用提出严格要求：1. resize 操作必须重新构建数据结构 2. 当存在结构体嵌套时，对字段写入顺序有着严格要求（可以想象为把一个存在嵌套的结构体从外往里展开，写入时需要按展开顺序写入），
且因为 Binary 等 TLV 编码的关系，在每个嵌套开始写入时，需要用户主动声明（如 StartWriteFieldX）。&lt;/li>
&lt;li>不完全在连续内存上操作，局部内存连续，可变字段则单独分配一块内存，既然内存不是完全连续的，自然也无法做到一次写操作便完成输出。为了尽可能接近一次写完数据的性能，我们采取了一种链式 buffer 的方案，
一方面当可变字段 resize 时只需替换链式 buffer 的一个节点，无需像 Cap&amp;rsquo;n Proto 一样重新构建结构体，另一方面在需要输出时无需像 Thrift 一样需要感知实际的结构，只要把整个链路上的 buffer 写入即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>先总结下目前确定的两个点：1. 不使用 Go 语言结构体作为中间载体，通过接口直接操作底层内存，在 Get/Set 时完成编解码 2. 通过链式 buffer 存储数据&lt;/p>
&lt;p>然后让我们看下目前还有待解决的问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不使用 Go 语言结构体后带来的用户体验劣化&lt;/p>
&lt;ul>
&lt;li>解决方案：改善 Get/Set 接口的使用体验，尽可能做到和 Go 语言结构体同等的易用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Cap&amp;rsquo;n Proto 的 Binary Format 是针对无拷贝序列化场景专门设计的，虽然每次 Get 时都会进行一次解码，但是解码代价非常小。而 Thrift 的协议（以 Binary 为例），没有类似于 pointer 的机制，
当存在多个不定大小字段或者存在嵌套时，必须顺序解析而无法直接通过计算偏移拿到字段数据所在的位置，而每次 Get 都进行顺序解析的代价过于高昂。&lt;/p>
&lt;ul>
&lt;li>解决方案：我们在表示结构体的时候，除了记录结构体的 buffer 节点，还加了一个索引，里面记录了每个不定大小字段开始的 buffer 节点的指针。
下面是目前的无拷贝序列化方案与 FastRead/Write，在 4 核下的极限性能对比测试：&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">包大小&lt;/th>
&lt;th style="text-align: left">类型&lt;/th>
&lt;th style="text-align: left">QPS&lt;/th>
&lt;th style="text-align: left">TP90&lt;/th>
&lt;th style="text-align: left">TP99&lt;/th>
&lt;th style="text-align: left">TP999&lt;/th>
&lt;th style="text-align: left">CPU&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">1KB&lt;/td>
&lt;td style="text-align: left">无序列化&lt;/td>
&lt;td style="text-align: left">70,700&lt;/td>
&lt;td style="text-align: left">1 ms&lt;/td>
&lt;td style="text-align: left">3 ms&lt;/td>
&lt;td style="text-align: left">6 ms&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">FastWrite/FastRead&lt;/td>
&lt;td style="text-align: left">82,490&lt;/td>
&lt;td style="text-align: left">1 ms&lt;/td>
&lt;td style="text-align: left">2 ms&lt;/td>
&lt;td style="text-align: left">4 ms&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">2KB&lt;/td>
&lt;td style="text-align: left">无序列化&lt;/td>
&lt;td style="text-align: left">65,000&lt;/td>
&lt;td style="text-align: left">1 ms&lt;/td>
&lt;td style="text-align: left">4 ms&lt;/td>
&lt;td style="text-align: left">9 ms&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">FastWrite/FastRead&lt;/td>
&lt;td style="text-align: left">72,000&lt;/td>
&lt;td style="text-align: left">1 ms&lt;/td>
&lt;td style="text-align: left">2 ms&lt;/td>
&lt;td style="text-align: left">8 ms&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">4KB&lt;/td>
&lt;td style="text-align: left">无序列化&lt;/td>
&lt;td style="text-align: left">56,400&lt;/td>
&lt;td style="text-align: left">2 ms&lt;/td>
&lt;td style="text-align: left">5 ms&lt;/td>
&lt;td style="text-align: left">10 ms&lt;/td>
&lt;td style="text-align: left">380%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">FastWrite/FastRead&lt;/td>
&lt;td style="text-align: left">52,700&lt;/td>
&lt;td style="text-align: left">2 ms&lt;/td>
&lt;td style="text-align: left">4 ms&lt;/td>
&lt;td style="text-align: left">10 ms&lt;/td>
&lt;td style="text-align: left">380%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">32KB&lt;/td>
&lt;td style="text-align: left">无序列化&lt;/td>
&lt;td style="text-align: left">27,400&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">FastWrite/FastRead&lt;/td>
&lt;td style="text-align: left">19,500&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;td style="text-align: left">/&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">1MB&lt;/td>
&lt;td style="text-align: left">无序列化&lt;/td>
&lt;td style="text-align: left">986&lt;/td>
&lt;td style="text-align: left">53 ms&lt;/td>
&lt;td style="text-align: left">56 ms&lt;/td>
&lt;td style="text-align: left">59 ms&lt;/td>
&lt;td style="text-align: left">260%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">FastWrite/FastRead&lt;/td>
&lt;td style="text-align: left">942&lt;/td>
&lt;td style="text-align: left">55 ms&lt;/td>
&lt;td style="text-align: left">59 ms&lt;/td>
&lt;td style="text-align: left">62 ms&lt;/td>
&lt;td style="text-align: left">290%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">10MB&lt;/td>
&lt;td style="text-align: left">无序列化&lt;/td>
&lt;td style="text-align: left">82&lt;/td>
&lt;td style="text-align: left">630 ms&lt;/td>
&lt;td style="text-align: left">640 ms&lt;/td>
&lt;td style="text-align: left">645 ms&lt;/td>
&lt;td style="text-align: left">240%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;/td>
&lt;td style="text-align: left">FastWrite/FastRead&lt;/td>
&lt;td style="text-align: left">82&lt;/td>
&lt;td style="text-align: left">630 ms&lt;/td>
&lt;td style="text-align: left">640 ms&lt;/td>
&lt;td style="text-align: left">640 ms&lt;/td>
&lt;td style="text-align: left">270%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>测试结果概述：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>小包场景，无序列化性能表现较差，约为 FastWrite/FastRead 的 85%。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大包场景，无序列化性能表现较好，4K 以上的包较 FastWrite/FastRead 提升 7%-40%。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>希望以上的分享能够对社区有所帮助。同时，我们也在尝试 share memory-based IPC、io_uring、tcp zero copy 、RDMA 等，更好地提升 Kitex 性能；重点优化同机、同容器的通讯场景。欢迎各位感兴趣的同学加入我们，共同建设 Go 语言生态！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/alecthomas/go_serialization_benchmarks">https://github.com/alecthomas/go_serialization_benchmarks&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://capnproto.org/">https://capnproto.org/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions-2/intrinsics-for-shuffle-operations-1/mm256-shuffle-epi8.html">Intel® C++ Compiler Classic Developer Guide and Reference&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.0.4 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/08/26/kitex-v0.0.4-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/08/26/kitex-v0.0.4-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="优化">优化:&lt;/h2>
&lt;ul>
&lt;li>transMetaHandler 在自定义 boundHandlers 之前执行，保证自定义 boundHandlers 可以拿到 RPCInfo 信息。&lt;/li>
&lt;li>TransError 暴露封装 error 的 typeID 用于支持自定义 Error 回传错误码。&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复:&lt;/h2>
&lt;ul>
&lt;li>复用 RPCInfo 不对 stats level 重置， 以修复在使用 netpollmux 时 metric 丢失问题。&lt;/li>
&lt;li>清理不存在节点的连接池。&lt;/li>
&lt;li>Streaming 中增加 Netpoll EOF 错误判断来清除冗余的 warning 日志。&lt;/li>
&lt;li>修改熔断错误统计类型，非 Ignorable 错误类型均做熔断统计，以修复开源版本熔断无法正确生效和内部版本在开启mesh后重试熔断无法生效问题。&lt;/li>
&lt;/ul>
&lt;h2 id="工具">工具:&lt;/h2>
&lt;ul>
&lt;li>调整了 Protobuf unary 方法的生成代码，来同时支持 Kitex Protobuf 和 gRPC。&lt;/li>
&lt;li>升级了 thriftgo 版本来修复 golint。&lt;/li>
&lt;li>修复了生成代码中的错误。&lt;/li>
&lt;li>修复了流生成的代码缺少传输选项的错误。&lt;/li>
&lt;/ul>
&lt;h2 id="文档">文档:&lt;/h2>
&lt;ul>
&lt;li>添加了 Golong 配置部分的文档以及 Golang 版本要求。&lt;/li>
&lt;li>更新了一些现有文档。&lt;/li>
&lt;li>添加了一些英文文档。&lt;/li>
&lt;/ul>
&lt;h2 id="依赖变化">依赖变化:&lt;/h2>
&lt;ol>
&lt;li>Thriftgo: v0.0.2-0.20210726073420-0145861fcd04 -&amp;gt; v0.1.2&lt;/li>
&lt;li>Netpoll: v0.0.2 -&amp;gt; v0.0.3&lt;/li>
&lt;/ol></description></item><item><title>Blog: Kitex v0.0.3 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/08/01/kitex-v0.0.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/08/01/kitex-v0.0.3-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="bug-修复">Bug 修复:&lt;/h2>
&lt;ul>
&lt;li>防止连接池被覆盖。&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.0.2 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/07/30/kitex-v0.0.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/07/30/kitex-v0.0.2-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;h2 id="优化">优化：&lt;/h2>
&lt;ul>
&lt;li>Kitex 在没有 tracer 时关闭 stats 分阶段耗时采集，避免无 Trace 时额外的性能消耗。&lt;/li>
&lt;li>Kitex client 默认使用连接池。&lt;/li>
&lt;/ul>
&lt;h2 id="bug-修复">Bug 修复:&lt;/h2>
&lt;ul>
&lt;li>修复了一个 lbcache 中 nil-pointer 的错误。&lt;/li>
&lt;li>修复了一个 retry 重试（Backup Request）中的 data race 问题。&lt;/li>
&lt;/ul>
&lt;h2 id="工具">工具:&lt;/h2>
&lt;ul>
&lt;li>Kitex 工具去掉默认生成的配置文件。&lt;/li>
&lt;li>Kitex 工具现在使用最新的 thriftgo API 以避免老版 API 在生成代码时的几个边角案例。&lt;/li>
&lt;li>Kitex 工具现在会检查代码中是否包含 go 命令，不再假设它的存在。感谢 @anqiansong 的贡献。&lt;/li>
&lt;/ul>
&lt;h2 id="文档">文档:&lt;/h2>
&lt;ul>
&lt;li>我们在这个版本中更新了一些文档。&lt;/li>
&lt;li>我们修改了一些拼写错误和错别字。感谢 @rleungx @Huangxuny1 @JeffreyBool 的贡献。&lt;/li>
&lt;/ul></description></item><item><title>Blog: Kitex v0.0.1 版本发布</title><link>https://www.cloudwego.io/zh/blog/2021/07/12/kitex-v0.0.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</link><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/zh/blog/2021/07/12/kitex-v0.0.1-%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83/</guid><description>
&lt;p>Kitex 项目初始化。&lt;/p></description></item></channel></rss>