<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudWeGo – Hertz</title><link>https://www.cloudwego.io/projects/hertz/</link><description>Recent content in Hertz on CloudWeGo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 30 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.cloudwego.io/projects/hertz/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Hertz Release</title><link>https://www.cloudwego.io/blog/releases/hertz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/releases/hertz/</guid><description/></item><item><title>Blog: Hertz Release v0.9.0</title><link>https://www.cloudwego.io/blog/2024/05/30/hertz-release-v0.9.0/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/05/30/hertz-release-v0.9.0/</guid><description>
&lt;p>The Hertz v0.9.0 release mainly supports general iteration and optimization.&lt;/p>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1101">#1101&lt;/a>] feat: add method to exile requestContext&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1056">#1056&lt;/a>] feat: add more default type for binding&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1057">#1057&lt;/a>] feat: add SetHandlers when fast fail for no valid host and invalid rPath&lt;/li>
&lt;/ol>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/921">#921&lt;/a>] optimize(hz): sort route strictly which preventing sorting inconsistencies&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1037">#1037&lt;/a>] optimize: filter shortConnErr in tracer&lt;/li>
&lt;/ol>
&lt;h2 id="fix">Fix&lt;/h2>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1102">#1102&lt;/a>] fix: resp set trailer will panic&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1107">#1107&lt;/a>] fix: router sort&lt;/li>
&lt;/ol>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ol>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/1064">#1064&lt;/a>] refactor(hz): client query enum&lt;/li>
&lt;/ol></description></item><item><title>Blog: Hertz Release v0.8.0</title><link>https://www.cloudwego.io/blog/2024/01/12/hertz-release-v0.8.0/</link><pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/01/12/hertz-release-v0.8.0/</guid><description>
&lt;p>In Hertz v0.8.0, in addition to the regular iterative optimization, we have also introduced an important feature.&lt;/p>
&lt;h2 id="partitioned-cookies">Partitioned cookies&lt;/h2>
&lt;p>In Hertz v0.8.0, we support the partitioned cookies feature.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz/pull/1041">https://github.com/cloudwego/hertz/pull/1041&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="background">Background&lt;/h3>
&lt;p>Third-party cookies provide the ability for cross-site tracking for the web, and their existence poses a huge threat to the privacy and security of web users. Chrome will disable third-party cookies for 1% of users starting from Quarter 1 of 2024, and gradually expand the disabling scope to 100% starting from the third quarter of 2024.
Partitioned Cookies Cookies Having Independent Partitioned State (CHIPS) serve as an alternative to third-party cookies, providing the ability to carry third-party cookies on cross-site requests.&lt;/p>
&lt;h4 id="set-partitioned-cookies-with-the-set-cookie-header">Set Partitioned Cookies with the Set-Cookie Header&lt;/h4>
&lt;pre tabindex="0">&lt;code>Set-Cookie header:
Set-Cookie: __Host-name=value; Secure; Path=/; SameSite=None; Partitioned;
&lt;/code>&lt;/pre>&lt;h3 id="how-to">How to&lt;/h3>
&lt;h4 id="upgrade-hertz-version">Upgrade Hertz version&lt;/h4>
&lt;p>Hertz added support for Partitioned Cookies in v0.8.0. You need to upgrade to &amp;gt; = v0.8.0 to use Partitioned Cookies.&lt;/p>
&lt;h4 id="how-to-use-partitioned-cookies">How to use Partitioned Cookies&lt;/h4>
&lt;p>Currently, Hertz supports Partitioned Cookies, but does not yet support passing whether it is Partitioned through SetCookie. We will add this feature in the next minor version. Before that, you can refer to the following code example to use Partitioned Cookies.&lt;/p>
&lt;pre tabindex="0">&lt;code>func SetPartitionedCookie(c *app.RequestContext, name, value string, maxAge int, path, domain string, sameSite protocol.CookieSameSite, secure, httpOnly bool) {
if path == &amp;#34;&amp;#34; {
path = &amp;#34;/&amp;#34;
}
cookie := protocol.AcquireCookie()
defer protocol.ReleaseCookie(cookie)
cookie.SetKey(name)
cookie.SetValue(url.QueryEscape(value))
cookie.SetMaxAge(maxAge)
// If name has the prefix of __Host，Path must be /
cookie.SetPath(path)
cookie.SetDomain(domain)
// Secure must be true。
cookie.SetSecure(secure)
cookie.SetHTTPOnly(httpOnly)
cookie.SetSameSite(sameSite)
cookie.SetPartitioned(true)
c.Response.Header.SetCookie(cookie)
}
func main() {
h := server.Default()
h.GET(&amp;#34;/partitioned&amp;#34;, func(ctx context.Context, c *app.RequestContext) {
SetPartitionedCookie(c, &amp;#34;user&amp;#34;, &amp;#34;hertz&amp;#34;, 1, &amp;#34;/&amp;#34;, &amp;#34;localhost&amp;#34;, protocol.CookieSameSiteNoneMode, true, true)
c.JSON(consts.StatusOK, utils.H{&amp;#34;partitioned&amp;#34;: &amp;#34;yes&amp;#34;})
})
h.Spin()
}
&lt;/code>&lt;/pre>&lt;p>Verify Set-Cookie Header&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -v http://localhost:8888/partitioned
* Trying [::1]:8888...
* Connected to localhost (::1) port 8888
&amp;gt; GET /partitioned HTTP/1.1
&amp;gt; Host: localhost:8888
&amp;gt; User-Agent: curl/8.4.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: hertz
&amp;lt; Date: Fri, 12 Jan 2024 07:01:02 GMT
&amp;lt; Content-Type: application/json; charset=utf-8
&amp;lt; Content-Length: 21
&amp;lt; Set-Cookie: user=hertz; max-age=1; domain=localhost; path=/; HttpOnly; secure; SameSite=None; Partitioned
&amp;lt;
* Connection #0 to host localhost left intact
{&amp;#34;partitioned&amp;#34;:&amp;#34;yes&amp;#34;}%
&lt;/code>&lt;/pre></description></item><item><title>Blog: Hertz Release v0.7.0</title><link>https://www.cloudwego.io/blog/2023/09/26/hertz-release-v0.7.0/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/09/26/hertz-release-v0.7.0/</guid><description>
&lt;p>In version 0.7.0 of Hertz, in addition to regular iterative optimization, we also brought several important features.&lt;/p>
&lt;h2 id="refactor-binding">Refactor Binding&lt;/h2>
&lt;p>In version 0.7.0 of Hertz，we refactored the binding feature for Hertz&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz/pull/541">https://github.com/cloudwego/hertz/pull/541&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="description-of-refactoring">Description Of Refactoring&lt;/h3>
&lt;p>In version 0.7.0 of Hertz，we refactored the binding feature for Hertz to better support user requirements。This refactoring has the following characteristics:&lt;/p>
&lt;ul>
&lt;li>Consistent functionality:
&lt;ul>
&lt;li>Binder: After the refactoring, we have implemented a default Binder within Hertz, which has the same functionality as before. The previous binding capabilities have been implemented as extensions under hertz-contrib.&lt;/li>
&lt;li>Validator: We are still using go-tagexpr as the default implementation to ensure consistent functionality.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Converged configuration:
&lt;ul>
&lt;li>Before the refactoring, the behavior of parameter binding was mostly configured through global parameters, which could lead to conflicts when multiple components were configured.&lt;/li>
&lt;li>After the refactoring, the binding and validation configurations are injected into the Hertz Engine through &lt;code>BindConfig&lt;/code> and &lt;code>ValidateConfig&lt;/code> struct using the &amp;lsquo;WithOption&amp;rsquo; function. This not only unifies the configuration format but also avoids configuration conflicts.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Customizable Binder and Validator:
&lt;ul>
&lt;li>Custom Binder: You can use &amp;ldquo;WithCustomBinder&amp;rdquo; to inject your own custom Binder. We have already provided an extension called hertz-contrib/binding/go_tagexpr.&lt;/li>
&lt;li>Custom Validator: You can use &amp;ldquo;WithCustomValidator&amp;rdquo; to inject your own custom Validator. We have also extended go-playground/validator for this purpose.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Performance improvements: The refactoring has resulted in improved binding performance compared to the previous version. Please refer to the benchmark data below for more details.&lt;/li>
&lt;/ul>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/cloudwego/hertz/pkg/app/server/binding&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/cloudwego/hertz/pkg/app/server&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bindConfig&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">binding&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewBindConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">bindConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LooseZeroMode&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">h&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">server&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithBindConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bindConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">h&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Spin&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="benchmark-data">Benchmark Data&lt;/h3>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz-benchmark/tree/main/binding">https://github.com/cloudwego/hertz-benchmark/tree/main/binding&lt;/a>&lt;/p>
&lt;h2 id="full-release-note">Full Release Note&lt;/h2>
&lt;p>The complete Release Note can refer to:&lt;/p>
&lt;ul>
&lt;li>Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.7.0">https://github.com/cloudwego/hertz/releases/tag/v0.7.0&lt;/a>&lt;/li>
&lt;li>Hz(scaffolding): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.7.0">https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.7.0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz Release v0.6.0</title><link>https://www.cloudwego.io/blog/2023/03/02/hertz-release-v0.6.0/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/03/02/hertz-release-v0.6.0/</guid><description>
&lt;p>In version 0.6.0 of Hertz, in addition to regular iterative optimization, we also brought several important features.&lt;/p>
&lt;h2 id="http-trailer-support">HTTP Trailer support&lt;/h2>
&lt;p>In Hertz v0.6.0, we support encoding and parsing of HTTP Trailer.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz-examples/tree/main/trailer">https://github.com/cloudwego/hertz-examples/tree/main/trailer&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Write Trailer&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RequestContext&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Trailer&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hertz&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Good&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Trailer&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hertz&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Good&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Read Trailer&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RequestContext&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Request&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Trailer&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hertz&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Header&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Trailer&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hertz&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="http11-supports-for-response-writer-hijacking">HTTP/1.1 supports for Response Writer hijacking&lt;/h2>
&lt;p>In Hertz v0.6.0, we extended the HTTP/1.1 write request approach. Based on the original write request flow, we support users to hijack the Response Writer in the business handler/middleware to achieve a more flexible write request approach.&lt;/br>
In simple terms, all the original &amp;ldquo;underlying write&amp;rdquo; logic is unified behind the handler/middleware return, which has two obvious limitations.&lt;/p>
&lt;ol>
&lt;li>The user has no control over the timing of the request flush to the other end&lt;/li>
&lt;li>For the scenario of incremental data generation &amp;amp; real-time writing to the peer by chunk, the usage is relatively complicated and restrictive on top of the old architecture&lt;/li>
&lt;/ol>
&lt;p>Based on this, we extend a Writer that provides the ability to flush request headers and request bodies on its own, while providing support for users to send chunk data on demand. See &lt;a href="https://github.com/cloudwego/hertz/pull/610">https://github.com/cloudwego/hertz/pull/610&lt;/a> for a detailed implementation.&lt;/p>
&lt;h3 id="major-changes">Major Changes&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Added an interface definition that extends Writer, &lt;code>Writers&lt;/code> that implement this interface can be used to hijack Response Writer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ExtWriter&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">io&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Writer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Flush&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Finalize will be called by framework before the writer is released.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Implementations must guarantee that Finalize is safe for multiple calls.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Finalize&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Provides a &lt;code>Chunk Writer&lt;/code> that implements the above interface (you can refer to this for similar requirements): &lt;code>chunkedBodyWrite&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HTTP/1.1 does the corresponding processing (skipping the default write request logic) for Response write operations where the Writer has been hijacked, and finally calls the &lt;code>Finalize()&lt;/code> method of the &lt;code>ExtWriter&lt;/code> interface to complete a request write back&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>As above, Hertz provides a default &lt;code>ExtWriter&lt;/code> implementation to meet the user&amp;rsquo;s active flush needs in the handler/middleware, and it is very simple to use.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">h&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GET&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/flush/chunk&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">RequestContext&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Hijack the writer of response&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">HijackWriter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">resp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewChunkedBodyWriter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Response&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetWriter&lt;/span>&lt;span style="color:#000;font-weight:bold">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;chunk %d: %s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">strings&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Repeat&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hi~&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">))))&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// nolint: errcheck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Flush&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// nolint: errcheck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sleep&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Millisecond&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="scaffolding-tool-usage-optimization--best-practices">Scaffolding Tool Usage Optimization &amp;amp; Best Practices&lt;/h2>
&lt;p>In hz v0.6.0, we have made a number of optimizations to the organization of the generated code, allowing for a more flexible code organization&lt;/p>
&lt;h3 id="major-optimization">Major Optimization&lt;/h3>
&lt;ul>
&lt;li>The &lt;code>new&lt;/code> command supports the &amp;ldquo;router_dir&amp;rdquo; option and works with the existing &amp;ldquo;handler_dir&amp;rdquo; and &amp;ldquo;model_dir&amp;rdquo; to fully customize the path to the IDL generation product; it also persists these custom options in the &amp;ldquo;.hz&amp;rdquo; file, which can be read automatically during &lt;code>update&lt;/code>, reducing the complexity of the command&lt;/li>
&lt;li>Add the ability to search up the &amp;ldquo;go.mod&amp;rdquo; file so that hertz can share the same &amp;ldquo;go module&amp;rdquo; with other projects when it is a subproject&lt;/li>
&lt;li>Add the ability to reference third-party IDL products in the &amp;ldquo;handler&amp;rdquo;, so that IDL products can be maintained separately in the third-party repository and not stored in the project directory, further enhancing IDL management capabilities&lt;/li>
&lt;/ul>
&lt;h3 id="best-practices">Best Practices&lt;/h3>
&lt;p>We have rewritten &amp;ldquo;&lt;a href="https://github.com/cloudwego/biz-demo/pull/26">biz-demo/easy-note&lt;/a>&amp;rdquo; with &amp;ldquo;hz v0.6.0&amp;rdquo; to take advantage of the following hz features&lt;/p>
&lt;ul>
&lt;li>Generate hertz client call code for accessing &amp;ldquo;api server&amp;rdquo; based on IDL using the capabilities of &amp;ldquo;hz client&amp;rdquo;&lt;/li>
&lt;li>Reorganize the &amp;ldquo;api server&amp;rdquo; code with custom &amp;ldquo;router_dir&amp;rdquo;, &amp;ldquo;handler_dir&amp;rdquo;, and &amp;ldquo;model_dir&amp;rdquo; options, and remove the &amp;ldquo;biz&amp;rdquo; directory restriction&lt;/li>
&lt;li>Use the ability to &amp;ldquo;search up go.mod&amp;rdquo; so that &amp;ldquo;api server&amp;rdquo; can share the same &amp;ldquo;go module&amp;rdquo; as a subproject of &amp;ldquo;easy-note&amp;rdquo;&lt;/li>
&lt;li>Use the ability of &amp;ldquo;handler to refer to third-party IDL products&amp;rdquo; and the ability of &amp;ldquo;hz model&amp;rdquo; to store IDL products separately in the &amp;ldquo;easy-note&amp;rdquo; project and not in the &amp;ldquo;api server&amp;rdquo; subproject&lt;/li>
&lt;/ul>
&lt;h2 id="full-release-note">Full Release Note&lt;/h2>
&lt;p>The complete Release Note can refer to:&lt;/p>
&lt;ul>
&lt;li>Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.6.0">https://github.com/cloudwego/hertz/releases/tag/v0.6.0&lt;/a>&lt;/li>
&lt;li>Hz(scaffolding): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.6.0">https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.6.0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Getting Started with Hertz: Performance Testing Guide</title><link>https://www.cloudwego.io/blog/2023/02/24/getting-started-with-hertz-performance-testing-guide/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/02/24/getting-started-with-hertz-performance-testing-guide/</guid><description>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>On September 8, 2021, ByteDance officially announced the open-sourcing of &lt;a href="https://github.com/cloudwego">CloudWeGo&lt;/a>.
CloudWeGo is a set of microservices middleware developed by ByteDance, characterized by high performance, strong scalability, and high stability.
It focuses on solving the difficulties of microservices communication and governance, and meets the demands of different businesses in different scenarios.
On June 21, 2022, the CloudWeGo team has officially open-sourced &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a>, ByteDance&amp;rsquo;s largest HTTP framework. Hertz has gained a lot of attention from users since its release,
and has received 3K+ stars by now. Many users have tested it themselves, and we are very grateful for your attention and support.
This blog aims to share the scenarios and technical issues that developers need to be aware of when conducting load testing on Hertz.
These suggestions can help users better optimize Hertz based on real HTTP scenarios to better fit their business needs and achieve optimal performance.
Users can also refer to the official load testing project &lt;a href="https://github.com/cloudwego/hertz-benchmark">hertz-benchmark&lt;/a> for more details.&lt;/p>
&lt;h2 id="characteristics-of-http-microservices">Characteristics of HTTP Microservices&lt;/h2>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> was born out of large-scale microservices practice at ByteDance, and is naturally designed for microservices scenarios.
Therefore, in the following, we will first introduce the characteristics of the HTTP microservices to facilitate developers&amp;rsquo; deeper understanding of &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a>&amp;rsquo;s design considerations.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>HTTP Communication Model&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Communication between microservices typically follows a Ping-Pong model. In addition to conventional throughput performance metrics, developers also need to consider the average latency of each HTTP request.
While increasing the number of machines can quickly resolve throughput bottlenecks, reducing latency, which significantly affects user experience, is not as easy.&lt;/p>
&lt;p>In the environment of microservices, a single call often requires collaboration from multiple microservices. Even if each node has low latency, the final latency on the entire chain can be amplified.
Therefore, latency is a more critical metric for developers to pay attention to in microservices. &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> has made certain optimizations for latency while ensuring throughput.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The Use of Long and Short Connections&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Since establishing a TCP connection requires a three-way handshake, the overhead of creating a new connection for each request can be very high for latency-sensitive services.
Therefore, it is recommended to use persistent connections to complete requests whenever possible. In HTTP 1.1, Long connections are also the default option.
However, there is no silver bullet, as maintaining connections also consumes resources, and the horizontal scalability of persistent connections is not as good as that of short connections.
Therefore, in some scenarios, long connections may not be suitable. For example, in a scenario where configurations need to be pulled periodically,
the connection establishment delay may not have a significant impact on configurations, and it may be more appropriate to use short connections if horizontal scalability is a concern when the configuration center is under high load.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Packet Size&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>The package size of a service depends on the actual business scenario. In HTTP scenarios, data can be placed in query, path, header, body, etc., and different locations have different effects on parsing.
HTTP header is an identifier protocol, and the framework does not know how many headers there are until it finds a specific identifier. Therefore, the framework needs to receive all the headers before it can complete the parsing,
which is not very friendly to the framework&amp;rsquo;s memory model. &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> has also made special optimizations for header parsing, allocating enough buffer space for headers to reduce the overhead of cross-package copying during header processing.&lt;/p>
&lt;p>Meanwhile, in the internal statistics of online services at ByteDance, it was found that most packages are within 1K (but too small packages have no practical significance, such as a fixed return of &amp;ldquo;hello world&amp;rdquo;).
At the same time, there is no upper limit on the size of large packages, and various package sizes are involved. Therefore, &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> has focused on optimizing the performance (throughput and latency) of packages within the most commonly used range of 128k or less.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Concurrency Quantity&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>Each instance may have multiple upstreams and will not only accept requests from a single instance. Moreover, HTTP 1 doesn&amp;rsquo;t support multiplexing,
and each connection can only handle one request at a time. Therefore, the Server needs to accept multiple connections and process them simultaneously.&lt;/p>
&lt;p>Different services have different connection utilization rates. For example, load testing services have high connection utilization rates, and a new request is made immediately after the completion of the previous request.
Some services have low connection utilization rates, even though they are long-lived, they are only used once. The connection models used by these two services are not the same.&lt;/p>
&lt;p>For the former, the goroutine per connection model should be used to reduce the overhead of context switching. For the latter, a coroutine pool should be used to reduce the scheduling overhead of too many goroutines.
&lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> supports both models, and users can choose the appropriate configuration based on their business needs.&lt;/p>
&lt;h2 id="load-testing-for-http-scenarios">Load Testing for HTTP Scenarios&lt;/h2>
&lt;h3 id="using-scenarios-that-resemble-real-usage">Using Scenarios That Resemble Real Usage&lt;/h3>
&lt;p>There are many load testing projects on GitHub and performance testing reports available online, but they may not be tailored to your specific needs.
For example, in a real-world scenario, would you create a project that only responds with &lt;strong>&lt;code>hello world&lt;/code>&lt;/strong> no matter what the client sends? Unfortunately, many load testing projects do just that.&lt;/p>
&lt;p>Before conducting load testing, consider your actual usage scenarios, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Long vs Short Connections&lt;/strong>: Determine whether using long or short connections is more suitable for your scenario.&lt;/li>
&lt;li>&lt;strong>Estimating Connection Usage&lt;/strong>: If using long connections and connection usage is high (which is the case in most scenarios), use the default configuration.
If connection usage is low, consider adding the configuration option &lt;strong>&lt;code>server.WithIdleTimeout(0)&lt;/code>&lt;/strong> to modify the goroutine per connection model to a coroutine pool model and conduct comparative testing.&lt;/li>
&lt;li>&lt;strong>Determining Data Location and Size&lt;/strong>: As mentioned earlier, data in different locations (such as query, header, body, etc.) and of different sizes can affect the framework&amp;rsquo;s performance.
If the performance of all frameworks is similar, consider using a different data transmission location.&lt;/li>
&lt;li>&lt;strong>Determining Concurrency Quantity&lt;/strong>: Some services are lightweight on business logic but heavy on framework, resulting in high framework concurrency.
Conversely, some services are heavy on business logic but light on framework, resulting in low framework concurrency.&lt;/li>
&lt;/ul>
&lt;p>If you just want to test the performance of the framework, you can use the common scenario: &lt;strong>long connection, high connection usage, 1k body, 100 concurrency&lt;/strong>, and so on.
The &lt;a href="https://github.com/cloudwego/hertz-benchmark">hertz-benchmark&lt;/a> repository also uses this default load test configuration.
At the same time, the &lt;a href="https://github.com/cloudwego/hertz-benchmark">hertz-benchmark&lt;/a> repository also provides configuration options for users to modify headers, body, and concurrency, making it easy to customize the load test to fit their own needs.&lt;/p>
&lt;h3 id="determine-the-target-of-load-testing">Determine the Target of Load Testing&lt;/h3>
&lt;p>Measuring the performance of an RPC framework requires thinking from two perspectives: the Client perspective and the Server perspective. In a large-scale business architecture,
the upstream Client may not necessarily use the downstream framework, and the downstream services called by developers are also likely to be different. This is even more complicated when considering the situation of Service Mesh.&lt;/p>
&lt;p>Some load testing projects usually conduct load testing for Client and Server processes in a hybrid deployment, and then obtain performance data for the &lt;strong>entire framework&lt;/strong>, which may not be consistent with the actual operation in production.&lt;/p>
&lt;p>If you want to conduct load testing the Server, you should give the Client as many resources as possible and push the Server to the limit, and vice versa.
If both the Client and Server are only given 4 cores for load testing, developers will not be able to determine the performance data under which perspective, let alone provide actual reference for online services.&lt;/p>
&lt;h3 id="use-dedicated-cpus">Use Dedicated CPUs&lt;/h3>
&lt;p>Although online applications usually share CPUs among multiple processes, in a load testing scenario, both the Client and Server processes are extremely busy. Sharing CPUs at this time will result in a large number of context switches, which will make the data less reliable and prone to large fluctuations.&lt;/p>
&lt;p>Therefore, we recommend isolating Client and Server processes on different CPUs or different dedicated machines. If you want to further avoid the impact of other processes, you can also use the nice -n -20 command to increase the scheduling priority of the load testing process.&lt;/p>
&lt;p>In addition, if conditions permit, using physical machines instead of virtual machines on cloud platforms will make the test results more rigorous and reproducible.&lt;/p>
&lt;h2 id="performance-data-reference">Performance Data Reference&lt;/h2>
&lt;p>On the premise of meeting the above requirements, we compared the load testing result of multiple frameworks based on the latest version. The pressure test code is in the &lt;a href="https://github.com/cloudwego/hertz-benchmark">hertz-benchmark&lt;/a> repository.
With the goal of fully filling the load of Server, &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> has the lowest P99 latency of all the frameworks tested, and the throughput is also in the first tier and under continuous optimization.&lt;/p>
&lt;ul>
&lt;li>CPU: AMD EPYC 7Y83 64-Core Processor 2.7GHz
&lt;ul>
&lt;li>limits: server 4-CPUs，client 16-CPUS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OS：Debian GNU/Linux 10 (buster)&lt;/li>
&lt;li>Go 1.19&lt;/li>
&lt;li>&lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.3.2">hertz v0.3.2&lt;/a>，&lt;a href="https://github.com/valyala/fasthttp/releases/tag/v1.40.0">fasthttp v1.40.0&lt;/a>，
&lt;a href="https://github.com/gin-gonic/gin/releases/tag/v1.8.1">gin v1.8.1&lt;/a>，&lt;a href="https://github.com/gofiber/fiber/releases/tag/v2.38.1">fiber v2.38.1&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Hertz-benchmark/1.png" alt="image">&lt;/p>
&lt;p align="center">Comparison of throughput and latency of four frameworks&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Hertz-benchmark/2.png" alt="image">&lt;/p>
&lt;p align="center">Comparison of throughput and latency of three frameworks&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>As a very large scale enterprise microservices HTTP framework, &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> was designed to solve a variety of problems in the large-scale microservices scenario.
In the process of promotion, we encountered all kinds of services and solved many kinds of problem.
Based on those experience, we wrote this blog. As a developer, you are always welcome to choose the right tool for your own scenario based on the testing guide provided above.
If you have any questions, feel free to raise an &lt;a href="https://github.com/cloudwego/hertz/issues">Issue&lt;/a>.&lt;/p></description></item><item><title>Blog: Hertz Release v0.5.0</title><link>https://www.cloudwego.io/blog/2023/01/12/hertz-release-v0.5.0/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/01/12/hertz-release-v0.5.0/</guid><description>
&lt;p>In version 0.5.0 of Hertz, in addition to regular iterative optimization, we also brought several important features.&lt;/p>
&lt;h2 id="network-layer-and-protocol-layer-support-stream-based-interface">Network layer and protocol layer support stream-based interface&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz/pull/467">https://github.com/cloudwego/hertz/pull/467&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>In the Hertz v0.5.0 version, we have further enhanced the scalability of the Hertz transport layer &amp;amp; protocol layer, supporting the seamless connection of the stream-based transport layer protocol QUIC, and the &lt;a href="https://github.com/cloudwego/hertz/issues/458">HTTP3 protocol&lt;/a> built on top of it.
In addition, on this basis, we have added and improved functions such as &amp;ldquo;ALPN&amp;rdquo; (application layer protocol negotiation), &amp;ldquo;QUIC/TLS parallel monitoring&amp;rdquo; (QUIC/TLS parallel monitoring), &amp;ldquo;Alt-Svc&amp;rdquo; (alternative service).&lt;/p>
&lt;h3 id="major-changes">Major Changes&lt;/h3>
&lt;h4 id="transport-layer">Transport layer&lt;/h4>
&lt;p>On the basis of ensuring compatibility performance, we have added an abstract stream-based network connection interface &lt;code>StreamConn&lt;/code>, and adjusted the interaction logic between the transport layer and the protocol layer to achieve the correct protocol layer for the distribution of connection types Processing (protocol server).
For scenarios that need to monitor TCP (TLS) and UDP (QUIC) at the same time, we provide a &lt;code>WithAltTransporter&lt;/code> option, which facilitates passing the backup transporter to the main transporter, and facilitates the ability to monitor QUIC/TLS in parallel.&lt;/p>
&lt;h4 id="protocol-layer">Protocol Layer&lt;/h4>
&lt;p>Support adding a stream-based protocol layer implementation (protocol server) &lt;code>StreamServer&lt;/code>, so as to build a corresponding processing protocol (HTTP/3) on top of the newly added stream-based transport layer extension.
In order to facilitate the configuration of alternative service meta-information for a main protocol (HTTP/3), &lt;code>ProtocolSuite&lt;/code> exposes the &lt;code>SetAltHeader&lt;/code> interface.
At the same time, we also designed the ALPN capability for &lt;code>StreamConn&lt;/code>, so as to provide the ability of protocol negotiation in QUIC.&lt;/p>
&lt;h4 id="common-layer">Common layer&lt;/h4>
&lt;p>At the same time, we have added an auxiliary function that can convert with the Golang standard Handler in the general layer, so as to quickly port the implementation based on the Golang standard Handler to Hertz. The &lt;a href="https://github.com/hertz-contrib/http3">QUIC &amp;amp; HTTP/3 extension&lt;/a> based on &lt;a href="https://github.com/lucas-clemente/quic-go">quic-go&lt;/a> provided later /pull/1), the capabilities provided by this function are used.&lt;/p>
&lt;h4 id="feature-status">Feature Status&lt;/h4>
&lt;p>The Hertz core library capability has been released, and the specific implementation will be released in the form of &lt;a href="https://github.com/hertz-contrib/http3/pull/1">extension package&lt;/a>, welcome to try~&lt;/p>
&lt;p>For more detailed design instructions, please refer to: &lt;a href="https://www.cloudwego.io/zh/blog/2023/08/02/hertz-%E6%94%AF%E6%8C%81-quic-http/3/">Hertz supports QUIC &amp;amp; HTTP/3&lt;/a>&lt;/p>
&lt;h2 id="scaffolding-tools-support-generating-hertz-client-code">Scaffolding tools support generating hertz client code&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz/pull/471">https://github.com/cloudwego/hertz/pull/471&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>In the v0.5.0 version of the scaffolding tool (Hz), we support the function of automatically generating the hertz client code based on IDL, and realize the one-click call of the HTTP request in the form of an RPC call.
Instructions:&lt;/p>
&lt;blockquote>
&lt;p>For details, see: &lt;a href="https://github.com/cloudwego/hertz-examples/tree/main/hz_client">https://github.com/cloudwego/hertz-examples/tree/main/hz_client&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>Define the IDL&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">namespace&lt;/span> &lt;span style="color:#204a87;font-weight:bold">go&lt;/span> &lt;span style="color:#000">toutiao&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">middleware&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">hzClient&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">QueryReq&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">QueryValue&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span> &lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;query1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000">Resp&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">Resp&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">service&lt;/span> &lt;span style="color:#000">Hertz121&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Resp&lt;/span> &lt;span style="color:#000">QueryMethod&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">QueryReq&lt;/span> &lt;span style="color:#000">request&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/query&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span> &lt;span style="color:#000">handler_path&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">base_domain&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://127.0.0.1:8888&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Generate code&lt;/li>
&lt;/ol>
&lt;p>Based on the above IDL, the server and client codes can be generated separately:&lt;/p>
&lt;p>Server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">hz&lt;/span> &lt;span style="color:#000">new&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">--&lt;/span>&lt;span style="color:#000">idl&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">psm&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">thrift&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">--&lt;/span>&lt;span style="color:#000">handler_by_method&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">slim&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Client:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">hz&lt;/span> &lt;span style="color:#000">client&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">--&lt;/span>&lt;span style="color:#000">idl&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">psm&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">thrift&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">--&lt;/span>&lt;span style="color:#000">model_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">hertz_gen&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">slim&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">--&lt;/span>&lt;span style="color:#000">client_dir&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">hz_client&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Call the client code to initiate an HTTP request to realize the intercommunication between the client end and the server end&lt;/li>
&lt;/ol>
&lt;h2 id="full-release-note">Full Release Note&lt;/h2>
&lt;p>The complete Release Note can refer to:&lt;/p>
&lt;ul>
&lt;li>Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.5.0">https://github.com/cloudwego/hertz/releases/tag/v0.5.0&lt;/a>&lt;/li>
&lt;li>Hz(scaffolding): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.5.0">https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.5.0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz Release v0.4.0</title><link>https://www.cloudwego.io/blog/2022/10/28/hertz-release-v0.4.0/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/10/28/hertz-release-v0.4.0/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/289">#289&lt;/a>] feat: render support IndentedJSON.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/304">#304&lt;/a>] feat: support errors format for the recovery middleware.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/278">#278&lt;/a>] feat: add compile tag for json implementation.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/239">#239&lt;/a>] feat: add retry extension for client.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/265">#265&lt;/a>] feat: add closeNoResetBuffer method for standard network.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/258">#258&lt;/a>] feat: errors support format.&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/295">#295&lt;/a>] optimize: ignore flushing error when connection is closed or reset.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/322">#322&lt;/a>] optimize: modify the default log of the recovery middleware.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/266">#266&lt;/a>] optimize(hlog): distinguish systemlogger and defaultlogger.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/280">#280&lt;/a>] optimize: add listening log when using standard lib.&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/318">#318&lt;/a>] refactor: add SetRetryIf to remain compatible.&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/299">#299&lt;/a>] test: enrich ut for pkg/protocol/header.go.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/290">#290&lt;/a>] test: enrich ut for pkg/app/server/option.go.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/274">#274&lt;/a>] test: increase internal/bytesconv unit test statement coverage.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/285">#285&lt;/a>] test: enrich unit tests for pkg/protocol/request.go.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/271">#271&lt;/a>] test: ut supplementary for pkg/network.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/264">#264&lt;/a>] test: add ut for hertz/pkg/common/adaptor.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/267">#267&lt;/a>] test(pkg/common/config): pkg/common/config test coverage.&lt;/li>
&lt;/ul>
&lt;h2 id="docs">Docs&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/328">#328&lt;/a>] docs: add lark extension to readme.md.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/325">#325&lt;/a>] docs: update performance data in README and README_cn.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/307">#307&lt;/a>] docs(README): add hertz extensions list.&lt;/li>
&lt;/ul>
&lt;h2 id="style">Style&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/316">#316&lt;/a>] style: remove empty comments for license.&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/272">#272&lt;/a>] chore: upgrade sonic version.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/310">#310&lt;/a>] chore: change license header style to avoid format error of buildtag from CI check.&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz Release v0.3.2</title><link>https://www.cloudwego.io/blog/2022/09/20/hertz-release-v0.3.2/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/09/20/hertz-release-v0.3.2/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/198">#198&lt;/a>] feat: add the function to get the client dialer name.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/251">#251&lt;/a>] feat: add a startup log to display the name of the loaded network library.&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/238">#238&lt;/a>] refactor: refactor the client logic initialize for HostClient and TLSHostClient.&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/226">#226&lt;/a>] optimize: add a warning log for illegal status code.&lt;/li>
&lt;/ul>
&lt;h2 id="fix">Fix&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/249">#249&lt;/a>] fix: add channel signal judge to allow onShutdownHook to complete or timeout.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/232">#232&lt;/a>] fix: fix some trailing slash redirect bugs.&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/217">#217&lt;/a>] chore: update pr template.&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz Release v0.3.0</title><link>https://www.cloudwego.io/blog/2022/08/29/hertz-release-v0.3.0/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/08/29/hertz-release-v0.3.0/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/182">#182&lt;/a>] feat: add service registration &amp;amp; service discovery &amp;amp; load balancing.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/6">[#6]&lt;/a> feat: add zookeeper register.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/7">[#7]&lt;/a> feat: add nacos registry.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/8">[#8]&lt;/a> feat: Support Hertz to use Consul for service discovery and registration.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/9">[#9]&lt;/a> feat: add polaris registry.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/14">[#14]&lt;/a> feat: add etcd registry.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/15">[#15]&lt;/a> feat: support servicecomb.&lt;/li>
&lt;li>&lt;a href="https://github.com/hertz-contrib/registry/pull/16">[#16]&lt;/a> feat: support service registration and discovery with Netflix Eureka.&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/175">#175&lt;/a>] refactor: distinguish between global dialer and local dialer.&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/205">#205&lt;/a>] optimize: func checkPathValid returns true if the path is valid.&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/174">#174&lt;/a>] test: correcting TestRouterMiddlewareAndStatic.&lt;/li>
&lt;/ul>
&lt;h2 id="fix">Fix&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/190">#190&lt;/a>] fix: modify the same middleware name.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/192">#192&lt;/a>] fix: fix the problem of the same package name in handler.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/208">#208&lt;/a>] fix: deregister failed when service shutdown.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/202">#202&lt;/a>] fix: get wrong local loopback IPv6.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/196">#196&lt;/a>] fix: typo.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/155">#155&lt;/a>] fix: name_style_thrift.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/169">#169&lt;/a>] fix: thrift namespace.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/184">#184&lt;/a>] fix: hijack conn throw timeout err when using standard network lib.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/162">#162&lt;/a>] fix: generate router register error.&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/189">#189&lt;/a>] Revert &amp;ldquo;fix: generate router register error&amp;rdquo;.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/203">#203&lt;/a>] add v6 support for AddMissingPort function.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/186">#186&lt;/a>] chore: support codecov.&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz Release v0.2.0</title><link>https://www.cloudwego.io/blog/2022/07/22/hertz-release-v0.2.0/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/07/22/hertz-release-v0.2.0/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/124">#124&lt;/a>] feat: add option to remove hijackConnPool.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/116">#116&lt;/a>] feat: update for template.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/130">#130&lt;/a>] feat: add a warning log for invalid character in Cookie.Value.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/143">#143&lt;/a>] feat: custom signal to graceful shutdown&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/114">#114&lt;/a>] feat: release buffer in standard network method.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/112">#112&lt;/a>] feat: parse post args in bodystream.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/105">#105&lt;/a>] feat: client abstracts hostclient layer.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/92">#92&lt;/a>] feat: hz support windows.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/102">#102&lt;/a>] feat: client removes default retry logic.&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/111">#111&lt;/a>] optimize: pre-allocate slice when calling bytesconv.AppendHTTPDate.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/128">#128&lt;/a>] optimize: remove useless judgement.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/108">#108&lt;/a>] optimize: avoid parsing regular expression repeatedly.&lt;/li>
&lt;/ul>
&lt;h2 id="chore">Chore&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/125">#125&lt;/a>] Update pr-check.yml.&lt;/li>
&lt;/ul>
&lt;h2 id="fix">Fix&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/104">#104&lt;/a>] fix: use defer to guarantee that mutex will be unlocked.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/96">#96&lt;/a>] fix: ci exec /bin/license-eye: exec format error&lt;/li>
&lt;/ul>
&lt;h2 id="style">Style&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/103">#103&lt;/a>] style: fixed the typo &amp;ldquo;ungzipped&amp;rdquo; to &amp;ldquo;gunzipped&amp;rdquo;.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/90">#90&lt;/a>] style: use const var and remove duplicate type conversions.&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/94">#94&lt;/a>] refactor: use appendCookiePart to simplify code.&lt;/li>
&lt;/ul>
&lt;h2 id="docs">Docs&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/97">#97&lt;/a>] docs: use comma to separate &amp;amp;&amp;amp; remove extra space.&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz, an Ultra Large Scale Enterprise-Level Microservice HTTP Framework, is Now Officially Open Source!</title><link>https://www.cloudwego.io/blog/2022/06/21/hertz-an-ultra-large-scale-enterprise-level-microservice-http-framework-is-now-officially-open-source/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/06/21/hertz-an-ultra-large-scale-enterprise-level-microservice-http-framework-is-now-officially-open-source/</guid><description>
&lt;p>Today, after more than a year of internal use and iteration at ByteDance, &lt;strong>&lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a>&lt;/strong>, a &lt;strong>high-performance enterprise-level HTTP framework&lt;/strong>, is officially open-sourced on &lt;a href="https://github.com/cloudwego">CloudWeGo&lt;/a>! Hertz has become the largest HTTP framework within ByteDance, with more than &lt;strong>10,000&lt;/strong> online services and a peak QPS (Query Per Second) of more than &lt;strong>40 million&lt;/strong>. It has the characteristics of high usability, easy expansion, and low latency. For the ByteDance service framework team and CloudWeGo, &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> will not only be an open source project, but also a real ultra-large-scale enterprise-level practice.&lt;/p>
&lt;p>Project website: &lt;a href="https://github.com/cloudwego/hertz">https://github.com/cloudwego/hertz&lt;/a>&lt;/p>
&lt;p>In the future, ByteDance infrastructure team will iterate on the Hertz open source library, maintaining a unified codebase both internally and externally, and facilitating iterative evolution to enhance user experience.&lt;/p>
&lt;h2 id="hertz-overview">Hertz Overview&lt;/h2>
&lt;p>&lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a> is a high-usability, high-performance, highly extensible, and low-latency Golang HTTP framework that assists developers in building microservices. Originally, the HTTP framework used within ByteDance was an encapsulation of the Gin framework, which offered advantages such as ease of use and a comprehensive ecosystem. However, as the internal business continued to grow, the demand for high performance and versatility rapidly increased.&lt;/p>
&lt;p>&lt;a href="https://github.com/gin-gonic/gin">Gin&lt;/a>, being a secondary development of Golang&amp;rsquo;s native net/http, faced limitations in terms of on-demand expansion and performance optimization. In order to meet the evolving business needs and effectively serve major functions, the ByteDance service framework team embarked on research based on their self-developed networking library, &lt;a href="https://github.com/cloudwego/netpoll">Netpoll&lt;/a>. This research led to the development of the internal framework, Hertz, which exhibits enhanced performance and stability when faced with enterprise-level requirements. Hertz also facilitates business development and addresses evolving technical requirements. In July 2021, Hertz officially launched version 1.0.&lt;/p>
&lt;p>After over a year of internal usage at ByteDance, the Hertz framework has become the largest HTTP framework within the organization. It boasts more than 10,000 online services and reaches a peak QPS of over 40 million. In addition to being utilized by various business lines, Hertz also serves numerous internal core components, such as the function computing platform FaaS, stress testing platform, gateways, and Service Mesh control plane. It has received positive feedback regarding its usage.
In such a large-scale scenario, Hertz demonstrates remarkable stability and performance. Bugs and kernel issues are promptly identified and rectified. Furthermore, Hertz maintains a set of codes both internally and externally, providing a strong foundation for the open-source Hertz framework.&lt;/p>
&lt;h2 id="features">Features&lt;/h2>
&lt;p>Key features of Hertz include:&lt;/p>
&lt;h3 id="stability">Stability&lt;/h3>
&lt;p>In a large-scale environment, Hertz exercises caution during every PR integration and release. Great care is taken to avoid any potential losses, which can amount to millions or even more. A standardized PR and release process has been formulated, requiring review by experienced developers for every code merge. Each PR and version release is to be tested for a period of time, and fully tested. Various testing scenarios, including compatibility, high concurrency, and package size, are employed to minimize risks.&lt;/p>
&lt;h3 id="high-usability">High Usability&lt;/h3>
&lt;p>Hertz prioritizes the ability to write correct code quickly during development. When designing the API, Hertz considers user usage habits and draws inspiration from the industry&amp;rsquo;s mainstream framework API usage. Continuous iteration and user feedback contribute to the framework&amp;rsquo;s refinement. For instance, many users hope that the Client also has the ability to trace. For this reason, Hertz Client supports middleware capabilities. Additionally, the Client supports stream processing in proxy scenarios. Middleware and stream processing are designed with the user&amp;rsquo;s actual habits in mind, promoting faster development of correct code. Hertz also provides a one-click command-line tool for code generation, enhancing the framework&amp;rsquo;s ease of use.&lt;/p>
&lt;h3 id="easy-expandability">Easy expandability&lt;/h3>
&lt;p>Hertz employs a layered design, offering a range of interfaces and default extension implementations for users to expand upon. Details regarding &lt;a href="https://www.cloudwego.io/zh/docs/hertz/tutorials/framework-exten/">Hertz extension&lt;/a> can be found on the &lt;a href="https://www.cloudwego.io/">CloudWeGo official website&lt;/a>. The framework&amp;rsquo;s layered design enhances its scalability. Currently, only stable capabilities are open-sourced, with more planned for the future. Please refer to the &lt;a href="https://github.com/cloudwego/hertz/blob/develop/ROADMAP.md">Hertz roadmap&lt;/a> for further details.&lt;/p>
&lt;h3 id="low-latency">Low latency&lt;/h3>
&lt;p>Hertz utilizes the internally developed high-performance network library, &lt;a href="https://github.com/cloudwego/netpoll">Netpoll&lt;/a>, by default. In certain special scenarios, Hertz demonstrates advantages in terms of QPS and delay compared to the go net package.&lt;/p>
&lt;p>For performance data, please refer to the Echo data in the figure below. Internal testing has shown significant reduction in resource usage, including a &lt;strong>30%-60% decrease in CPU usage&lt;/strong> for services predominantly utilizing frameworks and gateway services. For detailed performance data, please refer to: &lt;a href="https://github.com/cloudwego/hertz-benchmark">https://github.com/cloudwego/hertz-benchmark&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://www.cloudwego.io/img/blog/Hertz_Open_Source/Echo.png" alt="image">&lt;/p>
&lt;h3 id="command-line-tool">Command line tool&lt;/h3>
&lt;p>Hertz provides a simple and user-friendly command-line tool called Hz. Users simply need to provide an Interface Definition Language (IDL). Based on the defined interface information, Hz can generate project scaffolding with a single click, enabling users to use Hertz out of the box. Additionally, Hz offers update capabilities, allowing users to update the scaffolding when changes are made to the IDL. Currently, Hz supports two IDL definitions: Thrift and Protobuf. The command-line tool provides a range of built-in options that can be tailored to individual needs. It relies on the official Protobuf compiler and the self-developed Thriftgo compiler, both of which support custom code plug-ins for generating templates that meet specific requirements.&lt;/p>
&lt;p>Since the launch of Hertz, the internal response has been excellent. It has been extensively used in various scenarios including front-end and back-end communication, as well as gateway, upload, download, and proxy scenarios. The supported interaction modes encompass not only ping-pong but also streaming and chunk interactions. Hertz supports multiple protocols such as HTTP1, HTTP2, and Websocket. Managing such complex interaction scenarios and modes poses significant challenges to the usability and stability of Hertz&amp;rsquo;s Server and Client components. In response, Hertz promptly addresses user needs and establishes a stability test service that simulates real-world and complex online scenarios as accurately as possible. With a high single-test coverage rate, Hertz ensures that the code logic functions normally and reliably.&lt;/p>
&lt;h2 id="internal-and-external-version-maintenance">Internal and external version maintenance&lt;/h2>
&lt;p>ByteDance possesses a comprehensive internal microservice system, and the team places significant emphasis on open source development and commitment. This principle applies to both the Hertz project and CloudWeGo&amp;rsquo;s &lt;a href="https://github.com/cloudwego/kitex">Kitex&lt;/a> project, ensuring consistency between internal and external versions. The core capabilities of the project have been migrated to the open source library, with only one internal layer of encapsulation. This approach facilitates enterprise upgrades without disruptions, thus guaranteeing long-term maintenance commitments. All open source features will be released after undergoing internal stability verification.&lt;/p>
&lt;p>Moving forward, the team will continue to iterate based on the Hertz open source library, promptly addressing community needs and issues to enhance user experience and ensure a reliable framework. Hertz developers can also leverage its flexible expansion capabilities to meet specific business requirements. Furthermore, external developers are encouraged to &lt;a href="https://github.com/cloudwego/hertz/blob/develop/CONTRIBUTING.md">contribute&lt;/a> to the community, collaboratively constructing an HTTP framework with a comprehensive ecosystem, exceptional performance, and user-friendly features.&lt;/p>
&lt;h2 id="roadmap">Roadmap&lt;/h2>
&lt;p>For the infrastructure team, Hertz represents not only an open source project but also a genuine ultra-large-scale enterprise-level practice. By open sourcing Hertz, our aim is to enrich the Golang middleware system within the cloud-native community, enhance the CloudWeGo ecosystem, and enable more developers and enterprises to build cloud-native large-scale distributed systems. We aspire to provide modern, resource-efficient technical solutions.&lt;/p>
&lt;p>As mentioned earlier, Hertz has currently open sourced only the internally verified stable components. However, we intend to further enhance the framework by pursuing the following objectives:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Cloud native capability support&lt;/strong>: Integrate support for the xDS API to dynamically obtain service configurations from Istio.&lt;/li>
&lt;li>&lt;strong>Multi-protocol support&lt;/strong>: Hertz currently only open-sources HTTP1. In the future, we will open-source other protocols, such as HTTP2, Websocket, ALPN, etc., to provide developers with support for micro-service requirements in more scenarios. If you have a need, you can also submit an issue and let us know your needs for quick support.&lt;/li>
&lt;li>&lt;strong>Improved command-line tools&lt;/strong>: Continuously iterate on Hz, integrating various commonly used middleware and providing modular construction capabilities, enabling users to select the required components as needed.&lt;/li>
&lt;li>&lt;strong>Enhanced ecosystem support&lt;/strong>: Since Hertz does not adopt go net&amp;rsquo;s data structure, additional ecosystem support is required. In the initial batch of open source releases, we have included CORS, Trace, and Metrics. In the future, we plan to support additional aspects such as reverse proxy and Session.&lt;/li>
&lt;li>&lt;strong>Iteration based on user feedback&lt;/strong>: Following the project&amp;rsquo;s open sourcing, we will iterate based on developer feedback and requirements.&lt;/li>
&lt;/ul>
&lt;p>We welcome everyone to &lt;a href="https://github.com/cloudwego/hertz/blob/develop/CONTRIBUTING.md">contribute&lt;/a> by submitting issues and PRs to &lt;a href="https://github.com/cloudwego/hertz">Hertz&lt;/a>, fostering collaborative development. We eagerly anticipate the involvement of more developers and anticipate Hertz aiding enterprises in swiftly constructing cloud-native architectures. Enterprise users are invited to migrate and utilize Hertz, and we will provide dedicated technical support and communication. Feel free to &lt;a href="https://discord.gg/jceZSE7DsW">join our Discord community&lt;/a> for further consultations and assistance.&lt;/p>
&lt;h2 id="related-links">Related Links&lt;/h2>
&lt;ul>
&lt;li>Project &lt;a href="https://github.com/cloudwego/hertz">address&lt;/a>&lt;/li>
&lt;li>Community &lt;a href="https://github.com/hertz-contrib">ecosystem&lt;/a>&lt;/li>
&lt;li>Hertz benchmark &lt;a href="https://www.cloudwego.io/blog/2023/02/24/getting-started-with-hertz-performance-testing-guide/">blog&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Blog: Hertz Release v0.1.0</title><link>https://www.cloudwego.io/blog/2022/06/20/hertz-release-v0.1.0/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/06/20/hertz-release-v0.1.0/</guid><description>
&lt;h2 id="feature">Feature&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/31">#31&lt;/a>] feat: close connection after responding to the short-connection request.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/44">#44&lt;/a>] feat: add the VisitAllCustomHeader method.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/59">#59&lt;/a>] feat: support windows.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/70">#70&lt;/a>] feat: add code generator hz.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/64">#64&lt;/a>] feat: add adaptor for Hertz Request &amp;amp; Response to net/http Request &amp;amp; ResponseWriter.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/45">#45&lt;/a>] feat: add ctx.Body().&lt;/li>
&lt;/ul>
&lt;h2 id="optimize">Optimize&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/57">#57&lt;/a>] optimize: use http.TimeFormat as layout for http date, which can avoid more copying.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/58">#58&lt;/a>] optimize: add remote address to the error log when server processes the error.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/41">#41&lt;/a>] optimize: use CtxErrorf instead of ‘Errorf’ when server panic.&lt;/li>
&lt;/ul>
&lt;h2 id="refactor">Refactor&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/37">#37&lt;/a>] refactor: unify the entry of setting request options to prevent options uninitialized from causing panic.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/52">#52&lt;/a>] refactor: omit redundant nil check around loop.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/33">#33&lt;/a>] refactor: simplify code in AddMissingPort.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/27">#27&lt;/a>] refactor: use errors.NewPublic rather than fmt.Errorf.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/34">#34&lt;/a>] refactor: remove fshandler and related tests.&lt;/li>
&lt;/ul>
&lt;h2 id="style">Style&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/29">#29&lt;/a>] style(*): fix typos.&lt;/li>
&lt;/ul>
&lt;h2 id="docs">Docs&lt;/h2>
&lt;ul>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/60">#60&lt;/a>] docs: add icon in README.md and README_cn.md.&lt;/li>
&lt;li>[&lt;a href="https://github.com/cloudwego/hertz/pull/54">#54&lt;/a>] docs: Update README.md.&lt;/li>
&lt;/ul></description></item></channel></rss>