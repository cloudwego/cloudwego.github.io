<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudWeGo – Kitex</title><link>https://www.cloudwego.io/projects/kitex/</link><description>Recent content in Kitex on CloudWeGo</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 29 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.cloudwego.io/projects/kitex/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Kitex Release</title><link>https://www.cloudwego.io/blog/releases/kitex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/releases/kitex/</guid><description/></item><item><title>Blog: Kitex Release v0.15.1</title><link>https://www.cloudwego.io/blog/2025/09/29/kitex-release-v0.15.1/</link><pubDate>Mon, 29 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/09/29/kitex-release-v0.15.1/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="announcements"&gt;&lt;strong&gt;Announcements&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go Version Support Changes&lt;/strong&gt;: Kitex&amp;rsquo;s minimum declared Go version has been adjusted to Go1.20 and supports up to Go1.25
&lt;ul&gt;
&lt;li&gt;Currently does not affect Go v1.18/v1.19 compilation, but after being declared for higher versions, subsequent versions will introduce features of higher versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Change for Partial interfaces&lt;/strong&gt;: No impact on regular users, but may affect those with extensions or special api dependencies. For details, refer to the [&lt;strong&gt;Special Changes&lt;/strong&gt;] section.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="new-features"&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: New v2 API Supporting Multi-Services and Streaming Calls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Thrift binary generic call API now provides v2 version, supporting multi-services and streaming calls. For detailed usage, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: Support for Unknown Service Handler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Facilitates rapid development of streaming proxy, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/proxy_application_development/"&gt;Proxy Application Development Guide&lt;/a&gt; for details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: Support for Server-Level JSON/Map Streaming Generic Calls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call User Guide&lt;/a&gt; for details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming: Support for ctx Cancel to Control Flow Lifecycle&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly terminate streaming calls, saving model resources&lt;/li&gt;
&lt;li&gt;Aligns with gRPC, for detailed usage see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/streamx_lifecycle_control/"&gt;Stream Lifecycle Control Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Supports Client actively invoking cancel to end streaming calls&lt;/li&gt;
&lt;li&gt;Supports Client sensing the ctx cancel signal of the current Handler and cascading to end streaming calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming Error Handling Optimization&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly address specific error scenarios, accelerate troubleshooting of cascade cancel link issues, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/streamx_error_handling/"&gt;Stream Error Handling Best Practices&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;In cascade cancel scenarios, error description includes complete cancel link, quickly locating the first-hop service that actively cancels&lt;/li&gt;
&lt;li&gt;Error description includes specific error scenarios and corresponding unique error codes&lt;/li&gt;
&lt;li&gt;Unified and convenient cancel error handling method, eliminating the need for cumbersome string matching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="featureexperience-optimization"&gt;&lt;strong&gt;Feature/Experience Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Client: Optimize Background Goroutine Startup Logic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Starting from Kitex v0.13.0, a generic client supports both Ping-Pong and streaming calls, and uses the TTHeader Streaming protocol by default. Each generic client automatically starts a background goroutine to clean up idle connections for TTHeader Streaming.&lt;/p&gt;
&lt;p&gt;If users previously used the generic client incorrectly (e.g., creating a generic client for each request), upgrading to Kitex v0.13.x would result in a large number of background goroutines being created, leading to goroutine leaks, even though streaming generics are not actually used.&lt;/p&gt;
&lt;p&gt;The v0.15.1 version only creates background goroutines when streaming generalization is actually used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="code-generation-tool-kitex-tool"&gt;&lt;strong&gt;Code Generation Tool Kitex Tool&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strict Enum Value Checking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For scenarios where Thrift IDL defines enum value overflow, strict generation checks have been added, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/idl_enumeration_type/"&gt;Kitex Tool Enum Type Checking Instructions&lt;/a&gt; for details&lt;/p&gt;
&lt;p&gt;This change will cause some products to fail to generate because correctness already has issues, posing a significant risk to the service!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="special-change---minor-services-may-be-affected"&gt;&lt;strong&gt;Special Change - Minor Services May Be Affected&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface Breaking Change that has no impact on 99.9% of users&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kitex will ensure compatibility with normal usage patterns of internal users. However, individual users may have dependencies on definitions in the Kitex repository, and this version adjustment of Kitex will have an impact on these users.&lt;/p&gt;
&lt;p&gt;This version has made minor adjustments to non-standard usage of &lt;code&gt;remote.Message&lt;/code&gt;, &lt;code&gt;rpcinfo.RPCInfo&lt;/code&gt; or &lt;code&gt;generic.Generic&lt;/code&gt; interfaces. If there are special usages, they need to be adjusted to conform to the new version&amp;rsquo;s interface definition.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rpcinfo.RPCInfo().Invocation()&lt;/code&gt; added &lt;code&gt;MethodInfo()&lt;/code&gt; method, returning MethodInfo for the current RPC:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit 62979e4b95e5a5ed73d0bfd9e218cfc61c5ce253
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;type Invocation interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PackageName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ServiceName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MethodName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ MethodInfo() serviceinfo.MethodInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; StreamingMode() serviceinfo.StreamingMode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SeqID() int32
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; BizStatusErr() kerrors.BizStatusErrorIface
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;remote.Message&lt;/code&gt; interface removed some redundant interfaces:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; // Message is the core abstraction for Kitex message.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; type Message interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; RPCInfo() rpcinfo.RPCInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- ServiceInfo() *serviceinfo.ServiceInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- SpecifyServiceInfo(svcName, methodName string) (*serviceinfo.ServiceInfo, error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; Data() interface{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NewData(method string) (ok bool)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MessageType() MessageType
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetPayloadLen(size int)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TransInfo() TransInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Tags() map[string]interface{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- ProtocolInfo() ProtocolInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- SetProtocolInfo(ProtocolInfo)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; PayloadCodec() PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetPayloadCodec(pc PayloadCodec)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Recycle()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dependencies on &lt;code&gt;ProtocolInfo()&lt;/code&gt; should be modified to rely on &lt;code&gt;remote.Message().RPCInfo().Config().TransportProtocol()&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;generic.Generic&lt;/code&gt; interface underwent significant adjustments:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; commit 024fedbc2da33956cd81cd0a8226f817e5eac777
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; // Generic ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; type Generic interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Closer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // PayloadCodec return codec implement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // this is used for generic which does not need IDL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- PayloadCodec() remote.PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; // PayloadCodecType return the type of codec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PayloadCodecType() serviceinfo.PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // RawThriftBinaryGeneric must be framed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- Framed() bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // GetMethod is to get method name if needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- GetMethod(req interface{}, method string) (*Method, error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+ // GenericMethod return generic method func
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ GenericMethod() serviceinfo.GenericMethodFunc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; // IDLServiceName returns idl service name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; IDLServiceName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // MessageReaderWriter returns reader and writer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // this is used for generic which needs IDL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- MessageReaderWriter() interface{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+ // GetExtra returns extra info by key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ GetExtra(key string) interface{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;PayloadCodec()&lt;/code&gt; interface was completely removed. This adjustment was made because, after Kitex generic interface supported the multi-service feature, it no longer relies on hijacking PayloadCodec to inject the generic codec; instead, it&amp;rsquo;s implemented by hijacking Args/Results structs. Currently, only &lt;code&gt;generic.BinaryThriftGeneric()&lt;/code&gt; relies on the old method, but this interface has been marked as deprecated. Please migrate to using &lt;code&gt;generic.BinaryThriftGenericV2()&lt;/code&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call User Guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Framed() bool&lt;/code&gt; is a deprecated interface because Kitex has defaulted to framed mode for clients since v0.13.*.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageReaderWriter&lt;/code&gt; and &lt;code&gt;GetMethod&lt;/code&gt; interfaces are merged into a unified &lt;code&gt;GenericMethod()&lt;/code&gt; interface. The new unified interface returns a closure function that accepts context and method name as arguments and returns the corresponding method info. This method info includes the hijacked Args/Results parameters, thus implementing different types of generic call codec logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;remote.ServiceSearcher&lt;/code&gt; Get/Set method changes, &lt;code&gt;codec.SetOrCheckMethodName&lt;/code&gt; parameter adjustment:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit a1008887b9ab4553a79ce82cf6d3db324c344977
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-const keyServiceSearcher = &amp;#34;rpc_info_service_searcher&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+type keyServiceSearcher struct{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-// GetServiceSearcher returns the service searcher from rpcinfo.RPCInfo.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func GetServiceSearcher(ri rpcinfo.RPCInfo) ServiceSearcher {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- svcInfo, _ := ri.Invocation().Extra(keyServiceSearcher).(ServiceSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- return svcInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+// GetServiceSearcher returns the service searcher from context.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+func GetServiceSearcher(ctx context.Context) ServiceSearcher {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ svcSearcher, _ := ctx.Value(keyServiceSearcher{}).(ServiceSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ return svcSearcher
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-// SetServiceSearcher sets the service searcher to rpcinfo.RPCInfo.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func SetServiceSearcher(ri rpcinfo.RPCInfo, svcSearcher ServiceSearcher) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- setter := ri.Invocation().(rpcinfo.InvocationSetter)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- setter.SetExtra(keyServiceSearcher, svcSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+// WithServiceSearcher sets the service searcher to context.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+func WithServiceSearcher(ctx context.Context, svcSearcher ServiceSearcher) context.Context {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ return context.WithValue(ctx, keyServiceSearcher{}, svcSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The old version set &lt;code&gt;ServiceSearcher&lt;/code&gt; on rpcinfo; the new version moves it to context to optimize Get/Set performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit a1008887b9ab4553a79ce82cf6d3db324c344977
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;// SetOrCheckMethodName is used to set method name to invocation.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func SetOrCheckMethodName(methodName string, message remote.Message) error {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+func SetOrCheckMethodName(ctx context.Context, methodName string, message remote.Message) error {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;This simultaneously affects the definition of &lt;code&gt;codec.SetOrCheckMethodName&lt;/code&gt;, adding &lt;code&gt;context.Context&lt;/code&gt; as a parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="full-change"&gt;&lt;strong&gt;Full Change&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;feat(ttstream): support ctx cancel and detailed canceled error by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1821"&gt;#1821&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1859"&gt;#1859&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1856"&gt;#1856&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(generic): support new thrift binary generic call api, server streaming generic call and unknown service or method handler by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1837"&gt;#1837&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1857"&gt;#1857&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(grpc): support dump MaxConcurrentStreams of HTTP2 Client by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1820"&gt;#1820&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fix(retry): shallow copy response to avoid data race by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1799"&gt;#1799&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1814"&gt;#1814&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(lbcache): check the existence before new Balancer to prevent leakage by @ppzqh in &lt;a href="https://github.com/cloudwego/kitex/pull/1825"&gt;#1825&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(generic): descriptor.HTTPRequest.GetParam nil pointer exception by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1827"&gt;#1827&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(generic): fix generic write int range check by @HeyJavaBean in &lt;a href="https://github.com/cloudwego/kitex/pull/1861"&gt;#1861&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(rpcinfo): protect bizErr and extra field of ri.Invocation by lock by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1850"&gt;#1850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(timeout): remove timer pool to avoid timer race issue by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1858"&gt;#1858&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(tool): disable fast api for protobuf by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1807"&gt;#1807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(tool): skip pb code gen for arg -use by @xiaost in &lt;a href="https://github.com/cloudwego/kitex/pull/1819"&gt;#1819&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;optimize(grpc): access metadata.MD without ToLower by @xiaost in &lt;a href="https://github.com/cloudwego/kitex/pull/1806"&gt;#1806&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;optimize(ttstream): lazy init cleaning task for ObjectPool to reduce the impact of lots of goroutines caused by creating too many Generic Client by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1842"&gt;#1842&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;optimize(tool): remove string deepcopy because the string type is read-only in Go by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1832"&gt;#1832&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;refactor(ttstream): remove ttstream provider by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1805"&gt;#1805&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;refactor(rpcinfo): move service/method info from message to rpcinfo, remove protocol info from message and update min go version to 1.20 by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1818"&gt;#1818&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1855"&gt;#1855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;refactor(server): remove service middleware and SupportedTransportsFunc api by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1839"&gt;#1839&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;refactor(server): remove useless TargetSvcInfo field by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1840"&gt;#1840&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;chore: update dependencies of kitex to support go 1.25 and new features by @jayantxie @AsterDY in &lt;a href="https://github.com/cloudwego/kitex/pull/1848"&gt;#1848&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1834"&gt;#1834&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1862"&gt;#1862&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1836"&gt;#1836&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;chore: update version v0.15.0 by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1864"&gt;#1864&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docs: fix broken link to blogs by @scientiacoder in &lt;a href="https://github.com/cloudwego/kitex/pull/1813"&gt;#1813&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;chore: support custom ctx key to pass to downstream in Service-Inline by @Duslia in &lt;a href="https://github.com/cloudwego/kitex/pull/1709"&gt;#1709&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.14.0</title><link>https://www.cloudwego.io/blog/2025/06/26/kitex-release-v0.14.0/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/06/26/kitex-release-v0.14.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="new-features"&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: The generic Client supports streaming calls, allowing a single Client to handle both streaming and non-streaming scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It supports streaming generic calls, adapting to gRPC/TTHeader Streaming and supporting map/JSON and Protobuf binary generic calls.&lt;/p&gt;
&lt;p&gt;A brief code example is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;genericclient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;actualServiceName&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;g&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Ping-Pong generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GenericCall&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;PingPongTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ClientStreaming generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;cliStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ClientStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;ClientStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ServerStreaming generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;srvStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServerStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;ServerStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// BidiStreaming generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;bidiStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;BidiStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;BidiStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Refer to this document for details: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="featureexperience-optimization"&gt;&lt;strong&gt;Feature/Experience Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming: Improved observability and debugging experience&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Tracer configured, failure to create a stream will now be reported with metrics.&lt;/li&gt;
&lt;li&gt;When a panic occurs on the Server side, the full stack trace will now be printed for easier troubleshooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Tracer configured, failure to create a stream will now be reported with metrics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="others"&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Product Simplification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex tool no longer generates fastpb, only affecting Protobuf users.&lt;/p&gt;
&lt;p&gt;If high-performance Protobuf encoding/decoding is required, you can enable prutal by configuring environment variable &lt;code&gt;KITEX_TOOL_USE_PRUTAL_MARSHAL=1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-change"&gt;&lt;strong&gt;Full Change&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1759"&gt;#1759&lt;/a&gt;] feat(tool): add env for using prutal to marshal&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1782"&gt;#1782&lt;/a&gt;] feat(ttstream): process MetaFrame and reflect to rpcinfo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1777"&gt;#1777&lt;/a&gt;] feat(client): report err when create Stream failed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1763"&gt;#1763&lt;/a&gt;] feat: support ttheader streaming generic call&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1771"&gt;#1771&lt;/a&gt;] feat(tool): add thriftgo patcher extension&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1755"&gt;#1755&lt;/a&gt;] feat: add generic binary pb for streamx&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1752"&gt;#1752&lt;/a&gt;] feat(generic): support generic pb binary for streaming&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1788"&gt;#1788&lt;/a&gt;] optimize: go net implementation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1786"&gt;#1786&lt;/a&gt;] optimize(tool): remove tool fastpb generation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1783"&gt;#1783&lt;/a&gt;] optimize(gRPC): parse PayloadCodec in server side&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1780"&gt;#1780&lt;/a&gt;] optimize(ttstream): log the error thrown by invoking handler&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1769"&gt;#1769&lt;/a&gt;] optimize: injection of options in ttstream&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1792"&gt;#1792&lt;/a&gt;] fix(gRPC): inject current method name to rpcinfo in server-side to fix FROM_METHOD missing&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1787"&gt;#1787&lt;/a&gt;] fix(ttstream): metrics missing caused by server-side rpcinfo not set correctly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1778"&gt;#1778&lt;/a&gt;] fix: enabling json mode of map generic not work&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1774"&gt;#1774&lt;/a&gt;] fix(server): trans server conn count race issue&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1742"&gt;#1742&lt;/a&gt;] fix(generic): align dynamicgo&amp;rsquo;s write base behavior with old generic (only for internal logic)&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1770"&gt;#1770&lt;/a&gt;] refactor: refactor generic streaming&lt;/p&gt;
&lt;h3 id="test"&gt;Test&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1793"&gt;#1793&lt;/a&gt;] test: add go1.18 to scenario-test&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1765"&gt;#1765&lt;/a&gt;] refactor: refactor generic streaming&lt;/p&gt;
&lt;h3 id="docs"&gt;Docs&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1794"&gt;#1794&lt;/a&gt;] docs: update CONTRIBUTING.md to change PR base branch to main&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1795"&gt;#1795&lt;/a&gt;] chore: update dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1776"&gt;#1776&lt;/a&gt;] chore: remove testify dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1757"&gt;#1757&lt;/a&gt;] chore: update prutal to v0.1.1&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1753"&gt;#1753&lt;/a&gt;] ci: disable codecov annotations&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.13.0</title><link>https://www.cloudwego.io/blog/2025/04/07/kitex-release-v0.13.0/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/04/07/kitex-release-v0.13.0/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;We recommend upgrading directly to Kitex version v0.13.1, as we have fixed a potential Goroutine leak issue of the gRPC Client in v0.13.0.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="new-features"&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New streaming interface StreamX supports gRPC, existing Kitex gRPC users can migrate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;v0.12.0 released the StreamX interface to optimise the streaming experience, and supported the custom streaming protocol TTHeader Streaming, but did not support gRPC. So existing users could not migrate.&lt;/p&gt;
&lt;p&gt;This version supports gRPC for StreamX, users can migrate to StreamX, and the Server side can be compatible with two streaming protocols at the same time. So there is no need to worry about protocol compatibility after interface migration.&lt;/p&gt;
&lt;p&gt;In particular, when adapting gRPC with StreamX, we found that there are still some inconvenient problems. In order to bring a better experience of using the interface, we have adjusted the StreamX interface for the second time, which will affect the users who have already been using StreamX. We apologise for that.&lt;/p&gt;
&lt;p&gt;User documentation: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/"&gt;StreamX User Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prutal - Protobuf&amp;rsquo;s non-generated code serialisation library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/prutal"&gt;Prutal&lt;/a&gt; is officially open source, on par with Thrift&amp;rsquo;s &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt;, and the new version of Kitex integrates Prutal by default.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Minimized Code Product Size: Generating Only Structures, No Runtime Code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leveraging Reflection Optimization Similar to Frugal, Achieving Over 50% Speed Increase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generating Code Compatible with Existing Protobuf and Derivative Versions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User documentation: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/prutal/"&gt;Prutal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="featureexperience-optimization"&gt;&lt;strong&gt;Feature/Experience Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming: Support interface-level Recv timeout control&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition to the existing Client level, this release of TTHeader Streaming supports interface-level Recv timeout configuration, making configuration more flexible.&lt;/p&gt;
&lt;p&gt;User documentation: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/streamx_timeout_control/"&gt;StreamX Timeout Control&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="special-change"&gt;&lt;strong&gt;Special Change&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Default Thrift transport protocol changed from Buffered to Framed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This change leverages FastCodec for higher codec performance. Since Kitex server supports protocol detection, this behavioral change is compatible. Framed protocol is generally supported by most thrift frameworks, and we assess the impact to be minimal. However, if the downstream does not support Framed protocol, please manually revert to the Buffered protocol as follows:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithTransportProtocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;transport&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PurePayload&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="others"&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Code Product Simplification&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kitex Tool would not generate the repeated verification code for Set data structure and the &lt;code&gt;DeepEqual&lt;/code&gt; function for each structure by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you only want to restore&lt;code&gt;DeepEqual&lt;/code&gt;, add&lt;code&gt;-thrift gen_deep_equal=true&lt;/code&gt;to the generation command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to restore the repeated verification of Set, add&lt;code&gt;-thrift validate_set=true, -thrift gen_deep_equal=true&lt;/code&gt;to the generation command.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kitex Tool would not generate the Apache Codec related code by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to restore it, add&lt;code&gt;-thrift no_default_serdes=false&lt;/code&gt;to the generation command.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go Supported Version Change&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Support version Go 1.19~1.24, the lowest supported version becomes Go 1.19.&lt;/p&gt;
&lt;p&gt;if Go version is too low, there will be a prompt when compiling:&lt;code&gt;note: module requires Go 1.19&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-change"&gt;&lt;strong&gt;Full Change&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1719"&gt;#1719&lt;/a&gt;] feat: prutal for replacing protoc&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1736"&gt;#1736&lt;/a&gt;] feat(ttstream): support WithRecvTimeout stream call option&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1702"&gt;#1702&lt;/a&gt;] feat(gRPC): add grpc client conn dump to help debug the conn and stream status&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1723"&gt;#1723&lt;/a&gt;] feat(codec/thrift): use fastcodec/frugal if apache codec not available&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1724"&gt;#1724&lt;/a&gt;] feat: add tail option to support for delayed initialization of some client options&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1728"&gt;#1728&lt;/a&gt;] optimize(apache): remove apache codec gen and set default protocol from buffered to framed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1732"&gt;#1732&lt;/a&gt;] optimize(rpcinfo): purify the transport protocol of rpcinfo in a single rpc request&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1711"&gt;#1711&lt;/a&gt;] optimize(tool): disable set validate and deep equal code gen to simplify kitex_gen&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1717"&gt;#1717&lt;/a&gt;] optimize(gRPC): return more detailed error when received invalid http2 frame&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1734"&gt;#1734&lt;/a&gt;] fix(ttstream): adjust stream state transition and remove all SetFinalizer to avoid memory leak&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1735"&gt;#1735&lt;/a&gt;] fix(generic): support both relative and absolute check for idl includes parse to make it compatible with generation tool&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1725"&gt;#1725&lt;/a&gt;] fix: code gen import issue for streamx mode, stream call judgement bug and set ttheader streaming as default&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1727"&gt;#1727&lt;/a&gt;] fix(tool): fix tool UseStdLib remains unexpected lib issue&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1658"&gt;#1658&lt;/a&gt;] refactor: streamx api to adapt both grpc and ttheader streaming protocol and provide more user-friendly interface&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1729"&gt;#1729&lt;/a&gt;] refactor(tool): move pb tpl code to sep pkg&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1743"&gt;#1743&lt;/a&gt;] chore: update dependencies version&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1740"&gt;#1740&lt;/a&gt;] chore(generic): deprecate NewThriftContentProvider&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1741"&gt;#1741&lt;/a&gt;] chore(streamx): remove redundant streamx package&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1738"&gt;#1738&lt;/a&gt;] ci: fix typos &amp;amp; crate-ci/typos&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1737"&gt;#1737&lt;/a&gt;] chore: update dependency and change go support to 1.19-1.24&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1720"&gt;#1720&lt;/a&gt;] Revert &amp;ldquo;fix(ttstream): pingpong method refers to server interface defined in Kitex generation code when streamx is enabled and there are other streaming methods&amp;rdquo;&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.12.0</title><link>https://www.cloudwego.io/blog/2025/01/03/kitex-release-v0.12.0/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/01/03/kitex-release-v0.12.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="simplified-product-recommendation---remove-apache-thrift-dependency"&gt;Simplified Product Recommendation - Remove Apache Thrift Dependency&lt;/h3&gt;
&lt;p&gt;We strongly recommend removing Apache Codec to resolve the compilation issues caused by Apache&amp;rsquo;s incompatible changes and to &lt;strong&gt;reduce the product size by 50%&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please replace it with Kitex&amp;rsquo;s own Thrift codec: FastCodec or Frugal, which does not rely on Apache Thrift Codec.&lt;/p&gt;
&lt;p&gt;Future version plans: Kitex will remove Apache products by default. User guide: &lt;a href="https://www.cloudwego.io/docs/kitex/best-practice/remove_apache_codec/"&gt;Kitex Remove Apache Thrift User Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="new-features"&gt;New Features&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thrift Streaming over TTHeader - Custom Streaming Protocol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supported streaming calls based on the TTHeader protocol, optimizing stability issues caused by the high complexity of the gRPC streaming protocol.&lt;/p&gt;
&lt;p&gt;Provided a new streaming interface, StreamX, to solve various user experience issues with the original streaming interface and provide best practices for streaming interfaces.&lt;/p&gt;
&lt;p&gt;For more details: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/"&gt;StreamX User Documentation and Best Practices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Graceful Shutdown for gRPC Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added support for a graceful shutdown feature to address upstream errors caused by service upgrades or updates.&lt;/p&gt;
&lt;p&gt;For usage: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/graceful_shutdown/"&gt;gRPC Streaming Graceful Shutdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="experience-optimization"&gt;Experience Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming Log Optimization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For streaming concatenation scenarios, if the downstream error is due to an exit of the upstream Stream exiting, the error will include the suffix &amp;ldquo;[triggered by {serviceName}]&amp;rdquo; will be included in the error, which is convenient for locating the problem.&lt;/p&gt;
&lt;p&gt;Errors returned by Send such as &lt;code&gt;the stream is done&lt;/code&gt; now reflect the actual error that caused the stream to close.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Generation Tool Kitex Tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimization of Generation Speed and Tool Installation&lt;/strong&gt;: Now Thriftgo is built into Kitex, significantly improving generation speed, especially for scenarios with particularly large IDL files. There is no need to install or upgrade Thriftgo anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimizing Product Size&lt;/strong&gt;: To minimize product size, Frugal can be used. For gray scale adoption, it supports specifying certain structs to use Frugal serialization.
For more details, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/"&gt;Code Generation Tool&lt;/a&gt; for instructions on -frugal-struct and -gen-frugal parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="breaking-change---no-impact-for-99-of-users"&gt;Breaking Change - No Impact for 99% of Users&lt;/h3&gt;
&lt;p&gt;Kitex will strive to ensure compatibility with normal usage methods. Some users may have dependencies on certain code definitions of Kitex, and this version adjustment of Kitex will have an impact on these users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removing &lt;code&gt;thrift.NewBinaryProtocol&lt;/code&gt;
&lt;code&gt;thrift.NewBinaryProtocol&lt;/code&gt; is Kitex&amp;rsquo;s implementation of the Apache thrift.TProtocol interface. Because the trans part directly uses Kitex&amp;rsquo;s ByteBuffer, the performance is better than Apache thrift.TBinaryProtocol.
The Deprecation comment has been added to it in v0.11.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Removing Reason&lt;/strong&gt;: To remove the Apache Thrift dependency, the implementation needs to be removed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Modification Method&lt;/strong&gt;: This implementation was originally used with Apache Codec. If you still need to rely on Apache Codec, please directly use Apache&amp;rsquo;s TBinaryProtocol.
If you think that it has an impact on performance, you can fork the old version of Kitex, refer to github/cloudwego/kitex v0.10.0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/apache/thrift/lib/go/thrift&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tProt&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTBinaryProtocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTMemoryBufferLen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1024&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Removing &lt;code&gt;generic.ServiceInfo&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generic removed an API &lt;code&gt;generic.ServiceInfo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Removing Reason&lt;/strong&gt;: To prepare for future multi-service registration on a generic server, the generic implementation has been refactored (v0.11.0), and this API is no longer used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Modification Method&lt;/strong&gt;: This API was replaced by &lt;code&gt;generic.ServiceInfoWithGeneric&lt;/code&gt;. Please use it instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/pkg/generic&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// removed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;pcType&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PayloadCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// please use this instead&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfoWithGeneric&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;g&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Generic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1541"&gt;#1541&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1633"&gt;#1633&lt;/a&gt;] feat(ttstream): support ttheader streaming and streamv2 interface&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1623"&gt;#1623&lt;/a&gt;] feat(gRPC): optimize gRPC error prompt and metrics, assisting in troubleshooting problems&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1556"&gt;#1556&lt;/a&gt;] feat(gRPC): support gRPC graceful shutdown&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1467"&gt;#1467&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1627"&gt;#1627&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1619"&gt;#1619&lt;/a&gt;] feat(generic): support thrift streaming(over gRPC) for json generic client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1607"&gt;#1607&lt;/a&gt;] feat(tool): kitex tool support gen frugal codec for certain struct&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1526"&gt;#1526&lt;/a&gt;] feat(generic): support an option to remove go.tag annotation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1536"&gt;#1536&lt;/a&gt;] feat(generic): support an option to set IDL ParseMode for each client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1510"&gt;#1510&lt;/a&gt;] feat: register service with service level middleware&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1635"&gt;#1635&lt;/a&gt;] optimize: add two function for binary protocol to get bufiox reader and writer&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1630"&gt;#1630&lt;/a&gt;] optimize(tool): implement no recursive generate to support incremental update&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1617"&gt;#1617&lt;/a&gt;] optimize(retry): optimize UpdatePolicy and add test cases to check invalid retry policy. &amp;lt;v0.11.0, if the FailurePolicy is nil and type is 0 or &amp;gt;1, will trigger nil panic. The bug has been fixed in v0.11.0, this pr is to add test cases and optimize UpdatePolicy to ignore the nil panic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1606"&gt;#1606&lt;/a&gt;] optimize(tool): use embedded thriftgo as default option&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1595"&gt;#1595&lt;/a&gt;] optimize(tool): optimize pb tool code&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1599"&gt;#1599&lt;/a&gt;] optimize(tool): call FastWriteNocopy in FastWrite to avoid misuse by users&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1615"&gt;#1615&lt;/a&gt;] refactor: get rid of apache thrift in go.mod&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1611"&gt;#1611&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1614"&gt;#1614&lt;/a&gt;] refactor: move ttheader codec logic to gopkg&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1553"&gt;#1553&lt;/a&gt;] refactor(codec/thrift): unified typecodec implementation and adjust new file layout&lt;/p&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1581"&gt;#1581&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1628"&gt;#1628&lt;/a&gt;] perf(timeout): refactor new rpctimeout implementation to improve performance&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1564"&gt;#1564&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1567"&gt;#1567&lt;/a&gt;] perf: reduce object allocation for circuitbreak middleware and retry context&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1557"&gt;#1557&lt;/a&gt;] perf(rpcinfo): remove lock for rpcinfo.RPCStats&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1622"&gt;#1622&lt;/a&gt;] fix(generic): use jsoniter instead of sonic for json generic-call, since sonic doesn&amp;rsquo;t support map[interface{}]interface{}&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1562"&gt;#1562&lt;/a&gt;] fix: deep copy function of the generated code cannot copy the empty string&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1602"&gt;#1602&lt;/a&gt;] fix(gRPC): check if the type assertion succeed in ProtocolMatch to avoid panic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1598"&gt;#1598&lt;/a&gt;] fix(retry): fix issue that mixed retry cannot update its config correctly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1590"&gt;#1590&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1572"&gt;#1572&lt;/a&gt;] fix(generic): set default values for optional fields of primitive types with generic with dynamicgo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1580"&gt;#1580&lt;/a&gt;] fix(netpoll): fix timeout caused by partial use of the Read method of remote.ByteBuffer&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1574"&gt;#1574&lt;/a&gt;] fix(trace): stream event handler ignore io.EOF event&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1563"&gt;#1563&lt;/a&gt;] fix(generic): fix the issue where the generic client sets the parse mode of CombineServices and then requests causes &amp;ldquo;unknown service&amp;rdquo; error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1568"&gt;#1568&lt;/a&gt;] fix(wpool): fix the issue of wpool object allocation, and incorrect ctx causing profiler errors.&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1558"&gt;#1558&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1555"&gt;#1555&lt;/a&gt;] fix(bthrift): fix the issue of no recursion conversion of unknown field type under bthrift&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1593"&gt;#1593&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1560"&gt;#1560&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1561"&gt;#1561&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1559"&gt;#1559&lt;/a&gt;] chore(test): fix data race issue, unstable issue and long time running issue of some test cases&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1634"&gt;#1634&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1632"&gt;#1632&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1573"&gt;#1573&lt;/a&gt;] chore(dep): upgrade frugal, localsession and other cloudwego dependency versions&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1616"&gt;#1616&lt;/a&gt;] chore(generic): remove deprecated apis/interfaces/variables&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.11.0</title><link>https://www.cloudwego.io/blog/2024/09/12/kitex-release-v0.11.0/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/09/12/kitex-release-v0.11.0/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;Highly recommend upgrading Kitex version to v0.11.3 or higher, because there&amp;rsquo;s some bugfix on v0.11.0.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="new-feature"&gt;New Feature&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Mixed Retry&lt;/strong&gt;: Supports enabling both &amp;ldquo;Failure Retry&amp;rdquo; and &amp;ldquo;Backup Request&amp;rdquo; strategies simultaneously, which can reduce tail requests while increasing the success rate of retries, for more detail: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/retry/"&gt;Retry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom Payload Validation&lt;/strong&gt;: To avoid inconsistencies in data transmission caused by hardware failures or data tampering, Kitex provides validation functionality for payload messages and supports custom extensions. For usage: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/payload_validator/"&gt;Payload Validator&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="feature-optimization"&gt;Feature optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Frugal ARM Optimization&lt;/strong&gt;: Frugal v0.2.0 now supports a new implement by reflection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kitex Tool Improvement&lt;/strong&gt;: Kitex Tool provide a new param &lt;code&gt;-rapid&lt;/code&gt; to integrates Thriftgo and there&amp;rsquo;s a slightly improved speed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generating Multiple Handlers for Multiple Services&lt;/strong&gt;：Since this version, Kitex tool provide each service with independent handler file and register them into server，for more details: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/multi_service/multi_handler/"&gt;Generating Multiple Handlers for Multiple Services&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Support Go 1.18~1.23. Minimum support for Golang 1.18，if your golang version is lower than 1.18, you&amp;rsquo;ll see &lt;code&gt;note: module requires Go 1.18&lt;/code&gt; when you compile.&lt;/li&gt;
&lt;li&gt;Remove Apache Thrift，and refactor all related interface into github.com/cloudwego/gopkg/thrift.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1509"&gt;#1509&lt;/a&gt;] feat(retry): support Mixed Retry which integrating Failure Retry and Backup Request&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1478"&gt;#1478&lt;/a&gt;] feat: customized payload validator&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1514"&gt;#1514&lt;/a&gt;] feat(grpc): server returns cancel reason&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1513"&gt;#1513&lt;/a&gt;] feat(tool): support updating import path for PkgInfo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1425"&gt;#1425&lt;/a&gt;] feat(tool): support generating multiple handlers for multiple services&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1491"&gt;#1491&lt;/a&gt;] feat(grpc): add GetTrailerMetadataFromCtx&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1492"&gt;#1492&lt;/a&gt;] feat: add GetCallee to kitexutil to get the service name of callee&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1479"&gt;#1479&lt;/a&gt;] feat(tool): embed thriftgo into kitex tool&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1485"&gt;#1485&lt;/a&gt;] optimize: add cachekey to discovery event for debug&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1525"&gt;#1525&lt;/a&gt;] fix: move json-iterator back to support marshal &lt;code&gt;map[any]any&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1471"&gt;#1471&lt;/a&gt;] fix(streaming): resolve ctx diverge in server-side streaming&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1515"&gt;#1515&lt;/a&gt;] fix(gRPC): pass error when client transport is closed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1501"&gt;#1501&lt;/a&gt;] fix(generic): judge business error directly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1503"&gt;#1503&lt;/a&gt;] fix: return an unknown service/method exception to client correctly under multi_service server scenario&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1487"&gt;#1487&lt;/a&gt;] fix(generic): fix a generic serviceInfo compatible issue&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1489"&gt;#1489&lt;/a&gt;] fix(codec): wrap trans error for apache thrift read error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1486"&gt;#1486&lt;/a&gt;] fix(trans/netpoll): log when panic in onConnRead&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1476"&gt;#1476&lt;/a&gt;] fix: fix GetServerConn interface assert for streamWithMiddleware&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1481"&gt;#1481&lt;/a&gt;] fix(gonet): adjust gonet server read timeout to avoid read error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1466"&gt;#1466&lt;/a&gt;] fix: allow HEADERS frame with empty header block fragment&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1512"&gt;#1512&lt;/a&gt;] refactor: thrift and generic codec uses bufiox interface for encoding and decoding&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1490"&gt;#1490&lt;/a&gt;] refactor: optimized apache codec without reflection&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1483"&gt;#1483&lt;/a&gt;] refactor: use github.com/cloudwego/gopkg/protocol/thrift/apache&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1474"&gt;#1474&lt;/a&gt;] refactor: rm apache thrift in internal/mocks&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1470"&gt;#1470&lt;/a&gt;] refactor: rm apache thrift in pkg/generic &amp;amp; netpollmux&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1450"&gt;#1450&lt;/a&gt;] refactor(generic): remove apache thrift.TProtocol from generic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1441"&gt;#1441&lt;/a&gt;] refactor: deprecate bthrift, use cloudwego/gopkg&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1455"&gt;#1455&lt;/a&gt;] refactor(test): perf optimize and log loc correct&lt;/p&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1469"&gt;#1469&lt;/a&gt;] test: replace judgement of mem stats of client finalizer by closed count check&lt;/p&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1527"&gt;#1527&lt;/a&gt;] perf(grpc): bdp ping rate limit&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1511"&gt;#1511&lt;/a&gt;] perf(thrift): encodeBasicThrift write logic didn&amp;rsquo;t use kitex BinaryProtocol&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1504"&gt;#1504&lt;/a&gt;] perf(grpc): zero allocation in hot path&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1497"&gt;#1497&lt;/a&gt;] perf: add option to enable spancache for fastpb&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1495"&gt;#1495&lt;/a&gt;] perf(thrift): use kitex BinaryProtocol replace apache BinaryProtocol for apache thrift codec&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1532"&gt;#1532&lt;/a&gt;] chore: update dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1522"&gt;#1522&lt;/a&gt;] chore(generic): make generic streaming APIs internal&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1465"&gt;#1465&lt;/a&gt;] chore(generic): add an external method to create service info for generic streaming client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1468"&gt;#1468&lt;/a&gt;] build: adapt to go1.23rc2&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1482"&gt;#1482&lt;/a&gt;] chore(generic): add generic base using gopkg base&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1463"&gt;#1463&lt;/a&gt;] chore: fix grpc keepalive test by start server responsiblly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1462"&gt;#1462&lt;/a&gt;] chore(test): fix xorshift64 in consist_test.go&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1454"&gt;#1454&lt;/a&gt;] chore(ci): speed up multiple ci processes 8min -&amp;gt; 1min&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.10.0</title><link>https://www.cloudwego.io/blog/2024/06/12/kitex-release-v0.10.0/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/06/12/kitex-release-v0.10.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="performance-optimization"&gt;Performance Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Long connection: conncurrency = 100, qps increased by 4%, p99 decreased by 18%&lt;/li&gt;
&lt;li&gt;connection multiplexing: conncurrency = 100, qps increased by 7%, p99 decreased by 24%&lt;/li&gt;
&lt;li&gt;gRPC: conncurrency = 100, qps increased by 8%，p99 decreased by 10%&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="code-generation-simplification-and-optimization"&gt;Code Generation Simplification and Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Remove non-serialization code (By default)&lt;/strong&gt;: the original kitex_gen Thrift code includes Processor code to maintain consistency with Apache Thrift. However, Kitex does not need these codes. To solve users&amp;rsquo; code generation painpoint, this version Kitex removes this part of the code, increasing the generation speed by about 10%.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove Apache Codec code (Remove if configured)&lt;/strong&gt;：Kitex has custom FastCodec code, and the original Apache Codec is only required when using Buffered protocol. The new version of Kitex implements SkipDecoder. If enabled, the serialization will be completely independent of Apache Codec, reducing the generated code size by about 50%. Refer to this doc for usage &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/skip_decoder/"&gt;SkipDecoder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="new-feature"&gt;New Feature&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Thrift Serialize Data Ondemands&lt;/strong&gt;：Support defining FieldMask to achieve on-demand serialization of data (field clipping, merging, RPC Performance optimization, etc.), see details &lt;a href="https://github.com/cloudwego/thriftgo/tree/main/fieldmask"&gt;Thrift FieldMask RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="feature-optimization"&gt;Feature optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CircuitBreaker&lt;/strong&gt;： Support for customized circuit breaker error types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure Retry&lt;/strong&gt;：The code configuration of the customized result retry adds the ctx parameter to facilitate users to check whether to retry based on ctx information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove cache from consistent hashing&lt;/strong&gt;：Solve the issue of high latency and memory increase caused by scattered hash keys. After removing the cache, it can effectively reduce memory usage and cache management consumption in scenarios where keys are particularly scattered or even close to random distribution.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="user-experience-and-tool-optimization"&gt;User Experience and Tool Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kitex tool compatibility check&lt;/strong&gt;：Optimize the &amp;ldquo;undefined&amp;rdquo; compile error caused by introducing new definitions in old generated code. The Kitex tool will check the Kitex version used in go.mod before generating code. If the Kitex tool and Kitex version are incompatible, the code will not be generated and will provide corresponding upgrade and downgrade prompts and documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1370"&gt;#1370&lt;/a&gt;] feat(loadbalance): do not cache all the keys for Consistent Hash&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1359"&gt;#1359&lt;/a&gt;] feat:(generic) jsonpb using dynamicgo support parse IDL from memory&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1353"&gt;#1353&lt;/a&gt;] feat(retry): add ctx param for customized result retry funcs&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1352"&gt;#1352&lt;/a&gt;] feat: add option to specify ip version for default HTTPResolver&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1316"&gt;#1316&lt;/a&gt;] feat(kitex tool): support dependencies compatibility checking&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1346"&gt;#1346&lt;/a&gt;] feat(generic): set dynamicgo parse mode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1336"&gt;#1336&lt;/a&gt;] feat(tool): fast-codec supports Thrift Fieldmask&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1313"&gt;#1313&lt;/a&gt;, #1378] feat(thrift codec): implement skipDecoder to enable Frugal and FastCodec for standard Thrift Buffer Protocol&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1257"&gt;#1257&lt;/a&gt;] feat: CBSuite custom GetErrorType func&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1349"&gt;#1349&lt;/a&gt;] optimize(gRPC): gRPC onError uses CtxErrorf to print log with information in ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1326"&gt;#1326&lt;/a&gt;] optimize(tool): remove thrift processor for less codegen&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1369"&gt;#1369&lt;/a&gt;] perf(thrift): optimized skip decoder&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1314"&gt;#1314&lt;/a&gt;] perf: use dirtmake to reduce memclr cost&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1322"&gt;#1322&lt;/a&gt;] perf(codec): support fast write nocopy when using netpoll link buffer&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1276"&gt;#1276&lt;/a&gt;] perf: linear allocator for fast codec ReadString/ReadBinary&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1320"&gt;#1320&lt;/a&gt;] perf(codec): fast codec use batch alloc&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1379"&gt;#1379&lt;/a&gt;] fix: fix a bug &amp;ldquo;unknown service xxx&amp;rdquo; when using generic client by not writing IDLServiceName when it&amp;rsquo;s generic service&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1368"&gt;#1368&lt;/a&gt;] fix(remote): modify the error message thrown when no target service is found&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1374"&gt;#1374&lt;/a&gt;] fix: init default values when using liner allocator&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1361"&gt;#1361&lt;/a&gt;] fix: span cache re-cap bytes when using Make&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1362"&gt;#1362&lt;/a&gt;] fix(payloadCodec): replace the registered PayloadCodec if the type is same when using WithPayloadCodec for server-side&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1364"&gt;#1364&lt;/a&gt;] fix: fix grpc compressor mcache free panic when data is empty&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1328"&gt;#1328&lt;/a&gt;] fix(gRPC): release connection in DoFinish for grpc streaming to close the short connection&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1307"&gt;#1307&lt;/a&gt;] fix(connpool): kitex long pool reset idleList element to nil to prevent conn leak&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1294"&gt;#1294&lt;/a&gt;] fix(netpollmux): fix a bug that disables multi-service by assigning the first svcInfo to targetSvcInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1308"&gt;#1308&lt;/a&gt;] fix(generic): not write generic method name for binary generic exception to align with method names of services not using binary generic&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1344"&gt;#1344&lt;/a&gt;] refactor(tool): export thriftgo template definition in kitextool&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1385"&gt;#1385&lt;/a&gt;] chore: update dynamicgo to v0.2.8&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1383"&gt;#1383&lt;/a&gt;] chore: upgrade netpoll to v0.6.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1376"&gt;#1376&lt;/a&gt;] chore: integration test use go 1.20 to solve the compatibility issue of official gRPC in kitex-tests repo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1355"&gt;#1355&lt;/a&gt;] chore: upgrade netpoll to v0.6.1 pre-release version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1338"&gt;#1338&lt;/a&gt;] chore: correct the comment of FreezeRPCInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1347"&gt;#1347&lt;/a&gt;] chore: use runtimex to replace choleraehyq/pid&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1342"&gt;#1342&lt;/a&gt;] chore: update sonic/loader to v0.1.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1334"&gt;#1334&lt;/a&gt;] chore: update dynamicgo to v0.2.3&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1324"&gt;#1324&lt;/a&gt;] chore: update dynamicgo and sonic version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1317"&gt;#1317&lt;/a&gt;] chore: frugal v0.1.15 (with migrated iasm)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong&gt;
@XiaoYi-byte&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.9.0</title><link>https://www.cloudwego.io/blog/2024/03/04/kitex-release-v0.9.0/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/03/04/kitex-release-v0.9.0/</guid><description>
&lt;p&gt;v0.9.0 provides two important features for Thrift: Thrift Streaming and Multi-Service. Multiple RC versions have been released for internal usage to collect feedback, so the final release version is delayed.&lt;/p&gt;
&lt;p&gt;Below are some important changes:&lt;/p&gt;
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Thrift Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Thrift Streaming feature based on gRPC (HTTP2) has been officially released. Users can use Thrift to define their own Streaming requests. To maintain compatibility with IDL parsing, Kitex chooses to use annotation to define stream method. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/thrift_streaming/"&gt;Thrift Streaming Usage&lt;/a&gt;. This version also improves the monitoring and reporting of Streaming requests, which also applies to gRPC-Protobuf. Note that Thrift is mainly used for data serialization and does not use the Thrift message protocol.&lt;/p&gt;
&lt;p&gt;Due to the complexity of the HTTP2 protocol, it has a certain impact on performance. We plan to release a self-developed Streaming protocol to improve performance in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Full Thrift MultiService support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the v0.8.0 version, Kitex supports gRPC multi-service to align gRPC, while Thrift previously provided &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/combine_service/"&gt;Combine Service&lt;/a&gt; as &amp;lsquo;Multi-Service&amp;rsquo; to ensure protocol compatibility. However, the use of this feature requires that the methods of different IDL services cannot be the same, and it is not real multi-Service.&lt;/p&gt;
&lt;p&gt;In this version, Kitex provides real multi-service functionality at the protocol level based on TTHeader, supporting the registration of multiple Thrift IDL Services in one server, while also being compatible with old CombineServices. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/multi_service/"&gt;Multi-Service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: Thrift Multi-Service requires the use of the TTHeader transport protocol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Frugal&amp;rsquo;s experimental support for ARM64&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supported the use of Frugal on ARM64 machines, temporarily supported by Fallback.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Server level context timeout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added server.WithEnableContextTimeout supports adding timeout to context at the server level. And in the new version, Kitex will default pass the client-side timeout in the TTHeader to server-side. Usage please see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/timeout/"&gt;Timeout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: TTHeader transport protocol is required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. KitexProtobuf protocol supports JSON generic call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The new version also provides the JSON generic call for KitexProtobuf (TTHeader is required). Please see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/#jsonpbgeneric"&gt;JSONPbGeneric&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: TTHeader transport protocol is required.。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Adding a new LoadBalance policy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Adding a new LoadBalance method of Alias Method to reduce the time complexity of random weight LoadBalance algorithm. Specified by &lt;code&gt;client.WithLoadBalancer(loadbalance.NewWeightedRandomWithAliasMethodBalancer())&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="special-change"&gt;Special Change&lt;/h3&gt;
&lt;p&gt;Kitex v0.9.0 requires Go version must &amp;gt;= 1.17, no longer compatible with Go &amp;lt;= v1.16 (stability requirement must upgrade golang.org/x/library, which introduced Go version limit)&lt;/p&gt;
&lt;h2 id="expand-the-ecosystem-of-config-center"&gt;&lt;strong&gt;Expand the ecosystem of Config Center&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that it is not related to v0.9.0 version, only synchronize the state of community expansion&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Main configuration centers have finish integrated&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex supports controlling the policies of Timeout, Retry, Circuit Breaker, Limiter through the remote configuration center. Thanks to the contributors of the CloudWeGo community, all the &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/third-party/config-center/"&gt;main configuration centers&lt;/a&gt; have finish integrated. Usage please see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/third-party/config-center/"&gt;Config Center&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1208"&gt;#1208&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1251"&gt;#1251&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1230"&gt;#1230&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1226"&gt;#1226&lt;/a&gt;] feat: support thrift streaming (replacing the protobuf payload of GRPC/HTTP2 with thrift binary)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1217"&gt;#1217&lt;/a&gt;] feat: support thrift and pb multi service&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1268"&gt;#1268&lt;/a&gt;] feat(thrift): support frugal fallback for arm&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/951"&gt;#951&lt;/a&gt;] feat(bizerr): support returning biz status error for json/map generic server&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1199"&gt;#1199&lt;/a&gt;] feat(loadbalance): add loadbalancer using Alias Method (#1184)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1244"&gt;#1244&lt;/a&gt;] feat(timeout): add option server.WithEnableContextTimeout to enable server timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1228"&gt;#1228&lt;/a&gt;] feat(streaming): Adding Recv/End events to streaming requests to improve trace information&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1062"&gt;#1062&lt;/a&gt;] feat(generic): supports JSON and Map generic call for the KitexProtobuf protocol.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1225"&gt;#1225&lt;/a&gt;] feat(timeout): support timeout transparent transmission by default when using TTHeader transport protocol&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1211"&gt;#1211&lt;/a&gt;] feat(hessian2): support nested struct for hessian2 customized Exception&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1222"&gt;#1222&lt;/a&gt;] optimize(frugal): enable frugal by default when the generated code is using slim template&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1209"&gt;#1209&lt;/a&gt;] optimize: split encoder interface to customize meta and payload encoding implementation&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1206"&gt;#1206&lt;/a&gt;] optimize(tool): add IsDir judge in readTemplate and add template register func&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1198"&gt;#1198&lt;/a&gt;] optimize(kitexutil): add util api for getting real request and response&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1197"&gt;#1197&lt;/a&gt;] optimize(kitexutil): add GetCallerIP util method in kitexutil to fetch Caller IP&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1195"&gt;#1195&lt;/a&gt;] optimize(error): more specific instruction when panic in server handler&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1235"&gt;#1235&lt;/a&gt;] optimize(tool): add IDLName field in PackageInfo for cwgo tool rendering&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1238"&gt;#1238&lt;/a&gt;] optimize(bizerr): support biz status error for streaming mode&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1236"&gt;#1236&lt;/a&gt;] fix(hessian2): correct code-ref behavior when thrift file is not in project dir&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1234"&gt;#1234&lt;/a&gt;] fix(hessian2): still perform replacement on handler.go when -service is not specified for hessian2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1232"&gt;#1232&lt;/a&gt;] fix(gRPC): append &amp;ldquo;h2&amp;rdquo; to next proto in gRPC tlsConfig to enable protocol negotiation in TLS&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1215"&gt;#1215&lt;/a&gt;] fix: bugfix for hessian2 tpl codegen&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1203"&gt;#1203&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1205"&gt;#1205&lt;/a&gt;] fix: fix the issue where disabling rpcinfo reuse on the server side does not take effect&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1227"&gt;#1227&lt;/a&gt;] fix: idl-ref overwritten when using hessian2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1194"&gt;#1194&lt;/a&gt;] fix(retry): always set RespOp &amp;amp;&amp;amp; preventive panic to avoid dead loop&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="chore--tests"&gt;Chore &amp;amp; Tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1273"&gt;#1273&lt;/a&gt;] chore: upgrade netpoll to v0.6.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1263"&gt;#1263&lt;/a&gt;] chore: update sonic to v1.11.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1255"&gt;#1255&lt;/a&gt;] chore: upgrade netpoll to v0.6.0 pre-release version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1252"&gt;#1252&lt;/a&gt;] chore: upgrade golang.org/x/net&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1254"&gt;#1254&lt;/a&gt;] chore: upgrade sonic to v1.11.0 to support go1.22&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1231"&gt;#1231&lt;/a&gt;] chore: frugal support go1.22&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1220"&gt;#1220&lt;/a&gt;] test: correct the cachekey in the benchmark test of balancer&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1196"&gt;#1196&lt;/a&gt;] test: add just biz handler message error&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong&gt;
@DMwangnima @jizhuozhi @NX-Official @jieqiboh @Lvnszn @Skyenought&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.8.0</title><link>https://www.cloudwego.io/blog/2023/11/30/kitex-release-v0.8.0/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/11/30/kitex-release-v0.8.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC Multi-Service Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implemented multi-service registration for Kitex gRPC, please refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/multi_service/"&gt;Multiple Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Acquire Kitex RPCInfo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added methods for easy retrieval of RPC information from RPCInfo, please refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/"&gt;Acquire RPC information&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="optimizations"&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Map Generic Call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Map generic call supports returning []byte for binary fields via SetBinaryWithByteSlice option.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. RPCInfo asynchronous use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added an option to disable reusing RPCInfo, facilitating asynchronous usage, please refer to please refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/#12-asynchronous-usage"&gt;Acquire RPC information&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;p&gt;Upgraded frugal to &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.12"&gt;v0.1.12&lt;/a&gt;, fixing some concurrency issues when compiling types, especially the issue when registering new modules which may conflict with sonic.&lt;br&gt;
It&amp;rsquo;s STRONGLY SUGGESTED updating both frugal and sonic to the latest version by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; go get github.com/cloudwego/frugal@latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; go get github.com/bytedance/sonic@latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1051"&gt;#1051&lt;/a&gt;] feat(grpc): support gRPC multi-service on a server&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1189"&gt;#1189&lt;/a&gt;] feat(rpcinfo): add kitexutil methods for the convenience to fetch rpc information from RPCInfo&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1176"&gt;#1176&lt;/a&gt;] feat(tool): add an environment variable to make it easier to debug kitex tool&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1173"&gt;#1173&lt;/a&gt;] feat(rpcinfo): allow disable rpcinfo reuse for async reference&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1172"&gt;#1172&lt;/a&gt;] feat(retry): client.WithSpecifiedResultRetry should have higher priority&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1150"&gt;#1150&lt;/a&gt;] feat(proxy): add an interface to customize proxy middleware to replace the default implementation&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1159"&gt;#1159&lt;/a&gt;] feat(generic): support returning []byte for binary fields in map generic&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1153"&gt;#1153&lt;/a&gt;] feat(retry): add Extra for retry.FailurePolicy for better extension&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1187"&gt;#1187&lt;/a&gt;] optimize(tool): add an option to keep resp for kitex tool&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1183"&gt;#1183&lt;/a&gt;] optimize(meshheader): retrieve rip from meshheader and write it to TransInfo&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1178"&gt;#1178&lt;/a&gt;] optimize(bizErr): recurse to obtain BizErr to avoid additional Error encapsulation in the middle, resulting in unwrap results that are not BizErr&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1126"&gt;#1126&lt;/a&gt;] fix(generic): the issue of structs cache of generic call has dirty data under multiple services scene&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1168"&gt;#1168&lt;/a&gt;] fix(tool): remove the pointer to java.Object in generated file for &lt;a href="https://github.com/kitex-contrib/codec-dubbo"&gt;CodecDubbo&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1169"&gt;#1169&lt;/a&gt;] fix(tool): empty struct generate wrong struct&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1166"&gt;#1166&lt;/a&gt;] fix(generic): issue of deep copy function generation when map key type is binary&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1155"&gt;#1155&lt;/a&gt;] fix(tool): add import package &amp;lsquo;context&amp;rsquo; for gRPC client.go&lt;/p&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1177"&gt;#1177&lt;/a&gt;] test: avoid port conflict&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1190"&gt;#1190&lt;/a&gt;] chore: update thriftgo version to v0.3.3&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1186"&gt;#1186&lt;/a&gt;] chore: update readme with examples and new blogs&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1185"&gt;#1185&lt;/a&gt;] chore: add ci for windows&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1182"&gt;#1182&lt;/a&gt;] chore: update dynamicgo to v0.1.6&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1152"&gt;#1152&lt;/a&gt;] chore: update dynamicgo and sonic version&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1164"&gt;#1164&lt;/a&gt;] chore: update frugal to v0.1.12 and allow disable frugal by build tag&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1161"&gt;#1161&lt;/a&gt;] chore: update frugal to v0.1.10&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1157"&gt;#1157&lt;/a&gt;] chore: update frugal to v0.1.9&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1151"&gt;#1151&lt;/a&gt;] chore(test): upgrade mockey to latest to compatible with Go1.21&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.7.2</title><link>https://www.cloudwego.io/blog/2023/09/27/kitex-release-v0.7.2/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/09/27/kitex-release-v0.7.2/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Retry: limit perncetage of retry requests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The feature improves the usability of backup requests: if a request exceeds the retry delay threshold, a backup request will be sent; but if the request succeeds within the timeout threshold, it will not be treated as an error. Therefore large amount of backup requests may be sent due to a network jitter, which increases the pressure on the server and could even cause an avanlache.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s recommended to update your current implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialize a RetryContainer with &lt;code&gt;retry.NewRetryContainerWithPercentageLimit()&lt;/code&gt; to limit the percentage of retry requests;&lt;/li&gt;
&lt;li&gt;Add an option &lt;code&gt;client.WithCloseCallbacks(container.Close)&lt;/code&gt; when initializing a client, in order to release relevant resources when the client is recycled.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimizations"&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send END_STREAM flag in unary call&lt;/li&gt;
&lt;li&gt;Fix grpc streaming tps decreasing and the selection logic of compressor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Long Connection Pool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;MaxIdleGlobal&lt;/code&gt; is not set, it is not limited by default, simplifying the configuration of long connection pools.&lt;/p&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade netpoll to &lt;a href="https://github.com/cloudwego/netpoll/releases/tag/v0.5.0"&gt;v0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upgrade frugal to &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.8"&gt;v0.1.8&lt;/a&gt;, enable frugal when compiled on go1.21 (note: old versions of frugal are not adapted to go1.21)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;Full Release Log&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1117"&gt;#1117&lt;/a&gt;] feat(retry): support retry percentage limit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1033"&gt;#1033&lt;/a&gt;] optimize: no need to check svcInfo twice&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1115"&gt;#1115&lt;/a&gt;] optimize: rm outdated framed suggestion&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1095"&gt;#1095&lt;/a&gt;] optimize: add K_METHOD in serviceinline ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1107"&gt;#1107&lt;/a&gt;] optimize(connpool): set maxIdleGlobal to no limit if not set&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1116"&gt;#1116&lt;/a&gt;] fix: use the last rpcinfo to trace&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1104"&gt;#1104&lt;/a&gt;] fix: move limiter handler to the last of the inbound handler to get rpcinfo in custom limiter&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1103"&gt;#1103&lt;/a&gt;] fix: reset all fields of netpoll byte buffer when recycle it&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1106"&gt;#1106&lt;/a&gt;] fix(grpc): fix grpc streaming tps decreasing and the selection logic of compressor&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1114"&gt;#1114&lt;/a&gt;] fix(gRPC): client send END_STREAM flag in unary call (#1066)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1096"&gt;#1096&lt;/a&gt;] fix(tool): add backquote to handle filepath string invalid syntax under windows os&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1098"&gt;#1098&lt;/a&gt;] fix(tool): fix import for codegen template when using slim and unknown fields&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1124"&gt;#1124&lt;/a&gt;] test: fix codegen script&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1122"&gt;#1122&lt;/a&gt;] test: add codegen test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1119"&gt;#1119&lt;/a&gt;] test(connpool): modify the idleTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1133"&gt;#1133&lt;/a&gt;] chore: update version v0.7.2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1125"&gt;#1125&lt;/a&gt;] chore: upgrade netpoll to v0.5.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1123"&gt;#1123&lt;/a&gt;] perf: replace concurrent string builder with lock&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1118"&gt;#1118&lt;/a&gt;] perf: optimize remote addr setter interface to reduce lock cost of Address()&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1110"&gt;#1110&lt;/a&gt;] chore: upgrade netpoll to v0.4.2 pre-release&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1061"&gt;#1061&lt;/a&gt;] chore: netpoll pre release v0.4.2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1100"&gt;#1100&lt;/a&gt;] chore: enable frugal on go1.21&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.7.0</title><link>https://www.cloudwego.io/blog/2023/08/14/kitex-release-v0.7.0/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/08/14/kitex-release-v0.7.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC Compression Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implemented compression support for Kitex gRPC, allowing compression methods like gzip to reduce payload size.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. GLS (Goroutine Local Storage)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Utilized the &lt;a href="https://github.com/cloudwego/localsession"&gt;local-session&lt;/a&gt; component for context propagation in fallback requests, addressing the issue of broken microservice chains caused by missing ctx.&lt;/p&gt;
&lt;h3 id="optimizations"&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Unserialized Unknown Fields&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implemented unserialization of unknown fields, resulting in a performance improvement of approximately 6x to 7x on FastCodec. See details in &lt;a href="https://github.com/cloudwego/kitex/pull/1017"&gt;#1017&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Integration with DynamicGo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Integrated &lt;a href="https://github.com/cloudwego/dynamicgo"&gt;dynamicgo&lt;/a&gt; into Kitex&amp;rsquo;s generic module to enhance performance of JSON/HTTP generic invocations (+50% to 200%).&lt;/p&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;p&gt;Upgraded Thriftgo library dependency to v0.3.0, adding support for Thriftgo reflection, enabling runtime access to IDL metadata.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1053"&gt;#1053&lt;/a&gt;] feat(retry): support to distinguish local retry request&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1058"&gt;#1058&lt;/a&gt;] feat(retry): support delete retry policy dynamically&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1000"&gt;#1000&lt;/a&gt;] feat(grpc): support grpc compress&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1018"&gt;#1018&lt;/a&gt;] feat: use local-session to backup request context in case of missing&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1045"&gt;#1045&lt;/a&gt;] feat(generic): support base64 codec for map generic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1035"&gt;#1035&lt;/a&gt;] feat(config): provide the ability to dynamically configure the rpctimeout config on the method hierarchy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/825"&gt;#825&lt;/a&gt;] feat(generic): integrate dynamicgo into kitex generic call&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1019"&gt;#1019&lt;/a&gt;] feat(lb): interleaved weighted round-robin load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1064"&gt;#1064&lt;/a&gt;] optimize: check header max size when ttheader encode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1017"&gt;#1017&lt;/a&gt;] optimize: implement unknown field function without serialization&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1036"&gt;#1036&lt;/a&gt;] optimize(protobuf): ignore err when (un)marshal empty req/resp&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1056"&gt;#1056&lt;/a&gt;] optimize(tool): optimize struct ref&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1043"&gt;#1043&lt;/a&gt;] optimize: add method info to the error message of the server handler panic for easy troubleshooting&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1025"&gt;#1025&lt;/a&gt;] optimize: use Tags of ServerBasicInfo as default Tags of RegistryInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1020"&gt;#1020&lt;/a&gt;] optimize: add nil check for MethodInfo which get from ServiceInfo in client.Call to ignore panic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1073"&gt;#1073&lt;/a&gt;] fix: fix failure retryer dump panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1067"&gt;#1067&lt;/a&gt;] fix: slim template with deepcopy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1055"&gt;#1055&lt;/a&gt;] fix: ignore SIGHUP when run with nohup&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1048"&gt;#1048&lt;/a&gt;] fix(retry): keep the behavior of retry policy consistent between initing and updating&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1047"&gt;#1047&lt;/a&gt;] fix(tool): cli warning for unknown suffix&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1038"&gt;#1038&lt;/a&gt;] fix(config): correct the function signature of the rpcinfo.TimeoutProvider implementation&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1034"&gt;#1034&lt;/a&gt;] fix(generic): add case int16 into buildinTypeIntoString&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1023"&gt;#1023&lt;/a&gt;] fix(generic): avoid dead-loop when marshal self-referenced struct&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1028"&gt;#1028&lt;/a&gt;] fix:modify .licenserc.yaml&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1012"&gt;#1012&lt;/a&gt;] fix: skip frugal on go 1.21&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/992"&gt;#992&lt;/a&gt;] fix(grpc): use mcache to fix memory leak caused by grpc codec buffer to reuse memory incorrectly&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/994"&gt;#994&lt;/a&gt;] fix(tool): fix kitex tool git repo pulling logic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1074"&gt;#1074&lt;/a&gt;] chore: update thriftgo to v0.3.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1031"&gt;#1031&lt;/a&gt;] chore: remove wechat group in readme&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1008"&gt;#1008&lt;/a&gt;] chore: update dynamicgo to v0.1.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1006"&gt;#1006&lt;/a&gt;] chore: remove unnecessary replace for frugal&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1007"&gt;#1007&lt;/a&gt;] chore: upgrade netpoll to v0.4.1&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.6.1</title><link>https://www.cloudwego.io/blog/2023/06/19/kitex-release-v0.6.1/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/06/19/kitex-release-v0.6.1/</guid><description>
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="hotfix"&gt;Hotfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/988"&gt;#988&lt;/a&gt;] hotfix(code_gen): fix the problem of code generation with slim template failure&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.6.0</title><link>https://www.cloudwego.io/blog/2023/06/14/kitex-release-v0.6.0/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/06/14/kitex-release-v0.6.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. GRPC Metainfo Pass Through&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The gRPC client sets the header to ctx by default, and external methods can use &lt;code&gt;GetHeaderMetadataFromCtx&lt;/code&gt; to obtain meta information. It can be used to obtain meta information within transmeta and set it to rpcinfo, or to obtain header information within middlewares.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Kitex configuration module refactoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added config items for retry, circuit breaker, timeout, and flow limiting to support [configmanager] (&lt;a href="https://github.com/cloudwego/configmanager"&gt;https://github.com/cloudwego/configmanager&lt;/a&gt;) Middleware defined interfaces to support extended integration with external configuration centers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kitex - Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for inserting deep copy function of an object in thrift generation code for deep copying source objects to destination objects. The use method is to add &lt;code&gt;-deep-copy-api&lt;/code&gt; parameter to the kitex command;&lt;/li&gt;
&lt;li&gt;Support for inserting IDL descriptor registration code into thrift generation code, which is used to register IDL descriptor information into the &lt;code&gt;github.com/cloudwego/kitex/pkg/reflection/thrift&lt;/code&gt; package after loading the corresponding generated code at runtime, and obtain descriptor information through the exposed functions. The use method is to add &lt;code&gt;generate-reflection-info=true&lt;/code&gt; to the &lt;code&gt;thrift&lt;/code&gt; parameter of kitex command, such as &lt;code&gt;kitex -thrift generate-reflection-info=true&lt;/code&gt;&amp;hellip; Kitex only supports IDL descriptor information registration in v1.12.0, richer query interfaces will be released in subsequent versions, and IDL descriptor registration function generation will also be modified to default generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimization"&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Refactor the detection server to support detection of multiple protocols&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The old version of the detection server only supports http2 as the detection protocol. The v1.12.0 version supports users to pass-in the &lt;code&gt;remote.ServerTransHandlerFactory&lt;/code&gt; corresponding to the &lt;code&gt;remote.ServerTransHandler&lt;/code&gt; which implement &lt;code&gt;detection.DetectableServerTransHandler&lt;/code&gt; interface as indefinite parameters, and cooperate with the default &lt;code&gt;remote.ServerTransHandler&lt;/code&gt; to handle unmatched protocols to achieve a Kitex Server compatible with multiple protocols.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Consistency hash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Function &lt;code&gt;buildVirtualNodes&lt;/code&gt; in Kitex consistency hash load balancer uses &lt;code&gt;virtualFactorLen&lt;/code&gt; to initialize a bytes array, and there may be insufficient space to accommodate the VirtualNodeLen number, resulting in the address part being overwritten.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Long Connection Pool Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fix the issue that the records that long connection pool reuses connections successfully didn&amp;rsquo;t report.&lt;/p&gt;
&lt;h3 id="other"&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Upgrade netpoll library dependency to v0.4.0 and support for [configmanager] ( &lt;a href="https://github.com/cloudwego/configmanager"&gt;https://github.com/cloudwego/configmanager&lt;/a&gt; ) v0.2.0.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="feature-1"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/923"&gt;#923&lt;/a&gt;] feat(grpc): grpc client set header and trailer to context by default and provide api to get header from ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/891"&gt;#891&lt;/a&gt;] feat: support to service-inline rpc client and server, which can transfer the rpc call as func call. The feature needs to be used with the generation tool&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/946"&gt;#946&lt;/a&gt;] feat: default server handler support executing Read function by trans pipeline&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/936"&gt;#936&lt;/a&gt;] feat(config): add config items for retry/cb/rcptimeout/limiter&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/924"&gt;#924&lt;/a&gt;] [&lt;a href="https://github.com/cloudwego/kitex/pull/939"&gt;#939&lt;/a&gt;] feat(code_gen): support generating deepcopy apis&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/926"&gt;#926&lt;/a&gt;] feat: support thrift reflection info registry&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/897"&gt;#897&lt;/a&gt;] feat: support loop_service in custom template&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/961"&gt;#961&lt;/a&gt;] optimize(tool): optimize kitex tool tpl with -use param&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/966"&gt;#966&lt;/a&gt;] optimize(ttheader): add type check for headerFlags of TTheader&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/919"&gt;#919&lt;/a&gt;] optimize: replace go func with GoFunc to avoid panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/960"&gt;#960&lt;/a&gt;] optimize: make stats package public to reuse it in expanded repo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/955"&gt;#955&lt;/a&gt;] optimize: remove redundant onRead error log in gonet transerver&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/954"&gt;#954&lt;/a&gt;] optimize: dont return error when transHandler not implement graceful shutdown&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/941"&gt;#941&lt;/a&gt;] optimize(callopt): optimize the debug info of callopt to reduce the possibility of slice grow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/963"&gt;#963&lt;/a&gt;] fix(generic): generic-map writeInt8 fails on byte&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/901"&gt;#901&lt;/a&gt;] fix(mux): mux connection asynccallback dont create new goroutine and server wait all crrst packets received by client&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/921"&gt;#921&lt;/a&gt;] fix(loadbalance): fix consisthash byte[] length&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/922"&gt;#922&lt;/a&gt;] fix(mux): fix the problem that output unreasonable error when exit if enable mux and use Kitex Protobuf&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/927"&gt;#927&lt;/a&gt;] fix(connpool): long connection pool reports reuse success using reporter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/958"&gt;#958&lt;/a&gt;] refactor(errorHandler): refactor the definition of error handler to get more information to handle error&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/943"&gt;#943&lt;/a&gt;] refactor(client): refactor client.Call to improve readability&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/560"&gt;#560&lt;/a&gt;] refactor: refactor server detection trans handler to support custom registration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tests"&gt;Tests:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/900"&gt;#900&lt;/a&gt;] test(generic): add thrift reflection (using dynamicgo) generic call example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/976"&gt;#976&lt;/a&gt;] chore: upgrade netpoll to v0.4.0 and thriftgo to v0.2.11&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/956"&gt;#956&lt;/a&gt;] chore: update configmanager version to v0.2.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/948"&gt;#948&lt;/a&gt;] chore: format with goimports -local github.com/cloudwego/kitex&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.5.3</title><link>https://www.cloudwego.io/blog/2023/04/21/kitex-release-v0.5.3/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/04/21/kitex-release-v0.5.3/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Failure retry：add configuration to support disable timeout retry when do failure retry, which is for the non-idempotent request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codegen tool：support codegen in windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error code: fine grained rpc timeout error code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thrift Fast Codec: support unknown fields&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background of &amp;ldquo;unknown fields&amp;rdquo;: In Thrift, adding fields in the IDL is transparent to the party that has not updated the IDL. Updating the IDL and generating code is necessary to access new fields, which requires all downstream nodes to upgrade when a node on the invocation Chain updates the IDL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unknown fields&amp;rdquo; supports retaining unrecognized fields. For fields that do not exist in the IDL, they are read and set in the &lt;code&gt;_unknownFields&lt;/code&gt; field of the struct.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage: &lt;code&gt;kitex -thrift keep_unknown_fields your.thrift&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Result retry: fix the issue that the result retry becomes invalid after failure retry policy is modified dynamically&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="feature-1"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/887"&gt;#887&lt;/a&gt;] feat(retry): add configuration to support disable timeout retry when do failure retry, which is for the non-idempotent request&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/881"&gt;#881&lt;/a&gt;] feat(tool): support codegen in windows&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/880"&gt;#880&lt;/a&gt;] feat(rpctimeout): fine grained rpc timeout error code&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/872"&gt;#872&lt;/a&gt;] feat(thrift): support unknown fields in fast codec&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/884"&gt;#884&lt;/a&gt;] optimize(rpcinfo): RPCInfo.To().Tag() use instance tag instead of remoteinfo tag firstly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix-1"&gt;Fix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/896"&gt;#896&lt;/a&gt;] fix(remoteinfo): fix the race problem caused by non-deepcopy CopyFrom of remoteinfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/892"&gt;#892&lt;/a&gt;] fix(grpc): comment error log for the error of ReadFrame.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/889"&gt;#889&lt;/a&gt;] fix(retry): result retry doesn’t work after failure retry policy is modified dynamically&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/866"&gt;#866&lt;/a&gt;] fix(grpc): no need to set context return by sendMsg/recvMsg to the context of stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/898"&gt;#898&lt;/a&gt;] chore: modify template for PR to check the modification of user doc&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/854"&gt;#854&lt;/a&gt;] style(nphttp2): keep struct receiver name same&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.5.0</title><link>https://www.cloudwego.io/blog/2023/03/08/kitex-release-v0.5.0/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/03/08/kitex-release-v0.5.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Fallback: Support fallback for client-side&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the RPC requests fail, users usually have some degradation measures to ensure the effective response (for example, construct the default response after the request timeout or circuit breaker).
Kitex&amp;rsquo;s Fallback supports the processing of all error requests. At the same time, because business errors are usually returned through the Resp (BaseResp field), Kitex also supports the processing of Resp.
Refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/fallback/"&gt;Fallback&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Kitex - gRPC: Client add TLS option configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setup via client.WithGRPCTLSConfig option.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kitex - Tool&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Support customized scaffold templates&lt;/strong&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/custom_tpl/"&gt;Custom Scaffold Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support specifying the directory for generating code&lt;/strong&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/#-gen-path"&gt;Code Generation Tool -gen-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support using protoc plugin&lt;/strong&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/#-protobuf-plugin"&gt;Code Generation Tool -protobuf-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimization"&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Loadbalance：Use Weighted Round Robin algo as default Loadbalance policy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The old version uses Weight Random to do the loadbalance by default. Random can achieve the global balance. However, in the case of a small number of server instances, there is a large probability of random continuous access to the same instance, resulting in an increase in the maximum concurrent requests of downstream nodes. Therefore, the new version adjusts the default policy to Weight Round Robin.
Refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/loadbalance/"&gt;Loadbalance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Goroutine Resource of Connection Pool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the old version uses a long connection, each client corresponds to a goroutine resource cleaning connection. When there are many clients, it will cause too many goroutines. The new version changes to share the goroutine to avoid the number of goroutines increasing with the number of clients.&lt;/p&gt;
&lt;h3 id="other"&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Upgrade the frugal and pid dependency lib to support go 1.20.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature-1"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/840"&gt;#840&lt;/a&gt;] feat(fallback): support fallback ability for kitex client-side, usage guide refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/fallback/"&gt;Fallback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/841"&gt;#841&lt;/a&gt;] feat(tool): add GetResult() and GetFirstArgument() methods for service params of protobuf&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/791"&gt;#791&lt;/a&gt;] feat(tool): merge two ways of passing extensions, to support two ways at sametime&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/797"&gt;#797&lt;/a&gt;] feat(loadbalance): use smooth weighted round robin algo as default Loadbalance policy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/760"&gt;#760&lt;/a&gt;] feat(grpc): support TLS config in kitex grpc client&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/781"&gt;#781&lt;/a&gt;] feat(tool): supports custom templates&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/783"&gt;#783&lt;/a&gt;] feat(ttheader): add encode logic for gdpr token in TransInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/775"&gt;#775&lt;/a&gt;] feat(tool): support custom generate path&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/687"&gt;#687&lt;/a&gt;] feat(tool): add protoc plugin flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/750"&gt;#750&lt;/a&gt;] optimize(generic): generic call write zero value for required and default fields to meet the specification of apache thrift and keep consistent with normal thrift encode of Kitex.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/739"&gt;#739&lt;/a&gt;] optimize(generic): modify the url routing to align with Hertz for HTTP generic call&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/752"&gt;#752&lt;/a&gt;] optimize(ttheader): attach part of ttheader binary into error when readKVInfo failed, which is useful for troubleshooting&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/821"&gt;#821&lt;/a&gt;] optimize(config): add DeepCopy() &amp;amp; Equals() to circuitbreaker.CBConfig and retry.Policy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/827"&gt;#827&lt;/a&gt;] optimize: revise the remoteInfo of retry call, using the remoteInfo of the RPCCall that returns&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/762"&gt;#762&lt;/a&gt;] optimize(tool): add go mod auto replace to thrift 0.13 in thrift mode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/755"&gt;#755&lt;/a&gt;] optimize: improve client error msg when ctx cancel or timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/756"&gt;#756&lt;/a&gt;] optimize: use sync.Cond as the profiler event trigger&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/753"&gt;#753&lt;/a&gt;] optimize: add recover for client&amp;rsquo;s Close&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/734"&gt;#734&lt;/a&gt;] fix(retry): fix the panic problem caused by concurrent read and write of rpcinfo under backup retry&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/837"&gt;#837&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/842"&gt;#842&lt;/a&gt;] fix(metahandler): adjust MetainfoHandler to the top of the MetaHandlers array to ensure that the logic of custom MetaHandlers that depends on MetainfoHandler works&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/812"&gt;#812&lt;/a&gt;] fix: use detectionHandler to perform protocol detection in windows environment to support gRPC&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/851"&gt;#851&lt;/a&gt;] fix: upgrade frugal to v0.1.6 for missing stop field&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/845"&gt;#845&lt;/a&gt;] fix: fix the problem that RPCStat report status as success when biz handler return err&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/822"&gt;#822&lt;/a&gt;] fix(loadbalance): don&amp;rsquo;t share balancer factory when loadbalance is defined by user&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/732"&gt;#732&lt;/a&gt;] fix(mux): mux server waits for shardqueue close before shutdown&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/795"&gt;#795&lt;/a&gt;] fix(grpc): zero first byte of grpc data frame, which could be random data from mcache&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/668"&gt;#668&lt;/a&gt;] fix: fix race problem in queue.go/queue @dugenkui03&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/743"&gt;#743&lt;/a&gt;] fix: use sharedTicker for long conn pool to prevent goroutine numbers increase as the number of client increases&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/799"&gt;#799&lt;/a&gt;] fix(util): should return when get at least one GOPATH @StellarisW&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/807"&gt;#807&lt;/a&gt;] fix(codec): fix fastpb nil ptr when struct fields are all default values&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/794"&gt;#794&lt;/a&gt;] fix(tool): fix fastpb codegen by updating dependency&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/787"&gt;#787&lt;/a&gt;] fix(tool): the import did not use the new method to render when template append content&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/785"&gt;#785&lt;/a&gt;] fix(tool): remove useless combine service files&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/754"&gt;#754&lt;/a&gt;] fix: fix the usage of metainfo in grpc scene&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/814"&gt;#814&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/843"&gt;#843&lt;/a&gt;] refactor(trans): return error in onRead of defaultServerHandler and close conn in outer method&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/816"&gt;#816&lt;/a&gt;] refactor(utils): add utils.GetEnvLogDir and deprecate utils.GetLogDir&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test--docs--chore"&gt;Test &amp;amp; Docs &amp;amp; Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/839"&gt;#839&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/693"&gt;#693&lt;/a&gt;] test: import mockey repo and add usage demo of mockey unit test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/806"&gt;#806&lt;/a&gt;] test(transmeta):add some test cases for tansmeta package&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/761"&gt;#761&lt;/a&gt;] docs: update README.md @fuergaosi233&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/817"&gt;#817&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/832"&gt;#832&lt;/a&gt;] chore: upgrade dependency lib to adapt go 1.20&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/772"&gt;#772&lt;/a&gt;] chore: modify kitex gen code meta file name from kitex.yaml to kitex_info.yaml&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Proxyless Practice：Traffic Lane Implementation with Istio and OpenTelemetry</title><link>https://www.cloudwego.io/blog/2022/12/20/kitex-proxyless-practicetraffic-lane-implementation-with-istio-and-opentelemetry/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/12/20/kitex-proxyless-practicetraffic-lane-implementation-with-istio-and-opentelemetry/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;Preface: Kitex Proxyless enables the Kitex service to interact directly with istiod without envoy sidecar. It dynamically obtains service governance rules
delivered by the control plane based on the xDS protocol and converts them to Kitex rules to implement some service governance functions, such as traffic routing.
Based on Kitex Proxyless, Kitex can be managed by Service Mesh without sidecar. Besides, the governance rule Spec, governance control plane, governance delivery protocol,
and heterogeneous data governance capability can be unified under multiple deployment modes. By rewriting the bookinfo project using Kitex and Hertz, it demonstrates how to implement a traffic lane using xDS protocol.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="01-introduction"&gt;01 Introduction&lt;/h2&gt;
&lt;h3 id="kitex-proxyless"&gt;&lt;strong&gt;Kitex Proxyless&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; is a Golang RPC framework open-sourced by ByteDance that already natively supports the xDS standard protocol and can be managed by Service Mesh in Proxyless way.
Refer to this doc for detailed design: &lt;a href="https://github.com/cloudwego/kitex/issues/461"&gt;Proposal: Kitex support xDS Protocol&lt;/a&gt;.
Official doc is also available here at &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/xds/"&gt;Kitex/Tutorials/Advanced Feature/xDS Support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kitex Proxyless Simply means that Kitex services can interact directly with istiod without envoy sidecar and dynamically obtain service governance rules delivered by the control plane based on the xDS protocol.
And those rules will be translated into Kitex corresponding rules to implement some service governance functions (such as traffic routing which is the focus of this blog).&lt;/p&gt;
&lt;p&gt;Based on Kitex Proxyless, Kitex application can be managed by Service Mesh in a unified manner without sidecar, and thus the governance rule Spec, governance control plane,
governance delivery protocol, and heterogeneous data governance capability can be unified under multiple deployment modes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/unify_architecture.svg" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="traffic-routing"&gt;Traffic Routing&lt;/h3&gt;
&lt;p&gt;Traffic routing refers to the ability to route traffic to a specified destination based on its specific metadata identifier.&lt;/p&gt;
&lt;p&gt;Traffic routing is one of the core capabilities in service governance and one of the scenarios that Kitex Proxyless supports in the first place.&lt;/p&gt;
&lt;p&gt;The approach of &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; implementing traffic routing base on xDS is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/2.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Specific procedure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an xDS Router MW to Pick Cluster (routing) and watch LDS and RDS of target services.&lt;/li&gt;
&lt;li&gt;Aware of LDS changes and extract the Filter Chain and inline RDS in the LDS of the target service.&lt;/li&gt;
&lt;li&gt;Aware of RDS changes and obtain the route configuration of the target service based on VirtualHost and ServiceName matching. (Prefix, suffix, exact, and wildcard are supported)&lt;/li&gt;
&lt;li&gt;The routing rules in the matched RDS are traversed and processed. The routing rules are divided into two parts (refer to the routing specification definition) :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Match:
&lt;ul&gt;
&lt;li&gt;Path(required): Extract Method from rpcinfo for matching;&lt;/li&gt;
&lt;li&gt;HeaderMatcher(optional): Extract the corresponding metadata KeyValue from the metainfo and match it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Route：
&lt;ul&gt;
&lt;li&gt;Cluster ：Standard Cluster.&lt;/li&gt;
&lt;li&gt;WeightedClusters(Weight routing) : cluster is selected according to weight within MW.&lt;/li&gt;
&lt;li&gt;Write the selected Cluster to the EndpointInfo.Tag for later service discovery.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, traffic routing is a process of selecting the corresponding SubCluster according to certain rules.&lt;/p&gt;
&lt;h2 id="02-traffic-lane"&gt;02 Traffic Lane&lt;/h2&gt;
&lt;p&gt;Based on traffic routing capability, we can extend many usage scenarios, such as: A/B testing, canary release, blue-green release, etc., and the focus of this paper: Traffic Lane.&lt;/p&gt;
&lt;p&gt;The traffic lane can be understood as splitting a group of service instances in a certain way (such as deployment environment), and based on the routing capability and global metadata,
so that traffic can flow in the specified service instance lanes in accordance with the exact rules (logically similar to lanes in a swimming pool). Traffic lane can be used for full-path grey release.&lt;/p&gt;
&lt;p&gt;In Istio we typically group instances with DestinationRule subset, splitting a service into multiple subsets (e.g. Based on attributes such as version and region)
and then work with VirtualService to define the corresponding routing rules and route the traffic to the corresponding subset. In this way, the single-hop routing capability in the lane is realized.&lt;/p&gt;
&lt;p&gt;However, traffic routing capability alone is not enough to realize traffic lane. We need a good mechanism to accurately identify the traffic
and configure routing rules for each hop traffic based on this feature when a request spans multiple services.&lt;/p&gt;
&lt;p&gt;As shown in the following figure: Suppose we want to implement a user request that is accurately route to the v1 version of service-b.
The first thought might be to put a &lt;code&gt;uid = 100&lt;/code&gt; in the request header and configure the corresponding VirtualService to match the &lt;code&gt;uid = 100&lt;/code&gt; in the header.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;But it has several obvious drawbacks for this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Not common enough&lt;/strong&gt;: If a specific business attribute (such as uid) is used as a traffic route matching rule, the business attribute must be manually transmitted through the full path.
This is highly intrusive to business and requires business cooperation. In addition, when we want to use other business attributes, all services on the full path need to change to adapt. Therefore, it is a very unusual practice.&lt;/li&gt;
&lt;li&gt;Routing rules are prone to frequent changes, resulting in &lt;strong&gt;rule overcrowding&lt;/strong&gt;. Routing rules are identified by specific business attributes (for example: uid) is used as a traffic route matching rule.
If you want to change a business attribute or set a routing rule for other users, you need to modify the original routing rule or repeatedly define multiple routing rules for different business attributes, which easily causes route rule overcrowding and is difficult to maintain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, in order to achieve uniform traffic routing across the full path, we also need to use a more general traffic dyeing and the capability to transmit the dye identifier through the full path.&lt;/p&gt;
&lt;h3 id="traffic-dyeing"&gt;Traffic Dyeing&lt;/h3&gt;
&lt;p&gt;Traffic dyeing refers to marking the request traffic with a special identifier and carrying this identifier in the full request path.
The so-called traffic lane means that all services in the path sets traffic routing rules based on the uniform gray traffic dyeing identifier so that the traffic can be accurately controlled in different lanes.&lt;/p&gt;
&lt;p&gt;Usually, traffic dyeing is done at the gateway layer, and the metadata in the original request is converted into corresponding dye identifiers according to certain rules (conditions and proportions).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dyeing by conditions&lt;/strong&gt;: when the request metadata meets certain conditions (such as &lt;code&gt;uid = 100&lt;/code&gt; in the request header and cookie matching), the current request is marked with a dye identifier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dyeing by proportions&lt;/strong&gt;: the request is marked with a dye identifier in proportion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With a unified traffic dyeing mechanism, we do not need to care about specific business attribute identifiers when configuring routing rules. We only need to configure routes based on the dye identifiers.
The specific service attributes are abstracted into conditional dyeing rules to be more universal. Even if the business attributes change, the routing rules do not need to change frequently.&lt;/p&gt;
&lt;h4 id="dye-identifier-transmitting"&gt;Dye Identifier Transmitting&lt;/h4&gt;
&lt;p&gt;The dyed identifier is usually transmitted through the Tracing Baggage, which is used to pass business custom KV attributes through the entire call chain (full-path), such as traffic dyeing identifiers and business identifiers such as AccountID.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;We usually use the Tracing Baggage mechanism to transmit the corresponding dye identifiers through the full-path. Most of the Tracing frameworks support the Baggage concept, such as: OpenTelemetry, Skywalking, Jaeger, etc.&lt;/p&gt;
&lt;p&gt;With a set of universal full-path transmitting mechanism, the service only needs to config the tracing once, and there is no need to adapt every time the service attribute identifier changes.&lt;/p&gt;
&lt;p&gt;Next part introduces and demonstrates how to implement the traffic lane based on Kitex Proxyless and OpenTelemetry Baggage by using a specific engineering example.&lt;/p&gt;
&lt;h2 id="03-demo-introductionbookinfo"&gt;03 Demo Introduction：Bookinfo&lt;/h2&gt;
&lt;p&gt;The demo is a rewriting of the &lt;a href="https://istio.io/latest/zh/docs/examples/bookinfo/"&gt;Istio Bookinfo&lt;/a&gt; project using &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; and &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;istiod&lt;/strong&gt; as the xDS server and the entry for CRD configuration and delivery.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;wire&lt;/strong&gt; to implement dependency injection;&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;opentelemetry&lt;/strong&gt; to implement full path tracing;&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/kitex-contrib/xds"&gt;Kitex-xds&lt;/a&gt; and &lt;strong&gt;opentelemetry baggage&lt;/strong&gt; to implement a traffic lane in proxyless mode;&lt;/li&gt;
&lt;li&gt;Implement a &lt;a href="https://github.com/cloudwego/biz-demo/blob/main/bookinfo/README_CN.md"&gt;Bookinfo&lt;/a&gt; UI using &lt;strong&gt;arco-design&lt;/strong&gt; and &lt;strong&gt;react&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="business-architecture"&gt;Business Architecture&lt;/h3&gt;
&lt;p&gt;In keeping with Bookinfo, the overall business architecture is divided into four separate microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;productpage&lt;/code&gt; - This microservice calls &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;reviews&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;details&lt;/code&gt; - This microservice contains information about the book;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reviews&lt;/code&gt; - This microservice contains book related reviews. It also calls &lt;code&gt;ratings&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ratings&lt;/code&gt; - This microservice contains ratings information consisting of book reviews.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; are available in three versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The v1 version calls the ratings service and uses one ⭐️ to display the ratings.&lt;/li&gt;
&lt;li&gt;The v2 version invokes the ratings services, and use five ⭐⭐⭐⭐⭐⭐ to display the ratings.&lt;/li&gt;
&lt;li&gt;The v3 version won&amp;rsquo;t call the ratings service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/bookinfo.svg" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="diagram-of-traffic-lanes"&gt;Diagram of Traffic Lanes&lt;/h3&gt;
&lt;p&gt;The whole call chain is divided into 2 lanes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base lane: Undyed traffic is routed to the base lane.&lt;/li&gt;
&lt;li&gt;Branch lane: dyed traffic is routed to the branch lane of reviews-v2 -&amp;gt;ratings-v2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/lane.svg" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="traffic-dyeing-1"&gt;Traffic Dyeing&lt;/h3&gt;
&lt;p&gt;The gateway is responsible for traffic dyeing. For example, the request with &lt;code&gt;uid=100&lt;/code&gt; in the request header is dyed and carries baggage of &lt;code&gt;env=dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/dyeing.svg" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;The dye mode may vary according to different gateways. For example, when we select istio ingress as the gateway, we can use &lt;strong&gt;EnvoyFilter + Lua&lt;/strong&gt; to write the gateway dye rules.&lt;/p&gt;
&lt;h3 id="workload-labeling"&gt;Workload Labeling&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Label the workload with corresponding version identifier.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Take service &lt;code&gt;reviews&lt;/code&gt; as an example. You only need to label the corresponding pod with &lt;code&gt;version: v1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/8.png" alt="image"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Set a series of subsets for the service based on the DestinationRule:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Productpage: v1&lt;/li&gt;
&lt;li&gt;Reviews: v1、v2、v3&lt;/li&gt;
&lt;li&gt;Ratings: v1、v2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="traffic-routing-rules"&gt;Traffic Routing Rules&lt;/h3&gt;
&lt;p&gt;The gateway has already dyed the request header with &lt;code&gt;uid=100&lt;/code&gt; and automatically loaded &lt;code&gt;env=dev&lt;/code&gt; baggage,
so we only need to match the route according to the header. Here is an example of the route rule configuration:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="check-the-effect"&gt;Check the Effect&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Base Lane&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requests without &lt;code&gt;uid=100&lt;/code&gt; header in the inbound traffic are automatically routed to the base lane, which is a round-robin of v1 and v3 of &lt;code&gt;reviews&lt;/code&gt; service resulting in a round-robin score of 0 and 1.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/bookstore_base.png" alt="image"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Branch Lane&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We use the &lt;strong&gt;mod-header&lt;/strong&gt; plug-in of the browser to simulate the scenario where the &lt;code&gt;uid=100&lt;/code&gt; is carried in the inbound traffic request header.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/12.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Click the refresh button again, you can find that the request hits the branch lane, and the traffic lane takes effect successfully.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/bookstore_branch.jpeg" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="04-summary-and-outlook"&gt;04 Summary and Outlook&lt;/h2&gt;
&lt;p&gt;So far, we have implemented a complete full-path traffic lane based on Kitex Proxyless and OpenTelemetry.
And we can set corresponding routing rules for Kitex based on Istio standard governance rule Spec without Envoy sidecar.&lt;/p&gt;
&lt;p&gt;In addition to traffic routing capabilities, Kitex Proxyless is also continuously iterating and optimizing to meet more requirements for data plane governance capabilities.
As an exploration and practice of Service Mesh data plane, Proxyless not only can enrich the deployment form of data plane, but also hopes to continuously polish &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;,
enhance its ability in open source ecological compatibility, and create a more open and inclusive microservice ecosystem.&lt;/p&gt;
&lt;h2 id="05-relevant-project"&gt;05 Relevant Project&lt;/h2&gt;
&lt;p&gt;Here is a list of the projects involved in the demo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;biz-demo: &lt;a href="https://github.com/cloudwego/biz-demo"&gt;https://github.com/cloudwego/biz-demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex: &lt;a href="https://github.com/cloudwego/kitex"&gt;https://github.com/cloudwego/kitex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hertz: &lt;a href="https://github.com/cloudwego/hertz"&gt;https://github.com/cloudwego/hertz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex-xds: &lt;a href="https://github.com/kitex-contrib/xds"&gt;https://github.com/kitex-contrib/xds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex-opentelemetry: &lt;a href="https://github.com/kitex-contrib/obs-opentelemetry"&gt;https://github.com/kitex-contrib/obs-opentelemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hertz-opentelemetry: &lt;a href="https://github.com/hertz-contrib/obs-opentelemetry"&gt;https://github.com/hertz-contrib/obs-opentelemetry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This demo has been submitted in the biz-demo repository, and will be optimised continuously. biz-demo will include some complete demos based on CloudWeGo technology stack with certain business scenarios.
The original intention is to provide valuable references for enterprise users to use CloudWeGo in production. Contributors are always welcomed to participate in the contribution of CloudWeGo biz-demo. Let&amp;rsquo;s try something fun together.&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.4.3</title><link>https://www.cloudwego.io/blog/2022/11/02/kitex-release-v0.4.3/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/11/02/kitex-release-v0.4.3/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Extend the Generated Code of client/server&lt;/strong&gt;: Add a new feature which can extend generated client.go/server.go with config file. It is applicable to the scenario for customizing the unified suite. See &lt;a href="[/docs/kitex/tutorials/code-gen/template_extension/]"&gt;Extend the Templates of Service Generated Code&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Biz Customized Exception&lt;/strong&gt; : Add supporting to return customized biz error which can distinguish with RPC error. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/bizstatuserr/"&gt;Business Exception&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/issues/511"&gt;Proposal&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request Profiler&lt;/strong&gt; : Add a new feature to do profiler for requests which can be used for cost statistics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context Middleware&lt;/strong&gt; : Add Context Middleware which is used for adding request-level middlewares.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimization"&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Frugal Performance Optimization&lt;/strong&gt; : Support frugal precompile (pretouch) when new client or server, which is to reduce the impact of dynamic compilation on latency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connpool Optimization&lt;/strong&gt; : Refactor connection pool to improve the idle connections cleanup.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature-1"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/691"&gt;#691&lt;/a&gt;] feat(client): add context middleware which is used for adding request-level middlewares.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/649"&gt;#649&lt;/a&gt;] feat(connpool): new long connection pool with minIdle config and idle connections cleanup.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/672"&gt;#672&lt;/a&gt;] feat(grpc): add kitex grpc metadata api to get header, tailer, and peer address metadata.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/613"&gt;#613&lt;/a&gt;] feat(exception): support customized biz error which can distinguish with RPC error.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/670"&gt;#670&lt;/a&gt;] feat(exception): support error format.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/678"&gt;#678&lt;/a&gt;] feat(tool): add git and record param for cmd.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/662"&gt;#662&lt;/a&gt;] feat(tool): support frugal precompile (pretouch) when new client or server.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/657"&gt;#657&lt;/a&gt;] feat(tool): support template extension.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/527"&gt;#527&lt;/a&gt;] feat(profiler): profiler for rpc request which can be used for cost statistics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/690"&gt;#690&lt;/a&gt;] optimize(meta): remove error logic for adding default metaHandler in #503.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/638"&gt;#638&lt;/a&gt;] optimize(generic): httppb generic support map/list elem type as struct.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/641"&gt;#641&lt;/a&gt;] optimize(tool): add warnings comments for oneway methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/611"&gt;#611&lt;/a&gt;] fix(client): fix resource leaks caused by Finalizer not being triggered in the scenario where clients are created frequently.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/698"&gt;#698&lt;/a&gt;] fix(connpool): adjust globalIdle based on the number of connections decreased during the Get.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/636"&gt;#636&lt;/a&gt;] fix(connpool): CloseCallback and statistical reporting of connection pool are invalid when the connection pool is reset in &lt;code&gt;ForwardProxy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/647"&gt;#647&lt;/a&gt;] fix(grpc): update grpc connection window size when initial and synchronize grpc pr #5459.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/639"&gt;#639&lt;/a&gt;] fix(generic): marshalling list&lt;byte&gt; in generic and enabling forJSON reader option for MapThriftGeneric.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/655"&gt;#655&lt;/a&gt;] fix(generic): numeric constant parsing fails when used as generic default value.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/654"&gt;#654&lt;/a&gt;] fix(frugal): fix compilation error when using lower go version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/682"&gt;#682&lt;/a&gt;] fix(profiler): profiler stops pprof profile.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/637"&gt;#637&lt;/a&gt;] fix(tool): fix imports in handler.go template.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/630"&gt;#630&lt;/a&gt;] fix(tool): remove redundant kitex comments for file that do not declare an interface.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/627"&gt;#627&lt;/a&gt;] fix(tool): fix import missing when having different alias for the same path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/651"&gt;#651&lt;/a&gt;] refactor(server): server handler read/write interface return new context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="docs"&gt;Docs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/656"&gt;#656&lt;/a&gt;] docs: remove wrong message in CONTRIBUTING.md.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/683"&gt;#683&lt;/a&gt;] docs(kerrors): fix kerrors WithCauseAndExtraMsg method comment.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/625"&gt;#625&lt;/a&gt;] chore: fix grammar of pull request template.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/623"&gt;#623&lt;/a&gt;] chore: modify the template of pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test--ci"&gt;Test &amp;amp; CI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/646"&gt;#646&lt;/a&gt;] test: fix ut failure caused by InitRPCInfoFunc not setting rpcinfo.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/680"&gt;#680&lt;/a&gt;] test: fix retry test race.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/661"&gt;#661&lt;/a&gt;] test: make wpool tests more stable.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/643"&gt;#643&lt;/a&gt;] test: add test for detection server handler.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/632"&gt;#632&lt;/a&gt;] test: replace handwritten mock classes with gomock auto-generated classes.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/697"&gt;#697&lt;/a&gt;] chore(ci): fixed skywalking-eyes version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/652"&gt;#652&lt;/a&gt;] chore(ci): delete repeated tests to reduce unit tests cost times.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/588"&gt;#588&lt;/a&gt;] chore(ci): support codecov.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex: Unifying Open Source Practice for a High-Performance RPC Framework</title><link>https://www.cloudwego.io/blog/2022/09/30/kitex-unifying-open-source-practice-for-a-high-performance-rpc-framework/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/09/30/kitex-unifying-open-source-practice-for-a-high-performance-rpc-framework/</guid><description>
&lt;h2 id="from-development-to-open-source-transition"&gt;From Development to Open Source Transition&lt;/h2&gt;
&lt;p&gt;Many researchers and practitioners may have just learned about CloudWeGo, so let&amp;rsquo;s first introduce the relationship between CloudWeGo and &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cloudwego-and-kitex"&gt;CloudWeGo and Kitex&lt;/h2&gt;
&lt;p&gt;Kitex is CloudWeGo&amp;rsquo;s first open-source microservice framework, designed to empower developers in building high-performance and extensible microservices using Golang. Kitex encompasses the entire stack, including the network library, serialization library, and framework implementation, making it a comprehensive self-developed RPC framework.&lt;/p&gt;
&lt;p&gt;One notable feature of Kitex is its support for the gRPC protocol. Leveraging the official gRPC source code, Kitex optimizes the gRPC implementation, resulting in superior performance compared to the official gRPC framework. This sets Kitex apart from other Golang frameworks that offer open-source support for the gRPC protocol. Developers seeking both gRPC functionality and high-performance capabilities will find Kitex to be an excellent choice.&lt;/p&gt;
&lt;p&gt;In addition to Kitex, CloudWeGo has recently introduced two other projects to its open-source lineup: &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;, a Golang HTTP framework, and &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;, a Rust RPC framework. Alongside these microservice frameworks, CloudWeGo offers various high-performance foundational libraries and general microservice capabilities as open-source resources. To explore more of CloudWeGo&amp;rsquo;s open-source sub-projects, visit the &lt;a href="https://www.cloudwego.io/"&gt;official CloudWeGo website&lt;/a&gt; for additional information and resources.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Based on feedback from the community, there have been discussions surrounding whether Kitex is an open-source Key Performance Indicator (KPI) project of ByteDance, as well as concerns about its stability and continuity. We can responsibly state that Kitex is not a KPI project, but rather a genuine project derived from ByteDance&amp;rsquo;s extensive internal practical experience. Since its open-source release, we have consistently maintained consistency between the internal and external development efforts of Kitex. This consistency, coupled with the alignment of internal and external codebases, has ensured the continuous iteration and improvement of Kitex. To address any remaining concerns, let us provide you with a detailed overview of Kitex&amp;rsquo;s development and open-source process.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/2.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="kitex-development-history"&gt;Kitex Development History&lt;/h2&gt;
&lt;p&gt;In 2014, ByteDance began adopting Golang as a programming language. The internal services of ByteDance were established in 2015, where the Thrift protocol was chosen for RPC (Remote Procedure Call) scenarios, and an internal RPC framework was supported. In 2016, the first Golang RPC framework called Kite was officially launched. During the initial stages of rapid company growth, the primary focus is on quickly implementing requirements and addressing relatively simple scenarios. Therefore, there may not be extensive considerations in the design process. This approach is reasonable since the exploration phase lacks complete clarity on which scenarios will require support, and excessive consideration can lead to over-design issues.&lt;/p&gt;
&lt;p&gt;As business scenarios became more complex, the demand for diversified functionalities increased, resulting in a rise in the number of access services and calls each year. Kite, the initial Golang RPC framework, eventually proved inadequate to support subsequent iterations. Recognizing this, a new project called Kitex was initiated in 2019, following over three years of online service. The official version of Kitex was released in early 2020, and by the end of the same year, over 10,000 services within Byte were connected to Kitex, showcasing its widespread adoption.&lt;/p&gt;
&lt;p&gt;From 2014 to 2020, Golang has served as the primary programming language for business development within ByteDance, positioning the company as one of the industry leaders in terms of Golang application adoption. Our service framework enables reliable communication among tens of thousands of Golang microservices. Through extensive verification of numerous microservices and handling substantial traffic, we have developed relatively mature microservice best practices. To contribute to the cloud-native community and enrich the Golang product ecosystem, we decided to open-source our internal practices. In 2021, under the CloudWeGo brand, we officially released Kitex as the first open-sourced service framework. As of August this year, Kitex has provided support for over &lt;strong&gt;60,000&lt;/strong&gt; internal services at ByteDance, reaching peak &lt;strong&gt;QPS (Queries Per Second) in the hundreds of millions&lt;/strong&gt;.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;You might still have lingering questions regarding the comprehensive microservice system and its integration with the fundamental cloud ecosystem. Whether it&amp;rsquo;s in a public or private cloud environment, additional services are essential to support microservice governance. These services include governance platforms, registration centers, configuration centers, monitoring tools, traceability systems, service grids, and other customized specifications. ByteDance has developed a comprehensive set of internal services to support its microservice system. However, due to constraints, these services cannot be open-sourced in the short term.&lt;/p&gt;
&lt;p&gt;Now, how does CloudWeGo maintain a unified codebase internally and externally while ensuring seamless iteration?
In addressing this issue, let&amp;rsquo;s examine the module division of Kitex. The Kitex module is divided into three distinct parts. Firstly, there is &lt;strong&gt;Kitex Core&lt;/strong&gt;, situated in the middle. This component defines the hierarchical structure of the framework, implements the core logic of the interface, and provides the default implementation of the interface.&lt;/p&gt;
&lt;p&gt;On the left, we have &lt;strong&gt;Kitex Tool&lt;/strong&gt;, which encompasses the implementation related to the generated code. The generated code tool is acquired by compiling this package and includes features such as IDL parsing, verification, code generation, and plug-in support.&lt;/p&gt;
&lt;p&gt;To enhance user convenience and offer more flexible extensions, the main capabilities have been separated as independent open-source basic libraries. Some examples include Thriftgo, Thrift-validator plug-in, and Fastpb. These independent libraries enable users to leverage specific functionalities and extend Kitex as needed.&lt;/p&gt;
&lt;p&gt;On the right, Kitex Byted represents an extended implementation of Byte&amp;rsquo;s internal basic &lt;strong&gt;capabilities&lt;/strong&gt; integration. At the outset, we consolidated internal capabilities as extensions within a single package, allowing for streamlined integration.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;By following this approach, we have been able to open-source specific parts of Kitex, namely Kitex Core and Tool. We achieved this by splitting the codebase, migrating the core code and tools of Kitex to the open-source library, and integrating internal extension modules as Kitex extensions while keeping them in the internal library. Additionally, we encapsulated a shell layer within the internal library to ensure seamless upgrades for internal users without significant impact.&lt;/p&gt;
&lt;p&gt;However, Kitex&amp;rsquo;s open-source journey goes beyond simple code splitting. In February 2021, we initiated preparations for Kitex&amp;rsquo;s open-source release. Despite the scalability of Kitex allowing for decoupling and integration with internal infrastructure, Kitex still relies on certain internal basic libraries. Therefore, to facilitate the open-source process, we first identified the dependent libraries and collaborated with relevant developers to open-source the &lt;a href="https://github.com/bytedance/gopkg"&gt;bytedance/gopkg&lt;/a&gt; library. This library is jointly maintained by CloudWeGo and ByteDance&amp;rsquo;s language team and includes enhancements to the capabilities of the Golang standard library. Interested developers can follow and utilize this library as a valuable resource.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/5.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;After successfully open-sourcing the gopkg library, we made necessary code adjustments to ensure compatibility for open-source adaptation. In July 2021, Kitex was officially open-sourced, and the internal version began utilizing the open-source library. However, considering the substantial number of internal microservices relying on Kitex, we prioritized a smooth transition for internal services. Consequently, we opted not to make an initial public announcement about the open-source release. Once we confirmed the stability and compatibility of the open-source version, we proceeded with an official public release in September 2021. The announcement confirmed the open-source nature of Kitex and welcomed external developers to explore and contribute.&lt;/p&gt;
&lt;p&gt;By providing insights into Kitex&amp;rsquo;s development and open-source history, our aim is to address concerns that external developers may have regarding whether Kitex is a KPI project. We want to assure them that Kitex is a community-driven open-source project backed by our commitment to stability, compatibility, and continuous improvement.&lt;/p&gt;
&lt;h3 id="the-value-of-open-source"&gt;The Value of Open Source&lt;/h3&gt;
&lt;p&gt;Towards the end of the first part, let&amp;rsquo;s briefly discuss the value that open source brings to us. Although Kitex was not initially developed solely for open source purposes, its implementation has been oriented towards open source from the start. &lt;strong&gt;Kitex&lt;/strong&gt; itself is a project that has undergone extensive internal implementation within our organization. By open sourcing Kitex, our aim is to enable more users to swiftly build microservices internally.&lt;/p&gt;
&lt;p&gt;At the same time, open source allows us to gather valuable feedback from communities and enterprises. It also attracts external developers to contribute their expertise and insights. This collective engagement helps drive the evolution of Kitex towards supporting multiple scenarios and enriching its capabilities, making it applicable to a wider range of contexts and organizations.&lt;/p&gt;
&lt;p&gt;This symbiotic process of open source fosters a positive cycle of mutual benefit and facilitates a win-win scenario for all involved parties.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/6.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="a-year-long-review-of-open-source-changes"&gt;A Year-long Review of Open Source Changes&lt;/h2&gt;
&lt;h3 id="framework-metrics"&gt;Framework Metrics&lt;/h3&gt;
&lt;p&gt;Before delving into the one-year open source changes of Kitex, let us first discuss the key metrics that should be considered when choosing a framework.&lt;/p&gt;
&lt;h3 id="scalability"&gt;Scalability&lt;/h3&gt;
&lt;p&gt;A framework&amp;rsquo;s scalability is crucial in determining its suitability for different platforms. If a framework is tightly coupled with internal capabilities and cannot be easily transplanted or expanded to support various scenarios, it may present challenges when used externally.&lt;/p&gt;
&lt;h3 id="usability"&gt;Usability&lt;/h3&gt;
&lt;p&gt;The ease of use of a framework can be evaluated from two perspectives. Firstly, for business developers, a framework that requires meticulous attention to its internal details may not be suitable for teams with high research and development efficiency requirements. Secondly, for framework-oriented secondary developers who provide custom support, a framework with excessive expansion capabilities or insufficient scalability may impose limitations and high expansion costs.&lt;/p&gt;
&lt;h3 id="richness-of-functions"&gt;Richness of Functions&lt;/h3&gt;
&lt;p&gt;While a framework can be customized based on extensibility, it is important to consider that not all developers have the capacity for extensive custom development. An ideal framework should offer a range of options for different expansion capabilities, allowing developers to select and combine them according to their underlying infrastructure and specific environment.&lt;/p&gt;
&lt;h3 id="high-performance"&gt;High Performance&lt;/h3&gt;
&lt;p&gt;While the preceding three points are crucial considerations during the initial framework selection, as service scale and resource consumption increase, performance becomes an indispensable factor. It is imperative to prioritize performance when choosing a framework to avoid future issues such as the need for framework replacement or forced customized maintenance.&lt;/p&gt;
&lt;p&gt;Regarding the measurement indicators mentioned above, Kitex may not have achieved perfection in all areas, but these four elements have been carefully considered during its design and implementation. We are committed to ensuring a well-rounded framework that addresses these aspects without compromising on any one of them.&lt;/p&gt;
&lt;h2 id="features"&gt;Features&lt;/h2&gt;
&lt;p&gt;The following is an overview of several significant functional features that have been introduced in Kitex&amp;rsquo;s open source journey over the past year.&lt;/p&gt;
&lt;h3 id="proxyless"&gt;Proxyless&lt;/h3&gt;
&lt;p&gt;Proxyless is a feature in Kitex that caters to open source scenarios. During the initial stages of Kitex&amp;rsquo;s open source release, there were internal discussions on whether to support xDS integration with &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt;. For external users, leveraging Istio allows for the quick establishment of a basic microservices architecture, resolving issues such as service discovery, traffic routing, and configuration delivery. However, utilizing the complete Istio solution necessitates the introduction of Envoy, which can increase operational and maintenance costs. Moreover, using the official Envoy solution directly may result in performance degradation, additional CPU overhead, and increased latency.&lt;/p&gt;
&lt;p&gt;If Kitex can directly connect to Istio, users would be able to benefit from some of Istio&amp;rsquo;s capabilities while avoiding the performance loss, deployment complexity, and maintenance costs associated with Envoy. However, in the early days of open source, we did not encounter clear user demands, so we did not provide high-quality support for this.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/7.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Later on, the gRPC team also introduced Proxyless support, and Istio officials adopted Proxyless as a recommended approach for Istio usage. Kitex has now implemented support for Proxyless, primarily focusing on service discovery integration. The extensions supported by xDS have been open sourced separately in the &lt;a href="https://github.com/kitex-contrib/xds"&gt;kitex-contrib/xds&lt;/a&gt; library and will undergo further enhancements in the future. To learn how to use Kitex to connect with Istio, please refer to the &lt;a href="https://github.com/istio/istio/blob/master/README.md"&gt;README&lt;/a&gt; documentation.&lt;/p&gt;
&lt;h3 id="json-and-protobuf-generalized-call-support"&gt;JSON and Protobuf generalized Call Support&lt;/h3&gt;
&lt;p&gt;Initially, Kitex provided support for HTTP generalization in gateway scenarios, as well as Map and binary generalization for common service scenarios. However, after open sourcing Kitex, user feedback highlighted the need for JSON and Protobuf generalization, leading to their subsequent implementation.&lt;/p&gt;
&lt;p&gt;The generalization of Protobuf is also used in API gateway scenarios. While the original data format for HTTP generalization is JSON, the serialization of JSON can be bulky and inefficient, which negatively impacts performance. As a result, many mobile interfaces opt to transmit data using Protobuf due to its more compact representation. To address this demand, Kitex now includes support for Protobuf generalization.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/8.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Currently, Kitex&amp;rsquo;s generalization primarily focuses on the back-end Thrift service. Whether it&amp;rsquo;s Protobuf, Map, or JSON, Kitex combines IDL analysis on the calling side to encode the data mappings into Thrift packets and send them to the back-end service.&lt;/p&gt;
&lt;p&gt;Now, you may wonder why the generalization is implemented on the calling side instead of the server side. Typically, when we think of generalization, we imagine the server parsing and processing the generalized request, with the caller providing a corresponding generalized client. However, generalization comes with a certain cost, making it less suitable for regular RPC scenarios. Moreover, generalization is meant for all back-end services, including those written in different languages like Golang, Java, C++, Python, Rust, and more. If every language framework had to support generalization, the cost would be significantly high. Additionally, achieving convergence across different language frameworks is a lengthy process. Considering these factors, Kitex supports generalization on the calling side. This approach allows for greater flexibility and enables users to take advantage of generalization selectively based on their specific needs.&lt;/p&gt;
&lt;h3 id="enhanced-retry-capability"&gt;Enhanced Retry Capability&lt;/h3&gt;
&lt;p&gt;When Kitex was open sourced last year, it already supported the retry function. Initially, there were two types of retries available: timeout retry and Backup Request.
For timeout retry, only the timeout exception was retried. However, to further improve the success rate of requests, users expressed the need to retry other exceptions or based on specific user-defined status codes. It became evident that supporting only timeout retry was insufficient to meet user requirements. In response, Kitex introduced retries with specified results. Users can now specify other exceptions or a particular type of response for which they want retries, and the framework will retry according to the specified results.&lt;/p&gt;
&lt;p&gt;Additionally, when users configure retries, if they set retries through code configuration, it will take effect for all RPC methods of the entire Client. However, users desired the ability to apply different retry strategies to different RPC methods. Different RPC methods may have varying requirements for indicators. For instance, some users may prefer using Backup Request to reduce delay, while others may prioritize exception retry to improve the success rate. To address this need, the new version of Kitex supports request granular configuration for retries.
The example below illustrates the usage of request granularity retry configuration. For example, if the RPC method is Mock, then when initiating an RPC call, we can configure a calloptspecified, and this request will adopt the specified retry strategy.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="thrift-validator"&gt;Thrift Validator&lt;/h3&gt;
&lt;p&gt;Thrift-gen-validator is a tool plug-in for Thriftgo, that enhances the code generation process. It allows users to describe and enforce constraints on the generated &lt;code&gt;struct&lt;/code&gt;&amp;rsquo;s &lt;code&gt;IsValid()&lt;/code&gt; error method based on annotations defined in the Thrift IDL. This ensures the legality of field values. Usually when making an RPC call, the user may verify the validity of some fields. If the user directly writes these verification codes, the investment cost will be high. To address this, we provide annotation support. As long as users define annotations in IDL according to the specified format, Kitex can help users generate verification code.&lt;/p&gt;
&lt;p&gt;The example below demonstrates the usage of code generation commands and an IDL annotation definition. By specifying the Thrift Validator plugin during code generation, our tool will parse the annotations and generate the required validation code. We are also currently contributing the Thrift Validator functionality to Apache Thrift.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="performance-optimization"&gt;Performance Optimization&lt;/h2&gt;
&lt;p&gt;After highlighting the important functional features, let&amp;rsquo;s move on to discussing several performance optimization features.&lt;/p&gt;
&lt;h3 id="thrift-high-performance-codec"&gt;Thrift High-Performance Codec&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; is a dynamic Thrift codec that offers high-performance capabilities by leveraging Just-in-Time (JIT) compilation, eliminating the need for code generation. While we have already optimized the official Thrift codec and introduced FastThrift as part of our pre-open source optimization efforts, we wanted to further enhance performance by incorporating the design principles from our open source high-performance JSON library, Sonic. As a result, we have implemented the Thrift JIT codec in Frugal.
The table below illustrates a performance comparison between Frugal, combined with Kitex, and FastThrift.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/frugal.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;It is evident that Frugal offers superior RPC performance in most scenarios. In addition to its performance advantages, Frugal provides another benefit: it eliminates the need to generate codec code. Compared to Protobuf, Thrift&amp;rsquo;s generated code tends to be heavier. A complex IDL can generate files with tens of thousands of lines of code, which users are responsible for maintaining. Frugal simplifies this process by only requiring the generation of structure code, removing the need for codec code generation.&lt;/p&gt;
&lt;p&gt;To learn how to use Frugal in conjunction with Kitex, you can refer to the repository&amp;rsquo;s &lt;a href="https://github.com/cloudwego/frugal#readme"&gt;Readme&lt;/a&gt; file. users can also utilize Frugal as a standalone high-performance codec for Thrift. In the future, &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; may consider incorporating Frugal as the default codec option.&lt;/p&gt;
&lt;h3 id="protobuf-high-performance-codec"&gt;Protobuf High-Performance Codec&lt;/h3&gt;
&lt;p&gt;We primarily focused on supporting Thrift internally; however, we recognized that external users are more inclined towards using Protobuf or gRPC after the open-source release. Consequently, taking inspiration from Kitex FastThrift&amp;rsquo;s optimization approach, we re-implemented the generated code for Protobuf.
Starting from version v0.4.0, if users employ Kitex tools to generate Protobuf code, the default generation will include &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; codec code. Furthermore, when initiating RPC calls, Kitex will also utilize &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; as the default serialization option.&lt;/p&gt;
&lt;p&gt;The figures below illustrate a performance comparison between &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; and the official Protobuf serialization library. It is evident that Fastpb outperforms the official library in terms of efficiency, memory allocation, encoding, and decoding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FastWrite: &lt;strong&gt;(ns/op) ↓67.8% ，(B/op) ↓83.9%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;FastRead: &lt;strong&gt;(ns/op) ↓41.5% ，(B/op) ↓4.5%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="grpc-performance-optimization"&gt;gRPC Performance Optimization&lt;/h3&gt;
&lt;p&gt;In the early days of open sourcing Kitex, our focus on stability and performance optimization for gRPC was relatively limited, as there were fewer internal use cases. However, after receiving feedback from numerous external users, we made dedicated efforts to address issues and optimize the performance of gRPC. In the middle of this year, we officially contributed these optimizations to the open-source library, which was released in version v0.4.0.&lt;/p&gt;
&lt;p&gt;The figure below provides a comparison of unary request throughput between Kitex-gRPC and the official gRPC framework before and after optimization. On the left side, you can see the throughput comparison before optimization.&lt;/p&gt;
&lt;p&gt;The figure below provides a comparison of unary request throughput between Kitex-gRPC and the official gRPC framework before and after optimization. On the left side, you can see the throughput comparison before optimization. At relatively low concurrency, Kitex&amp;rsquo;s throughput does not exhibit an advantage over the official gRPC framework. However, when using Fastpb, Kitex&amp;rsquo;s throughput performance improves compared to the pre-optimization stage. Despite this improvement, the low-concurrency throughput is still lower than that of the official gRPC framework. On the right side of the figure, you can observe the throughput comparison after optimization. The throughput has increased by 46% - 70% compared to the pre-optimization stage, and when compared to the official gRPC framework, the throughput has increased by 51% - 70%.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/13.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;The right side of the figure below presents a comparison of latency for the optimized Unary requests. In scenarios where Kitex achieves a much higher throughput than the official gRPC framework, Kitex also demonstrates significantly lower latency compared to gRPC. Additionally, after optimization, Kitex exhibits improved delay performance overall.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/14.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s examine the performance comparison of streaming requests in a stress test. Prior to optimization, Kitex&amp;rsquo;s performance for streaming requests, even under low concurrency, did not outperform the gRPC framework. However, after optimization, Kitex&amp;rsquo;s throughput surpasses that of the official gRPC, as demonstrated in the figure below. It is worth noting that while Kitex achieves high throughput under low concurrency, the latency remains relatively consistent. However, as concurrency increases, the latency diverges. Consequently, in terms of performance, Kitex&amp;rsquo;s implementation of the gRPC protocol exhibits clear advantages over the official framework.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/15.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;While Kitex may not have achieved complete functional alignment at this stage, it is capable of fulfilling the requirements of the majority of scenarios. Moreover, we are committed to ongoing efforts to further align and enhance its functionality in the future.&lt;/p&gt;
&lt;h2 id="development-with-community-and-advancement-of-ecosystem-and-enterprise-integration"&gt;Development with Community and Advancement of Ecosystem and Enterprise Integration&lt;/h2&gt;
&lt;h3 id="kitexs-community-driven-ecosystem-expansion"&gt;Kitex&amp;rsquo;s Community-Driven Ecosystem Expansion&lt;/h3&gt;
&lt;p&gt;Since its open-source release, we have been thrilled by the enthusiastic response from developers. Recognizing our team&amp;rsquo;s limitations in rapidly building an extensive Kitex ecosystem for external users, we have relied on the invaluable support of the community over the past year. Through collaborative efforts, Kitex has received significant contributions in areas such as service registration/discovery, observability, and service governance, with notable advancements in service registration/discovery. We have successfully integrated with mainstream open-source registration centers, and although further enhancements are required, we now possess the capability to help external users build robust microservice architectures, leveraging our existing support and expanding feature set.&lt;/p&gt;
&lt;p&gt;While we acknowledge the need for further enrichment in our docking capabilities, we are proud to state that, in conjunction with our existing support, Kitex already possesses the necessary features to facilitate the construction of microservice architectures for external users.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/16.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;We extend our heartfelt appreciation to the developers who have actively contributed to the growth of the CloudWeGo community. To explore the extensive ecosystem surrounding Kitex, we invite you to visit the &lt;a href="https://github.com/kitex-contrib"&gt;kitex-contrib&lt;/a&gt; repository in our open-source warehouse.&lt;/p&gt;
&lt;h3 id="working-with-external-companies"&gt;Working with External Companies&lt;/h3&gt;
&lt;p&gt;Our primary goal with the open-source release of Kitex was to assist external companies in swiftly establishing enterprise-level cloud-native architectures. Since then, we have been delighted to receive interest and engagement from notable organizations such as Semir, Huaxing Securities, Tanwan Games, and Heduo Technology. Their valuable feedback and specific requirements have shed light on unique usage scenarios and challenges distinct from our internal use cases, necessitating our attention, support, and optimization efforts.&lt;/p&gt;
&lt;p&gt;We are thrilled to witness the successful application of Kitex in these enterprise environments. In fact, during the CloudWeGo Meetup held on June 25th of this year, R&amp;amp;D professionals from &lt;a href="https://mp.weixin.qq.com/s/JAurW4P2E3NIduFaVY6jew"&gt;Semir&lt;/a&gt; and &lt;a href="https://mp.weixin.qq.com/s/QqGdzp-7rTdlxedy6bsXiw"&gt;Huaxing Securities&lt;/a&gt; shared their internal experiences and practical use cases, further validating the effectiveness and value of Kitex in real-world scenarios.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/17.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;In addition to the above companies, we have also provided consultation to private inquiries from various organizations regarding usage issues. We are very grateful for the support and feedback from these corporate users. As mentioned earlier, gathering feedback from the community and enterprises plays a crucial role in driving the evolution of Kitex to support a wide range of scenarios. If enterprise users have any specific needs or requirements, we encourage them to reach out to us.&lt;/p&gt;
&lt;h2 id="how-to-use-kitex-to-integrate-with-existing-infrastructure"&gt;How to use Kitex to Integrate with Existing Infrastructure&lt;/h2&gt;
&lt;p&gt;Here is a brief introduction on how to use Kitex to integrate with your internal infrastructure. Let&amp;rsquo;s take ByteDance as an example, there are extensions in the open source library within the internal warehouse. These extensions are designed to integrate internal capabilities specific to ByteDance. Within the BytedSuite, Kitex can be initialized to cater to various scenarios. Users simply need to add an option configuration while constructing the Client and Server components to achieve seamless integration. To ensure a hassle-free experience, we have incorporated this configuration within the generated scaffolding code. This means that users no longer need to specifically focus on integrating internal capabilities. Furthermore, we plan to share details about how this configuration is embedded in the generated code. By doing so, secondary developers working with external frameworks will be able to provide integration capabilities to business development teams in a similar manner.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/18.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="summary-and-future-perspectives"&gt;Summary and Future Perspectives&lt;/h2&gt;
&lt;h3 id="summarize"&gt;Summarize&lt;/h3&gt;
&lt;p&gt;This blog introduces the following key points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The transition of Kitex from an internally used framework to an open-source framework while ensuring compatibility between internal and external versions.&lt;/li&gt;
&lt;li&gt;Overview of important functional features and performance optimizations released during the past year of open source.&lt;/li&gt;
&lt;li&gt;The origination and development of Kitex&amp;rsquo;s ecosystem with contributions from the community, examples of enterprise adoption, and elegant integration of internal capabilities using Kitex.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="future-perspectives"&gt;Future Perspectives&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Collaborate with the community to further enrich the ecosystem and foster active participation from developers.&lt;/li&gt;
&lt;li&gt;Enhance the usability of Kitex by incorporating engineering practices and providing greater convenience for microservice developers.&lt;/li&gt;
&lt;li&gt;Continuously improve the BDThrift ecosystem and optimize support for Protobuf and gRPC.&lt;/li&gt;
&lt;li&gt;Explore and implement additional feature support and open sourcing, such as ShmIPC (shared memory IPC), QUIC (Quick UDP Internet Connections), and generalization for Protobuf.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By pursuing these goals, Kitex aims to meet the evolving needs of users and further strengthen its position as a reliable and efficient framework for building cloud-native architectures.&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.4.0</title><link>https://www.cloudwego.io/blog/2022/08/26/kitex-release-v0.4.0/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/08/26/kitex-release-v0.4.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Retry enhancement&lt;/strong&gt;: Support user-defined result retry; Support request-level configuration (priority is higher than Neptune). See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/retry/"&gt;retry guide&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frugal (Thrift)&lt;/strong&gt;: Support default value of IDL; No codec code is supported by using frugal. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/codec_frugal/"&gt;frugal&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tool-Protobuf&lt;/strong&gt;: Support depend on external libraries with go_package, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/#notes-for-using-protobuf-idls"&gt;Notes for Using Protobuf IDLs&lt;/a&gt;; Support Guess IDL type from the file extension, it is unnecessary to specify the type param when generating the protobuf code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fastpb(protobuf)&lt;/strong&gt;: Support fastpb to optimize performance of protobuf, and it is integrated into Kite by default. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/fastpb/"&gt;fastpb&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Call&lt;/strong&gt;: Support HTTP+Protobuf generic call&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kitex lib supports Windows&lt;/strong&gt;: You can use kitex running on Windows (Kitex tool still doesn&amp;rsquo;t support)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimization--bugfix"&gt;&lt;strong&gt;Optimization &amp;amp; Bugfix&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Performance Optimization&lt;/strong&gt;: gRPC unary throughput increased by 46-70%, and 51% - 70% higher than the official gRPC framework throughput. See &lt;a href="https://github.com/cloudwego/kitex-benchmark"&gt;benchmark&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Call&lt;/strong&gt;: Support default value defined in thrift IDL for HTTP / Map / JSON Generic&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature-1"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/571"&gt;#571&lt;/a&gt;] feat(protobuf): integrate &lt;a href="https://github.com/cloudwego/fastpb"&gt;fastpb&lt;/a&gt; into kitex, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/fastpb/"&gt;doc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/592"&gt;#592&lt;/a&gt;] feat(generic): add default value defined in thrift idl for HTTP/Map/JSON generic call.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/600"&gt;#600&lt;/a&gt;] feat(thrift): support no codec gen-code when using frugal.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/607"&gt;#607&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/610"&gt;#610&lt;/a&gt;] feat(proxyless): add option for xDS extension. Support traffic route, timeout config and service discovery based on xDS.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/541"&gt;#541&lt;/a&gt;] feat(trans): Add the go net extension to the transport layer, and choose it as the transmission mode by default in Windows OS.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/540"&gt;#540&lt;/a&gt;] feat(retry): support retry with specified error or response and add retry option for setup method retry policy.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/533"&gt;#533&lt;/a&gt;] feat(generic): js_conv annotation of generic call supports map type conversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/522"&gt;#522&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/538"&gt;#538&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/605"&gt;#605&lt;/a&gt;] perf(grpc): optimize performance for gRPC protocol.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/590"&gt;#590&lt;/a&gt;] optimize(tool): guess IDL type from file extension.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/559"&gt;#559&lt;/a&gt;] optimize(timeout): use wrap func to check timeout err in timeout middleware which can ignore logs customized timeout err.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/581"&gt;#581&lt;/a&gt;] optimize(tool): kitex tool usage add cmd example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bugfix"&gt;Bugfix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/564"&gt;#564&lt;/a&gt;] fix(oneway): discard oneway conn after sending complete, or subsequent requests that send to the same connection may get blocked until the oneway request gets processed by the server.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/577"&gt;#577&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/584"&gt;#584&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/602"&gt;#602&lt;/a&gt;] fix(rpcinfo): fix rpcinfo reuse problem in longconn scene.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/578"&gt;#578&lt;/a&gt;] fix: fix long pool dump panic.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/583"&gt;#583&lt;/a&gt;] fix(tool): fix misusing of package name in protobuf generated code.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/587"&gt;#587&lt;/a&gt;] fix(tool): skip proto files with external import paths when generates code.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/594"&gt;#594&lt;/a&gt;] fix(generic): support the tag format of the escape double quotes in single quotes to be compatible with the logic of the old version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/595"&gt;#595&lt;/a&gt;] fix: fix nil union panic in BLength.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/589"&gt;#589&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/596"&gt;#596&lt;/a&gt;] fix(frugal): fix frugal build tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/566"&gt;#566&lt;/a&gt;] refactor(metainfo): remove noused metakeys of HTTP2 Header.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/593"&gt;#593&lt;/a&gt;] refactor(trans): support specify Listener for server by option WithListener, the priority is higher than WithServiceAddr.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/582"&gt;#582&lt;/a&gt;] refactor(tool): use templates by embedding and export APIs for external usage for kitex tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test"&gt;Test&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/579"&gt;#579&lt;/a&gt;] test: add ut for long pool dump function.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/608"&gt;#608&lt;/a&gt;] test: fix data race in TestClientConnDecoupledFromApplicationRead.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/609"&gt;#609&lt;/a&gt;] test: fix gonet ut avoid testing port conflicts.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/480"&gt;#480&lt;/a&gt;] test: add unit test for client package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/558"&gt;#558&lt;/a&gt;] ci: fix setup-python github action.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/487"&gt;#487&lt;/a&gt;] ci: workflow add golangci-lint.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/580"&gt;#580&lt;/a&gt;] chore: fix the typos in remote module about go net.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/601"&gt;#601&lt;/a&gt;] chore: fixed some typos and replaced some defunct functions.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/604"&gt;#604&lt;/a&gt;] chore: upgrade fastpb to v0.0.2.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/603"&gt;#603&lt;/a&gt;] chore: upgrade frugal to v0.1.2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependency-change"&gt;Dependency Change&lt;/h3&gt;
&lt;p&gt;github.com/cloudwego/frugal v0.1.1 -&amp;gt; v0.1.3&lt;/p&gt;
&lt;p&gt;github.com/cloudwego/netpoll v0.2.5 -&amp;gt; v0.2.6&lt;/p&gt;
&lt;p&gt;github.com/cloudwego/thriftgo v0.1.2 -&amp;gt; v0.2.0&lt;/p&gt;
&lt;p&gt;google.golang.org/protobuf v1.26.0 -&amp;gt; v1.28.0&lt;/p&gt;
&lt;p&gt;github.com/choleraehyq/pid v0.0.13 -&amp;gt; v0.0.15&lt;/p&gt;
&lt;p&gt;new imported:&lt;/p&gt;
&lt;p&gt;github.com/cloudwego/fastpb v0.0.2&lt;/p&gt;
&lt;p&gt;github.com/jhump/protoreflect v1.8.2&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.3.2</title><link>https://www.cloudwego.io/blog/2022/06/02/kitex-release-v0.3.2/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/06/02/kitex-release-v0.3.2/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/473"&gt;#473&lt;/a&gt;] feat(grpc): support short connection for gRPC unary.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/431"&gt;#431&lt;/a&gt;] feat(limiter): extend outside limiter implementation and fix problems of rate limiter of multiplexed server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/465"&gt;#465&lt;/a&gt;] optimize(ttheader): set remote address for client-side after decoding TTHeader.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/466"&gt;#466&lt;/a&gt;] optimize(mux): wrap ErrReadTimeout with ErrRPCTimeout in mux scenario.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/425"&gt;#425&lt;/a&gt;] optimize(limiter): promise tokens of the first second don&amp;rsquo;t exceed limit significantly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/485"&gt;#485&lt;/a&gt;] fix(grpc): fix the incorrect integer conversion.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/474"&gt;#474&lt;/a&gt;] fix(trans): fix detection handler panic when conn inactive early.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/445"&gt;#445&lt;/a&gt;] fix(retry): race problems of callTimes in retry and some fields of rpcStats.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/471"&gt;#471&lt;/a&gt;] fix(retry): callCosts race in backup request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test"&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/404"&gt;#404&lt;/a&gt;] test: add unit test for pkg/retry.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/439"&gt;#439&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/472"&gt;#472&lt;/a&gt;] test: add unit test for pkg/remote/remotecli.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/462"&gt;#462&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/457"&gt;#457&lt;/a&gt;] test: add unit test for pkg/remote/trans/nphttp2/grpc.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/420"&gt;#420&lt;/a&gt;] test: add ut for pkg/remote/trans/nphttp2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/464"&gt;#464&lt;/a&gt;] refactor(ttheader): change protocol id of Kitex Protobuf in TTHeader and promise the change is compatible with the old version.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/453"&gt;#453&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/475"&gt;#475&lt;/a&gt;] chore: upgrade netpoll and bytedance/gopkg.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/458"&gt;#458&lt;/a&gt;] chore: fix ci reviewdog and pr ut didn&amp;rsquo;t run.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/454"&gt;#454&lt;/a&gt;] chore: use self-hosted ci to optimize speed.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/449"&gt;#449&lt;/a&gt;] chore: fix github issue template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="style"&gt;Style&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/486"&gt;#486&lt;/a&gt;] style(trans): add comment for detection trans handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/482"&gt;#482&lt;/a&gt;] docs: update FAQ of readme.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;github.com/cloudwego/netpoll: v0.2.2 -&amp;gt; v0.2.4&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.3.0</title><link>https://www.cloudwego.io/blog/2022/04/29/kitex-release-v0.3.0/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/04/29/kitex-release-v0.3.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/366"&gt;#366&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/426"&gt;#426&lt;/a&gt; ] feat(client): support warming-up for kitex client&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/395"&gt;#395&lt;/a&gt; ] feat(mux): support gracefully shutdown in connection multiplexing&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/399"&gt;#399&lt;/a&gt; ] feat(protobuf): add fastpb protocol API and support it in the pkg/remote/codec module&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimise"&gt;Optimise&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/402"&gt;#402&lt;/a&gt; ] optimize(connpool): export getCommonReporter in pkg/remote/connpool&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/389"&gt;#389&lt;/a&gt; ] optimize(rpcinfo): fill TransportProtocol, PackageName fields into RPCInfo of the server side after decoding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/413"&gt;#413&lt;/a&gt; ] fix(mux): set PayloadCodec for sendMsg in NetpollMux trans handler to fix generic request codec error.&lt;a href="https://github.com/cloudwego/kitex/issues/411"&gt;issue #411&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/406"&gt;#406&lt;/a&gt; ] fix(grpc): fix the sending and receiving logic about http2 framer, such as preventing the peer unable to receive the framer in time&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/398"&gt;#398&lt;/a&gt; ] fix(utils): fix the bug that Dump() func in ring.go can&amp;rsquo;t dump the accurate data in ring shards&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/428"&gt;#428&lt;/a&gt; ] fix(trans): close connection when flush data fails to avoid memory leak&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool"&gt;Tool&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/340"&gt;#340&lt;/a&gt; ] tool(protobuf): redesign and implement new protobuf gen code called fastpb which doesn&amp;rsquo;t use reflection and only supports proto3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/396"&gt;#396&lt;/a&gt; ] chore: replace cespare/xxhash with xxhash3 from bytedance/gopkg&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/400"&gt;#400&lt;/a&gt; ] chore: upgrade go version of workflow to 1.18&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/407"&gt;#407&lt;/a&gt; ] chore: add a separate file to declare the use of gRPC source code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test"&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/401"&gt;#401&lt;/a&gt; ] test: add ut for kitex/server package&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/393"&gt;#393&lt;/a&gt; ] test: add ut for pkg/remote/bound package&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/403"&gt;#403&lt;/a&gt; ] test: add netpollmux unit test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/401"&gt;#401&lt;/a&gt; ] test: add klog unit test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/392"&gt;#392&lt;/a&gt; ] test(utils): add UT for utils and fix inaccurate err throw in json.go&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/373"&gt;#373&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/432"&gt;#432&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/434"&gt;#434&lt;/a&gt; ] test(grpc): add gRPC transport unit tests, promoting the coverage to 76%&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/424"&gt;#424&lt;/a&gt; ] test(transmeta): supplementary of unit tests for http2 and ttheader implementations of MetaHandler/StreamingMetaHandler in pkg/transmeta.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;github.com/cloudwego/netpoll: v0.2.0 -&amp;gt; v0.2.2&lt;/li&gt;
&lt;li&gt;github.com/bytedance/gopkg: 20210910103821-e4efae9c17c3 -&amp;gt; 20220413063733-65bf48ffb3a7&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.2.1</title><link>https://www.cloudwego.io/blog/2022/03/24/kitex-release-v0.2.1/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/03/24/kitex-release-v0.2.1/</guid><description>
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/383"&gt;#383&lt;/a&gt; ] fix(generic): detect circular dependency in thrift IDL when using generic call.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/359"&gt;#359&lt;/a&gt; ] fix(tool): fix streaming import missing in protobuf combine service.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/363"&gt;#363&lt;/a&gt; ] fix(client): fix a bug that sequence ID of oneway requests are not encoded and lower the loss rate of oneway requests.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/367"&gt;#367&lt;/a&gt; ] fix(generic/tool): combine services may have duplicate loading of the same service.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimise"&gt;Optimise&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/362"&gt;#362&lt;/a&gt; ] optimize(diagnosis): lbcache is global, it doesn&amp;rsquo;t need register ProbeFunc for diagnosis.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/374"&gt;#374&lt;/a&gt; ] optimize(rpcinfo): RPCInfo.To().Tag() use instance tag instead of remoteinfo tag firstly.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/355"&gt;#355&lt;/a&gt; ] optimize(connpool): adjust minMaxIdleTimeout to 2s.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/354"&gt;#354&lt;/a&gt; ] optimize(hook): adding locks to onServerStart and onShutdown, acquire the corresponding lock when doing some read and write operations like RegisterStartHook and range in server.Run().&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/331"&gt;#331&lt;/a&gt; ] optimize(discovery): add error definition ErrInstanceNotFound which is used in the service discovery module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/352"&gt;#352&lt;/a&gt; ] refactor(event): delete additional atomic operations and replace them with a normal operation.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/343"&gt;#343&lt;/a&gt; ] refactor(loadbalancer): merge BuildWeightedVirtualNodes function into buildVirtualNodes function, make it easier to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/376"&gt;#376&lt;/a&gt; ] chore: upgrade choleraehyq/pid for Go 1.18.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/364"&gt;#364&lt;/a&gt; ] docs: update readme with new blog.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.2.0</title><link>https://www.cloudwego.io/blog/2022/02/24/kitex-release-v0.2.0/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/02/24/kitex-release-v0.2.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Feat(grpc): support options to set the internal params of gRPC&lt;/li&gt;
&lt;li&gt;Feat(kerror): add new func WithCauseAndExtraMsg for basicError&lt;/li&gt;
&lt;li&gt;Feat(rpcinfo): add FreezeRPCInfo to support asynchronous context usage&lt;/li&gt;
&lt;li&gt;Feat(codec): default codec supports size limit&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix(remotecli): fix bug that released connections may be reused&lt;/li&gt;
&lt;li&gt;Fix(generic): generic call supports extended services&lt;/li&gt;
&lt;li&gt;Fix(generic): fix generic call oneway flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimise"&gt;Optimise&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Optimize(retry): improve retry success rate when do failure retry&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chore: upgrade netpoll to v0.2.0&lt;/li&gt;
&lt;li&gt;Chore:add third party license&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.1.4</title><link>https://www.cloudwego.io/blog/2022/01/18/kitex-release-v0.1.4/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/01/18/kitex-release-v0.1.4/</guid><description>
&lt;h2 id="improvement"&gt;Improvement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Optimize(log): don&amp;rsquo;t print timeout log in rpctimeout middleware&lt;/li&gt;
&lt;li&gt;Optimize(log): adjust default log level to info&lt;/li&gt;
&lt;li&gt;Optimize(gRPC): lock the sendAt avoid grpc bdp data race&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix(client-connection): fix a connection leaking bug that happens when clients fail at Send&lt;/li&gt;
&lt;li&gt;Fix(timeout): fix TimeoutAdjust won&amp;rsquo;t work when set in middleware builder&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool"&gt;Tool&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix(tool): fix protobuf handler arguments name
&lt;blockquote&gt;
&lt;p&gt;kitex will generate a stream type named &amp;ldquo;{{.ServiceName}}{{.Name}}Server&amp;rdquo; for each streaming server,
but in handler.go kitex use &amp;ldquo;{{.ServiceName}}{{.RawName}}Server&amp;rdquo; as stream name.&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Style: remove unnecessary type conversions&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.1.3</title><link>https://www.cloudwego.io/blog/2021/12/30/kitex-release-v0.1.3/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/12/30/kitex-release-v0.1.3/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transmit the Base from client to server for getting the caller info in JSON generic&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix(grpc): fix metric missing method tag in streaming&lt;/li&gt;
&lt;li&gt;Fix(generic): fix the incompatible modification about base64 binary in the JSON and HTTP generic&lt;/li&gt;
&lt;li&gt;Fix(grpc): fix the bug of grpc flow control, which brings the problem of continuous timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ci"&gt;CI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add scenario tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;update the &lt;a href="https://github.com/cloudwego/kitex/blob/develop/ROADMAP.md"&gt;ROADMAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.1.2</title><link>https://www.cloudwego.io/blog/2021/12/22/kitex-release-v0.1.2/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/12/22/kitex-release-v0.1.2/</guid><description>
&lt;h2 id="hotfix"&gt;Hotfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix some gRPC request bugs which are involved by v0.1.0&lt;/li&gt;
&lt;li&gt;Fix mistake gRPC method path when no package definition in IDL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chore: upgrade netpoll-http2 to fix the problem about large request package (&amp;gt;4K) in streaming&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chore: use GitHub&amp;rsquo;s &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; to create a PR&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.1.0</title><link>https://www.cloudwego.io/blog/2021/12/13/kitex-release-v0.1.0/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/12/13/kitex-release-v0.1.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;h3 id="generic-call"&gt;Generic Call&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Support combined services&lt;/li&gt;
&lt;li&gt;Export SetSeqID and add GetSeqID for binary generic call of server side&lt;/li&gt;
&lt;li&gt;Support close generic client to avoid memory leak&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="log"&gt;Log&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use key=value style in log messages&lt;/li&gt;
&lt;li&gt;Use klog as global log in some logs&lt;/li&gt;
&lt;li&gt;Use the global default logger across kitex&lt;/li&gt;
&lt;li&gt;Print detail loginfo by ctx&lt;/li&gt;
&lt;li&gt;Pass service info to go func which is used to output for troubleshooting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="option"&gt;Option&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Add NewThriftCodecDisableFastMode to disable FastWrite/Read&lt;/li&gt;
&lt;li&gt;Add server option - WithReusePort&lt;/li&gt;
&lt;li&gt;Default rpc timeout = 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="proxy"&gt;Proxy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Proxy add ContextHandler interface to support passing initialization context to mwBuilder&lt;/li&gt;
&lt;li&gt;Register Dump in lbcache to diagnosis&lt;/li&gt;
&lt;li&gt;Pass RPCConfig to proxy.Config&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="improvement"&gt;Improvement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reduce heap allocation&lt;/li&gt;
&lt;li&gt;Optimize mux performance&lt;/li&gt;
&lt;li&gt;Recycle grpc codec buffer by close linkbuffer&lt;/li&gt;
&lt;li&gt;Distinguish ErrRPCFinish in cost info of backup request&lt;/li&gt;
&lt;li&gt;Move mux.ShardQueue to netpoll, rename sharedMap to shardMap&lt;/li&gt;
&lt;li&gt;Add container length encoding guard in fast api&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Enable server error handle middleware&lt;/li&gt;
&lt;li&gt;Adjust Balancer initialization in lbcache&lt;/li&gt;
&lt;li&gt;Init TraceCtl when it is nil (only affect unit test)&lt;/li&gt;
&lt;li&gt;Set default rpctimeout and disable timeout logic if rpctimeout == 0&lt;/li&gt;
&lt;li&gt;Defaultlogger wrong calldepth&lt;/li&gt;
&lt;li&gt;Rename BackwardProxy to ReverseProxy&lt;/li&gt;
&lt;li&gt;Avoid nil panic in grpc keepalive&lt;/li&gt;
&lt;li&gt;Fix hidden dangers about grpc&lt;/li&gt;
&lt;li&gt;Fix exception missing in void method&lt;/li&gt;
&lt;li&gt;Fix mistake dump info when instances change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix link in readme_zh&lt;/li&gt;
&lt;li&gt;Remove docs; maintain cloudwego.io only&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="netpoll-api-change"&gt;Netpoll API Change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adapt netpoll.Writer.Append API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;github.com/cloudwego/netpoll: v0.0.4 -&amp;gt; v0.1.2&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Getting Started With Kitex's Practice: Performance Testing Guide</title><link>https://www.cloudwego.io/blog/2021/11/24/getting-started-with-kitexs-practice-performance-testing-guide/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/11/24/getting-started-with-kitexs-practice-performance-testing-guide/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;On September 8, 2021, ByteDance announced the launch of CloudWeGo open source project.
CloudWeGo is a set of microservice middleware developed by ByteDance with high performance, strong scalability and stability.
It focuses on microservice communication and governance, and meets the demands of different services in various scenarios.
CloudWeGo currently has 4 Repos: Kitex, Netpoll, Thriftgo and netpoll-http2, featuring the RPC framework &amp;ndash; Kitex and the network library &amp;ndash; Netpoll.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Recently, ByteDance Service Framework Team officially announced the open source of CloudWeGo. It includes the Golang microservice RPC framework &amp;ndash; Kitex, which has been deeply used in Douyin and Toutiao.&lt;/p&gt;
&lt;p&gt;This article aims to share the scenarios and technical issues that developers need to know when stress testing Kitex.
These guides will help users adjust and optimize Kitex to better match their business needs, and maximize Kitex&amp;rsquo;s performance in real RPC scenarios.
Users can also refer to the official stress test project &amp;ndash; &lt;a href="https://github.com/cloudwego/kitex-benchmark"&gt;kitex-benchmark&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id="the-characteristics-of-microservice-scenario"&gt;The Characteristics of Microservice Scenario&lt;/h2&gt;
&lt;p&gt;Kitex was born in ByteDance&amp;rsquo;s large-scale microservices architecture practice. The scenario it is aimed at is naturally a microservices scenario.
Therefore, the following will first introduce the characteristics of microservices, so that developers can understand Kitex&amp;rsquo;s design thinking in depth.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RPC Communication Model&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The communication between microservices is usually based on PingPong model. So, in addition to the conventional throughput performance index, developers also need to consider the average latency of each RPC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complex Call Chain&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An RPC call often requires multiple microservices to collaborate, and downstream services have their own dependencies, so the entire call chain will be a complex network structure.&lt;/p&gt;
&lt;p&gt;In this kind of complex call chains, the latency fluctuation of one intermediate node may be transmitted to the entire chain，resulting in an overall timeout.
When there are many nodes on the chain, even if the fluctuation probability of each node is very low, the timeout probability that eventually converges on the chain will be magnified.
Therefore, the latency fluctuation of a single service, notably P99, is also a key indicator that has a significant impact on online services.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Size of Data Package&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although the size of transmitted data packages depends on the actual business scenario, the internal statistics of ByteDance found that most online requests are small packages (&amp;lt;2KB).
So we focused on optimizing the performance in the small data package scenarios while taking the large package scenarios into account.&lt;/p&gt;
&lt;h2 id="stress-test-for-microservice-scenarios"&gt;Stress Test for Microservice Scenarios&lt;/h2&gt;
&lt;h3 id="determine-stress-test-objects"&gt;Determine Stress Test Objects&lt;/h3&gt;
&lt;p&gt;Measuring the performance of an RPC framework requires consideration from two perspectives: Client and Server.
In large-scale business architectures, upstream clients are not necessarily using the same frameworks as downstream, and same goes to the downstream services scheduled by developers.
The situation becomes more complicated when Service Mesh is involved.&lt;/p&gt;
&lt;p&gt;Some stress test projects often generate performance data for the &lt;strong&gt;entire framework&lt;/strong&gt; by mixing Client and Server processes, which is likely to be inconsistent with the actual online operation.&lt;/p&gt;
&lt;p&gt;If you want to stress test Server, you should give Client as many resources as possible to push Server to its limit, and vice versa.
If both Client and Server are only provided 4-core CPUs for stress tests, it will be impossible for developers to determine the performance data is referring to either Client or Server.
Thus, the test result will not have practical value for online services.&lt;/p&gt;
&lt;h3 id="alignment-of-connection-model"&gt;Alignment of Connection Model&lt;/h3&gt;
&lt;p&gt;Conventional RPCs have three major connection models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Short connection&lt;/strong&gt;: Each request creates a new connection and closes the connection immediately after the return is received.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistent connection pool&lt;/strong&gt;: A single connection can process only one complete request &amp;amp; return at once.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection multiplexing&lt;/strong&gt;: A single connection can process multiple requests &amp;amp; returns asynchronously at the same time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each type of connection model is not absolutely good or bad, it depends on the actual usage scenario.
Although connection multiplexing generally performs the best, the application must rely on the protocol being able to support package serial numbers,
and some older framework services may not support multiplexing calls.&lt;/p&gt;
&lt;p&gt;In order to ensure maximum compatibility, Kitex initially used short connections on the Client side by default, while other mainstream open source frameworks used connection multiplexing by default.
It resulted in large performance data deviations for some users when stress testing with default configuration.&lt;/p&gt;
&lt;p&gt;Later, in order to accommodate the common scenario of open source users, Kitex supported &lt;a href="https://github.com/cloudwego/kitex/pull/40/files"&gt;persistent connection&lt;/a&gt; by default in v0.0.2.&lt;/p&gt;
&lt;h3 id="alignment-of-serialization-strategy"&gt;Alignment of Serialization Strategy&lt;/h3&gt;
&lt;p&gt;For RPC frameworks, regardless of service governance, the computation overhead is mainly generated in serialization and deserialization.&lt;/p&gt;
&lt;p&gt;Kitex uses the &lt;a href="https://github.com/golang/protobuf"&gt;Go protobuf library&lt;/a&gt; to serialize Protobuf.
And for serialization of Thrift, Kitex has specific performance optimization, which is introduced in the &lt;a href="https://www.cloudwego.io/blog/2021/09/23/performance-optimization-on-kitex/#serializationdeserialization-optimization-of-thrift"&gt;blog post&lt;/a&gt; on our official web.&lt;/p&gt;
&lt;p&gt;Most of the current open source frameworks support Protobuf in preference, and some built-in Protobuf are actually &lt;a href="https://github.com/gogo/protobuf"&gt;gogo/protobuf&lt;/a&gt; versions with performance optimizations.
However, gogo/protobuf is currently at risk of &lt;a href="https://github.com/gogo/protobuf/issues/691"&gt;maintenance absence&lt;/a&gt;.
Therefore, due to maintainability concerns, we decided to use the official protobuf library only. Certainly, we will plan to optimize Protobuf in the future.&lt;/p&gt;
&lt;h3 id="use-exclusive-cpu"&gt;Use Exclusive CPU&lt;/h3&gt;
&lt;p&gt;Although multiple processes would usually utilize the CPU capability at the same time for online applications.
But in stress test scenarios, both Client and Server processes are extremely busy.
Sharing the CPU will result in a large number of context switching, which makes the output data less reliable and prone to large fluctuations.&lt;/p&gt;
&lt;p&gt;Therefore, we recommend that the Client and Server processes should be isolated on different CPUs or different exclusive machines.
If you want to further avoid the impact of other processes, you can add the nice -n -20 command to adjust the scheduling priority of the stress testing process.&lt;/p&gt;
&lt;p&gt;In addition, if possible, using physical machines makes the test results more precise and reproducible compared to using virtual machines on cloud platforms.&lt;/p&gt;
&lt;h2 id="performance-data-demonstration"&gt;Performance Data Demonstration&lt;/h2&gt;
&lt;p&gt;On the premise of meeting the above requirements, we compared the stress test results of multiple frameworks using Protobuf.
The stress test source code can be found in &lt;a href="https://github.com/gogo/protobuf/issues/691"&gt;kitex-benchmark&lt;/a&gt; repo.
When Server is fully loaded, P99 Latency of Kitex in connection pool mode is the lowest of all frameworks. In multiplexing mode, Kitex also performs well in each indicator.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client 16 CPUs，Server 4 CPUs&lt;/li&gt;
&lt;li&gt;1KB Request Package Size, Echo Scenario&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Reference Data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KITEX: Connection Pool Model (Default Setting)&lt;/li&gt;
&lt;li&gt;KITEX-MUX: Connection Multiplexing&lt;/li&gt;
&lt;li&gt;Connection Multiplexing for all other Frameworks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/kitex_performance_testing/qps.png" alt="image"&gt;
&lt;img src="https://www.cloudwego.io/img/blog/kitex_performance_testing/tp99.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Each mainstream Golang open source RPC framework actually has its own focus in terms of design goals: some focus on generality,
some on scenarios with light business logic like Redis, some on throughput performance, and some on P99 latency.&lt;/p&gt;
&lt;p&gt;In the daily iteration of ByteDance&amp;rsquo;s business, it is common for a feature to cause one indicator to rise and another indicator to decline.
Therefore, Kitex was more inclined to solve various problems in large-scale microservice scenarios at the beginning of its design.&lt;/p&gt;
&lt;p&gt;Since the launch of Kitex, we have received a large amount of self-testing data from our users. We appreciate the community for their attention and support.
We also encourage developers to use the testing guide provided in this article, and select appropriate tools for their own scenarios. For more questions, please make an Issue on GitHub.&lt;/p&gt;
&lt;h2 id="pertinent-links"&gt;Pertinent Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cloudwego.io/"&gt;CloudWeGo Official Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/kitex-benchmark"&gt;kitex-benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/netpoll-benchmark"&gt;netpoll-benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/golang/protobuf"&gt;Go Protobuf Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/thriftgo"&gt;Thriftgo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.0.8</title><link>https://www.cloudwego.io/blog/2021/11/05/kitex-release-v0.0.8/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/11/05/kitex-release-v0.0.8/</guid><description>
&lt;h2 id="improvement"&gt;Improvement:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use shard rings to reduce lock overhead in connpool.&lt;/li&gt;
&lt;li&gt;Fill upstream information to rpcinfo from TTheader, for printing useful log when decode error happened.&lt;/li&gt;
&lt;li&gt;Move unlink uds operation to CreateListener.&lt;/li&gt;
&lt;li&gt;Replace sync.Mutex by sync.RWMutex of event.go and ring_single.go.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix netpollmux shard index overflow.&lt;/li&gt;
&lt;li&gt;Remove reflection of &lt;code&gt;WithCircuitBreaker&lt;/code&gt; option arguments to prevent data-race.&lt;/li&gt;
&lt;li&gt;Fix rpc finished error may happen small probability in failure retry scenario &amp;amp;&amp;amp; add sample check for retry circuit breaking.&lt;/li&gt;
&lt;li&gt;Fix a test case mistake in endpoint_test.go.&lt;/li&gt;
&lt;li&gt;Modify longconn variable name to conn.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool"&gt;Tool:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kitex codegen tool supports passing through thrift-go plugin arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use a link to the the kitex-benchmark repository to replace the performance section in README.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;github.com/tidwall/gjson: v1.8.0 -&amp;gt; v1.9.3&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.0.5</title><link>https://www.cloudwego.io/blog/2021/09/26/kitex-release-v0.0.5/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/09/26/kitex-release-v0.0.5/</guid><description>
&lt;h2 id="feature"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add default ErrorHandler to wrap remote error when no ErrorHandler is specified.&lt;/li&gt;
&lt;li&gt;Backward metainfo is supported.&lt;/li&gt;
&lt;li&gt;JSON generic call is supported. Usage guide: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/#4-json-mapping-generic-call"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="improvement"&gt;Improvement:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use new netpoll API to improve throughput and reduce latency for mux.&lt;/li&gt;
&lt;li&gt;Backward and forward metainfo is supported for mux.&lt;/li&gt;
&lt;li&gt;Client will use RPCTimeout middleware when necessary.&lt;/li&gt;
&lt;li&gt;Add validity verification of idle connection in ConnectionPool.&lt;/li&gt;
&lt;li&gt;QPS limiter token will be reset when QPS limit updates.&lt;/li&gt;
&lt;li&gt;Reduce the deviation of QPS Limiter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix WithExitWaitTime won&amp;rsquo;t set exit wait time correctly.&lt;/li&gt;
&lt;li&gt;Fix goroutine leak when update interval of QPS limiter.&lt;/li&gt;
&lt;li&gt;Use actual listen address to build registry info.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool"&gt;Tool:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix code generating error when no stream method in protobuf file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;English is available for README and all other documents.&lt;/li&gt;
&lt;li&gt;Guide for generic call. &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/"&gt;English&lt;/a&gt; | &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/"&gt;中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Landscape and Roadmap in README.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;github.com/cloudwego/netpoll: v0.0.3 -&amp;gt; v0.0.4&lt;/li&gt;
&lt;li&gt;github.com/bytedance/gopkg: v0.0.0-20210709064845-3c00f9323f09 -&amp;gt; v0.0.0-20210910103821-e4efae9c17c3&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Performance Optimization on Kitex</title><link>https://www.cloudwego.io/blog/2021/09/23/performance-optimization-on-kitex/</link><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/09/23/performance-optimization-on-kitex/</guid><description>
&lt;h2 id="preface"&gt;Preface&lt;/h2&gt;
&lt;p&gt;Kitex is the next generation high-performance and extensible Go RPC framework developed by ByteDance Service Framework Team. Compared with other RPC frameworks, in addition to its rich features for service governance, it has the following characteristics: integrated with the self-developed network library - Netpoll; supports multiple Message Protocols (Thrift, Protobuf) and Interactive Models (Ping-Pong, Oneway, Streaming); provides a more flexible and extensible code generator.&lt;/p&gt;
&lt;p&gt;Currently, Kitex has been widely used by the major lines of business in ByteDance, and statistics shows that the number of service access is up to 8K. We&amp;rsquo;ve been continuously improving Kitex&amp;rsquo;s performance since its launch. This article will share our work on optimizing Netpoll and serialization.&lt;/p&gt;
&lt;h2 id="optimization-of-the-network-library---netpoll"&gt;Optimization of the Network Library - Netpoll&lt;/h2&gt;
&lt;p&gt;Netpoll, the self-developed network library based on Epoll. Compared with the previous version and the go net library, its performance has been significantly improved. Test results indicated that compared with the last version (2020.05), the latest version (2020.12) has ↑30% throughput capacity, ↓25% AVG latency, and ↓67% TP99 . Its performance is far better than the Go Net library. Below, we&amp;rsquo;ll share two solutions that can significantly improve its performance.&lt;/p&gt;
&lt;h3 id="optimizing-scheduling-delays-when-calling-epoll_wait"&gt;Optimizing Scheduling Delays When Calling &amp;ldquo;epoll_wait&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;When Netpoll was newly released, it encountered the problem of low AVG latency but high TP99. Through our research and analysis on &amp;ldquo;epoll_wait&amp;rdquo;, we found that such a problem could be mitigated by integrating &amp;ldquo;polling&amp;rdquo; and &amp;ldquo;event trigger&amp;rdquo;. With such improvements in scheduling strategy, the latency can be reduced considerably.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at the &amp;ldquo;syscall.EpollWait&amp;rdquo; method provided by Go first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EpollWait&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;epfd&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;events&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#000"&gt;EpollEvent&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Three parameters are provided here, they represent &amp;ldquo;epoll fd&amp;rdquo;, “callback events”, and &amp;ldquo;milliseconds to wait&amp;rdquo; respectively. Only &amp;ldquo;msec&amp;rdquo; is dynamic.&lt;/p&gt;
&lt;p&gt;Normally, we would set &amp;ldquo;msec = -1&amp;rdquo; when we are actively calling &amp;ldquo;EpollWait&amp;rdquo;, as we want to wait for the event infinitely. In fact, many open-source net libraries were also using it in this way. But our research showed that setting &amp;ldquo;msec =-1&amp;rdquo; was not the optimal solution.&lt;/p&gt;
&lt;p&gt;The kernel source (below) of &amp;ldquo;epoll_wait&amp;rdquo; shows that setting &amp;ldquo;msec = -1&amp;rdquo; arises extra &amp;ldquo;fetch_events&amp;rdquo; checks than setting &amp;ldquo;msec = 0&amp;rdquo;, and therefore consumes more time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ep_poll&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;eventpoll&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;ep&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;epoll_event&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;__user&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;maxevents&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;long&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;timeout&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;timeout&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;else&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;timeout&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;==&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;goto&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;send_events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;fetch_events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;eavail&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;goto&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;send_events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;send_events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Benchmark shows that when an event is triggered, setting &amp;ldquo;msec = 0&amp;rdquo; is about 18% faster than setting &amp;ldquo;msec = -1&amp;rdquo;. Thus, when triggering complex events, setting &amp;ldquo;msec = 0&amp;rdquo; is obviously a better choice.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Benchmark&lt;/th&gt;
&lt;th style="text-align: left"&gt;time/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;bytes/op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkEpollWait, msec=0&lt;/td&gt;
&lt;td style="text-align: left"&gt;270 ns/op&lt;/td&gt;
&lt;td style="text-align: left"&gt;0 B/op&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkEpollWait, msec=-1&lt;/td&gt;
&lt;td style="text-align: left"&gt;328 ns/op&lt;/td&gt;
&lt;td style="text-align: left"&gt;0 B/op&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;EpollWait Delta&lt;/td&gt;
&lt;td style="text-align: left"&gt;-17.68%&lt;/td&gt;
&lt;td style="text-align: left"&gt;~&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, setting &amp;ldquo;msec = 0&amp;rdquo; would lead to infinite polling when no event is triggered, consumes lots of resources.&lt;/p&gt;
&lt;p&gt;Taking the previously mentioned factors into account, it&amp;rsquo;s preferred to set &amp;ldquo;msec = 0&amp;rdquo; when an event is triggered and &amp;ldquo;msec = -1&amp;rdquo; when no event is triggered to reduce polling. The pseudocode is demonstrated as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;var&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;syscall&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;EpollWait&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;epfd&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;continue&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nevertheless, our experiments have proved that the improvement is insignificant. Setting &amp;ldquo;msec = 0&amp;rdquo; merely reduces the delay of a single call by 50ns, which is not a considerable improvement. If we want to further reduce latency, adjustment must be made in Go runtime scheduling.
Thus, let&amp;rsquo;s further explore this issue:
In the pseudocode above, setting &amp;ldquo;msec= -1&amp;rdquo; with no triggered event, and &amp;ldquo;continue&amp;rdquo; directly will immediately execute &amp;ldquo;EpollWait&amp;rdquo; again. Since there is no triggered event while &amp;ldquo;msec = -1&amp;rdquo;, the current &amp;ldquo;goroutine&amp;rdquo; will block and be switched by &amp;ldquo;P&amp;rdquo; passively. However, it is less efficient, and we can save time if we actively switch &amp;ldquo;goroutine&amp;rdquo; for &amp;ldquo;P&amp;rdquo; before &amp;ldquo;continue&amp;rdquo;. So we modified the above pseudocode as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;var&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;syscall&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;EpollWait&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;epfd&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;events&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;runtime&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Gosched&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;continue&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test results of the modified code showed that throughput ↑12% and TP99 ↓64%. The latency was significantly reduced.&lt;/p&gt;
&lt;h3 id="utilizing-unsafepointer"&gt;Utilizing &amp;ldquo;unsafe.Pointer&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Through further study of &amp;ldquo;epoll_wait&amp;rdquo;, we find that the &amp;ldquo;syscall.EpollWait&amp;rdquo; published by Go and the &amp;ldquo;epollwait&amp;rdquo; used by &amp;ldquo;runtime&amp;rdquo; are two different versions, as they use different &amp;ldquo;EpollEvent&amp;rdquo;. They are demonstrated as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// @syscall&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;EpollEvent&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Events&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;uint32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Fd&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pad&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// @runtime&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;epollevent&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;events&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;uint32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;8&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// unaligned uintptr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, the &amp;ldquo;epollevent&amp;rdquo; used by &amp;ldquo;runtime&amp;rdquo; is the original structure defined by &amp;ldquo;epoll&amp;rdquo; at system layer. The published version encapsulates it and splits &amp;ldquo;epoll_data(epollevent.data)&amp;rdquo; into two fixed fields: &amp;ldquo;Fd&amp;rdquo; and &amp;ldquo;Pad&amp;rdquo;. For &amp;ldquo;runtime&amp;rdquo;, in its source code we found the following logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;**&lt;/span&gt;&lt;span style="color:#000"&gt;pollDesc&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)(&lt;/span&gt;&lt;span style="color:#000"&gt;unsafe&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Pointer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;ev&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;pd&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;pd&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;**&lt;/span&gt;&lt;span style="color:#000"&gt;pollDesc&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)(&lt;/span&gt;&lt;span style="color:#000"&gt;unsafe&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Pointer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;ev&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Obviously, &amp;ldquo;runtime&amp;rdquo; uses &amp;ldquo;epoll_data(&amp;amp;ev.data)&amp;rdquo; to store the pointer of the corresponding structure (pollDesc) of &amp;ldquo;fd&amp;rdquo; directly. Thus, when an event is triggered, the &amp;ldquo;struct&amp;rdquo; object can be found directly with the corresponding logic being executed. However, the external version can only obtain the encapsulated &amp;ldquo;fd&amp;rdquo; parameters. So it needs to introduce additional &amp;ldquo;Map&amp;rdquo; to manipulate the &amp;ldquo;struct&amp;rdquo; object, and the performance will be diminished.&lt;/p&gt;
&lt;p&gt;Therefore, we abandoned &amp;ldquo;syscall.EpollWait&amp;rdquo; and designed our own &amp;ldquo;EpollWait&amp;rdquo; call by referring to &amp;ldquo;runtime&amp;rdquo;. We also use &amp;ldquo;unsafe.Pointer&amp;rdquo; to access &amp;ldquo;struct&amp;rdquo; objects. The test results showed that our &amp;ldquo;EpollWait&amp;rdquo; call contributed to ↑10% throughput and ↓10% TP99, which has significantly improved efficiency.&lt;/p&gt;
&lt;h2 id="serializationdeserialization-optimization-of-thrift"&gt;Serialization/Deserialization Optimization of Thrift&lt;/h2&gt;
&lt;p&gt;Serialization refers to the process of converting a data structure or object into a binary or textual form. Deserialization is the opposite process. A serialization protocol needs to be agreed during RPC communication. The serialization process is executed before the client sends requests. The bytes are transmitted to the server over the network, and the server will logic-process the bytes to complete an RPC request. Thrift supports &amp;ldquo;Binary&amp;rdquo;, &amp;ldquo;Compact&amp;rdquo;, and &amp;ldquo;JSON&amp;rdquo; serialization protocols. Since &amp;ldquo;Binary&amp;rdquo; is the most common protocol used in Bytedance, we will only discuss about &amp;ldquo;Binary&amp;rdquo; protocol.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Binary&amp;rdquo; protocol is &amp;ldquo;TLV&amp;rdquo; (&amp;ldquo;Type&amp;rdquo;, &amp;ldquo;Length&amp;rdquo;, &amp;ldquo;Value&amp;rdquo;) encoded, that is, each field is described using &amp;ldquo;TLV&amp;rdquo; structure. It emphasizes that the &amp;ldquo;Value&amp;rdquo; can also be a &amp;ldquo;TLV&amp;rdquo; structure, where the &amp;ldquo;Type&amp;rdquo; and &amp;ldquo;Length&amp;rdquo; are fixed in length, and the length of &amp;ldquo;Value&amp;rdquo; is determined by the input value of &amp;ldquo;Length&amp;rdquo;. The TLV coding structure is simple, clear, and scalable. However, since it requires the input of &amp;ldquo;Type&amp;rdquo; and &amp;ldquo;Length&amp;rdquo;, there is extra memory overhead incurred. It wastes considerable memory especially when most fields are in base types.&lt;/p&gt;
&lt;p&gt;The performance of serialization and deserialization can be optimized from two dimensions - &amp;ldquo;time&amp;rdquo; &amp;amp; &amp;ldquo;space&amp;rdquo;. To be compatible with the existing &amp;ldquo;binary&amp;rdquo; protocols, optimization in &amp;ldquo;space&amp;rdquo; seems to be infeasible. Improvement can only be made in &amp;ldquo;time&amp;rdquo;, it includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce the frequency of operations on memory, notably memory allocation and copying. Try to pre-allocate memory to reduce unnecessary time consumption.&lt;/li&gt;
&lt;li&gt;Reduce the frequency of function calls by adjusting code structure or using &amp;ldquo;inline&amp;rdquo; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research-on-serialization-strategy"&gt;Research on Serialization Strategy&lt;/h3&gt;
&lt;p&gt;Based on &amp;ldquo;go_serialization_benchmarks&amp;rdquo;, we investigated a number of serialization schemes that performed well to guide the optimization of our serialization strategy.&lt;/p&gt;
&lt;p&gt;Analysis of &amp;ldquo;protobuf&amp;rdquo;, &amp;ldquo;gogoprotobuf&amp;rdquo;, and &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; has provided us the following results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Considering I/O, the transmitted data is usually compressed in size during network transmission. &amp;ldquo;protobuf&amp;rdquo; uses &amp;ldquo;Varint&amp;rdquo; encoding and has good data compression capabilities in most scenarios.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;gogoprotobuf&amp;rdquo; uses precomputation to reduce memory allocations and copies during serialization. Thus, it eliminates the cost of system calls, locks and GC arisen from memory allocations.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; directly operates buffer, which also reduces memory allocations and copies. In addition, it also designs &amp;ldquo;struct pointer&amp;rdquo; in a way that processes fixed-length data and non-fixed-length data separately, which enables fast processing for fixed-length data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For compatibility reasons, it is impossible to change the existing &amp;ldquo;TLV&amp;rdquo; encoding format, so data compression is not feasible. But finding 2 and 3 are inspiring to our optimization work, and in fact we have taken a similar approach.&lt;/p&gt;
&lt;h3 id="approaches"&gt;Approaches&lt;/h3&gt;
&lt;h4 id="reducing-operations-on-memory"&gt;Reducing Operations on Memory&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Buffer management&lt;/strong&gt;&lt;br&gt;
Both serialization and deserialization involve copying data from one piece of memory to another. It involves memory allocation and memory copying. Avoiding memory operations can reduce unnecessary overhead such as system calls, locks, and GC.&lt;/p&gt;
&lt;p&gt;In fact, Kitex has provided &amp;ldquo;LinkBuffer&amp;rdquo; for buffer management purposes. &amp;ldquo;LinkBuffer&amp;rdquo; is designed with a linked structure and consists of multiple blocks, among which blocks are memory chunks with a fixed size. Object pool is constructed to maintain unoccupied block and support block multiplexing, thus, reduce memory usage and GC.&lt;/p&gt;
&lt;p&gt;Initially we simply used &amp;ldquo;sync.Pool&amp;rdquo; to multiplex the &amp;ldquo;LinkBufferNode&amp;rdquo; of netpoll, but it didn&amp;rsquo;t significantly contribute to multiplexing in large data package scenarios (large nodes can&amp;rsquo;t be reclaimed or it would cause memory leaking). At present, we have changed our strategy to maintain a group of &amp;ldquo;sync.Pool&amp;rdquo;, and the buffer size in each chunk is different. When new blocks are created, it is obtained from the pool with the closest size to the required size, so that the memory can be multiplexed as much as possible. And the test results also proved that it contributed to significant improvement in terms of memory allocation and GC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Copy-free String / Binary&lt;/strong&gt;&lt;br&gt;
For some services, such as video-related services, during its request or return processes, large-size &amp;ldquo;Binary&amp;rdquo; data will be arisen, representing the processed video or image data. Meanwhile, some services will return large-size &amp;ldquo;String&amp;rdquo; data (such as full-text information, etc.). In this scenario, all the hot spots we see through the flame graph are on the copies of the data. So we thought, can we reduce the frequency of such copies?&lt;/p&gt;
&lt;p&gt;The answer is positive. Since our underlying buffer is a linked list, it is easy to insert a node in the middle of the list.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/buffer-linkerd-list.png" alt="!image"&gt;&lt;/p&gt;
&lt;p&gt;Thus, we have taken a similar approach, when a &amp;ldquo;string&amp;rdquo; or &amp;ldquo;binary&amp;rdquo; data exists during serialization processes. First, split the node&amp;rsquo;s buffer into two segments and then insert the buffer of the &amp;ldquo;string&amp;rdquo; / &amp;ldquo;binary&amp;rdquo; objects in the middle correspondingly. This avoids the copy of large &amp;ldquo;string&amp;rdquo; / &amp;ldquo;binary&amp;rdquo; .&lt;/p&gt;
&lt;p&gt;Furthermore, a copy will occur if we convert a string to &amp;ldquo;[]byte&amp;rdquo; using &amp;ldquo;[]byte(string)&amp;rdquo;. Because &amp;ldquo;string&amp;rdquo; is immutable and &amp;ldquo;[]byte&amp;rdquo; is mutable in Golang language. &amp;ldquo;unsafe&amp;rdquo; is needed if you don&amp;rsquo;t want to copy during the conversion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;StringToSliceByte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;len&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)(&lt;/span&gt;&lt;span style="color:#000"&gt;unsafe&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Pointer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;reflect&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;SliceHeader&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;reflect&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;StringHeader&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)(&lt;/span&gt;&lt;span style="color:#000"&gt;unsafe&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Pointer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))).&lt;/span&gt;&lt;span style="color:#000"&gt;Data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Len&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The meaning of this demonstrated code is to take the address of the string first, and then give it a slice byte header, so that the &amp;ldquo;string&amp;rdquo; can be converted into &amp;ldquo;[]byte&amp;rdquo; without copying the data. Note that the resulting &amp;ldquo;[]byte&amp;rdquo; is not writable, or the behavior is undefined.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pre-Calculation&lt;/strong&gt;&lt;br&gt;
Some services support transmissions of large data package, which incurs considerable serialization / deserialization overhead. Generally, large packages are associated with the large size of the container type. If the buffer can be pre-calculated, some O(n) operations can be reduced to O(1), and further reduce the frequency of function calls. In the case of large data packages, the number of memory allocation can also be greatly reduced, bringing considerable benefits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Base types&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the container element is defined as base type (bool, byte, i16, i32, i64, double), the total size can be pre-calculated during serialization as its size is fixed, and enough buffer can be allocated at once. The number of &amp;ldquo;malloc&amp;rdquo; operations of O(n) can be reduced to O(1), thus greatly reducing the frequency of &amp;ldquo;malloc&amp;rdquo; operations. Similarly, the number of &amp;ldquo;next&amp;rdquo; operations can be reduced during deserialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rearrangement of &amp;ldquo;Struct&amp;rdquo; Fields&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The above optimizations are valid only for container elements that are defined as base types. Can they be optimized for &amp;ldquo;struct&amp;rdquo; elements? The answer is yes.&lt;/li&gt;
&lt;li&gt;If there are fields of base type in &amp;ldquo;struct&amp;rdquo;, we can pre-calculate the size of these fields, then allocate buffer for these fields in advance during serialization and write these fields in the first order. We can also reduce the frequency of &amp;ldquo;malloc&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Size calculation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The optimization mentioned above is for base types. If you first iterate over all the fields of the request during serialization, you can calculate the size of the entire request, allocate buffer in advance, and directly manipulate buffer during serialization and deserialization, so that the optimization effect can be achieved for non-base types.&lt;/li&gt;
&lt;li&gt;Define a new &amp;ldquo;codec&amp;rdquo; interface:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thriftMsgFastCodec&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;interface&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;BLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// count length of whole req/resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;FastWrite&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;FastRead&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Change the &amp;ldquo;Marshal&amp;rdquo; and &amp;ldquo;Unmarshal&amp;rdquo; interfaces accordingly:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thriftCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Marshal&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;out&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ByteBuffer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.(&lt;/span&gt;&lt;span style="color:#000"&gt;thriftMsgFastCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msgBeginLen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;MessageBeginLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;methodName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;TMessageType&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;msgType&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;int32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;seqID&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msgEndLen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;MessageEndLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;out&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Malloc&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;msgBeginLen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;BLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msgEndLen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// malloc once&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;perrors&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewProtocolErrorWithMsg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;fmt&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Sprintf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;thrift marshal, Malloc failed: %s&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteMessageBegin&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;methodName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;TMessageType&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;msgType&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;int32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;seqID&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;FastWrite&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteMessageEnd&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thriftCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Unmarshal&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;in&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ByteBuffer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.(&lt;/span&gt;&lt;span style="color:#000"&gt;thriftMsgFastCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PayloadLen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msgBeginLen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;MessageBeginLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;methodName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msgType&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;seqID&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tProt&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;next&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PayloadLen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msgBeginLen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;MessageEndLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// next once&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTransError&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PROTOCOL_ERROR&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;FastRead&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTransError&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PROTOCOL_ERROR&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tProt&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ReadMessageEnd&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTransError&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;remote&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PROTOCOL_ERROR&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tProt&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Recycle&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Modify the generated code accordingly:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;Demo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;BLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;StructBeginLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Demo&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;field1Length&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;field2Length&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;field3Length&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;FieldStopLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;StructEndLength&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;l&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;Demo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;FastWrite&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteStructBegin&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:],&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Demo&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField4&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;p&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField3&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteFieldStop&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bthrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Binary&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteStructEnd&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="optimizing-thrift-encoding-with-simd"&gt;Optimizing Thrift Encoding with SIMD&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;list&amp;lt;i64/i32&amp;gt;&amp;rdquo; is widely used in the company to carry the ID list, and the encoding method of &amp;ldquo;list&amp;lt;i64/i32&amp;gt;&amp;rdquo; is highly consistent with the rule of vectorization. Thus, we use SIMD to optimize the encoding process of list&amp;lt;i64/i32&amp;gt;.&lt;/p&gt;
&lt;p&gt;We implement &amp;ldquo;avx2&amp;rdquo; to improve the encoding process, and the improved results are significant. When dealing with large amounts of data, the performance can be improved by 6 times for i64 and 12 times for i32. In the case of small data volume, the improvement is more obvious, which achieves 10 times for i64 and 20 times for I32.&lt;/p&gt;
&lt;h4 id="reducing-function-calls"&gt;Reducing Function Calls&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;inline&lt;/strong&gt;&lt;br&gt;
The purpose of &amp;ldquo;inline&amp;rdquo; is to expand a function call during its compilation and replace it with the implementation of the function. It improves program performance by reducing the overhead of the function call.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;inline&amp;rdquo; can&amp;rsquo;t be implemented on all functions in Go. Run the process with the argument - (gflags=&amp;quot;-m&amp;quot;) to display the functions that are inlined. The following conditions cannot be inlined:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A function containing a loop;&lt;/li&gt;
&lt;li&gt;Functions that include: closure calls, select, for, defer, coroutines created by the go keyword;&lt;/li&gt;
&lt;li&gt;For Functions over a certain length, by default when parsing the AST, Go applies 80 nodes. Each node consumes one unit of inline budget. For example, a = a + 1 contains five nodes: AS, NAME, ADD, NAME, LITERAL. When the overhead of a function exceeds this budget, it cannot be inlined.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can specify the intensity (go 1.9+) of the compiler&amp;rsquo;s inlined code by specifying &amp;ldquo;-l&amp;rdquo; at compile time. But it is not recommended, as in our test scenario, it is buggy and does not work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// The debug[&amp;#39;l&amp;#39;] flag controls the aggressiveness. Note that main() swaps level 0 and 1, making 1 the default and -l disable. Additional levels (beyond -l) may be buggy and are not supported.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 0: disabled&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 1: 80-nodes leaf functions, oneliners, panic, lazy typechecking (default)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 2: (unassigned)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 3: (unassigned)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 4: allow non-leaf functions&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although using &amp;ldquo;inline&amp;rdquo; can reduce the overhead of function calls, it may also lead to lower CPU cache hit rate due to code redundancy. Therefore, excessive usage of &amp;ldquo;inline&amp;rdquo; should not be blindly pursued, and specific analysis should be carried out based on &amp;ldquo;profile&amp;rdquo; results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go &lt;span style="color:#204a87"&gt;test&lt;/span&gt; -gcflags&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#39;-m=2&amp;#39;&lt;/span&gt; -v -test.run TestNewCodec 2&amp;gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;|&lt;/span&gt; grep &lt;span style="color:#4e9a06"&gt;&amp;#34;function too complex&amp;#34;&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;|&lt;/span&gt; wc -l
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;48&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go &lt;span style="color:#204a87"&gt;test&lt;/span&gt; -gcflags&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#39;-m=2 -l=4&amp;#39;&lt;/span&gt; -v -test.run TestNewCodec 2&amp;gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;|&lt;/span&gt; grep &lt;span style="color:#4e9a06"&gt;&amp;#34;function too complex&amp;#34;&lt;/span&gt; &lt;span style="color:#000;font-weight:bold"&gt;|&lt;/span&gt; wc -l
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, from the output above, increasing the inline intensity does reduce the &amp;ldquo;function too complex&amp;rdquo;. Following are the benchmark results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Benchmark&lt;/th&gt;
&lt;th style="text-align: left"&gt;time/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;bytes/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;allocs/op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkOldMarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;309 µs ± 2%&lt;/td&gt;
&lt;td style="text-align: left"&gt;218KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkNewMarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;310 µs ± 3%&lt;/td&gt;
&lt;td style="text-align: left"&gt;218KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It reveals that turning on the highest level of inlining intensity does eliminate many functions that cannot be inlined due to &amp;ldquo;function too complex&amp;rdquo;, but the test results show that the improvement is insignificant.&lt;/p&gt;
&lt;h3 id="testing-results"&gt;Testing Results&lt;/h3&gt;
&lt;p&gt;We built benchmarks to compare performance before and after optimization, and here are the results.
Testing Environment:
Go 1.13.5 darwin/amd64 on a 2.5 GHz Intel Core i7 16GB&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Small Data Size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data size: 20KB&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Benchmark&lt;/th&gt;
&lt;th style="text-align: left"&gt;time/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;bytes/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;allocs/op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkOldMarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;138 µs ± 3%&lt;/td&gt;
&lt;td style="text-align: left"&gt;25.4KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkNewMarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;29 µs ± 3%&lt;/td&gt;
&lt;td style="text-align: left"&gt;26.4KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Marshal Delta&lt;/td&gt;
&lt;td style="text-align: left"&gt;-78.97%&lt;/td&gt;
&lt;td style="text-align: left"&gt;3.87%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-42.11%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkOldUnmarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;199 µs ± 3%&lt;/td&gt;
&lt;td style="text-align: left"&gt;4720&lt;/td&gt;
&lt;td style="text-align: left"&gt;1360&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkNewUnmarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;94µs ± 5%&lt;/td&gt;
&lt;td style="text-align: left"&gt;4700&lt;/td&gt;
&lt;td style="text-align: left"&gt;1280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Unmarshal Delta&lt;/td&gt;
&lt;td style="text-align: left"&gt;-52.93%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-0.24%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-5.38%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Large Data Size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data size: 6MB&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Benchmark&lt;/th&gt;
&lt;th style="text-align: left"&gt;time/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;bytes/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;allocs/op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkOldMarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;58.7ms ± 5%&lt;/td&gt;
&lt;td style="text-align: left"&gt;6.96MB&lt;/td&gt;
&lt;td style="text-align: left"&gt;3350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkNewMarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;13.3ms ± 3%&lt;/td&gt;
&lt;td style="text-align: left"&gt;6.84MB&lt;/td&gt;
&lt;td style="text-align: left"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Marshal Delta&lt;/td&gt;
&lt;td style="text-align: left"&gt;-77.30%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-1.71%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-99.64%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkOldUnmarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;56.6ms ± 3%&lt;/td&gt;
&lt;td style="text-align: left"&gt;17.4MB&lt;/td&gt;
&lt;td style="text-align: left"&gt;391000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkNewUnmarshal-4&lt;/td&gt;
&lt;td style="text-align: left"&gt;26.8ms ± 5%&lt;/td&gt;
&lt;td style="text-align: left"&gt;17.5MB&lt;/td&gt;
&lt;td style="text-align: left"&gt;390000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Unmarshal Delta&lt;/td&gt;
&lt;td style="text-align: left"&gt;-52.54%&lt;/td&gt;
&lt;td style="text-align: left"&gt;0.09%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-0.37%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="copy-free-serialization"&gt;Copy-free Serialization&lt;/h2&gt;
&lt;p&gt;In some services with large request and response data, the cost of serialization and deserialization is high. There are two ways for optimization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the optimization strategy on serialization and deserialization as described earlier.&lt;/li&gt;
&lt;li&gt;Scheduling by copy-free serialization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="research-on-copy-free-serilization"&gt;Research on Copy-free Serilization&lt;/h3&gt;
&lt;p&gt;RPC through copy-free serialization, which originated from the &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; project of Kenton Varda. &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; provides a set of data exchange formats and corresponding codec libraries.&lt;/p&gt;
&lt;p&gt;In essence, &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; creates a bytes slice as buffer, and all read &amp;amp; write operations on data structures are directly operated on buffer. After reading &amp;amp; writing, information contained by the buffer is added to the head and can be sent directly. And the peer end can read it after receiving it. Since there is no Go structure as an intermediate storage, serialization and deserialization are not required.&lt;/p&gt;
&lt;p&gt;To briefly summarize the characteristics of &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All data is read and written to a contiguous memory.&lt;/li&gt;
&lt;li&gt;The serialization operation is preceded. &amp;ldquo;Get/Set&amp;rdquo; data and encoding process in parallel.&lt;/li&gt;
&lt;li&gt;In the data exchange format, pointer (&amp;ldquo;offset&amp;rdquo; at the data memory) mechanism is used to store data at any location in the contiguous memory, so that data in the structure can be read and written in any order.
&lt;ul&gt;
&lt;li&gt;Fixed-size fields of a structure are rearranged so that they are stored in contiguous memory.&lt;/li&gt;
&lt;li&gt;Fields with indeterminate size of a structure (e.g. list), are represented by a fixed-size pointer that stores information including the location of the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all, &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; has no Go language structure as an intermediate carrier, which can reduce a copy. Then, &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; operates on a contiguous memory, and the read and write of coded data can be completed at once. Because of these two reasons, Cap &amp;rsquo;n Proto has excellent performance.&lt;/p&gt;
&lt;p&gt;Here are the benchmarks of &amp;ldquo;Thrift&amp;rdquo; and &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; for the same data structure. Considering that &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; presets the codec operation, we compare the complete process including data initialization. That is, structure data initialization + (serialization) + write buffer + read from buffer + (deserialization) + read from structure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Thrift" data-lang="Thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;MyTest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Num&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Ano&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Ano&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;3&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;list&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Nums&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 长度131072 大小1MB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Ano&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Num&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Benchmark&lt;/th&gt;
&lt;th style="text-align: left"&gt;Iter&lt;/th&gt;
&lt;th style="text-align: left"&gt;time/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;bytes/op&lt;/th&gt;
&lt;th style="text-align: left"&gt;alloc/op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkThriftReadWrite&lt;/td&gt;
&lt;td style="text-align: left"&gt;172&lt;/td&gt;
&lt;td style="text-align: left"&gt;6855840 ns/op&lt;/td&gt;
&lt;td style="text-align: left"&gt;3154209 B/op&lt;/td&gt;
&lt;td style="text-align: left"&gt;545 allocs/op&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;BenchmarkCapnpReadWrite&lt;/td&gt;
&lt;td style="text-align: left"&gt;1500&lt;/td&gt;
&lt;td style="text-align: left"&gt;844924 ns/op&lt;/td&gt;
&lt;td style="text-align: left"&gt;2085713 B/op&lt;/td&gt;
&lt;td style="text-align: left"&gt;9 allocs/op&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;ReadWrite Delta&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;-87.68%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-33.88%&lt;/td&gt;
&lt;td style="text-align: left"&gt;-98.35%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(deserialization) + read data, depending on the size of data package,&amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; performance is about 8-9 times better than &amp;ldquo;Thrift&amp;rdquo;. Write data + (serialization), depending on the size of data package, &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; performance is approximately 2-8 times better than &amp;ldquo;Thrift&amp;rdquo;. Overall performance of &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; is approximately 4-8 times better than &amp;ldquo;Thrift&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Previously, we discussed the advantages of &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo;. We will then summarize some problems existing in &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One problem with the contiguous memory of Cap &amp;rsquo;n Proto is that when the data of variable size is resized, and the required space is larger than the original space, the space of the original data can only be reallocated later. As a result, the original space becomes a hole that cannot be removed. This problem gets worse as the call link is resized, and can only be solved with strict constraints throughout the link: avoid resizing variable size fields, and when resize is necessary, rebuild a structure and make a deep copy of the data.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; has no Go language structure as an intermediate carrier, so all fields can only be read and written through the interface, resulting in poor user experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thrift-protocols-compatible-copy-free-serialization"&gt;Thrift Protocol‘s Compatible Copy-free Serialization&lt;/h3&gt;
&lt;p&gt;In order to support copy-free serialization better and more efficiently, &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; uses a self-developed codec format, but it is difficult to be implemented in the current environment where &amp;ldquo;Thrift&amp;rdquo; and &amp;ldquo;ProtoBuf&amp;rdquo; are dominant. In order to achieve the performance of copy-free serialization with protocol compatibility, we started the exploration of copy-free serialization that is compatible with &amp;ldquo;Thrift&amp;rdquo; protocol.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; is a benchmark for copy-free serialization, so let&amp;rsquo;s see if the optimizations on &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; can be applied to Thrift:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nature is the core of copy-free serialization, which does not use Go structure as intermediate carriers to reduce one copy. This optimization is not about a particular protocol and can be applied to any existing protocol (So it&amp;rsquo;s naturally compatible with the Thrift protocol), but the user experience of &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; reflects that it needs to be carefully polished.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; is operated on a contiguous memory. The read &amp;amp; write of the encoded data can be completed at once. &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; can operate on contiguous memory because there is a pointer mechanism that allows data to be stored anywhere, allowing fields to be written in any order without affecting decoding. However, it is very likely to leave a hole in the resize due to misoperation on contiguous memory. Besides, &amp;ldquo;Thrift&amp;rdquo; has no pointer alike mechanism, so it has stricter requirements on data layout. Here are two ways to approach such problems:
&lt;ul&gt;
&lt;li&gt;Insist on operating in contiguous memory, while imposing strict regulations on users&amp;rsquo; usage: 1. Resize operation must rebuild the data structure; 2. When a structure is nested, there are strict requirements on the order in which the fields are written (we can think of it as unfolding a nested structure from the outside in, and being written in the same order) . In addition, due to TLV encoding such as Binary, when writing begins for each nesting, it requires declaration (such as &amp;ldquo;StartWriteFieldX&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Operating not entirely in contiguous memory, alterable fields are allocated a separate piece of memory. Since memory is not completely contiguous, the write operation can&amp;rsquo;t complete the output at once. In order to get closer to the performance of writing data at once, we adopted a linked buffer scheme. On the one hand, when the variable field resize occurs, only one node of the linked buffer is replaced, and there is no need to reconstruct the structure like &amp;ldquo;Cap &amp;rsquo;n Proto”. On the other hand, there is no need to clarify the actual structure like &amp;ldquo;Thrift&amp;rdquo; when the output is needed, just write the buffer on the link.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize what we have determined previously: 1. Do not use Go structure as the intermediate carrier, directly operate the underlying memory through the interface, and complete the codec at the same time of &amp;ldquo;Get/Set&amp;rdquo;. 2. Data is stored through a linked buffer.&lt;/p&gt;
&lt;p&gt;Then let&amp;rsquo;s take a look at the remaining issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Degradation of the user experience caused by not using Go structures.
&lt;ul&gt;
&lt;li&gt;Solution: Improve the user experience of &amp;ldquo;Get/Set&amp;rdquo; interface and make it as easy to use as the Go structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Binary Format of &amp;ldquo;Cap &amp;rsquo;n Proto&amp;rdquo; is designed specifically for copy-free serialization scenarios, and although decoding is performed once for every Get, the decoding costs are minimal. The &amp;ldquo;Thrift&amp;rdquo; protocol (taking &amp;ldquo;Binary&amp;rdquo; as an example) has no mechanism that is similar to pointer. When there are multiple fields of variable size or nesting, they must be resolved sequentially instead of directly calculating the offset to get the field data location. Moreover, the cost of sequential resolution for each Get is too high.
&lt;ul&gt;
&lt;li&gt;Solution: In addition to recording the structure&amp;rsquo;s buffer nodes, we also add an index that records the pointer to the buffer node at the beginning of each field with unfixed size. The following is the ultimate performance comparison test between the current copy-free serialization scheme and &amp;ldquo;FastRead/Write&amp;rdquo; under the condition of 4 cores:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Package Size&lt;/th&gt;
&lt;th style="text-align: left"&gt;Type&lt;/th&gt;
&lt;th style="text-align: left"&gt;QPS&lt;/th&gt;
&lt;th style="text-align: left"&gt;TP90&lt;/th&gt;
&lt;th style="text-align: left"&gt;TP99&lt;/th&gt;
&lt;th style="text-align: left"&gt;TP999&lt;/th&gt;
&lt;th style="text-align: left"&gt;CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;1KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;Non-serialization&lt;/td&gt;
&lt;td style="text-align: left"&gt;70,700&lt;/td&gt;
&lt;td style="text-align: left"&gt;1 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;3 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;6 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;FastWrite/FastRead&lt;/td&gt;
&lt;td style="text-align: left"&gt;82,490&lt;/td&gt;
&lt;td style="text-align: left"&gt;1 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;2 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;4 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;2KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;Non-serialization&lt;/td&gt;
&lt;td style="text-align: left"&gt;65,000&lt;/td&gt;
&lt;td style="text-align: left"&gt;1 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;4 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;9 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;FastWrite/FastRead&lt;/td&gt;
&lt;td style="text-align: left"&gt;72,000&lt;/td&gt;
&lt;td style="text-align: left"&gt;1 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;2 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;8 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;4KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;Non-serialization&lt;/td&gt;
&lt;td style="text-align: left"&gt;56,400&lt;/td&gt;
&lt;td style="text-align: left"&gt;2 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;5 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;10 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;380%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;FastWrite/FastRead&lt;/td&gt;
&lt;td style="text-align: left"&gt;52,700&lt;/td&gt;
&lt;td style="text-align: left"&gt;2 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;4 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;10 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;380%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;32KB&lt;/td&gt;
&lt;td style="text-align: left"&gt;Non-serialization&lt;/td&gt;
&lt;td style="text-align: left"&gt;27,400&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;FastWrite/FastRead&lt;/td&gt;
&lt;td style="text-align: left"&gt;19,500&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;td style="text-align: left"&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;1MB&lt;/td&gt;
&lt;td style="text-align: left"&gt;Non-serialization&lt;/td&gt;
&lt;td style="text-align: left"&gt;986&lt;/td&gt;
&lt;td style="text-align: left"&gt;53 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;56 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;59 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;260%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;FastWrite/FastRead&lt;/td&gt;
&lt;td style="text-align: left"&gt;942&lt;/td&gt;
&lt;td style="text-align: left"&gt;55 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;59 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;62 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;290%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;10MB&lt;/td&gt;
&lt;td style="text-align: left"&gt;Non-serialization&lt;/td&gt;
&lt;td style="text-align: left"&gt;82&lt;/td&gt;
&lt;td style="text-align: left"&gt;630 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;640 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;645 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;240%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;FastWrite/FastRead&lt;/td&gt;
&lt;td style="text-align: left"&gt;82&lt;/td&gt;
&lt;td style="text-align: left"&gt;630 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;640 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;640 ms&lt;/td&gt;
&lt;td style="text-align: left"&gt;270&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Summary of the test results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In small data package scenario, performance of non-serialization is poorer - about 85% of FastWrite/FastRead&amp;rsquo;s performance.&lt;/li&gt;
&lt;li&gt;In large data package scenario, the performance of non-serialization is better. When processing packages larger than 4K, the performance of non-serialization is 7%-40% better compared with &amp;ldquo;FastWrite/FastRead&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="postscript"&gt;Postscript&lt;/h2&gt;
&lt;p&gt;Hope the above sharing can be helpful to the community. At the same time, we are trying to share memory-based IPC, io_uring, TCP zero copy, RDMA, etc., to better improve Kitex performance. And we will also focus on improving the communication scenarios of the same device and container. Welcome to join us and contribute to Go ecology together!&lt;/p&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/alecthomas/go_serialization_benchmarks"&gt;https://github.com/alecthomas/go_serialization_benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://capnproto.org/"&gt;https://capnproto.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions-2/intrinsics-for-shuffle-operations-1/mm256-shuffle-epi8.html"&gt;Intel C++ Compiler Classic Developer Guide and Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.0.4</title><link>https://www.cloudwego.io/blog/2021/08/26/kitex-release-v0.0.4/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/08/26/kitex-release-v0.0.4/</guid><description>
&lt;h2 id="improvement"&gt;Improvement:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make transMetaHandler executed before customized boundHandlers to ensure the customized boundHandlers could get metainfo.&lt;/li&gt;
&lt;li&gt;TransError uses internal error typeID if exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Not reset stats level when clear RPCInfo in netpollmux to fix metric missing bug when use netpollmux.&lt;/li&gt;
&lt;li&gt;Remove stale addresses in long pool.&lt;/li&gt;
&lt;li&gt;Add an EOF condition to eliminate a redundant warning.&lt;/li&gt;
&lt;li&gt;Modify error types check of service circuit breaker to fix the bug that fuse cannot be triggered.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool"&gt;Tool:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adjust protobuf generated code of unary to support both Kitex Protobuf and gRPC.&lt;/li&gt;
&lt;li&gt;Upgrade version of thriftgo to fix golint style.&lt;/li&gt;
&lt;li&gt;Fix typo in thrift generated code.&lt;/li&gt;
&lt;li&gt;Fix a bug that streaming generated code missing transport option.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add Golang setup section and Golang version requirement&lt;/li&gt;
&lt;li&gt;Some docs are updated.&lt;/li&gt;
&lt;li&gt;Add some English documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="dependency-change"&gt;Dependency Change:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thriftgo: v0.0.2-0.20210726073420-0145861fcd04 -&amp;gt; v0.1.2&lt;/li&gt;
&lt;li&gt;Netpoll: v0.0.2 -&amp;gt; v0.0.3&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.0.3</title><link>https://www.cloudwego.io/blog/2021/08/01/kitex-release-v0.0.3/</link><pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/08/01/kitex-release-v0.0.3/</guid><description>
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Prevent connection pool from being overridden.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.0.2</title><link>https://www.cloudwego.io/blog/2021/07/30/kitex-release-v0.0.2/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/07/30/kitex-release-v0.0.2/</guid><description>
&lt;h2 id="improvement"&gt;Improvement:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kitex now disables all stats to improve performance when no tracer is provided.&lt;/li&gt;
&lt;li&gt;The Kitex client now will reuse connections by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A nil-pointer bug in lbcache has been fixed.&lt;/li&gt;
&lt;li&gt;A data-race issue in the retry(backup request) is fixed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tool"&gt;Tool:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The kitex tool no longer generates a default config file.&lt;/li&gt;
&lt;li&gt;The kitex tool now uses the latest API of thriftgo which fixes several bad corner cases in code generation.&lt;/li&gt;
&lt;li&gt;The kitex tool now checks the existence of the go command instead of assuming it. Thanks to @anqiansong&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have updated some documentations in this version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Several lint issues and typos are fixed thanks to @rleungx @Huangxuny1 @JeffreyBool.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.0.1</title><link>https://www.cloudwego.io/blog/2021/07/12/kitex-release-v0.0.1/</link><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2021/07/12/kitex-release-v0.0.1/</guid><description>
&lt;p&gt;Kitex project initialization.&lt;/p&gt;</description></item></channel></rss>