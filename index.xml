<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudWeGo – CloudWeGo</title><link>https://www.cloudwego.io/</link><description>Recent content on CloudWeGo</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://www.cloudwego.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Kitex Release v0.15.1</title><link>https://www.cloudwego.io/blog/2025/09/29/kitex-release-v0.15.1/</link><pubDate>Mon, 29 Sep 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/09/29/kitex-release-v0.15.1/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="announcements"&gt;&lt;strong&gt;Announcements&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go Version Support Changes&lt;/strong&gt;: Kitex&amp;rsquo;s minimum declared Go version has been adjusted to Go1.20 and supports up to Go1.25
&lt;ul&gt;
&lt;li&gt;Currently does not affect Go v1.18/v1.19 compilation, but after being declared for higher versions, subsequent versions will introduce features of higher versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Change for Partial interfaces&lt;/strong&gt;: No impact on regular users, but may affect those with extensions or special api dependencies. For details, refer to the [&lt;strong&gt;Special Changes&lt;/strong&gt;] section.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="new-features"&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: New v2 API Supporting Multi-Services and Streaming Calls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Thrift binary generic call API now provides v2 version, supporting multi-services and streaming calls. For detailed usage, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: Support for Unknown Service Handler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Facilitates rapid development of streaming proxy, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/proxy_application_development/"&gt;Proxy Application Development Guide&lt;/a&gt; for details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: Support for Server-Level JSON/Map Streaming Generic Calls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call User Guide&lt;/a&gt; for details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming: Support for ctx Cancel to Control Flow Lifecycle&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly terminate streaming calls, saving model resources&lt;/li&gt;
&lt;li&gt;Aligns with gRPC, for detailed usage see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/streamx_lifecycle_control/"&gt;Stream Lifecycle Control Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Supports Client actively invoking cancel to end streaming calls&lt;/li&gt;
&lt;li&gt;Supports Client sensing the ctx cancel signal of the current Handler and cascading to end streaming calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming Error Handling Optimization&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly address specific error scenarios, accelerate troubleshooting of cascade cancel link issues, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/streamx_error_handling/"&gt;Stream Error Handling Best Practices&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;In cascade cancel scenarios, error description includes complete cancel link, quickly locating the first-hop service that actively cancels&lt;/li&gt;
&lt;li&gt;Error description includes specific error scenarios and corresponding unique error codes&lt;/li&gt;
&lt;li&gt;Unified and convenient cancel error handling method, eliminating the need for cumbersome string matching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="featureexperience-optimization"&gt;&lt;strong&gt;Feature/Experience Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Client: Optimize Background Goroutine Startup Logic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Starting from Kitex v0.13.0, a generic client supports both Ping-Pong and streaming calls, and uses the TTHeader Streaming protocol by default. Each generic client automatically starts a background goroutine to clean up idle connections for TTHeader Streaming.&lt;/p&gt;
&lt;p&gt;If users previously used the generic client incorrectly (e.g., creating a generic client for each request), upgrading to Kitex v0.13.x would result in a large number of background goroutines being created, leading to goroutine leaks, even though streaming generics are not actually used.&lt;/p&gt;
&lt;p&gt;The v0.15.1 version only creates background goroutines when streaming generalization is actually used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="code-generation-tool-kitex-tool"&gt;&lt;strong&gt;Code Generation Tool Kitex Tool&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strict Enum Value Checking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For scenarios where Thrift IDL defines enum value overflow, strict generation checks have been added, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/idl_enumeration_type/"&gt;Kitex Tool Enum Type Checking Instructions&lt;/a&gt; for details&lt;/p&gt;
&lt;p&gt;This change will cause some products to fail to generate because correctness already has issues, posing a significant risk to the service!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="special-change---minor-services-may-be-affected"&gt;&lt;strong&gt;Special Change - Minor Services May Be Affected&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Interface Breaking Change that has no impact on 99.9% of users&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kitex will ensure compatibility with normal usage patterns of internal users. However, individual users may have dependencies on definitions in the Kitex repository, and this version adjustment of Kitex will have an impact on these users.&lt;/p&gt;
&lt;p&gt;This version has made minor adjustments to non-standard usage of &lt;code&gt;remote.Message&lt;/code&gt;, &lt;code&gt;rpcinfo.RPCInfo&lt;/code&gt; or &lt;code&gt;generic.Generic&lt;/code&gt; interfaces. If there are special usages, they need to be adjusted to conform to the new version&amp;rsquo;s interface definition.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rpcinfo.RPCInfo().Invocation()&lt;/code&gt; added &lt;code&gt;MethodInfo()&lt;/code&gt; method, returning MethodInfo for the current RPC:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit 62979e4b95e5a5ed73d0bfd9e218cfc61c5ce253
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;type Invocation interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PackageName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ServiceName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MethodName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ MethodInfo() serviceinfo.MethodInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; StreamingMode() serviceinfo.StreamingMode
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SeqID() int32
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; BizStatusErr() kerrors.BizStatusErrorIface
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;remote.Message&lt;/code&gt; interface removed some redundant interfaces:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; // Message is the core abstraction for Kitex message.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; type Message interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; RPCInfo() rpcinfo.RPCInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- ServiceInfo() *serviceinfo.ServiceInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- SpecifyServiceInfo(svcName, methodName string) (*serviceinfo.ServiceInfo, error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; Data() interface{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NewData(method string) (ok bool)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MessageType() MessageType
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetPayloadLen(size int)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TransInfo() TransInfo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Tags() map[string]interface{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- ProtocolInfo() ProtocolInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- SetProtocolInfo(ProtocolInfo)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; PayloadCodec() PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SetPayloadCodec(pc PayloadCodec)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Recycle()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dependencies on &lt;code&gt;ProtocolInfo()&lt;/code&gt; should be modified to rely on &lt;code&gt;remote.Message().RPCInfo().Config().TransportProtocol()&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;generic.Generic&lt;/code&gt; interface underwent significant adjustments:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; commit 024fedbc2da33956cd81cd0a8226f817e5eac777
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; // Generic ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; type Generic interface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Closer
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // PayloadCodec return codec implement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // this is used for generic which does not need IDL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- PayloadCodec() remote.PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt; // PayloadCodecType return the type of codec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PayloadCodecType() serviceinfo.PayloadCodec
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // RawThriftBinaryGeneric must be framed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- Framed() bool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // GetMethod is to get method name if needed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- GetMethod(req interface{}, method string) (*Method, error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+ // GenericMethod return generic method func
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ GenericMethod() serviceinfo.GenericMethodFunc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; // IDLServiceName returns idl service name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; IDLServiceName() string
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // MessageReaderWriter returns reader and writer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- // this is used for generic which needs IDL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- MessageReaderWriter() interface{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+ // GetExtra returns extra info by key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ GetExtra(key string) interface{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;PayloadCodec()&lt;/code&gt; interface was completely removed. This adjustment was made because, after Kitex generic interface supported the multi-service feature, it no longer relies on hijacking PayloadCodec to inject the generic codec; instead, it&amp;rsquo;s implemented by hijacking Args/Results structs. Currently, only &lt;code&gt;generic.BinaryThriftGeneric()&lt;/code&gt; relies on the old method, but this interface has been marked as deprecated. Please migrate to using &lt;code&gt;generic.BinaryThriftGenericV2()&lt;/code&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call User Guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Framed() bool&lt;/code&gt; is a deprecated interface because Kitex has defaulted to framed mode for clients since v0.13.*.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageReaderWriter&lt;/code&gt; and &lt;code&gt;GetMethod&lt;/code&gt; interfaces are merged into a unified &lt;code&gt;GenericMethod()&lt;/code&gt; interface. The new unified interface returns a closure function that accepts context and method name as arguments and returns the corresponding method info. This method info includes the hijacked Args/Results parameters, thus implementing different types of generic call codec logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;code&gt;remote.ServiceSearcher&lt;/code&gt; Get/Set method changes, &lt;code&gt;codec.SetOrCheckMethodName&lt;/code&gt; parameter adjustment:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit a1008887b9ab4553a79ce82cf6d3db324c344977
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-const keyServiceSearcher = &amp;#34;rpc_info_service_searcher&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+type keyServiceSearcher struct{}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-// GetServiceSearcher returns the service searcher from rpcinfo.RPCInfo.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func GetServiceSearcher(ri rpcinfo.RPCInfo) ServiceSearcher {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- svcInfo, _ := ri.Invocation().Extra(keyServiceSearcher).(ServiceSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- return svcInfo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+// GetServiceSearcher returns the service searcher from context.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+func GetServiceSearcher(ctx context.Context) ServiceSearcher {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ svcSearcher, _ := ctx.Value(keyServiceSearcher{}).(ServiceSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ return svcSearcher
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-// SetServiceSearcher sets the service searcher to rpcinfo.RPCInfo.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func SetServiceSearcher(ri rpcinfo.RPCInfo, svcSearcher ServiceSearcher) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- setter := ri.Invocation().(rpcinfo.InvocationSetter)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;- setter.SetExtra(keyServiceSearcher, svcSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+// WithServiceSearcher sets the service searcher to context.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+func WithServiceSearcher(ctx context.Context, svcSearcher ServiceSearcher) context.Context {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;+ return context.WithValue(ctx, keyServiceSearcher{}, svcSearcher)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#00a000"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The old version set &lt;code&gt;ServiceSearcher&lt;/code&gt; on rpcinfo; the new version moves it to context to optimize Get/Set performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;commit a1008887b9ab4553a79ce82cf6d3db324c344977
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;// SetOrCheckMethodName is used to set method name to invocation.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;-func SetOrCheckMethodName(methodName string, message remote.Message) error {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a40000"&gt;&lt;/span&gt;&lt;span style="color:#00a000"&gt;+func SetOrCheckMethodName(ctx context.Context, methodName string, message remote.Message) error {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;This simultaneously affects the definition of &lt;code&gt;codec.SetOrCheckMethodName&lt;/code&gt;, adding &lt;code&gt;context.Context&lt;/code&gt; as a parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="full-change"&gt;&lt;strong&gt;Full Change&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;feat(ttstream): support ctx cancel and detailed canceled error by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1821"&gt;#1821&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1859"&gt;#1859&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1856"&gt;#1856&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(generic): support new thrift binary generic call api, server streaming generic call and unknown service or method handler by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1837"&gt;#1837&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1857"&gt;#1857&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;feat(grpc): support dump MaxConcurrentStreams of HTTP2 Client by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1820"&gt;#1820&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fix(retry): shallow copy response to avoid data race by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1799"&gt;#1799&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1814"&gt;#1814&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(lbcache): check the existence before new Balancer to prevent leakage by @ppzqh in &lt;a href="https://github.com/cloudwego/kitex/pull/1825"&gt;#1825&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(generic): descriptor.HTTPRequest.GetParam nil pointer exception by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1827"&gt;#1827&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(generic): fix generic write int range check by @HeyJavaBean in &lt;a href="https://github.com/cloudwego/kitex/pull/1861"&gt;#1861&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(rpcinfo): protect bizErr and extra field of ri.Invocation by lock by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1850"&gt;#1850&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(timeout): remove timer pool to avoid timer race issue by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1858"&gt;#1858&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(tool): disable fast api for protobuf by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1807"&gt;#1807&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fix(tool): skip pb code gen for arg -use by @xiaost in &lt;a href="https://github.com/cloudwego/kitex/pull/1819"&gt;#1819&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;optimize(grpc): access metadata.MD without ToLower by @xiaost in &lt;a href="https://github.com/cloudwego/kitex/pull/1806"&gt;#1806&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;optimize(ttstream): lazy init cleaning task for ObjectPool to reduce the impact of lots of goroutines caused by creating too many Generic Client by @DMwangnima in &lt;a href="https://github.com/cloudwego/kitex/pull/1842"&gt;#1842&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;optimize(tool): remove string deepcopy because the string type is read-only in Go by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1832"&gt;#1832&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;refactor(ttstream): remove ttstream provider by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1805"&gt;#1805&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;refactor(rpcinfo): move service/method info from message to rpcinfo, remove protocol info from message and update min go version to 1.20 by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1818"&gt;#1818&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1855"&gt;#1855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;refactor(server): remove service middleware and SupportedTransportsFunc api by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1839"&gt;#1839&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;refactor(server): remove useless TargetSvcInfo field by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1840"&gt;#1840&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;chore: update dependencies of kitex to support go 1.25 and new features by @jayantxie @AsterDY in &lt;a href="https://github.com/cloudwego/kitex/pull/1848"&gt;#1848&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1834"&gt;#1834&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1862"&gt;#1862&lt;/a&gt; | &lt;a href="https://github.com/cloudwego/kitex/pull/1836"&gt;#1836&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;chore: update version v0.15.0 by @jayantxie in &lt;a href="https://github.com/cloudwego/kitex/pull/1864"&gt;#1864&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;docs: fix broken link to blogs by @scientiacoder in &lt;a href="https://github.com/cloudwego/kitex/pull/1813"&gt;#1813&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;chore: support custom ctx key to pass to downstream in Service-Inline by @Duslia in &lt;a href="https://github.com/cloudwego/kitex/pull/1709"&gt;#1709&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.14.0</title><link>https://www.cloudwego.io/blog/2025/06/26/kitex-release-v0.14.0/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/06/26/kitex-release-v0.14.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="new-features"&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generic Call: The generic Client supports streaming calls, allowing a single Client to handle both streaming and non-streaming scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It supports streaming generic calls, adapting to gRPC/TTHeader Streaming and supporting map/JSON and Protobuf binary generic calls.&lt;/p&gt;
&lt;p&gt;A brief code example is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;genericclient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;actualServiceName&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;g&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Ping-Pong generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GenericCall&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;PingPongTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ClientStreaming generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;cliStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ClientStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;ClientStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ServerStreaming generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;srvStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServerStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;ServerStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// BidiStreaming generic&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;bidiStream&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;BidiStreaming&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;BidiStreamingTest&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Refer to this document for details: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/"&gt;Generic Call&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="featureexperience-optimization"&gt;&lt;strong&gt;Feature/Experience Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming: Improved observability and debugging experience&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Tracer configured, failure to create a stream will now be reported with metrics.&lt;/li&gt;
&lt;li&gt;When a panic occurs on the Server side, the full stack trace will now be printed for easier troubleshooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Tracer configured, failure to create a stream will now be reported with metrics.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="others"&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Product Simplification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex tool no longer generates fastpb, only affecting Protobuf users.&lt;/p&gt;
&lt;p&gt;If high-performance Protobuf encoding/decoding is required, you can enable prutal by configuring environment variable &lt;code&gt;KITEX_TOOL_USE_PRUTAL_MARSHAL=1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-change"&gt;&lt;strong&gt;Full Change&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1759"&gt;#1759&lt;/a&gt;] feat(tool): add env for using prutal to marshal&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1782"&gt;#1782&lt;/a&gt;] feat(ttstream): process MetaFrame and reflect to rpcinfo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1777"&gt;#1777&lt;/a&gt;] feat(client): report err when create Stream failed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1763"&gt;#1763&lt;/a&gt;] feat: support ttheader streaming generic call&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1771"&gt;#1771&lt;/a&gt;] feat(tool): add thriftgo patcher extension&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1755"&gt;#1755&lt;/a&gt;] feat: add generic binary pb for streamx&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1752"&gt;#1752&lt;/a&gt;] feat(generic): support generic pb binary for streaming&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1788"&gt;#1788&lt;/a&gt;] optimize: go net implementation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1786"&gt;#1786&lt;/a&gt;] optimize(tool): remove tool fastpb generation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1783"&gt;#1783&lt;/a&gt;] optimize(gRPC): parse PayloadCodec in server side&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1780"&gt;#1780&lt;/a&gt;] optimize(ttstream): log the error thrown by invoking handler&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1769"&gt;#1769&lt;/a&gt;] optimize: injection of options in ttstream&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1792"&gt;#1792&lt;/a&gt;] fix(gRPC): inject current method name to rpcinfo in server-side to fix FROM_METHOD missing&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1787"&gt;#1787&lt;/a&gt;] fix(ttstream): metrics missing caused by server-side rpcinfo not set correctly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1778"&gt;#1778&lt;/a&gt;] fix: enabling json mode of map generic not work&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1774"&gt;#1774&lt;/a&gt;] fix(server): trans server conn count race issue&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1742"&gt;#1742&lt;/a&gt;] fix(generic): align dynamicgo&amp;rsquo;s write base behavior with old generic (only for internal logic)&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1770"&gt;#1770&lt;/a&gt;] refactor: refactor generic streaming&lt;/p&gt;
&lt;h3 id="test"&gt;Test&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1793"&gt;#1793&lt;/a&gt;] test: add go1.18 to scenario-test&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1765"&gt;#1765&lt;/a&gt;] refactor: refactor generic streaming&lt;/p&gt;
&lt;h3 id="docs"&gt;Docs&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1794"&gt;#1794&lt;/a&gt;] docs: update CONTRIBUTING.md to change PR base branch to main&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1795"&gt;#1795&lt;/a&gt;] chore: update dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1776"&gt;#1776&lt;/a&gt;] chore: remove testify dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1757"&gt;#1757&lt;/a&gt;] chore: update prutal to v0.1.1&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1753"&gt;#1753&lt;/a&gt;] ci: disable codecov annotations&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.10.0</title><link>https://www.cloudwego.io/blog/2025/05/21/hertz-release-v0.10.0/</link><pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/05/21/hertz-release-v0.10.0/</guid><description>
&lt;p&gt;The Hertz v0.10.0 release adds two features and some fixes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Integrate SSE functionality. Refer to &lt;a href="https://www.cloudwego.io/docs/hertz/tutorials/basic-feature/sse/"&gt;SSE&lt;/a&gt; for usage.&lt;/li&gt;
&lt;li&gt;Added http.Handler adaptor, extending Hertz using the official net/http ecosystem. Refer to &lt;a href="https://www.cloudwego.io/docs/hertz/tutorials/basic-feature/http-adaptor/"&gt;Adaptor&lt;/a&gt; for usage.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1327"&gt;#1327&lt;/a&gt;] feat(adaptor): new HertzHandler for http.Handler&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1349"&gt;#1349&lt;/a&gt;] feat(sse): SetLastEventID&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1343"&gt;#1343&lt;/a&gt;] feat(sse): reader supports cancel stream&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1341"&gt;#1341&lt;/a&gt;] feat(server): detect request race&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1339"&gt;#1339&lt;/a&gt;] feat(sse): add LastEventID helpers&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1335"&gt;#1335&lt;/a&gt;] feat(protocol): new sse pkg&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1322"&gt;#1322&lt;/a&gt;] feat: std transport sense client connection close&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1340"&gt;#1340&lt;/a&gt;] fix: only use netpoll &amp;amp; sonic on amd64/arm64 linux/darwin&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1333"&gt;#1333&lt;/a&gt;] fix(protocol): unexpected set resp.bodyStream&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1329"&gt;#1329&lt;/a&gt;] fix(client): stream body for sse instead of timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1332"&gt;#1332&lt;/a&gt;] fix(server): Shutdown checks ExitWaitTimeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1316"&gt;#1316&lt;/a&gt;] fix: prioritize custom validator&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1336"&gt;#1336&lt;/a&gt;] test(protocol): fix hardcoded listen addr&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1353"&gt;#1353&lt;/a&gt;] chore: update netpoll dependency&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1337"&gt;#1337&lt;/a&gt;] chore(hz): update hz tool v0.9.7&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1328"&gt;#1328&lt;/a&gt;] ci: disable codecov annotations&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Kitex Release v0.13.0</title><link>https://www.cloudwego.io/blog/2025/04/07/kitex-release-v0.13.0/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/04/07/kitex-release-v0.13.0/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;We recommend upgrading directly to Kitex version v0.13.1, as we have fixed a potential Goroutine leak issue of the gRPC Client in v0.13.0.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="new-features"&gt;&lt;strong&gt;New Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New streaming interface StreamX supports gRPC, existing Kitex gRPC users can migrate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;v0.12.0 released the StreamX interface to optimise the streaming experience, and supported the custom streaming protocol TTHeader Streaming, but did not support gRPC. So existing users could not migrate.&lt;/p&gt;
&lt;p&gt;This version supports gRPC for StreamX, users can migrate to StreamX, and the Server side can be compatible with two streaming protocols at the same time. So there is no need to worry about protocol compatibility after interface migration.&lt;/p&gt;
&lt;p&gt;In particular, when adapting gRPC with StreamX, we found that there are still some inconvenient problems. In order to bring a better experience of using the interface, we have adjusted the StreamX interface for the second time, which will affect the users who have already been using StreamX. We apologise for that.&lt;/p&gt;
&lt;p&gt;User documentation: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/"&gt;StreamX User Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prutal - Protobuf&amp;rsquo;s non-generated code serialisation library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/prutal"&gt;Prutal&lt;/a&gt; is officially open source, on par with Thrift&amp;rsquo;s &lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt;, and the new version of Kitex integrates Prutal by default.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Minimized Code Product Size: Generating Only Structures, No Runtime Code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leveraging Reflection Optimization Similar to Frugal, Achieving Over 50% Speed Increase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generating Code Compatible with Existing Protobuf and Derivative Versions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User documentation: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/prutal/"&gt;Prutal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="featureexperience-optimization"&gt;&lt;strong&gt;Feature/Experience Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TTHeader Streaming: Support interface-level Recv timeout control&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition to the existing Client level, this release of TTHeader Streaming supports interface-level Recv timeout configuration, making configuration more flexible.&lt;/p&gt;
&lt;p&gt;User documentation: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/streamx_timeout_control/"&gt;StreamX Timeout Control&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="special-change"&gt;&lt;strong&gt;Special Change&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Default Thrift transport protocol changed from Buffered to Framed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This change leverages FastCodec for higher codec performance. Since Kitex server supports protocol detection, this behavioral change is compatible. Framed protocol is generally supported by most thrift frameworks, and we assess the impact to be minimal. However, if the downstream does not support Framed protocol, please manually revert to the Buffered protocol as follows:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;cli&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;service_name&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithTransportProtocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;transport&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PurePayload&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="others"&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Code Product Simplification&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kitex Tool would not generate the repeated verification code for Set data structure and the &lt;code&gt;DeepEqual&lt;/code&gt; function for each structure by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you only want to restore&lt;code&gt;DeepEqual&lt;/code&gt;, add&lt;code&gt;-thrift gen_deep_equal=true&lt;/code&gt;to the generation command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to restore the repeated verification of Set, add&lt;code&gt;-thrift validate_set=true, -thrift gen_deep_equal=true&lt;/code&gt;to the generation command.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kitex Tool would not generate the Apache Codec related code by default.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to restore it, add&lt;code&gt;-thrift no_default_serdes=false&lt;/code&gt;to the generation command.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go Supported Version Change&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Support version Go 1.19~1.24, the lowest supported version becomes Go 1.19.&lt;/p&gt;
&lt;p&gt;if Go version is too low, there will be a prompt when compiling:&lt;code&gt;note: module requires Go 1.19&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-change"&gt;&lt;strong&gt;Full Change&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1719"&gt;#1719&lt;/a&gt;] feat: prutal for replacing protoc&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1736"&gt;#1736&lt;/a&gt;] feat(ttstream): support WithRecvTimeout stream call option&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1702"&gt;#1702&lt;/a&gt;] feat(gRPC): add grpc client conn dump to help debug the conn and stream status&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1723"&gt;#1723&lt;/a&gt;] feat(codec/thrift): use fastcodec/frugal if apache codec not available&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1724"&gt;#1724&lt;/a&gt;] feat: add tail option to support for delayed initialization of some client options&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1728"&gt;#1728&lt;/a&gt;] optimize(apache): remove apache codec gen and set default protocol from buffered to framed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1732"&gt;#1732&lt;/a&gt;] optimize(rpcinfo): purify the transport protocol of rpcinfo in a single rpc request&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1711"&gt;#1711&lt;/a&gt;] optimize(tool): disable set validate and deep equal code gen to simplify kitex_gen&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1717"&gt;#1717&lt;/a&gt;] optimize(gRPC): return more detailed error when received invalid http2 frame&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1734"&gt;#1734&lt;/a&gt;] fix(ttstream): adjust stream state transition and remove all SetFinalizer to avoid memory leak&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1735"&gt;#1735&lt;/a&gt;] fix(generic): support both relative and absolute check for idl includes parse to make it compatible with generation tool&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1725"&gt;#1725&lt;/a&gt;] fix: code gen import issue for streamx mode, stream call judgement bug and set ttheader streaming as default&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1727"&gt;#1727&lt;/a&gt;] fix(tool): fix tool UseStdLib remains unexpected lib issue&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1658"&gt;#1658&lt;/a&gt;] refactor: streamx api to adapt both grpc and ttheader streaming protocol and provide more user-friendly interface&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1729"&gt;#1729&lt;/a&gt;] refactor(tool): move pb tpl code to sep pkg&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1743"&gt;#1743&lt;/a&gt;] chore: update dependencies version&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1740"&gt;#1740&lt;/a&gt;] chore(generic): deprecate NewThriftContentProvider&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1741"&gt;#1741&lt;/a&gt;] chore(streamx): remove redundant streamx package&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1738"&gt;#1738&lt;/a&gt;] ci: fix typos &amp;amp; crate-ci/typos&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1737"&gt;#1737&lt;/a&gt;] chore: update dependency and change go support to 1.19-1.24&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1720"&gt;#1720&lt;/a&gt;] Revert &amp;ldquo;fix(ttstream): pingpong method refers to server interface defined in Kitex generation code when streamx is enabled and there are other streaming methods&amp;rdquo;&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.12.0</title><link>https://www.cloudwego.io/blog/2025/01/03/kitex-release-v0.12.0/</link><pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2025/01/03/kitex-release-v0.12.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="simplified-product-recommendation---remove-apache-thrift-dependency"&gt;Simplified Product Recommendation - Remove Apache Thrift Dependency&lt;/h3&gt;
&lt;p&gt;We strongly recommend removing Apache Codec to resolve the compilation issues caused by Apache&amp;rsquo;s incompatible changes and to &lt;strong&gt;reduce the product size by 50%&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please replace it with Kitex&amp;rsquo;s own Thrift codec: FastCodec or Frugal, which does not rely on Apache Thrift Codec.&lt;/p&gt;
&lt;p&gt;Future version plans: Kitex will remove Apache products by default. User guide: &lt;a href="https://www.cloudwego.io/docs/kitex/best-practice/remove_apache_codec/"&gt;Kitex Remove Apache Thrift User Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="new-features"&gt;New Features&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Thrift Streaming over TTHeader - Custom Streaming Protocol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supported streaming calls based on the TTHeader protocol, optimizing stability issues caused by the high complexity of the gRPC streaming protocol.&lt;/p&gt;
&lt;p&gt;Provided a new streaming interface, StreamX, to solve various user experience issues with the original streaming interface and provide best practices for streaming interfaces.&lt;/p&gt;
&lt;p&gt;For more details: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/streamx/"&gt;StreamX User Documentation and Best Practices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Graceful Shutdown for gRPC Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added support for a graceful shutdown feature to address upstream errors caused by service upgrades or updates.&lt;/p&gt;
&lt;p&gt;For usage: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/graceful_shutdown/"&gt;gRPC Streaming Graceful Shutdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="experience-optimization"&gt;Experience Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming Log Optimization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For streaming concatenation scenarios, if the downstream error is due to an exit of the upstream Stream exiting, the error will include the suffix &amp;ldquo;[triggered by {serviceName}]&amp;rdquo; will be included in the error, which is convenient for locating the problem.&lt;/p&gt;
&lt;p&gt;Errors returned by Send such as &lt;code&gt;the stream is done&lt;/code&gt; now reflect the actual error that caused the stream to close.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Generation Tool Kitex Tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimization of Generation Speed and Tool Installation&lt;/strong&gt;: Now Thriftgo is built into Kitex, significantly improving generation speed, especially for scenarios with particularly large IDL files. There is no need to install or upgrade Thriftgo anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimizing Product Size&lt;/strong&gt;: To minimize product size, Frugal can be used. For gray scale adoption, it supports specifying certain structs to use Frugal serialization.
For more details, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/"&gt;Code Generation Tool&lt;/a&gt; for instructions on -frugal-struct and -gen-frugal parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="breaking-change---no-impact-for-99-of-users"&gt;Breaking Change - No Impact for 99% of Users&lt;/h3&gt;
&lt;p&gt;Kitex will strive to ensure compatibility with normal usage methods. Some users may have dependencies on certain code definitions of Kitex, and this version adjustment of Kitex will have an impact on these users.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removing &lt;code&gt;thrift.NewBinaryProtocol&lt;/code&gt;
&lt;code&gt;thrift.NewBinaryProtocol&lt;/code&gt; is Kitex&amp;rsquo;s implementation of the Apache thrift.TProtocol interface. Because the trans part directly uses Kitex&amp;rsquo;s ByteBuffer, the performance is better than Apache thrift.TBinaryProtocol.
The Deprecation comment has been added to it in v0.11.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Removing Reason&lt;/strong&gt;: To remove the Apache Thrift dependency, the implementation needs to be removed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Modification Method&lt;/strong&gt;: This implementation was originally used with Apache Codec. If you still need to rely on Apache Codec, please directly use Apache&amp;rsquo;s TBinaryProtocol.
If you think that it has an impact on performance, you can fork the old version of Kitex, refer to github/cloudwego/kitex v0.10.0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/apache/thrift/lib/go/thrift&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tProt&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTBinaryProtocol&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewTMemoryBufferLen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1024&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Removing &lt;code&gt;generic.ServiceInfo&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generic removed an API &lt;code&gt;generic.ServiceInfo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Removing Reason&lt;/strong&gt;: To prepare for future multi-service registration on a generic server, the generic implementation has been refactored (v0.11.0), and this API is no longer used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Modification Method&lt;/strong&gt;: This API was replaced by &lt;code&gt;generic.ServiceInfoWithGeneric&lt;/code&gt;. Please use it instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/pkg/generic&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// removed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;pcType&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;PayloadCodec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// please use this instead&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfoWithGeneric&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;g&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Generic&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;serviceinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceInfo&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1541"&gt;#1541&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1633"&gt;#1633&lt;/a&gt;] feat(ttstream): support ttheader streaming and streamv2 interface&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1623"&gt;#1623&lt;/a&gt;] feat(gRPC): optimize gRPC error prompt and metrics, assisting in troubleshooting problems&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1556"&gt;#1556&lt;/a&gt;] feat(gRPC): support gRPC graceful shutdown&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1467"&gt;#1467&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1627"&gt;#1627&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1619"&gt;#1619&lt;/a&gt;] feat(generic): support thrift streaming(over gRPC) for json generic client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1607"&gt;#1607&lt;/a&gt;] feat(tool): kitex tool support gen frugal codec for certain struct&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1526"&gt;#1526&lt;/a&gt;] feat(generic): support an option to remove go.tag annotation&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1536"&gt;#1536&lt;/a&gt;] feat(generic): support an option to set IDL ParseMode for each client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1510"&gt;#1510&lt;/a&gt;] feat: register service with service level middleware&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1635"&gt;#1635&lt;/a&gt;] optimize: add two function for binary protocol to get bufiox reader and writer&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1630"&gt;#1630&lt;/a&gt;] optimize(tool): implement no recursive generate to support incremental update&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1617"&gt;#1617&lt;/a&gt;] optimize(retry): optimize UpdatePolicy and add test cases to check invalid retry policy. &amp;lt;v0.11.0, if the FailurePolicy is nil and type is 0 or &amp;gt;1, will trigger nil panic. The bug has been fixed in v0.11.0, this pr is to add test cases and optimize UpdatePolicy to ignore the nil panic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1606"&gt;#1606&lt;/a&gt;] optimize(tool): use embedded thriftgo as default option&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1595"&gt;#1595&lt;/a&gt;] optimize(tool): optimize pb tool code&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1599"&gt;#1599&lt;/a&gt;] optimize(tool): call FastWriteNocopy in FastWrite to avoid misuse by users&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1615"&gt;#1615&lt;/a&gt;] refactor: get rid of apache thrift in go.mod&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1611"&gt;#1611&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1614"&gt;#1614&lt;/a&gt;] refactor: move ttheader codec logic to gopkg&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1553"&gt;#1553&lt;/a&gt;] refactor(codec/thrift): unified typecodec implementation and adjust new file layout&lt;/p&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1581"&gt;#1581&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1628"&gt;#1628&lt;/a&gt;] perf(timeout): refactor new rpctimeout implementation to improve performance&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1564"&gt;#1564&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1567"&gt;#1567&lt;/a&gt;] perf: reduce object allocation for circuitbreak middleware and retry context&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1557"&gt;#1557&lt;/a&gt;] perf(rpcinfo): remove lock for rpcinfo.RPCStats&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1622"&gt;#1622&lt;/a&gt;] fix(generic): use jsoniter instead of sonic for json generic-call, since sonic doesn&amp;rsquo;t support map[interface{}]interface{}&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1562"&gt;#1562&lt;/a&gt;] fix: deep copy function of the generated code cannot copy the empty string&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1602"&gt;#1602&lt;/a&gt;] fix(gRPC): check if the type assertion succeed in ProtocolMatch to avoid panic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1598"&gt;#1598&lt;/a&gt;] fix(retry): fix issue that mixed retry cannot update its config correctly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1590"&gt;#1590&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1572"&gt;#1572&lt;/a&gt;] fix(generic): set default values for optional fields of primitive types with generic with dynamicgo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1580"&gt;#1580&lt;/a&gt;] fix(netpoll): fix timeout caused by partial use of the Read method of remote.ByteBuffer&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1574"&gt;#1574&lt;/a&gt;] fix(trace): stream event handler ignore io.EOF event&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1563"&gt;#1563&lt;/a&gt;] fix(generic): fix the issue where the generic client sets the parse mode of CombineServices and then requests causes &amp;ldquo;unknown service&amp;rdquo; error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1568"&gt;#1568&lt;/a&gt;] fix(wpool): fix the issue of wpool object allocation, and incorrect ctx causing profiler errors.&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1558"&gt;#1558&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1555"&gt;#1555&lt;/a&gt;] fix(bthrift): fix the issue of no recursion conversion of unknown field type under bthrift&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1593"&gt;#1593&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1560"&gt;#1560&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1561"&gt;#1561&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1559"&gt;#1559&lt;/a&gt;] chore(test): fix data race issue, unstable issue and long time running issue of some test cases&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1634"&gt;#1634&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1632"&gt;#1632&lt;/a&gt;][&lt;a href="https://github.com/cloudwego/kitex/pull/1573"&gt;#1573&lt;/a&gt;] chore(dep): upgrade frugal, localsession and other cloudwego dependency versions&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1616"&gt;#1616&lt;/a&gt;] chore(generic): remove deprecated apis/interfaces/variables&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.11.0</title><link>https://www.cloudwego.io/blog/2024/09/12/kitex-release-v0.11.0/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/09/12/kitex-release-v0.11.0/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;Highly recommend upgrading Kitex version to v0.11.3 or higher, because there&amp;rsquo;s some bugfix on v0.11.0.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="new-feature"&gt;New Feature&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Mixed Retry&lt;/strong&gt;: Supports enabling both &amp;ldquo;Failure Retry&amp;rdquo; and &amp;ldquo;Backup Request&amp;rdquo; strategies simultaneously, which can reduce tail requests while increasing the success rate of retries, for more detail: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/retry/"&gt;Retry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom Payload Validation&lt;/strong&gt;: To avoid inconsistencies in data transmission caused by hardware failures or data tampering, Kitex provides validation functionality for payload messages and supports custom extensions. For usage: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/payload_validator/"&gt;Payload Validator&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="feature-optimization"&gt;Feature optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Frugal ARM Optimization&lt;/strong&gt;: Frugal v0.2.0 now supports a new implement by reflection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kitex Tool Improvement&lt;/strong&gt;: Kitex Tool provide a new param &lt;code&gt;-rapid&lt;/code&gt; to integrates Thriftgo and there&amp;rsquo;s a slightly improved speed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generating Multiple Handlers for Multiple Services&lt;/strong&gt;：Since this version, Kitex tool provide each service with independent handler file and register them into server，for more details: &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/multi_service/multi_handler/"&gt;Generating Multiple Handlers for Multiple Services&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Support Go 1.18~1.23. Minimum support for Golang 1.18，if your golang version is lower than 1.18, you&amp;rsquo;ll see &lt;code&gt;note: module requires Go 1.18&lt;/code&gt; when you compile.&lt;/li&gt;
&lt;li&gt;Remove Apache Thrift，and refactor all related interface into github.com/cloudwego/gopkg/thrift.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1509"&gt;#1509&lt;/a&gt;] feat(retry): support Mixed Retry which integrating Failure Retry and Backup Request&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1478"&gt;#1478&lt;/a&gt;] feat: customized payload validator&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1514"&gt;#1514&lt;/a&gt;] feat(grpc): server returns cancel reason&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1513"&gt;#1513&lt;/a&gt;] feat(tool): support updating import path for PkgInfo&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1425"&gt;#1425&lt;/a&gt;] feat(tool): support generating multiple handlers for multiple services&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1491"&gt;#1491&lt;/a&gt;] feat(grpc): add GetTrailerMetadataFromCtx&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1492"&gt;#1492&lt;/a&gt;] feat: add GetCallee to kitexutil to get the service name of callee&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1479"&gt;#1479&lt;/a&gt;] feat(tool): embed thriftgo into kitex tool&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1485"&gt;#1485&lt;/a&gt;] optimize: add cachekey to discovery event for debug&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1525"&gt;#1525&lt;/a&gt;] fix: move json-iterator back to support marshal &lt;code&gt;map[any]any&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1471"&gt;#1471&lt;/a&gt;] fix(streaming): resolve ctx diverge in server-side streaming&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1515"&gt;#1515&lt;/a&gt;] fix(gRPC): pass error when client transport is closed&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1501"&gt;#1501&lt;/a&gt;] fix(generic): judge business error directly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1503"&gt;#1503&lt;/a&gt;] fix: return an unknown service/method exception to client correctly under multi_service server scenario&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1487"&gt;#1487&lt;/a&gt;] fix(generic): fix a generic serviceInfo compatible issue&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1489"&gt;#1489&lt;/a&gt;] fix(codec): wrap trans error for apache thrift read error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1486"&gt;#1486&lt;/a&gt;] fix(trans/netpoll): log when panic in onConnRead&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1476"&gt;#1476&lt;/a&gt;] fix: fix GetServerConn interface assert for streamWithMiddleware&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1481"&gt;#1481&lt;/a&gt;] fix(gonet): adjust gonet server read timeout to avoid read error&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1466"&gt;#1466&lt;/a&gt;] fix: allow HEADERS frame with empty header block fragment&lt;/p&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1512"&gt;#1512&lt;/a&gt;] refactor: thrift and generic codec uses bufiox interface for encoding and decoding&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1490"&gt;#1490&lt;/a&gt;] refactor: optimized apache codec without reflection&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1483"&gt;#1483&lt;/a&gt;] refactor: use github.com/cloudwego/gopkg/protocol/thrift/apache&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1474"&gt;#1474&lt;/a&gt;] refactor: rm apache thrift in internal/mocks&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1470"&gt;#1470&lt;/a&gt;] refactor: rm apache thrift in pkg/generic &amp;amp; netpollmux&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1450"&gt;#1450&lt;/a&gt;] refactor(generic): remove apache thrift.TProtocol from generic&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1441"&gt;#1441&lt;/a&gt;] refactor: deprecate bthrift, use cloudwego/gopkg&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1455"&gt;#1455&lt;/a&gt;] refactor(test): perf optimize and log loc correct&lt;/p&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1469"&gt;#1469&lt;/a&gt;] test: replace judgement of mem stats of client finalizer by closed count check&lt;/p&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1527"&gt;#1527&lt;/a&gt;] perf(grpc): bdp ping rate limit&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1511"&gt;#1511&lt;/a&gt;] perf(thrift): encodeBasicThrift write logic didn&amp;rsquo;t use kitex BinaryProtocol&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1504"&gt;#1504&lt;/a&gt;] perf(grpc): zero allocation in hot path&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1497"&gt;#1497&lt;/a&gt;] perf: add option to enable spancache for fastpb&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1495"&gt;#1495&lt;/a&gt;] perf(thrift): use kitex BinaryProtocol replace apache BinaryProtocol for apache thrift codec&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1532"&gt;#1532&lt;/a&gt;] chore: update dependency&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1522"&gt;#1522&lt;/a&gt;] chore(generic): make generic streaming APIs internal&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1465"&gt;#1465&lt;/a&gt;] chore(generic): add an external method to create service info for generic streaming client&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1468"&gt;#1468&lt;/a&gt;] build: adapt to go1.23rc2&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1482"&gt;#1482&lt;/a&gt;] chore(generic): add generic base using gopkg base&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1463"&gt;#1463&lt;/a&gt;] chore: fix grpc keepalive test by start server responsiblly&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1462"&gt;#1462&lt;/a&gt;] chore(test): fix xorshift64 in consist_test.go&lt;/p&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1454"&gt;#1454&lt;/a&gt;] chore(ci): speed up multiple ci processes 8min -&amp;gt; 1min&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.10.0</title><link>https://www.cloudwego.io/blog/2024/06/12/kitex-release-v0.10.0/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/06/12/kitex-release-v0.10.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="performance-optimization"&gt;Performance Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Long connection: conncurrency = 100, qps increased by 4%, p99 decreased by 18%&lt;/li&gt;
&lt;li&gt;connection multiplexing: conncurrency = 100, qps increased by 7%, p99 decreased by 24%&lt;/li&gt;
&lt;li&gt;gRPC: conncurrency = 100, qps increased by 8%，p99 decreased by 10%&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="code-generation-simplification-and-optimization"&gt;Code Generation Simplification and Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Remove non-serialization code (By default)&lt;/strong&gt;: the original kitex_gen Thrift code includes Processor code to maintain consistency with Apache Thrift. However, Kitex does not need these codes. To solve users&amp;rsquo; code generation painpoint, this version Kitex removes this part of the code, increasing the generation speed by about 10%.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove Apache Codec code (Remove if configured)&lt;/strong&gt;：Kitex has custom FastCodec code, and the original Apache Codec is only required when using Buffered protocol. The new version of Kitex implements SkipDecoder. If enabled, the serialization will be completely independent of Apache Codec, reducing the generated code size by about 50%. Refer to this doc for usage &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/skip_decoder/"&gt;SkipDecoder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="new-feature"&gt;New Feature&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Thrift Serialize Data Ondemands&lt;/strong&gt;：Support defining FieldMask to achieve on-demand serialization of data (field clipping, merging, RPC Performance optimization, etc.), see details &lt;a href="https://github.com/cloudwego/thriftgo/tree/main/fieldmask"&gt;Thrift FieldMask RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="feature-optimization"&gt;Feature optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CircuitBreaker&lt;/strong&gt;： Support for customized circuit breaker error types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure Retry&lt;/strong&gt;：The code configuration of the customized result retry adds the ctx parameter to facilitate users to check whether to retry based on ctx information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove cache from consistent hashing&lt;/strong&gt;：Solve the issue of high latency and memory increase caused by scattered hash keys. After removing the cache, it can effectively reduce memory usage and cache management consumption in scenarios where keys are particularly scattered or even close to random distribution.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="user-experience-and-tool-optimization"&gt;User Experience and Tool Optimization&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kitex tool compatibility check&lt;/strong&gt;：Optimize the &amp;ldquo;undefined&amp;rdquo; compile error caused by introducing new definitions in old generated code. The Kitex tool will check the Kitex version used in go.mod before generating code. If the Kitex tool and Kitex version are incompatible, the code will not be generated and will provide corresponding upgrade and downgrade prompts and documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1370"&gt;#1370&lt;/a&gt;] feat(loadbalance): do not cache all the keys for Consistent Hash&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1359"&gt;#1359&lt;/a&gt;] feat:(generic) jsonpb using dynamicgo support parse IDL from memory&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1353"&gt;#1353&lt;/a&gt;] feat(retry): add ctx param for customized result retry funcs&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1352"&gt;#1352&lt;/a&gt;] feat: add option to specify ip version for default HTTPResolver&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1316"&gt;#1316&lt;/a&gt;] feat(kitex tool): support dependencies compatibility checking&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1346"&gt;#1346&lt;/a&gt;] feat(generic): set dynamicgo parse mode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1336"&gt;#1336&lt;/a&gt;] feat(tool): fast-codec supports Thrift Fieldmask&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1313"&gt;#1313&lt;/a&gt;, #1378] feat(thrift codec): implement skipDecoder to enable Frugal and FastCodec for standard Thrift Buffer Protocol&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1257"&gt;#1257&lt;/a&gt;] feat: CBSuite custom GetErrorType func&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1349"&gt;#1349&lt;/a&gt;] optimize(gRPC): gRPC onError uses CtxErrorf to print log with information in ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1326"&gt;#1326&lt;/a&gt;] optimize(tool): remove thrift processor for less codegen&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="perf"&gt;Perf:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1369"&gt;#1369&lt;/a&gt;] perf(thrift): optimized skip decoder&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1314"&gt;#1314&lt;/a&gt;] perf: use dirtmake to reduce memclr cost&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1322"&gt;#1322&lt;/a&gt;] perf(codec): support fast write nocopy when using netpoll link buffer&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1276"&gt;#1276&lt;/a&gt;] perf: linear allocator for fast codec ReadString/ReadBinary&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1320"&gt;#1320&lt;/a&gt;] perf(codec): fast codec use batch alloc&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1379"&gt;#1379&lt;/a&gt;] fix: fix a bug &amp;ldquo;unknown service xxx&amp;rdquo; when using generic client by not writing IDLServiceName when it&amp;rsquo;s generic service&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1368"&gt;#1368&lt;/a&gt;] fix(remote): modify the error message thrown when no target service is found&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1374"&gt;#1374&lt;/a&gt;] fix: init default values when using liner allocator&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1361"&gt;#1361&lt;/a&gt;] fix: span cache re-cap bytes when using Make&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1362"&gt;#1362&lt;/a&gt;] fix(payloadCodec): replace the registered PayloadCodec if the type is same when using WithPayloadCodec for server-side&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1364"&gt;#1364&lt;/a&gt;] fix: fix grpc compressor mcache free panic when data is empty&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1328"&gt;#1328&lt;/a&gt;] fix(gRPC): release connection in DoFinish for grpc streaming to close the short connection&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1307"&gt;#1307&lt;/a&gt;] fix(connpool): kitex long pool reset idleList element to nil to prevent conn leak&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1294"&gt;#1294&lt;/a&gt;] fix(netpollmux): fix a bug that disables multi-service by assigning the first svcInfo to targetSvcInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1308"&gt;#1308&lt;/a&gt;] fix(generic): not write generic method name for binary generic exception to align with method names of services not using binary generic&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="refactor"&gt;Refactor:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1344"&gt;#1344&lt;/a&gt;] refactor(tool): export thriftgo template definition in kitextool&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1385"&gt;#1385&lt;/a&gt;] chore: update dynamicgo to v0.2.8&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1383"&gt;#1383&lt;/a&gt;] chore: upgrade netpoll to v0.6.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1376"&gt;#1376&lt;/a&gt;] chore: integration test use go 1.20 to solve the compatibility issue of official gRPC in kitex-tests repo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1355"&gt;#1355&lt;/a&gt;] chore: upgrade netpoll to v0.6.1 pre-release version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1338"&gt;#1338&lt;/a&gt;] chore: correct the comment of FreezeRPCInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1347"&gt;#1347&lt;/a&gt;] chore: use runtimex to replace choleraehyq/pid&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1342"&gt;#1342&lt;/a&gt;] chore: update sonic/loader to v0.1.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1334"&gt;#1334&lt;/a&gt;] chore: update dynamicgo to v0.2.3&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1324"&gt;#1324&lt;/a&gt;] chore: update dynamicgo and sonic version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1317"&gt;#1317&lt;/a&gt;] chore: frugal v0.1.15 (with migrated iasm)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong&gt;
@XiaoYi-byte&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.9.0</title><link>https://www.cloudwego.io/blog/2024/05/30/hertz-release-v0.9.0/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/05/30/hertz-release-v0.9.0/</guid><description>
&lt;p&gt;The Hertz v0.9.0 release mainly supports general iteration and optimization.&lt;/p&gt;
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1101"&gt;#1101&lt;/a&gt;] feat: add method to exile requestContext&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1056"&gt;#1056&lt;/a&gt;] feat: add more default type for binding&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1057"&gt;#1057&lt;/a&gt;] feat: add SetHandlers when fast fail for no valid host and invalid rPath&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/921"&gt;#921&lt;/a&gt;] optimize(hz): sort route strictly which preventing sorting inconsistencies&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1037"&gt;#1037&lt;/a&gt;] optimize: filter shortConnErr in tracer&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1102"&gt;#1102&lt;/a&gt;] fix: resp set trailer will panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1107"&gt;#1107&lt;/a&gt;] fix: router sort&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/1064"&gt;#1064&lt;/a&gt;] refactor(hz): client query enum&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Volo Release 0.10.0</title><link>https://www.cloudwego.io/blog/2024/04/08/volo-release-0.10.0/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/04/08/volo-release-0.10.0/</guid><description>
&lt;p&gt;In Volo 0.10.0, we mainly focused on extensibility and ease of use.&lt;/p&gt;
&lt;h2 id="break-change"&gt;Break Change&lt;/h2&gt;
&lt;h3 id="error-handling-refactored"&gt;Error Handling Refactored&lt;/h3&gt;
&lt;p&gt;Existing error types had issues such as unclear semantics, lack of maintainability and extensibility, and misuse. In the new version, we refactored the entire error handling, greatly enhancing the clarity and maintainability of error handling, and reducing misuse through the type system.&lt;/p&gt;
&lt;h4 id="migration-guide"&gt;Migration Guide&lt;/h4&gt;
&lt;h5 id="server-handler-migration"&gt;Server Handler Migration&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;If previously using &lt;code&gt;anyhow::Result&lt;/code&gt;, change &lt;code&gt;anyhow::Result&lt;/code&gt; to &lt;code&gt;volo_thrift::ServerResult&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;example&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;XReq&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;ServerResult&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;XResp&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;If previously using Result&amp;lt;XResp, anyhow::Error&amp;gt;, replace anyhow::Error with volo_thrift::ServerError:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;example&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;XReq&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;XResp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;ServerError&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;If you were using &lt;code&gt;Exception&lt;/code&gt;, change the return type from &lt;code&gt;Result&amp;lt;XResp, volo_thrift::UserException&amp;lt;XException&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Result&amp;lt;volo_thrift::MaybeException&amp;lt;XResp, XException&amp;gt;, volo_thrift::ServerError&amp;gt;&lt;/code&gt;. At the same time, places that return &lt;code&gt;Err(UserError::UserException(exception))&lt;/code&gt; should be changed to use &lt;code&gt;Ok(MaybeException::Exception(exception))&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;example&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;XReq&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;MaybeException&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;XResp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;XException&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;ServerError&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;..&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Ok&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;volo_thrift&lt;/span&gt;::&lt;span style="color:#000"&gt;MaybeException&lt;/span&gt;::&lt;span style="color:#000"&gt;Exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;exception&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="4"&gt;
&lt;li&gt;If an error occurs when returning &lt;code&gt;anyhow::Error&lt;/code&gt; after these changes, you can manually add a &lt;code&gt;.into()&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;anyhow&lt;/span&gt;::&lt;span style="color:#000"&gt;anyhow!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#000"&gt;into&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="5"&gt;
&lt;li&gt;If an error occurs at the &lt;code&gt;?&lt;/code&gt; error return spot after these changes, you can try converting it to &lt;code&gt;anyhow::Error&lt;/code&gt; before returning:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;xxx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;map_err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;|&lt;/span&gt;&lt;span style="color:#000"&gt;e&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;|&lt;/span&gt;&lt;span style="color:#000"&gt;anyhow&lt;/span&gt;::&lt;span style="color:#000"&gt;anyhow!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;e&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;?&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="service-middleware-migration"&gt;Service Middleware Migration&lt;/h5&gt;
&lt;p&gt;For middleware that is not aware of user errors, this change should not cause a breaking change. If you are aware of user errors, then just change the original &lt;code&gt;volo_thrift::Error&lt;/code&gt; to &lt;code&gt;volo_thrift::ServerError/ClientError&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id="client-migration"&gt;Client Migration&lt;/h5&gt;
&lt;p&gt;The error part of the client has changed from &lt;code&gt;ResponseError&lt;/code&gt; to &lt;code&gt;ClientError&lt;/code&gt;. Just follow the compiler error message prompts to match the new error variant.&lt;/p&gt;
&lt;h3 id="idl-management-file-voloyml-format-refactored"&gt;IDL Management File volo.yml Format Refactored&lt;/h3&gt;
&lt;p&gt;The structure of the new yml configuration is clearer, easier to maintain, and mainly solves the issue that the old version could not support cross-repository referencing with git. The specific functions and configuration parameters can be seen &lt;a href="https://www.cloudwego.io/docs/volo/guide/config"&gt;here&lt;/a&gt;. In addition, for the volo-cli command-line tool, we have renamed the previous idl command to repo.&lt;/p&gt;
&lt;h4 id="migration-guide-1"&gt;Migration Guide&lt;/h4&gt;
&lt;p&gt;Install the volo-cli v0.10.0 version and execute the volo migrate command in the volo.yml directory for automatic migration.&lt;/p&gt;
&lt;h3 id="change-in-default-generated-enum-type"&gt;Change in Default Generated Enum Type&lt;/h3&gt;
&lt;p&gt;In the newly generated code, the default generated Enum type has been changed to a newtype wrapping i32, in order to better support forward compatibility of modifications in the enumeration values of the IDL enum field.&lt;/p&gt;
&lt;h4 id="migration-guide-2"&gt;Migration Guide&lt;/h4&gt;
&lt;p&gt;Just modify the enumeration name in the enum field to the corresponding generated name, such as &lt;code&gt;Foo::Bar&lt;/code&gt; -&amp;gt; &lt;code&gt;Foo::BAR&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="complete-release-note"&gt;Complete Release Note&lt;/h2&gt;
&lt;p&gt;For the complete Release Note, please refer to: &lt;a href="https://github.com/cloudwego/volo/compare/volo-0.9.0...volo-0.10.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Netpoll Release v0.6.0</title><link>https://www.cloudwego.io/blog/2024/03/04/netpoll-release-v0.6.0/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/03/04/netpoll-release-v0.6.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/306"&gt;#306&lt;/a&gt;] feat: lazy init pollers to avoid create any poller goroutines if netpoll is not used&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/303"&gt;#303&lt;/a&gt;] feat: add WithOnDisconnect callback&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/300"&gt;#300&lt;/a&gt;] feat: netpoll exception implement net.Error interface&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/294"&gt;#294&lt;/a&gt;] feat: add SetRunner option&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/307"&gt;#307&lt;/a&gt;] fix: ctx race when disconnect callback run with connect callback&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/304"&gt;#304&lt;/a&gt;] fix: connection leak when poller close connection but onRequest callback just finished&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/296"&gt;#296&lt;/a&gt;] fix: stop timer when read triggered by err&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/302"&gt;#302&lt;/a&gt;] ci: bump the version of actions/checkout and actions/setup-go&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Kitex Release v0.9.0</title><link>https://www.cloudwego.io/blog/2024/03/04/kitex-release-v0.9.0/</link><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/03/04/kitex-release-v0.9.0/</guid><description>
&lt;p&gt;v0.9.0 provides two important features for Thrift: Thrift Streaming and Multi-Service. Multiple RC versions have been released for internal usage to collect feedback, so the final release version is delayed.&lt;/p&gt;
&lt;p&gt;Below are some important changes:&lt;/p&gt;
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Thrift Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Thrift Streaming feature based on gRPC (HTTP2) has been officially released. Users can use Thrift to define their own Streaming requests. To maintain compatibility with IDL parsing, Kitex chooses to use annotation to define stream method. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/protocol/streaming/grpc/thrift_streaming/"&gt;Thrift Streaming Usage&lt;/a&gt;. This version also improves the monitoring and reporting of Streaming requests, which also applies to gRPC-Protobuf. Note that Thrift is mainly used for data serialization and does not use the Thrift message protocol.&lt;/p&gt;
&lt;p&gt;Due to the complexity of the HTTP2 protocol, it has a certain impact on performance. We plan to release a self-developed Streaming protocol to improve performance in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Full Thrift MultiService support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the v0.8.0 version, Kitex supports gRPC multi-service to align gRPC, while Thrift previously provided &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/combine_service/"&gt;Combine Service&lt;/a&gt; as &amp;lsquo;Multi-Service&amp;rsquo; to ensure protocol compatibility. However, the use of this feature requires that the methods of different IDL services cannot be the same, and it is not real multi-Service.&lt;/p&gt;
&lt;p&gt;In this version, Kitex provides real multi-service functionality at the protocol level based on TTHeader, supporting the registration of multiple Thrift IDL Services in one server, while also being compatible with old CombineServices. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/multi_service/"&gt;Multi-Service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: Thrift Multi-Service requires the use of the TTHeader transport protocol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Frugal&amp;rsquo;s experimental support for ARM64&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Supported the use of Frugal on ARM64 machines, temporarily supported by Fallback.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Server level context timeout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added server.WithEnableContextTimeout supports adding timeout to context at the server level. And in the new version, Kitex will default pass the client-side timeout in the TTHeader to server-side. Usage please see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/timeout/"&gt;Timeout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: TTHeader transport protocol is required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. KitexProtobuf protocol supports JSON generic call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The new version also provides the JSON generic call for KitexProtobuf (TTHeader is required). Please see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/generic-call/basic_usage/#jsonpbgeneric"&gt;JSONPbGeneric&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: TTHeader transport protocol is required.。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Adding a new LoadBalance policy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Adding a new LoadBalance method of Alias Method to reduce the time complexity of random weight LoadBalance algorithm. Specified by &lt;code&gt;client.WithLoadBalancer(loadbalance.NewWeightedRandomWithAliasMethodBalancer())&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="special-change"&gt;Special Change&lt;/h3&gt;
&lt;p&gt;Kitex v0.9.0 requires Go version must &amp;gt;= 1.17, no longer compatible with Go &amp;lt;= v1.16 (stability requirement must upgrade golang.org/x/library, which introduced Go version limit)&lt;/p&gt;
&lt;h2 id="expand-the-ecosystem-of-config-center"&gt;&lt;strong&gt;Expand the ecosystem of Config Center&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that it is not related to v0.9.0 version, only synchronize the state of community expansion&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Main configuration centers have finish integrated&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex supports controlling the policies of Timeout, Retry, Circuit Breaker, Limiter through the remote configuration center. Thanks to the contributors of the CloudWeGo community, all the &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/third-party/config-center/"&gt;main configuration centers&lt;/a&gt; have finish integrated. Usage please see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/third-party/config-center/"&gt;Config Center&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1208"&gt;#1208&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1251"&gt;#1251&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1230"&gt;#1230&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1226"&gt;#1226&lt;/a&gt;] feat: support thrift streaming (replacing the protobuf payload of GRPC/HTTP2 with thrift binary)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1217"&gt;#1217&lt;/a&gt;] feat: support thrift and pb multi service&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1268"&gt;#1268&lt;/a&gt;] feat(thrift): support frugal fallback for arm&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/951"&gt;#951&lt;/a&gt;] feat(bizerr): support returning biz status error for json/map generic server&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1199"&gt;#1199&lt;/a&gt;] feat(loadbalance): add loadbalancer using Alias Method (#1184)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1244"&gt;#1244&lt;/a&gt;] feat(timeout): add option server.WithEnableContextTimeout to enable server timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1228"&gt;#1228&lt;/a&gt;] feat(streaming): Adding Recv/End events to streaming requests to improve trace information&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1062"&gt;#1062&lt;/a&gt;] feat(generic): supports JSON and Map generic call for the KitexProtobuf protocol.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1225"&gt;#1225&lt;/a&gt;] feat(timeout): support timeout transparent transmission by default when using TTHeader transport protocol&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1211"&gt;#1211&lt;/a&gt;] feat(hessian2): support nested struct for hessian2 customized Exception&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1222"&gt;#1222&lt;/a&gt;] optimize(frugal): enable frugal by default when the generated code is using slim template&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1209"&gt;#1209&lt;/a&gt;] optimize: split encoder interface to customize meta and payload encoding implementation&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1206"&gt;#1206&lt;/a&gt;] optimize(tool): add IsDir judge in readTemplate and add template register func&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1198"&gt;#1198&lt;/a&gt;] optimize(kitexutil): add util api for getting real request and response&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1197"&gt;#1197&lt;/a&gt;] optimize(kitexutil): add GetCallerIP util method in kitexutil to fetch Caller IP&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1195"&gt;#1195&lt;/a&gt;] optimize(error): more specific instruction when panic in server handler&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1235"&gt;#1235&lt;/a&gt;] optimize(tool): add IDLName field in PackageInfo for cwgo tool rendering&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1238"&gt;#1238&lt;/a&gt;] optimize(bizerr): support biz status error for streaming mode&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1236"&gt;#1236&lt;/a&gt;] fix(hessian2): correct code-ref behavior when thrift file is not in project dir&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1234"&gt;#1234&lt;/a&gt;] fix(hessian2): still perform replacement on handler.go when -service is not specified for hessian2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1232"&gt;#1232&lt;/a&gt;] fix(gRPC): append &amp;ldquo;h2&amp;rdquo; to next proto in gRPC tlsConfig to enable protocol negotiation in TLS&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1215"&gt;#1215&lt;/a&gt;] fix: bugfix for hessian2 tpl codegen&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1203"&gt;#1203&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/1205"&gt;#1205&lt;/a&gt;] fix: fix the issue where disabling rpcinfo reuse on the server side does not take effect&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1227"&gt;#1227&lt;/a&gt;] fix: idl-ref overwritten when using hessian2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1194"&gt;#1194&lt;/a&gt;] fix(retry): always set RespOp &amp;amp;&amp;amp; preventive panic to avoid dead loop&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="chore--tests"&gt;Chore &amp;amp; Tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1273"&gt;#1273&lt;/a&gt;] chore: upgrade netpoll to v0.6.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1263"&gt;#1263&lt;/a&gt;] chore: update sonic to v1.11.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1255"&gt;#1255&lt;/a&gt;] chore: upgrade netpoll to v0.6.0 pre-release version&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1252"&gt;#1252&lt;/a&gt;] chore: upgrade golang.org/x/net&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1254"&gt;#1254&lt;/a&gt;] chore: upgrade sonic to v1.11.0 to support go1.22&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1231"&gt;#1231&lt;/a&gt;] chore: frugal support go1.22&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1220"&gt;#1220&lt;/a&gt;] test: correct the cachekey in the benchmark test of balancer&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1196"&gt;#1196&lt;/a&gt;] test: add just biz handler message error&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Thanks a lot to those community contributors who submit some pull requests or share your ideas for this version:&lt;/strong&gt;
@DMwangnima @jizhuozhi @NX-Official @jieqiboh @Lvnszn @Skyenought&lt;/p&gt;</description></item><item><title>Blog: Delving Deeper: Enriching Microservices with Golang with CloudWeGo</title><link>https://www.cloudwego.io/blog/2024/02/21/delving-deeper-enriching-microservices-with-golang-with-cloudwego/</link><pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/02/21/delving-deeper-enriching-microservices-with-golang-with-cloudwego/</guid><description>
&lt;p&gt;What if there existed an RPC framework that provided not only high performance and extensibility but also a robust suite of features and a thriving community support?&lt;/p&gt;
&lt;p&gt;CloudWeGo, a high-performance extensible Golang and Rust RPC framework originally developed and open-sourced by &lt;a href="https://opensource.bytedance.com"&gt;ByteDance&lt;/a&gt;, has caught my eye as it fits the bill perfectly.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Delving_Deeper_Enriching_Microservices_with_Golang_and_Rust_with_CloudWeGo/1.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="cloudwego-vs-other-rpc-frameworks"&gt;CloudWeGo VS Other RPC Frameworks&lt;/h2&gt;
&lt;p&gt;While &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt; and &lt;a href="https://thrift.apache.org"&gt;Apache Thrift&lt;/a&gt; have served the microservice architecture well, &lt;a href="https://www.cloudwego.io"&gt;CloudWeGo&lt;/a&gt;&amp;rsquo;s advanced features and performance metrics set it apart as a promising open source solution for the future.&lt;/p&gt;
&lt;p&gt;Built for the modern development landscape by embracing both &lt;a href="https://go.dev"&gt;Golang&lt;/a&gt; and &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, CloudWeGo delivers advanced features and excellent performance metrics. As proof of its performance, benchmark tests have shown that &lt;a href="https://github.com/cloudwego/kitex-benchmark"&gt;Kitex surpasses gRPC by over 4 times in terms of QPS and latency, with a throughput increased by 51% - 70%&lt;/a&gt; in terms of QPS (Queries Per Second) and latency.&lt;/p&gt;
&lt;p&gt;This equips developers with a tool that doesn&amp;rsquo;t just meet but decidedly surpasses the performance requirements of modern microservices. Let&amp;rsquo;s delve into some specific use cases to understand CloudWeGo&amp;rsquo;s potential.&lt;/p&gt;
&lt;h3 id="bookinfo-a-tale-of-traffic-handling"&gt;Bookinfo: A Tale of Traffic Handling&lt;/h3&gt;
&lt;p&gt;Consider the case of Bookinfo, a sample application provided by &lt;a href="https://istio.io"&gt;Istio&lt;/a&gt;, rewritten using CloudWeGo&amp;rsquo;s &lt;a href="https://www.cloudwego.io/docs/kitex/"&gt;Kitex&lt;/a&gt; for superior performance and extensibility.&lt;/p&gt;
&lt;p&gt;This use case is illustrative of how traffic-heavy services can significantly benefit from CloudWeGo&amp;rsquo;s performance promise. This integration also demonstrates how CloudWeGo stands above traditional Istio service mesh when it comes to traffic handling and performance.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Delving_Deeper_Enriching_Microservices_with_Golang_and_Rust_with_CloudWeGo/2.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;With Kitex and &lt;a href="https://www.cloudwego.io/docs/hertz/"&gt;Hertz&lt;/a&gt; handling traffic redirection, the Bookinfo project can manage high traffic volumes efficiently, ensuring swift responses and a better user experience.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;echo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewServer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#204a87"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;EchoImpl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithName&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;net&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Listen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;:8888&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Serve&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code snippet is a simplified example of how the Bookinfo project can be rewritten using Kitex for better performance.&lt;/p&gt;
&lt;h3 id="easy-note-the-magic-of-simplicity"&gt;Easy Note: The Magic of Simplicity&lt;/h3&gt;
&lt;p&gt;CloudWeGo&amp;rsquo;s commitment to simplifying complex tasks shines in its application to the Easy Note project. It leverages CloudWeGo to implement a full-process traffic lane. The note-taking platform needs to be responsive and efficient, a need fulfilled by CloudWeGo&amp;rsquo;s high-performance networking library, &lt;a href="https://www.cloudwego.io/docs/netpoll/"&gt;Netpoll&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Delving_Deeper_Enriching_Microservices_with_Golang_and_Rust_with_CloudWeGo/3.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;The integration of CloudWeGo has elevated the Easy Note application to compete effectively with other note-taking platforms, proving how simplicity can indeed lead to power.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;RPCService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;RPCService&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Handle&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#000"&gt;Message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Echo &amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Message&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;rpcHandler&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;RPCService&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewServer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;rpcHandler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;net&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Listen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;:8888&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Serve&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The snippet above gives a glimpse of how CloudWeGo helps to enhance the efficiency of the Easy Note application.&lt;/p&gt;
&lt;h3 id="book-shop-e-commerce-made-easy"&gt;Book Shop: E-Commerce Made Easy&lt;/h3&gt;
&lt;p&gt;In the bustling e-commerce landscape, Book Shop stands as a testament to CloudWeGo&amp;rsquo;s capacity for seamless integration. Integrating middleware like &lt;a href="https://www.elastic.co/elasticsearch"&gt;Elasticsearch&lt;/a&gt; and &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt; into a Kitex project to build a solid e-commerce system that rivals more complex platforms.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Delving_Deeper_Enriching_Microservices_with_Golang_and_Rust_with_CloudWeGo/4.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;CloudWeGo&amp;rsquo;s ability to effectively integrate with popular technologies like Elasticsearch and Redis ensures that businesses need not compromise on choosing an open-source RPC framework.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ItemService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;ItemService&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;AddItem&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;item&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Add to Elasticsearch&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Add to Redis&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Return error if any&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;itemHandler&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;ItemService&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewServer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;itemHandler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;net&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Listen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;:8888&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Serve&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above snippet is a basic representation of how the Book Shop e-commerce system operates with CloudWeGo, Elasticsearch, and Redis.&lt;/p&gt;
&lt;h3 id="freecar-driving-innovation"&gt;FreeCar: Driving Innovation&lt;/h3&gt;
&lt;p&gt;The FreeCar project is an excellent illustration of how CloudWeGo can revamp the operations in a time-sharing car rental system, posing a strong alternative to existing ride-hailing applications.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Delving_Deeper_Enriching_Microservices_with_Golang_and_Rust_with_CloudWeGo/5.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;This real-world implementation demonstrates how CloudWeGo&amp;rsquo;s robust features can optimize operations, fostering efficiency and scalability in industries beyond tech.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;CarService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;CarService&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;BookRide&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;rideRequest&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;RideRequest&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;RideConfirmation&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Business logic to handle ride booking&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Return confirmation or error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;rideHandler&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;CarService&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewServer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;rideHandler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;_&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;net&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Listen&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;:8888&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;svr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Serve&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;listener&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above snippet is a simplified representation of how FreeCar utilizes CloudWeGo.&lt;/p&gt;
&lt;h2 id="what-draws-me-to-cloudwego"&gt;What Draws Me to CloudWeGo?&lt;/h2&gt;
&lt;p&gt;As I venture further into the landscape of alternative RPC frameworks, and explore the CloudWeGo project, several factors stand out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: In the world of microservices, performance could mean the difference between success and failure. CloudWeGo shines when it comes to performance, with QPS and latency scores that leave other RPC frameworks trailing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensibility&lt;/strong&gt;: As a developer, what you&amp;rsquo;ll appreciate most about Kitex is its promise of extensibility, allowing projects to swiftly adapt to growing demands and complexities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robustness&lt;/strong&gt;: The rich feature set of CloudWeGo, including support for multiple message protocols, transport protocols, load balancing, circuit breakers, and rate limiting, offers an all-inclusive solution for designing and managing microservices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community Support&lt;/strong&gt;: The fact that CloudWeGo is backed by ByteDance assures me of strong community support. The wealth of resources and discussions available can solve common issues and support continuous learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real-world Applications&lt;/strong&gt;: Practical applications in diverse projects demonstrate CloudWeGo’s versatility and scalability, affirming my trust in its effectiveness.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="embracing-the-future-of-microservices"&gt;Embracing the Future of Microservices&lt;/h1&gt;
&lt;p&gt;With each use case, CloudWeGo&amp;rsquo;s potential becomes increasingly clear. Developers can now build high-performing, extensible, and robust applications, harnessing the true essence of microservices - no matter if they prefer working with Golang or Rust.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re considering a new tool for your microservice architecture, especially if you are interested in Rust, &lt;a href="https://www.cloudwego.io/docs/"&gt;give CloudWeGo a try&lt;/a&gt;. The future of microservices awaits you.&lt;/p&gt;</description></item><item><title>Blog: Enhancing Performance in Microservice Architecture with Kitex</title><link>https://www.cloudwego.io/blog/2024/01/29/enhancing-performance-in-microservice-architecture-with-kitex/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/01/29/enhancing-performance-in-microservice-architecture-with-kitex/</guid><description>
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/1.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h1 id="kitex-enhancing-performance-in-microservice-architecture"&gt;Kitex: Enhancing Performance in Microservice Architecture&lt;/h1&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The team at ByteDance initiated the creation of the Remote Procedure Call (RPC) framework, Kitex, alongside several related fundamental libraries in 2019. This endeavor originated from confronting functionality and performance challenges within our extensive microservice architecture. We also wanted to combine the knowledge and insights gathered from previous frameworks. This development project was officially released for open-source contribution on GitHub in 2021.&lt;/p&gt;
&lt;p&gt;From 2019 to 2023, our internal microservices have seen substantial growth. During this period, &lt;a href="https://www.cloudwego.io/docs/kitex/overview/"&gt;the Kitex framework&lt;/a&gt; has undergone numerous cycles of optimization and testing to enhance its performance and efficiency. In this article, we share performance optimization techniques that we&amp;rsquo;ve systematically implemented over the past few years.&lt;/p&gt;
&lt;h2 id="the-evolution-and-status-quo-of-kitex"&gt;The Evolution and Status Quo of Kitex&lt;/h2&gt;
&lt;h3 id="understanding-the-need-for-an-rpc-framework"&gt;Understanding the Need for an RPC Framework&lt;/h3&gt;
&lt;p&gt;Although the Remote Procedure Call (RPC) framework has a long history, its wide-scale use as a crucial component aligns with the advent of microservice architecture. Therefore, it&amp;rsquo;s vital to revisit its historical developments and comprehend why an RPC framework is necessary.&lt;/p&gt;
&lt;h4 id="background-monolithic-architecture-era"&gt;Background: Monolithic Architecture Era&lt;/h4&gt;
&lt;p&gt;In this era, system services exhibited the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distinct business logic was categorized via functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The performance pressure was on the database, prompting the evolution from manually distributed databases to an automated distributed structure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A typical business coding model during this period looked something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;BuySomething&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;userId&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;itemId&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;user&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GetUser&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;userId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;sth&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GetItem&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;itemId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GetUser&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;userId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;db&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;users&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetUser&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;userId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;GetItem&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;itemId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;db&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;items&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetItem&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;itemId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/2.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;This style of coding is straightforward, especially once built on top of a well-structured design pattern, can make it straightforward to refactor and write unit tests. Many IT systems still operate using this architecture.&lt;/p&gt;
&lt;p&gt;However, as online businesses rapidly developed, we encountered the following limitations in some of the larger internet projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s a limit to computational power: the maximum computing power of a single request is less than or equal to the total computational power of a single server divided by the number of requests processed simultaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s a constraint around developmental efficiency: the growth of the code repository, team size, and code complexity do not have a linear relationship. This makes maintenance incrementally more challenging as the business grows, resulting in a more complicated online implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="the-shift-microservice-architecture-era"&gt;The Shift: Microservice Architecture Era&lt;/h4&gt;
&lt;p&gt;To overcome the issues inherent in the monolithic architecture, the IT community embarked on a journey into the era of microservice architecture. Here&amp;rsquo;s an example of typical code used in a microservice architecture:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;BuySomething&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;userId&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;itemId&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;user&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetUser&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;userId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// RPC call&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;sth&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetItem&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;itemId&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// RPC call&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/3.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;RPCs (Remote Procedure Call) allows business systems to call remote services as though invoking local methods. This reduces the complexity of understanding business operations to its most fundamental form and minimizes changes in business coding habits during the transition from a monolithic architecture to a microservice architecture.&lt;/p&gt;
&lt;h2 id="the-cost-and-path-of-optimizing-rpc-performance"&gt;The Cost and Path of Optimizing RPC Performance&lt;/h2&gt;
&lt;p&gt;Before the introduction of RPC, the sole overhead in the following code is merely a function call, an operation at the nanosecond level, not accounting for inline optimization.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// function call&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Message&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Message&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Upon transitioning to an RPC call, the overhead directly elevates to the millisecond level, a latency difference of 10^6, which highlights the high cost of RPC and indicates considerable room for optimization.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func client() (response) {
response = client.RPCCall(request) // rpc call - network
}
func server(request) (response) {
response.Message = request.Message
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The complete process of an RPC call is outlined below, and we will elaborate on our performance optimization practices for each step in the sections to follow.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/4.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="why-develop-our-custom-rpc-framework"&gt;Why Develop Our Custom RPC Framework?&lt;/h2&gt;
&lt;p&gt;Before delving into performance practices, let&amp;rsquo;s talk about why we opted to develop a new RPC framework. There are numerous existing frameworks available, so why did we need a new one? Some of the primary reasons include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Internally at our company, we primarily use the Thrift protocol for communication. Most mainstream Go frameworks do not support the Thrift protocol, and extending to support multiple protocols isn&amp;rsquo;t a straightforward task.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recognizing our company&amp;rsquo;s extremely high performance requirements, we realized that deep optimization across the entire operation chain was essential. The vast scale and complexity of our microservices demanded a bespoke, highly customizable, and scalable framework that could provide such flexibility and meet our rigorous performance standards.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="how-does-kitex-compare-to-other-frameworks"&gt;How Does Kitex Compare to Other Frameworks?&lt;/h1&gt;
&lt;p&gt;Kitex supports both the Thrift and gRPC protocols. Considering the lack of Thrift-compatible frameworks in the Go ecosystem, we used the gRPC protocol for our comparative study with the grpc-go framework. Check out the results:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gRPC Unary Comparison:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/5.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gRPC Streaming Comparison:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/6.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h1 id="performance-optimization-practices-within-the-kitex-framework"&gt;Performance Optimization Practices within the Kitex Framework&lt;/h1&gt;
&lt;p&gt;Many performance optimization strategies used in Kitex aren&amp;rsquo;t exclusive to Go; however, for the sake of convenience, we&amp;rsquo;re using Go in our examples. In the following sections, we&amp;rsquo;ll introduce different performance optimization practices applied in Kitex, following the process of a RPC call.&lt;/p&gt;
&lt;h2 id="optimizing-encoding-and-decoding"&gt;Optimizing Encoding and Decoding&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/7.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="common-challenges-with-encoding-and-decoding"&gt;Common Challenges with Encoding and Decoding&lt;/h3&gt;
&lt;p&gt;Using Protobuf as an example, we encounter the following problems associated with encoding decoding operations:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Computational Overhead:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a. Additional information needs to be retrieved through runtime reflection.&lt;/p&gt;
&lt;p&gt;b. There&amp;rsquo;s a need to invoke multiple functions and create several small objects, which adds to the processing overhead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Garbage Collection (GC) Overhead:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Memory reuse is a significant challenge, which often leads to the overhead of garbage collection operations during the encoding and decoding operations.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/8.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="code-generation-optimization-introducing-fastthrift--fastpb"&gt;Code Generation Optimization: Introducing FastThrift &amp;amp; FastPB&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve introduced encoding and decoding capabilities to Kitex by generating a large volume of code for both Thrift and Protobuf protocols. Since generated code can optimize preset runtime information, we can avoid additional operations during runtime and achieve several benefits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory Reuse and Size Pre-calculation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;During serialization, we can invoke &lt;code&gt;Size()&lt;/code&gt; at a minimal cost and use it to pre-allocate a fixed-size memory block.&lt;/p&gt;
&lt;p&gt;Go code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;User&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Id&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int32&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Name&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;User&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Size&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;sizeField1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;sizeField2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;n&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Framework Process&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;size&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;msg&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Size&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Malloc&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;size&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// allocate memory&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;Encode&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;user&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// encoding user object directly into the allocated memory to save one time of copy&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// send data&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;Free&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;data&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// reuse the allocated memory at next Malloc&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Minimize Function Calls and Object Creation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reducing the costs of invoking functions and creating small objects can yield significant benefits. This approach is especially beneficial in a language like Go, which heavily utilizes garbage collection (GC).&lt;/p&gt;
&lt;p&gt;As depicted below, the underlying fastWriteField function gets inlined during compile-time. As a result, the serialization FastWrite function essentially conducts sequential writing into a fixed piece of memory. A similar approach applies to FastRead.&lt;/p&gt;
&lt;p&gt;Go code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;User&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;FastWrite&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:])&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// inline&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;User&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;fastpb&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteInt32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:],&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Id&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// inline&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;User&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;fastWriteField2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[]&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;int&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;fastpb&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WriteString&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:],&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;x&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Name&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;return&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;offset&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="optimization-results"&gt;Optimization Results&lt;/h3&gt;
&lt;p&gt;As a result of these optimizations, we managed to improve the optimization output from the previous contribution of 3.58% to a notable 0.98%.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/9.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="jit-substitution-for-code-generation-introducing-frugal-thrift"&gt;JIT Substitution for Code Generation: Introducing Frugal (Thrift)&lt;/h2&gt;
&lt;p&gt;After reaping gains from the hardcoded approach, we encountered the following feedback:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The volume of the generated code increases linearly with the growth of fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The generated code depends on the user&amp;rsquo;s version of their respective Kitex command-line tool, which can lead to conflicts during collaborations with multiple contributors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The feedback encouraged us to consider if the previously generated code could be created automatically at runtime. The answer is &amp;lsquo;yes&amp;rsquo; - but it would require the adoption of Just-In-Time Compilation (JIT) as a method of code optimization.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/10.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="advantages-of-jit"&gt;Advantages of JIT&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Registers utilization and deeper inlining: this improves the efficiency of function calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Core computational functions use fully optimized assembly code, which leads to improved performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimization-results-of-jit"&gt;Optimization Results of JIT&lt;/h3&gt;
&lt;p&gt;As a result of JIT optimization, we improved the optimization result from 3.58% to an impressive 0.78%.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/11.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="comparing-frugal-and-apache-thrift"&gt;Comparing Frugal and Apache Thrift&lt;/h3&gt;
&lt;p&gt;This section presents a performance comparison of Frugal and Apache Thrift in the context of encoding and decoding.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/12.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="optimizing-network-library"&gt;Optimizing Network Library&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/13.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="native-go-net-challenges-in-rpc-scenarios"&gt;Native Go Net Challenges in RPC Scenarios&lt;/h3&gt;
&lt;p&gt;Native Go Net in RPC situations presents the following challenges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each connection corresponds to one coroutine - when there are numerous upstream and downstream instances, the sheer number of Goroutines can significantly influence performance. This is particularly detrimental for businesses with intensive instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is unable to automatically detect the connection&amp;rsquo;s shutdown state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a struct undergoes NoCopy serialization, the output typically takes the form of a two-dimensional byte array. However, Go&amp;rsquo;s &lt;code&gt;Write([]byte)&lt;/code&gt; interface falls short as it does not support handling non-continuous memory data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Despite being highly compatible, it&amp;rsquo;s provided by Go Runtime and not conducive or suitable for adding new features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/14.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h4 id="go-coding-example"&gt;Go Coding Example&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Go" data-lang="Go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;name&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Steve Jobs&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// 0xc000000020&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#000"&gt;Id&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;int32&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;),&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Name&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;name&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Encode to [][]byte&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;4&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bytes&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;],&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;10&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bytes&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;],&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// no-copy encoding, 0xc000000020&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Copy to []byte&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;[&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;4&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bytes&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;10&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bytes&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// new address&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Write([]byte)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;net&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Conn&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Write&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;buf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="netpoll-optimization-practices"&gt;Netpoll Optimization Practices&lt;/h3&gt;
&lt;p&gt;Here are the main areas we focused on for optimization:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coroutine Optimization&lt;/strong&gt;: As much as possible, coroutines are reused and the number of connections aren&amp;rsquo;t tied to the number of coroutines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Buffer Layer&lt;/strong&gt;: Netpoll supports zero-copy read and write, and it reuses memory to minimize GC overhead during encoding and decoding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Customization for RPC Small Packets High Concurrency Scenarios&lt;/strong&gt;: Includes coroutine scheduling optimization, TCP parameter tuning, and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deep Customization for Internal Environments&lt;/strong&gt;: Includes modifying the Go Runtime to improve scheduling priority and kernel support for batch system calls, among other things.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/15.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="communication-layer-optimization"&gt;Communication Layer Optimization&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/16.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="intra-machine-communication-optimization-issues-with-communication-efficiency-under-service-mesh"&gt;Intra-Machine Communication Optimization: Issues with Communication Efficiency under Service Mesh&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/17.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;After introducing Service Mesh, the business process primarily communicates with another sidecar process on the same machine, which brings in an additional layer of delay.&lt;/p&gt;
&lt;p&gt;Traditional Service Mesh solutions commonly hijack iptables to facilitate traffic forwarding to the sidecar process. This could lead to substantial performance loss at all levels. Kitex has carried out several performance optimization attempts at the communication layer and has finally developed a systematic solution.&lt;/p&gt;
&lt;h1 id="optimization-of-intra-machine-communication-uds-replaces-tcp"&gt;Optimization of Intra-machine Communication: UDS Replaces TCP&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/18.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="performance-comparison-between-uds-and-tcp"&gt;Performance Comparison between UDS and TCP:&lt;/h2&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;======== IPC Benchmark - TCP ========
Type Conns Size Avg P50 P99
Client 10 4096 127μs 76μs 232μs
Client-R 10 4096 2μs 1μs 1μs
Client-W 10 4096 9μs 4μs 7μs
Server 10 4096 24μs 13μs 18μs
Server-R 10 4096 1μs 1μs 1μs
Server-W 10 4096 7μs 4μs 7μs
======== IPC Benchmark - UDS ========
Type Conns Size Avg P50 P99
Client 10 4096 118μs 75μs 205μs
Client-R 10 4096 3μs 2μs 3μs
Client-W 10 4096 4μs 1μs 2μs
Server 10 4096 24μs 11μs 16μs
Server-R 10 4096 4μs 2μs 3μs
Server-W 10 4096 3μs 1μs 2μs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our performance test indicates the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;UDS outperforms TCP in all measurements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nonetheless, the extent of improvement is not significant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="optimization-of-intra-machine-communication-shmipc-replaces-uds"&gt;Optimization of Intra-Machine Communication: ShmIPC Replaces UDS&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/19.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;In pursuit of enhancing the efficiency of inter-process communication, we developed a communication mode based on shared memory. Shared memory communication throws in the complexity of managing the synchronization of various communication states across different processes.&lt;/p&gt;
&lt;p&gt;To tackle this, we utilized our communication protocol and retained &lt;strong&gt;UDS&lt;/strong&gt; as the event notification channel (IO Queue) and shared memory as the data transmission channel (Buffer).&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/20.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;For a detailed technical understanding of shmipc, you can refer to our previously published article: &lt;a href="https://www.cloudwego.io/blog/2023/04/04/introducing-shmipc-a-high-performance-inter-process-communication-library/"&gt;Introducing Shmipc: A High Performance Inter-process Communication Library&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="performance-test"&gt;Performance Test:&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/21.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h1 id="from-cross-machine-to-intra-machine-communication-a-pod-affinity-solution"&gt;From Cross-Machine to Intra-Machine Communication: A Pod Affinity Solution&lt;/h1&gt;
&lt;p&gt;Having previously optimized intra-machine communication, we found that it&amp;rsquo;s limited to the data plane communication between the service process and the Service Mesh.&lt;/p&gt;
&lt;p&gt;The peer service is possibly not hosted on the same machine. So, the question arises, how can we optimize cross-machine communication? One innovative approach we&amp;rsquo;re considering is converting cross-machine issues into intra-machine issues.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/22.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;Achieving this in large-scale microservice communication calls for the cooperation of multiple architectural components. As such, we introduced the pod affinity solution to resolve this challenge:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Container Scheduling Layer Alteration: The container scheduling system will consider the relationship and instance situations of upstream and downstream services. It uses affinity scheduling to, as much as possible, assign the instances of upstream and downstream services to the same physical machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traffic Scheduling Layer Alteration: The service control plane needs to identify which downstreams are connected to a certain upstream container. Bearing in mind the context of global load balancing, it calculates the dynamic weight of accessing downstream instances for each downstream instance, aiming to enable more traffic to facilitate intra-machine communication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Framework Transformation: Extend custom support for the unique communication method of pod affinity. Based on the calculation results of the traffic scheduling layer, the request is dispatched to either the same machine instance or Mesh Proxy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/23.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h1 id="microservice-online-tuning-practices"&gt;Microservice Online Tuning Practices&lt;/h1&gt;
&lt;p&gt;Apart from performance optimization at the framework level, the business logic itself is a significant contributor to the performance bottleneck. To combat this, we have accumulated several practical experiences and strategies.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/24.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h1 id="solving-latency-through-automated-gc-optimization"&gt;Solving Latency Through Automated GC Optimization&lt;/h1&gt;
&lt;h2 id="challenges-with-gos-native-gc-strategy"&gt;Challenges with Go&amp;rsquo;s Native GC Strategy&lt;/h2&gt;
&lt;p&gt;Go&amp;rsquo;s Garbage Collection (GC) strategy was not specifically designed for microservice scenarios, and thus does not prioritize optimizing latency-sensitive businesses. However, RPC services often require low P99 latency.&lt;/p&gt;
&lt;p&gt;The essential principles of Go&amp;rsquo;s GC strategy are as follows:&lt;/p&gt;
&lt;h3 id="gogc-principle"&gt;GOGC Principle:&lt;/h3&gt;
&lt;p&gt;The GOGC parameter sets a percentile value, defaulting to 100, to calculate the heap size required for the next GC trigger: &lt;code&gt;NextGC = HeapSize + HeapSize * (GOGC / 100)&lt;/code&gt;. This implies that under default settings, the heap size doubles after the last GC.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/25.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;As an example, if a service&amp;rsquo;s active memory usage is 100MB, the GC is triggered every time the heap grows to 200MB, which may be unnecessary if this service has 4GB of memory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Drawbacks:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In microservice environments, the service&amp;rsquo;s memory utilization rate is generally quite low, yet aggressive GC persists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For RPC scenarios, a sizable number of objects are inherently highly reusable. Performing frequent GC on these reusable objects degrades the reusability rate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/26.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Primary Requirement:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Decrease the frequency of GC and enhance the reuse rate of resources in microservices, while maintaining safe levels of memory consumption.&lt;/p&gt;
&lt;h2 id="gctuner-automated-gc-optimization-strategy"&gt;gctuner: Automated GC Optimization Strategy&lt;/h2&gt;
&lt;p&gt;Users can manipulate the desired aggressiveness of GC by setting a threshold, which could for example be set to &lt;code&gt;memory_limit * 0.7&lt;/code&gt;. If the memory used is below this value, GCPercent is maximized as much as possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If memory utilization doesn&amp;rsquo;t reach the set threshold, the GOGC parameter is set to a larger value, whereas if it exceeds the limit, it is set to a smaller value.&lt;/li&gt;
&lt;li&gt;Regardless of the situation, GOGC is capped at a minimum of 50 and a maximum of 500.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GC is delayed when memory utilization is low.&lt;/li&gt;
&lt;li&gt;It reverts to the native GC strategy when memory utilization is high.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cautions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If other processes share the memory resources, ensuring a reserve of memory resources for these different processes is crucial.&lt;/li&gt;
&lt;li&gt;Services in which memory is likely to have excessively extreme peak values might not find this strategy beneficial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gctuner is currently open-sourced &lt;a href="https://github.com/bytedance/gopkg/tree/develop/util/gctuner"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="concurrent-optimization"&gt;Concurrent Optimization&lt;/h1&gt;
&lt;h2 id="what-is-the-real-cpu-utilization---the-container-deception"&gt;What Is the Real CPU Utilization? - The Container Deception&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;apiVersion&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;v1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;kind&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Pod&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;spec&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;containers&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;- &lt;span style="color:#204a87;font-weight:bold"&gt;resources&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;limits&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;cpu&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;4&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rapid advancement of container technology has largely affected the development of microservices. Currently, the majority of microservices, including numerous databases across the industry, operate within container environments. For the purpose of this discussion, we&amp;rsquo;ll only touch upon mainstream containers based on cgroup technology.&lt;/p&gt;
&lt;p&gt;A standard business development model involves developers acquiring a 4-core CPU container on the container platform. Developers usually assume that their program can utilize up to 4 CPUs simultaneously, and adjust their program configuration based on this understanding.&lt;/p&gt;
&lt;p&gt;Upon deployment, if you check upon the container and verify with the &amp;rsquo;top&amp;rsquo; command, all indicators seemingly adhere to the 4-core standard:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/27.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;Even when using &lt;code&gt;cat /proc/cpuinfo&lt;/code&gt; for inspection, you&amp;rsquo;ll witness exactly 4 CPUs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;processor&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;processor&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;processor&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;processor&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;3&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// ...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, these are merely illusions concocted by the container to ease your mental load off programming. The underlying reason for creating such an illusion is to ensure traditional Linux Debug tools function seamlessly within the container environment.&lt;/p&gt;
&lt;p&gt;Contrarily, container technology based on cgroups imposes limits only on &lt;strong&gt;CPU time&lt;/strong&gt;, not on the number of CPUs. Suppose you log into the machine to verify the CPU number each thread of the process is using. In that case, you might be taken aback to discover that the sum exceeds the CPU limit set for the container:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/28.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;When a container requests 4 CPU units, it means it can run for an equivalent of 4 CPU time within a computation cycle (typically 100ms). It doesn&amp;rsquo;t imply that it can only use 4 physical CPUs, nor that at least 4 CPUs can be simultaneously utilized by the program. If the usage time surpasses the CPU limit set for the container, all processes within the container are paused until the end of the computation period. This could lead to the program experiencing lagging issues (throttled).&lt;/p&gt;
&lt;h2 id="is-faster-downstream-parallel-processing-always-better---concurrency-vs-timeout"&gt;Is Faster Downstream Parallel Processing Always Better? - Concurrency vs. Timeout&lt;/h2&gt;
&lt;p&gt;Knowing the upper bound for physical parallel computing in a program is considerably high, we can leverage this insight to increase or decrease the number of working threads (GOMAXPROCS) or adjust the degree of concurrency within the program.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider a calling scenario where the business sends requests to the same upstream with four concurrent processes. Each request upstream requires 50ms of processing time. Based on this, the downstream sets the timeout time to &lt;strong&gt;100ms&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Though this seems reasonable, if, at that time, the upstream had only two CPUs available to handle requests (which also have to manage other work or perform Garbage Collection activities), the third RPC request would likely time out.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/29.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;However, simply reducing concurrency isn&amp;rsquo;t always the solution and it doesn&amp;rsquo;t benefit all cases.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/30.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;If upstream&amp;rsquo;s computational resources are abundantly available, increasing concurrency could efficiently utilize the processing power upstream.&lt;/p&gt;
&lt;h2 id="balancing-resource-utilization--reserving-computational-capacity-for-other-processes"&gt;Balancing Resource Utilization – Reserving Computational Capacity for Other Processes&lt;/h2&gt;
&lt;p&gt;If there are multiple processes within the container, it&amp;rsquo;s essential to reserve resources for these operations. This consideration is particularly crucial in scenarios like the deployment of a Service Mesh data plane, where the same container operates as a sidecar.&lt;/p&gt;
&lt;p&gt;If a downstream process utilizes the entirety of the time slice allocated within a computation cycle, it&amp;rsquo;s highly probable that it&amp;rsquo;ll face resource throttling when it&amp;rsquo;s the upstream process&amp;rsquo;s turn, which could subsequently affect the service’s latency.&lt;/p&gt;
&lt;h2 id="optimizing-service-concurrency-degree"&gt;Optimizing Service Concurrency Degree&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adjust the Number of Work Threads&lt;/strong&gt;: For instance, the &lt;code&gt;GOMAXPROCS&lt;/code&gt; directive in Go allows us to modify the number of working threads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alter the Concurrency of Requests in the Code&lt;/strong&gt;: It&amp;rsquo;s essential for businesses to iteratively test and evaluate the trade-off between the latency gains from increasing concurrency and the stability loss at peak levels to determine an optimal concurrency value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Batch Interfaces&lt;/strong&gt;: If the business scenario allows, replacing the current interface with a batch interface could be a more effective strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="looking-into-the-future-of-optimization"&gt;Looking into the Future of Optimization&lt;/h1&gt;
&lt;h2 id="the-final-frontier-kernel"&gt;The Final Frontier: Kernel&lt;/h2&gt;
&lt;p&gt;Currently the only area we haven&amp;rsquo;t explored for optimization is the Kernel.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Enhancing_Performance_in_Microservice_Architecture_with_Kitex/31.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;In online business environments, we often observe that the communication overhead of RPC accounts for more than 20% of the total overhead for services heavy on I/O operations, even after optimizing RPC to the level of intra-machine communication.&lt;/p&gt;
&lt;p&gt;At this point, we&amp;rsquo;ve optimized inter-process communication to its extremes. If we are to seek further improvements, we need to break through the existing constraints in Linux inter-process communication fundamentally.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve already made some preliminary strides in this area. We will continue to share updates on this topic in future articles, so stay tuned.&lt;/p&gt;
&lt;h2 id="reassessing-the-tcp-protocol"&gt;Reassessing the TCP Protocol&lt;/h2&gt;
&lt;p&gt;In the context of internal data center communication, the TCP protocol displays some limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Given the superior internal network quality and an incredibly low packet loss rate, many designs within TCP appear redundant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In situations of large-scale point-to-point communication, TCP long connections may inadvertently degrade into short connections.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the application layer uses &amp;ldquo;messages&amp;rdquo; as a unit, TCP data streams don&amp;rsquo;t offer clear message boundaries, which could complicate synchronization and message handling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This has led us to question whether we need to develop a proprietary data center protocol, better suited to handle RPC communication.&lt;/p&gt;
&lt;h2 id="continuing-to-refine-existing-components"&gt;Continuing to Refine Existing Components&lt;/h2&gt;
&lt;p&gt;When it comes to existing components, we plan to continue our efforts to enhance their performance and applicability:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frugal, the Thrift JIT Encoder/Decoder:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Introducing support for the ARM architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimizing the backend with Static Single Assignment (SSA).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accelerating performance with Single Instruction, Multiple Data (SIMD) operations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Netpoll Network Library:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Refactoring interfaces to ensure seamless integration with existing libraries in the Go ecosystem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementing support for Shared Memory Communications over RDMA (SMC-R).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pod Affinity:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expanding from same-machine to same-rack granularity, effectively reducing network latency and improving performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, we explored optimizing microservices performance using Kitex, the RPC framework developed by ByteDance. We discussed various techniques, from encoding and decoding enhancements, JIT compilation, network library optimization, and communication layer upgrades, to automated GC optimization, concurrent processing strategies, and microservices online tuning practices.&lt;/p&gt;
&lt;p&gt;Kitex has demonstrated its ability to outperform other frameworks in testing comparisons, showcasing its strength in handling complex microservice architectures.&lt;/p&gt;
&lt;p&gt;We also briefly looked towards future optimizations, including kernel-level improvements, restructuring the TCP protocols, and further refinement of existing components. With continuous learning and improvements, we are driven to unlock the vast potential in microservice performance optimization, taking us one step closer to the realm of real-time computing.&lt;/p&gt;
&lt;p&gt;For any questions or discussions, you&amp;rsquo;re welcome to join our community on &lt;a href="https://github.com/cloudwego"&gt;GitHub&lt;/a&gt; or &lt;a href="https://discord.gg/jceZSE7DsW"&gt;Discord&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Blog: Harnessing the Power of Rust for Cloud Development with Volo</title><link>https://www.cloudwego.io/blog/2024/01/18/harnessing-the-power-of-rust-for-cloud-development-with-volo/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/01/18/harnessing-the-power-of-rust-for-cloud-development-with-volo/</guid><description>
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Harnessing_the_Power_of_Rust_for_Cloud_Development_with_Volo/1.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="i-introduction"&gt;I. Introduction&lt;/h2&gt;
&lt;p&gt;Every tool in the &lt;a href="https://www.cloudwego.io"&gt;CloudWeGo&lt;/a&gt; open-source ecosystem has been developed with the aim of simplifying and revolutionizing how developers navigate the cloud environment. An essential part of this ecosystem is &lt;a href="https://www.cloudwego.io/docs/volo/"&gt;Volo&lt;/a&gt;, a Rust RPC framework designed to provide a seamless and efficient communication infrastructure.&lt;/p&gt;
&lt;p&gt;This guide aims to provide in-depth insights into leveraging Volo in your projects. Built with &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, Volo brings unique features and advantages into the mix.&lt;/p&gt;
&lt;h2 id="ii-the-power-of-rust-based-volo-in-the-real-world"&gt;II. The Power of Rust-Based Volo in the Real World&lt;/h2&gt;
&lt;p&gt;As a part of the CloudWeGo family, Volo can make a significant impact in real-world applications. Its high-speed processing capabilities, when combined with the safety and concurrency advantages of Rust, can provide an efficient backbone to high-performance web services and applications.&lt;/p&gt;
&lt;p&gt;The beauty of Rust, which Volo encapsulates, is its ability to push beyond the performance boundaries typically associated with languages such as Go. While Go is highly efficient, it does reach a performance ceiling that may not lend itself to deep optimization. However, once a finely optimized Go service is rewritten in Rust, the benefits spring into view.&lt;/p&gt;
&lt;p&gt;Here, CPU gains generally rise above 30%, some even reaching over 50%. In some cases, a fourfold increase in CPU gains is observed. Memory gains are even more pronounced, regularly topping 50% and in some cases reaching as high as 90%.&lt;/p&gt;
&lt;p&gt;Beyond performance, Rust addresses the unpredictable jitter issues brought about by &lt;a href="https://tip.golang.org/doc/gc-guide"&gt;Go&amp;rsquo;s garbage collection (GC)&lt;/a&gt;. In doing so, it helps businesses significantly reduce timeout/error rates, decrease P99 latency, and improve the service level agreements (SLA) of their offerings.&lt;/p&gt;
&lt;p&gt;Consider the infrastructure of an online marketplace&amp;rsquo;s back-end. Volo can facilitate seamless interactions between the users, the product database, and third-party services, making them more efficient and reliable.&lt;/p&gt;
&lt;p&gt;Another use case could be in the gaming industry, where Volo can help manage player data, game state, and real-time multiplayer interactions with low-latency and high reliability.&lt;/p&gt;
&lt;p&gt;Rust and Go are not adversaries but rather allies that complement each other, leveraging their respective strengths to compensate for any weaknesses. For applications where ultimate performance, low latency, memory bottlenecks, and stability are of paramount importance, even if it comes at the cost of some iteration speed loss, Rust is the go-to choice.&lt;/p&gt;
&lt;p&gt;These applications can fully benefit from Rust&amp;rsquo;s, and by extension Volo&amp;rsquo;s, unrivaled performance optimization and security. However, when performance sensitivity takes a backseat to high I/O operations, and when rapid development and iteration receives priority over stability, Go becomes the preferred choice.&lt;/p&gt;
&lt;p&gt;Rust&amp;rsquo;s vast applicability doesn&amp;rsquo;t stop at server-side business and architectural domains. Its exploratory and implementation journey extends to areas such as internal safety, kernel development, AI, frontend, and client-side development. As such, Volo, with its Rust foundation, carries this adaptability and flexibility, ready to conquer diverse domains and real-world challenges.&lt;/p&gt;
&lt;h2 id="iii-getting-started-with-cloudwego"&gt;III. Getting Started With CloudWeGo&lt;/h2&gt;
&lt;p&gt;CloudWeGo provides a robust set of tools to work with, one of which is Volo. Here&amp;rsquo;s how you can kickstart your journey with Volo within the CloudWeGo ecosystem.&lt;/p&gt;
&lt;h3 id="volo"&gt;Volo&lt;/h3&gt;
&lt;h4 id="prerequisites"&gt;Prerequisites&lt;/h4&gt;
&lt;p&gt;If you don’t have the Rust development environment set up, please follow &lt;a href="https://www.rust-lang.org/tools/install"&gt;Install Rust&lt;/a&gt; to download Rustup and install Rust. Volo supports Linux, macOS, and Windows systems by default.&lt;/p&gt;
&lt;h4 id="install-the-cli-tool"&gt;Install the CLI tool&lt;/h4&gt;
&lt;p&gt;Volo provides CLI tools of the same name for initializing projects, managing IDLs, and more. To install Volo tool, run the following command: &lt;code&gt;cargo install volo-cli&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then run: &lt;code&gt;volo help&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should see something similar to the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;USAGE:
volo [OPTIONS] &amp;lt;SUBCOMMAND
OPTIONS:
-h, --help Print help information
-n, --entry-name &amp;lt;ENTRY_NAME The entry name, defaults to &amp;#39;default&amp;#39;. [default: default]
-v, --verbose Turn on the verbose mode.
-V, --version Print version information
SUBCOMMANDS: help Print this message or the help of the given subcommand(s)
idl manage your idl
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="iv-creating-a-sample-project-with-cloudwego"&gt;IV. Creating A Sample Project With CloudWeGo&lt;/h2&gt;
&lt;p&gt;When starting a new project with Volo, the following steps can guide you through the development of basic components.&lt;/p&gt;
&lt;h3 id="thrift-project"&gt;Thrift project&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Write IDL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To create a Thrift project, we need to write a Thrift IDL first. In your working directory, execute the following command:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mkdir volo-example &amp;amp;&amp;amp; cd volo-example
mkdir idl &amp;amp;&amp;amp; vim idl/volo_example.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, enter the following content:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;namespace rs volo.example
struct Item {
1: required i64 id,
2: required string title,
3: required string content,
10: optional map&amp;lt;string, string&amp;gt; extra,
}
struct GetItemRequest {
1: required i64 id,
}
struct GetItemResponse {
1: required Item item,
}
service ItemService {
GetItemResponse GetItem (1: GetItemRequest req),
}
Init the server project
volo init volo-example idl/volo_example.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here we use the &lt;code&gt;init&lt;/code&gt; command, followed by the name of our project, which means we need to generate template code. At the end, you need to specify an IDL used by the server.&lt;/p&gt;
&lt;p&gt;At this point, our entire directory structure looks like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-." data-lang="."&gt;├── Cargo.toml
├── idl
│ └── volo_example.thrift
├── rust-toolchain.toml
├── src
│ ├── bin
│ │ └── server.rs
│ └── lib.rs
└── volo-gen
├── Cargo.toml
├── build.rs
├── src
│ └── lib.rs
└── volo.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2. Add logic code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;src/lib.rs&lt;/code&gt; and add the method implementation to the impl block:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-pub" data-lang="pub"&gt;
impl volo_gen::volo::example::ItemService for S {
// This is the part of the code we need to add
async fn get_item(
&amp;amp;self,
_req: volo_gen::volo::example::GetItemRequest,
) -&amp;gt; core::result::Result&amp;lt;volo_gen::volo::example::GetItemResponse, volo_thrift::AnyhowError&amp;gt;
{
Ok(Default::default())
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3. Execute&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cargo update &amp;amp;&amp;amp; cargo build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, you will find &lt;code&gt;volo_gen.rs&lt;/code&gt; file under &lt;code&gt;OUT_DIR Directory&lt;/code&gt;. Then execute the following command to get our server running:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cargo run --bin server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have our server running!&lt;/p&gt;
&lt;h3 id="grpc-project"&gt;gRPC project&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Write IDL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To create a gRPC project, we need to write a protobuf IDL first. In your working directory, execute the following command:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mkdir volo-example &amp;amp;&amp;amp; cd volo-example
mkdir idl &amp;amp;&amp;amp; vim idl/volo_example.proto
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, enter the following content:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;syntax = &amp;#34;proto3&amp;#34;;
package volo.example;
message Item {
int64 id = 1;
string title = 2;
string content = 3;
map&amp;lt;string, string&amp;gt; extra = 10;
}
message GetItemRequest {
int64 id = 1;
}
message GetItemResponse {
Item item = 1;
}
service ItemService {
rpc GetItem(GetItemRequest) returns (GetItemResponse);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2. Init the server project&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;volo init --includes=idl volo-example idl/volo_example.proto
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here we use the &lt;code&gt;init&lt;/code&gt; command, followed by the name of our project, which means we need to generate template code. At the end, you need to specify an IDL used by the server.&lt;/p&gt;
&lt;p&gt;At this point, our entire directory structure looks like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-." data-lang="."&gt;├── Cargo.toml
├── idl
│ └── volo_example.proto
├── rust-toolchain.toml
├── src
│ ├── bin
│ │ └── server.rs
│ └── lib.rs
└── volo-gen
├── Cargo.toml
├── build.rs
├── src
│ └── lib.rs
└── volo.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3. Add logic code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;src/lib.rs&lt;/code&gt; and add the method implementation to the impl block:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-pub" data-lang="pub"&gt;
impl volo_gen::volo::example::ItemService for S {
// This is the part of the code we need to add
async fn get_item(
&amp;amp;self,
_req: volo_grpc::Request&amp;lt;volo_gen::volo::example::GetItemRequest&amp;gt;,
) -&amp;gt; core::result::Result&amp;lt;volo_grpc::Response&amp;lt;volo_gen::volo::example::GetItemResponse&amp;gt;, volo_grpc::Status&amp;gt;
{
Ok(volo_grpc::Response::new(Default::default()))
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4. Execute&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cargo update &amp;amp;&amp;amp; cargo build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, you will find &lt;code&gt;volo_gen.rs&lt;/code&gt; file under &lt;code&gt;OUT_DIR Directory&lt;/code&gt;. Then execute the following command to get our server running:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cargo run --bin server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you followed the above steps, you&amp;rsquo;ll now have your server running!&lt;/p&gt;
&lt;h2 id="v-troubleshooting-tips--faq"&gt;V. Troubleshooting Tips &amp;amp; FAQ&lt;/h2&gt;
&lt;p&gt;Like any technology, working with Volo might come up with its own set of challenges. Here are some tips to handle common issues:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- Compilation Errors:&lt;/strong&gt; If you encounter any compilation errors, it&amp;rsquo;s recommended to double-check your Rust environment and Volo setup. Ensure that you have the latest stable version of Rust and that Volo is correctly installed and updated to the latest version.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- Runtime Issues:&lt;/strong&gt; If your Volo application runs into issues during runtime, investigate the error messages and logs. Volo errors are designed to be descriptive and should guide you towards the problem source.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- Why is the code generated by &lt;code&gt;volo-cli&lt;/code&gt; separately split into the volo-gen crate?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This separation is because Rust&amp;rsquo;s compilation operates on a crate-by-crate basis. Creating the generated code as a separate crate allows for better utilization of the compile cache (idl generally doesn&amp;rsquo;t change frequently).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- How compatible is it with Kitex?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Volo is fully compatible with &lt;a href="https://www.cloudwego.io/blog/2024/01/10/mastering-golang-microservices-a-practical-guide-embrace-high-performance-with-kitex-and-hertz/"&gt;Kitex&lt;/a&gt;, including functionalities like metadata transmission.&lt;/p&gt;
&lt;h2 id="vi-conclusion"&gt;VI. Conclusion&lt;/h2&gt;
&lt;p&gt;This guide provided a comprehensive look into Volo, a powerful Rust-based component of the CloudWeGo ecosystem. With an understanding of how to set up and use Volo in your projects, you&amp;rsquo;re now equipped to harness the speed and efficiency that Volo brings to your cloud development tasks.&lt;/p&gt;
&lt;p&gt;As you continue to explore &lt;a href="https://www.cloudwego.io"&gt;CloudWeGo&lt;/a&gt;, keep integrating its powerful features into your projects, and see the transformative impact it can have on your software development process.&lt;/p&gt;
&lt;p&gt;Stay curious, keep learning, and don&amp;rsquo;t hesitate to dive deeper into the boundless potential of CloudWeGo. Happy coding!&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.8.0</title><link>https://www.cloudwego.io/blog/2024/01/12/hertz-release-v0.8.0/</link><pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/01/12/hertz-release-v0.8.0/</guid><description>
&lt;p&gt;In Hertz v0.8.0, in addition to the regular iterative optimization, we have also introduced an important feature.&lt;/p&gt;
&lt;h2 id="partitioned-cookies"&gt;Partitioned cookies&lt;/h2&gt;
&lt;p&gt;In Hertz v0.8.0, we support the partitioned cookies feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/1041"&gt;https://github.com/cloudwego/hertz/pull/1041&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="background"&gt;Background&lt;/h3&gt;
&lt;p&gt;Third-party cookies provide the ability for cross-site tracking for the web, and their existence poses a huge threat to the privacy and security of web users. Chrome will disable third-party cookies for 1% of users starting from Quarter 1 of 2024, and gradually expand the disabling scope to 100% starting from the third quarter of 2024.
Partitioned Cookies Cookies Having Independent Partitioned State (CHIPS) serve as an alternative to third-party cookies, providing the ability to carry third-party cookies on cross-site requests.&lt;/p&gt;
&lt;h4 id="set-partitioned-cookies-with-the-set-cookie-header"&gt;Set Partitioned Cookies with the Set-Cookie Header&lt;/h4&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Set-Cookie header:
Set-Cookie: __Host-name=value; Secure; Path=/; SameSite=None; Partitioned;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="how-to"&gt;How to&lt;/h3&gt;
&lt;h4 id="upgrade-hertz-version"&gt;Upgrade Hertz version&lt;/h4&gt;
&lt;p&gt;Hertz added support for Partitioned Cookies in v0.8.0. You need to upgrade to &amp;gt; = v0.8.0 to use Partitioned Cookies.&lt;/p&gt;
&lt;h4 id="how-to-use-partitioned-cookies"&gt;How to use Partitioned Cookies&lt;/h4&gt;
&lt;p&gt;Currently, Hertz supports Partitioned Cookies, but does not yet support passing whether it is Partitioned through SetCookie. We will add this feature in the next minor version. Before that, you can refer to the following code example to use Partitioned Cookies.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;func SetPartitionedCookie(c *app.RequestContext, name, value string, maxAge int, path, domain string, sameSite protocol.CookieSameSite, secure, httpOnly bool) {
if path == &amp;#34;&amp;#34; {
path = &amp;#34;/&amp;#34;
}
cookie := protocol.AcquireCookie()
defer protocol.ReleaseCookie(cookie)
cookie.SetKey(name)
cookie.SetValue(url.QueryEscape(value))
cookie.SetMaxAge(maxAge)
// If name has the prefix of __Host，Path must be /
cookie.SetPath(path)
cookie.SetDomain(domain)
// Secure must be true。
cookie.SetSecure(secure)
cookie.SetHTTPOnly(httpOnly)
cookie.SetSameSite(sameSite)
cookie.SetPartitioned(true)
c.Response.Header.SetCookie(cookie)
}
func main() {
h := server.Default()
h.GET(&amp;#34;/partitioned&amp;#34;, func(ctx context.Context, c *app.RequestContext) {
SetPartitionedCookie(c, &amp;#34;user&amp;#34;, &amp;#34;hertz&amp;#34;, 1, &amp;#34;/&amp;#34;, &amp;#34;localhost&amp;#34;, protocol.CookieSameSiteNoneMode, true, true)
c.JSON(consts.StatusOK, utils.H{&amp;#34;partitioned&amp;#34;: &amp;#34;yes&amp;#34;})
})
h.Spin()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify Set-Cookie Header&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;curl -v http://localhost:8888/partitioned
* Trying [::1]:8888...
* Connected to localhost (::1) port 8888
&amp;gt; GET /partitioned HTTP/1.1
&amp;gt; Host: localhost:8888
&amp;gt; User-Agent: curl/8.4.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: hertz
&amp;lt; Date: Fri, 12 Jan 2024 07:01:02 GMT
&amp;lt; Content-Type: application/json; charset=utf-8
&amp;lt; Content-Length: 21
&amp;lt; Set-Cookie: user=hertz; max-age=1; domain=localhost; path=/; HttpOnly; secure; SameSite=None; Partitioned
&amp;lt;
* Connection #0 to host localhost left intact
{&amp;#34;partitioned&amp;#34;:&amp;#34;yes&amp;#34;}%
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Blog: Mastering Golang Microservices - A Practical Guide: Embrace High-Performance with Kitex and Hertz</title><link>https://www.cloudwego.io/blog/2024/01/10/mastering-golang-microservices-a-practical-guide-embrace-high-performance-with-kitex-and-hertz/</link><pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/01/10/mastering-golang-microservices-a-practical-guide-embrace-high-performance-with-kitex-and-hertz/</guid><description>
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Mastering_Golang_Microservices_A_Practical_Guide_Embrace_High_Performance_with_Kitex_and_Hertz/1.jpeg" alt="Image"&gt;&lt;/p&gt;
&lt;h2 id="i-introduction"&gt;I. Introduction&lt;/h2&gt;
&lt;p&gt;The world of software development is fast-paced, and having reliable and efficient tools makes a significant difference.
This is where &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; with two of its major sub-projects - &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; and &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;, comes into play. A solution with the potential to transform the way developers navigate the cloud environment, thanks to its robust, open-source technology.&lt;/p&gt;
&lt;p&gt;Two of its standout components, Kitex and Hertz, are at the center of our focus in this guide. Kitex is an efficient and powerful RPC framework used for communication between microservices, while Hertz aids in the quick and efficient setup of web services and BFF services. Both are designed to simplify and enhance your development efforts.&lt;/p&gt;
&lt;p&gt;Our mission in this guide is simple: to facilitate your understanding of CloudWeGo, its powerful features, and how to harness them in your projects with a clear step-by-step handbook.
Whether you are a seasoned developer familiar with open-source technology or a newcomer exploring cloud development, this guide is designed to cater to your needs.&lt;/p&gt;
&lt;p&gt;Once done reading, you will be comfortable setting up CloudWeGo, initiating and developing a project, implementing testing, debugging, deploying your applications, and more.
We&amp;rsquo;ll also share some of the best practices when using CloudWeGo to ensure that you are maximizing the potential of the CloudWeGo open-source ecosystem. Let&amp;rsquo;s dive in!&lt;/p&gt;
&lt;h2 id="ii-getting-started-with-cloudwego"&gt;II. Getting Started With CloudWeGo&lt;/h2&gt;
&lt;p&gt;As key components of CloudWeGo, Kitex &amp;amp; Hertz, are crucial to getting started. Ensuring you have a suitably configured environment with Golang is a pre-requisite. If you are working on a Windows platform, make sure the version of Kitex is v0.5.2 or higher. Hertz, on the other hand, is compatible across Linux, macOS, and Windows systems.&lt;/p&gt;
&lt;p&gt;Installing the CLI tool requires confirmation that the &lt;code&gt;GOPATH&lt;/code&gt; environment variable is correctly defined and accessible. This is followed by installing Kitex, Thriftgo, and Hertz. The correct setup can be verified by running their respective versions. If you encounter any problems, your troubleshooting should involve a check on the setup of the Golang development environment.&lt;/p&gt;
&lt;h3 id="kitex--hertz"&gt;Kitex &amp;amp; Hertz&lt;/h3&gt;
&lt;h4 id="prerequisites"&gt;Prerequisites&lt;/h4&gt;
&lt;p&gt;Before diving into CloudWeGo development with Kitex &amp;amp; Hertz, make sure you have set up the Golang development environment. Please follow the Install Go guide if you haven&amp;rsquo;t already.&lt;/p&gt;
&lt;p&gt;We highly recommend using the latest version of Golang, ensuring compatibility with three most recent minor release versions (currently &amp;gt;= v1.16).&lt;/p&gt;
&lt;p&gt;Additionally, make sure that &lt;code&gt;GO111MODULE&lt;/code&gt; is set to &lt;code&gt;ON&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="install-the-cli-tool"&gt;Install the CLI tool&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by installing the CLI tools we will be working with.
Ensure the &lt;code&gt;GOPATH&lt;/code&gt; environment variable is properly defined (e.g., &lt;code&gt;export GOPATH=~/go&lt;/code&gt;), then add &lt;code&gt;$GOPATH/bin&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt; environment variable (e.g., &lt;code&gt;export PATH=$GOPATH/bin:$PATH&lt;/code&gt;). Make sure that &lt;code&gt;GOPATH&lt;/code&gt; is accessible.&lt;/p&gt;
&lt;p&gt;Next, install Kitex (&lt;code&gt;go install github.com/cloudwego/kitex/tool/cmd/kitex@latest&lt;/code&gt;), Thriftgo (for Thrift protocol - &lt;code&gt;go install github.com/cloudwego/thriftgo@latest&lt;/code&gt;), and Hertz (&lt;code&gt;go install github.com/cloudwego/hertz/cmd/hz@latest&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now, if you run &lt;code&gt;kitex --version&lt;/code&gt;, &lt;code&gt;thriftgo --version&lt;/code&gt;, and &lt;code&gt;hz --version&lt;/code&gt;, you should see output indicating the versions of each CLI tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ kitex --version
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vx.x.x
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ thriftgo --version
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;thriftgo x.x.x
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ hz --version
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vx.x.x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you encounter any issues during the installation, it&amp;rsquo;s likely due to gaps in the setup of the Golang development environment. Usually, you can quickly find a solution by searching for the error message online.&lt;/p&gt;
&lt;h2 id="iii-creating-a-sample-project"&gt;III. Creating A Sample Project&lt;/h2&gt;
&lt;h3 id="kitex"&gt;Kitex&lt;/h3&gt;
&lt;h4 id="get-the-example"&gt;Get the example&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;You can simply click &lt;a href="https://github.com/cloudwego/kitex-examples/archive/refs/heads/main.zip"&gt;here&lt;/a&gt; to download the example.&lt;/li&gt;
&lt;li&gt;Or you can clone the sample repository &lt;code&gt;git clone https://github.com/cloudwego/kitex-examples.git&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="run-the-example"&gt;Run the example&lt;/h4&gt;
&lt;h5 id="run-with-go"&gt;Run with go&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Change to the &lt;code&gt;hello&lt;/code&gt; directory. Hello is a simple example of Kitex using the Thrift protocol.
&lt;code&gt;cd kitex-examples/hello&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run server
&lt;code&gt;go run .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run client
open another terminal and &lt;code&gt;go run ./client.&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="run-with-docker"&gt;Run with Docker&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Go to the examples directory
&lt;code&gt;cd kitex-examples&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build the example project
&lt;code&gt;docker build -t kitex-examples&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the server
&lt;code&gt;docker run --network host kitex-examples ./hello-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the client
Open another terminal and run &lt;code&gt;docker run --network host kitex-examples ./hello-client&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations! You now have successfully used Kitex to complete an RPC.&lt;/p&gt;
&lt;h3 id="hertz"&gt;Hertz&lt;/h3&gt;
&lt;h5 id="quick-start"&gt;Quick Start&lt;/h5&gt;
&lt;p&gt;To create a sample project with Hertz, start by creating the &lt;code&gt;hertz_demo&lt;/code&gt; folder in the current directory and navigate to that directory. Then, create the &lt;code&gt;main.go&lt;/code&gt; file and add the following code:
package main&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;context&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/app&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/app/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/protocol/consts&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Default&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GET&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;/ping&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;JSON&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;consts&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;StatusOK&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;H&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;})&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;})&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Spin&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, generate the &lt;code&gt;go.mod&lt;/code&gt; file (&lt;code&gt;go mod init hertz_demo&lt;/code&gt;), then tidy &amp;amp; get dependencies (&lt;code&gt;go mod tidy&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To run the sample code, simply type &lt;code&gt;go run hertz_demo&lt;/code&gt;. If the server is launched successfully, you will see the following message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2022/05/17 21:47:09.626332 engine.go:567: &lt;span style="color:#ce5c00;font-weight:bold"&gt;[&lt;/span&gt;Debug&lt;span style="color:#ce5c00;font-weight:bold"&gt;]&lt;/span&gt; HERTZ: &lt;span style="color:#000"&gt;Method&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;GET &lt;span style="color:#000"&gt;absolutePath&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;/ping -- &lt;span style="color:#000"&gt;handlerName&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;main.main.func1 &lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;num&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt; handlers&lt;span style="color:#ce5c00;font-weight:bold"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2022/05/17 21:47:09.629874 transport.go:84: &lt;span style="color:#ce5c00;font-weight:bold"&gt;[&lt;/span&gt;Info&lt;span style="color:#ce5c00;font-weight:bold"&gt;]&lt;/span&gt; HERTZ: HTTP server listening on &lt;span style="color:#000"&gt;address&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=[&lt;/span&gt;::&lt;span style="color:#ce5c00;font-weight:bold"&gt;]&lt;/span&gt;:8888
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can test the interface by typing &lt;code&gt;curl http://127.0.0.1:8888/ping&lt;/code&gt;. If everything is working correctly, you should see the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;message&amp;#34;&lt;/span&gt;:&lt;span style="color:#4e9a06"&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="using-cli-tool-hz"&gt;Using CLI tool hz&lt;/h5&gt;
&lt;p&gt;You can also use the Hertz CLI tool to generate a sample project outside of the &lt;code&gt;GOPATH&lt;/code&gt;. Procedures include creating an IDL file named &lt;code&gt;hello.thrift&lt;/code&gt;, generating the sample code, obtaining the dependencies, and subsequently running the sample code.
Assuming you are working on a folder outside of &lt;code&gt;GOPATH&lt;/code&gt;, create an IDL file called &lt;code&gt;hello.thrift&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;namespace&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;go&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;hello.world&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;HelloService&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Hello&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;name&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Generate or complete the Sample Code using &lt;code&gt;hz new -idl hello.thrift -module hertz_demo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; since you&amp;rsquo;re currently not in &lt;code&gt;GOPATH&lt;/code&gt;, you&amp;rsquo;ll need to add &lt;code&gt;-module&lt;/code&gt; or &lt;code&gt;-mod&lt;/code&gt; flag to specify a custom module name. After execution, a scaffolding of the Hertz project is created in the current directory, with a ping interface for testing.&lt;/p&gt;
&lt;p&gt;Get dependencies (&lt;code&gt;go mod tidy&lt;/code&gt;), then run the sample code (&lt;code&gt;go build -o hertz_demo &amp;amp;&amp;amp; ./hertz_demo&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If the server is launched successfully, you will see the same message as before, and you can test the interface using the same curl command. Congratulations, you&amp;rsquo;ve successfully launched the Hertz Server!&lt;/p&gt;
&lt;h2 id="iv-testing-and-debugging-your-project"&gt;IV. Testing and Debugging Your Project&lt;/h2&gt;
&lt;p&gt;Testing and debugging your project are essential components whether you are working with Kitex or Hertz.
While dealing with Kitex errors, the &lt;code&gt;IsKitexError&lt;/code&gt; method in the kerrors package can be used.&lt;/p&gt;
&lt;p&gt;The Kitex framework automatically recovers all panics except those occurring within the goroutine created by the business code using the &lt;code&gt;go&lt;/code&gt; keyword.&lt;/p&gt;
&lt;h3 id="kitex-1"&gt;Kitex&lt;/h3&gt;
&lt;h4 id="exception-instruction"&gt;Exception Instruction&lt;/h4&gt;
&lt;p&gt;Check for Kitex errors using &lt;code&gt;kerrors.IsKitexError(kerrors.ErrInternalException)&lt;/code&gt;. You can check for a specified error type using &lt;code&gt;errors.Is(err, kerrors.ErrNoResolver)&lt;/code&gt;. Also, note that you can use &lt;code&gt;IsTimeoutError&lt;/code&gt; in kerrors to check whether it&amp;rsquo;s a timeout error.&lt;/p&gt;
&lt;p&gt;To get detailed error messages, all detailed errors are defined by &lt;code&gt;DetailedError&lt;/code&gt; in kerrors. You can use &lt;code&gt;errors.As&lt;/code&gt; to fetch specified &lt;code&gt;DetailedError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/client&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/kitex/pkg/kerrors&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;_&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;echo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewClient&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithResolver&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;var&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;de&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;kerrors&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;DetailedError&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;ok&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;errors&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;As&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;de&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DetailedError&lt;/code&gt; provides the following methods to fetch a detailed message:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ErrorType() error&lt;/code&gt;: to get the basic error type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stack() string&lt;/code&gt;: to get the stack (currently only works for &lt;code&gt;ErrPanic&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="handling-panic"&gt;Handling panic&lt;/h3&gt;
&lt;p&gt;Panic that occurs in the goroutine created by the business code using the go keyword must be recovered by the business code. To ensure the stability of the service, the Kitex framework will automatically recover all other panics.&lt;/p&gt;
&lt;p&gt;While checking for recovered panic in your middlewares, you can use &lt;code&gt;ri.Stats().Panicked()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// After calling next(...) in your middleware:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;ri&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;rpcinfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetRPCInfo&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;stats&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ri&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Stats&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;stats&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;!=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;nil&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;if&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;panicked&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;err&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;stats&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Panicked&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;panicked&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// err is the object kitex get by calling recover()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="faq--answers"&gt;FAQ &amp;amp; Answers&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Q1: &lt;code&gt;Not enough arguments&lt;/code&gt; problem when installing the code generation tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please try:
&lt;code&gt;go mod：GO111MODULE=on go get github.com/cloudwego/kitex/tool/cmd/kitex@latest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2: Why does &lt;code&gt;set&lt;/code&gt; in IDL become &lt;code&gt;slice&lt;/code&gt; in generated codes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Due to JSON serialization, the official Apache Thrift changed the generation type of &lt;code&gt;set&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt; to &lt;code&gt;slice&lt;/code&gt; starting from v0.11.0. To ensure compatibility, Kitex follows this rule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q3: Why is there an underscore after some field names?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The official implementation of Thrift forbids identifiers ending in &amp;ldquo;Result&amp;rdquo; and &amp;ldquo;Args&amp;rdquo; to avoid naming conflicts. When the type name, service name, and method name in the Thrift file start with &amp;ldquo;New&amp;rdquo; or end with &amp;ldquo;Result&amp;rdquo; or &amp;ldquo;Args&amp;rdquo;, an underscore is automatically added at the end of the name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q4: Does the code generated by a new interface overwrite &lt;code&gt;handler.go&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generated code under &lt;code&gt;kitex_gen/&lt;/code&gt; will be overwritten. However, &lt;code&gt;handler.go&lt;/code&gt; of the server will not be overwritten; new methods will be added correspondingly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q5: &amp;ldquo;Not enough arguments in call to &lt;code&gt;iprot.ReadStructBegin&lt;/code&gt; when compiling Thrift interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kitex is based on Apache Thrift v0.13 and cannot be directly upgraded since there is a breaking change in Apache Thrift v0.14. Such issues usually arise if a new version of Thrift is pulled during upgrades.&lt;/p&gt;
&lt;p&gt;We recommend against using &lt;code&gt;-u&lt;/code&gt; parameters during upgrades. You can run the following command to fix the version: &lt;code&gt;go mod edit -replace github.com/apache/thrift=github.com/apache/thrift@v0.13.0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="hertz-1"&gt;Hertz&lt;/h3&gt;
&lt;h4 id="error-type--error-chain"&gt;Error Type &amp;amp; Error Chain&lt;/h4&gt;
&lt;p&gt;To handle errors more effectively, Hertz has predefined several error types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ErrorTypeBind:&lt;/strong&gt; Error in binding process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ErrorTypeRender:&lt;/strong&gt; Error in rendering process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ErrorTypePrivate:&lt;/strong&gt; Hertz private errors that business doesn&amp;rsquo;t need to be aware of&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ErrorTypePublic:&lt;/strong&gt; Hertz public errors that require external perception as opposed to Private&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ErrorTypeAny:&lt;/strong&gt; Other Error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Users should define corresponding errors according to these error types.
In addition to error definition conventions, Hertz also provides &lt;code&gt;ErrorChain&lt;/code&gt; capability to make it easier for businesses to bind all errors encountered during request processing to an error chain.&lt;/p&gt;
&lt;p&gt;The corresponding API for this is &lt;code&gt;RequestContext.Error(err)&lt;/code&gt;. Calling this API will tie the err to its corresponding request context. To get all the errors bound by the request context, use &lt;code&gt;RequestContext.Errors&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="faq--answers-1"&gt;FAQ &amp;amp; Answers&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Q1: High Memory Usage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Connections not Closing due to Client Non-standard Usage: If the client initiates a large number of connections without closing them, there can be a significant waste of resources over time, causing high memory usage problems.
To resolve this, configure &lt;code&gt;idleTimeout&lt;/code&gt; reasonably. Hertz Server will close the connection to ensure the server&amp;rsquo;s stability after the timeout. The default configuration is three minutes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2: Vast Request/Response&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the request and response are vast, the data will enter memory, causing significant pressure, especially when stream and chunk are not used. To resolve this, for very vast requests cases, use a combination of streaming and go net.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q3: Common Error Code Checking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following error codes are commonly reported by the framework:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;404 (Access to the wrong port or No routes matched)&lt;/li&gt;
&lt;li&gt;417 (The server returns false after executing the custom &lt;code&gt;ContinueHandler&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;500 (Throwing the panic in middleware or in &lt;code&gt;handlerFunc&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details and solutions on these and other error codes, please refer to the &lt;a href="https://www.cloudwego.io/docs/kitex/getting-started/"&gt;Kitex User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="context-guide"&gt;Context Guide&lt;/h3&gt;
&lt;p&gt;Hertz also provides a standard &lt;code&gt;context.Content&lt;/code&gt; and a request context as input arguments in the function in the &lt;code&gt;HandleFunc&lt;/code&gt; Design. The handler/middleware function signature is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;HandlerFunc&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="metadata-storage"&gt;Metadata Storage&lt;/h4&gt;
&lt;p&gt;Both contexts (c and ctx) have the ability to store values. The choice of which one to use depends on the life cycle of the stored value and the selected context should match. The &lt;code&gt;ctx&lt;/code&gt; is primarily used to store request-level variables, which are recycled after the request ends.&lt;/p&gt;
&lt;p&gt;It is characterized by high query efficiency (the bottom is map), unsafe coroutines and doesn&amp;rsquo;t implement the &lt;code&gt;context.Context&lt;/code&gt; Interface. The &lt;code&gt;c&lt;/code&gt; is passed as the context between middleware/handler. It has all the semantics of context.Content, is safe for coroutines, and all that requires the &lt;code&gt;context.Content&lt;/code&gt; interface as input arguments can just pass &lt;code&gt;c&lt;/code&gt; directly.&lt;/p&gt;
&lt;h2 id="v-observability"&gt;V. Observability&lt;/h2&gt;
&lt;p&gt;Monitoring your application is critical. Both Kitex and Hertz provide a Tracer interface that can be implemented for efficient application monitoring. You can make the most of the numerous instrumentation controls and logging capabilities on offer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As a framework, it runs with business services. Once the code of services is built, it can be deployed at virtual machines, bare metal machines, or Docker containers as it should be.&lt;/p&gt;
&lt;h3 id="kitex-2"&gt;Kitex&lt;/h3&gt;
&lt;h4 id="configuration-and-options"&gt;Configuration and options&lt;/h4&gt;
&lt;p&gt;For more details, please check &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/options/server_options/"&gt;server option&lt;/a&gt;, &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/options/client_options/"&gt;client option&lt;/a&gt;, and &lt;a href="https://www.cloudwego.io/zh/docs/kitex/tutorials/options/call_options/"&gt;call option&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="observability"&gt;Observability&lt;/h5&gt;
&lt;h6 id="instrumentation-control"&gt;Instrumentation Control&lt;/h6&gt;
&lt;p&gt;Kitex supports flexible enabling of basic and fine-grained Instrumentation. This includes a stats level, client tracing stats level control, server tracing stats level control, and more. For more details, please refer to the &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/observability/"&gt;Kitex User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="logging"&gt;Logging&lt;/h5&gt;
&lt;p&gt;Kitex supports default logger implementation, injection of custom loggers, and redirection of default logger output. For more details, instructions, and examples, please refer to the &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/observability/"&gt;Kitex User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="tracing"&gt;Tracing&lt;/h5&gt;
&lt;p&gt;Kitex’s OpenTelemetry extension provides support for tracing. For more details, instructions, and examples, please refer to the &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/observability/"&gt;Kitex User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="monitoring"&gt;Monitoring&lt;/h5&gt;
&lt;p&gt;The framework doesn’t provide any monitoring, but it provides a Tracer interface. This interface can be implemented by yourself and be injected via WithTracer Option. For more details, instructions, and examples, please refer to the &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/observability/"&gt;Kitex User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="hertz-2"&gt;Hertz&lt;/h3&gt;
&lt;h4 id="configuration-and-options-1"&gt;Configuration and options&lt;/h4&gt;
&lt;p&gt;For more details, please check the &lt;a href="https://www.cloudwego.io/docs/hertz/reference/config/"&gt;configuration instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="observability-1"&gt;Observability&lt;/h5&gt;
&lt;h6 id="instrumentation"&gt;Instrumentation&lt;/h6&gt;
&lt;p&gt;Hertz supports flexible enabling of basic and fine-grained Instrumentation. This includes a stats level, stats level control, and more. For more details, please refer to the &lt;a href="https://www.cloudwego.io/docs/hertz/tutorials/observability/"&gt;Hertz User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="log"&gt;Log&lt;/h5&gt;
&lt;p&gt;Hertz provides a default way to print logs in the standard output. It also provides several global functions, such as &lt;code&gt;hlog.Info&lt;/code&gt;, &lt;code&gt;hlog.Errorf&lt;/code&gt;, &lt;code&gt;hlog.CtxTracef&lt;/code&gt;, and more, which are implemented in &lt;code&gt;pkg/common/hlog&lt;/code&gt;, to call the corresponding methods of the default logger. For more details, instructions, and examples, please refer to the &lt;a href="https://www.cloudwego.io/docs/hertz/tutorials/observability/"&gt;Hertz User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="tracing-1"&gt;Tracing&lt;/h5&gt;
&lt;p&gt;In microservices, link tracing is a very important capability, which plays an important role in quickly locating problems, analyzing business bottlenecks, and restoring the link status of a request.
Hertz provides the capability of link tracking and also supports user-defined link tracking. For more details, instructions, and examples, please refer to the &lt;a href="https://www.cloudwego.io/docs/hertz/tutorials/observability/"&gt;Hertz User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="monitoring-1"&gt;Monitoring&lt;/h5&gt;
&lt;p&gt;The framework doesn’t provide any monitoring, but it provides a Tracer interface. This interface can be implemented by yourself and be injected via WithTracer Option. For more details, instructions, and examples, please refer to the &lt;a href="https://www.cloudwego.io/docs/hertz/tutorials/observability/"&gt;Hertz User Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="vi-best-practices-for-developing-with-cloudwego"&gt;VI. Best Practices for Developing with CloudWeGo&lt;/h2&gt;
&lt;p&gt;For a real-world application of Kitex and Hertz, you can explore projects like &lt;a href="https://github.com/cloudwego/biz-demo/tree/main/bookinfo"&gt;Bookinfo&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/biz-demo/tree/main/easy_note"&gt;Easy Note&lt;/a&gt;, and &lt;a href="https://github.com/cloudwego/biz-demo/tree/main/book-shop"&gt;Book Shop&lt;/a&gt;. Each of these scenarios demonstrate different business scenarios and use-cases for various CloudWeGo subprojects.&lt;/p&gt;
&lt;p&gt;Whether you&amp;rsquo;re dealing with merchant or consumer management, notes maintenance, or integrating different middleware, these projects provide valuable insights into the powerful capabilities of Kitex and Hertz in different contexts.&lt;/p&gt;
&lt;p&gt;This guide provides a comprehensive exploration of CloudWeGo&amp;rsquo;s powerful capabilities, particularly its subprojects, Kitex and Hertz. You now have a solid understanding of how to harness these tools effectively in your development projects.&lt;/p&gt;
&lt;p&gt;As you continue delving into CloudWeGo, remember to mix the tool&amp;rsquo;s powerful features with your creativity for impressive results in your software development journey.&lt;/p&gt;
&lt;p&gt;Stay curious, keep exploring, and stay tuned for our upcoming Rust-focused &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt; guide, which will introduce you to yet another exciting aspect of CloudWeGo. Happy coding!&lt;/p&gt;</description></item><item><title>Blog: Volo Release 0.9.0</title><link>https://www.cloudwego.io/blog/2024/01/04/volo-release-0.9.0/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2024/01/04/volo-release-0.9.0/</guid><description>
&lt;p&gt;In Volo 0.9.0, we mainly changed the default generated HashSet/HashMap type to AHashMap/AHashSet, which is expected to bring certain performance improvements. Additionally, with the release of &lt;a href="https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html"&gt;Rust 1.75&lt;/a&gt;, Volo is already available in stable rust.&lt;/p&gt;
&lt;h2 id="break-change"&gt;Break Change&lt;/h2&gt;
&lt;h3 id="modification-of-the-default-generated-hashset--hashmap-type"&gt;Modification of the default generated HashSet / HashMap type&lt;/h3&gt;
&lt;p&gt;In the new version of the generated code, the default generated HashMap/HashSet type is changed to AHashMap/AHashSet, which gives better performance than std map, refer to &lt;a href="https://github.com/tkaitchuck/aHash/blob/master/compare/readme.md"&gt;ahash&lt;/a&gt;. In user code, you can directly replace the original use of &lt;code&gt;std::collections::HashMap&lt;/code&gt; with &lt;code&gt;pilota::AHashMap&lt;/code&gt; or &lt;code&gt;ahash::AHashMap&lt;/code&gt; according to the compiler error (pilota is essentially re-exported the AHashMap of ahash, so it is the same type).&lt;/p&gt;
&lt;h3 id="remove-option-from-rpcinfo-field-type"&gt;Remove Option from RpcInfo field type&lt;/h3&gt;
&lt;p&gt;In this version, we have removed the Option wrapper from the RpcInfo fields, which should be transparent to most users who have not written their own layers. If there are users who use cx to write layers, they can remove the Option processing directly.&lt;/p&gt;
&lt;h3 id="added-basicerror"&gt;Added BasicError&lt;/h3&gt;
&lt;p&gt;In this version, the BasicError branch is added to the enumeration error type of volo-thrift, which is mainly used to store the errors within the framework itself. It is expected that this will not affect the vast majority of users. If the users have matched the error type, they will need to add the processing of BasicError.&lt;/p&gt;
&lt;h3 id="remove-max_frame_size-method"&gt;Remove max_frame_size method&lt;/h3&gt;
&lt;p&gt;max_frame_size in the volo-thrift client is not actually used due to interface changes during iteration and has been removed in this version. If the user needs to set max_frame_size, they can use the make_codec method to pass in a custom codec and use the &lt;a href="https://github.com/cloudwego/volo/blob/main/volo-thrift/src/codec/default/framed.rs#L33"&gt;with_max_frame_size&lt;/a&gt; method in the MakeFramedCodec layer to set max_frame_size.&lt;/p&gt;
&lt;h3 id="upgrade-hyper-to-version-10"&gt;Upgrade hyper to version 1.0&lt;/h3&gt;
&lt;p&gt;hyper removed hyper::Body in version 1.0 and introduced hyper::body::Incoming as the requested Body type. In volo-grpc, we have followed up on this change, and we expect that the vast majority of users who have not written their own layers will not be interested. If there are users who use the complete Service generics, just change &lt;code&gt;Service&amp;lt;ServerContext, Request&amp;lt;hyper::Body&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Service&amp;lt;ServerContext, Request&amp;lt;hyper::body::Incoming&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="complete-release-note"&gt;Complete Release Note&lt;/h2&gt;
&lt;p&gt;For the complete Release Note, please refer to: &lt;a href="https://github.com/cloudwego/volo/compare/volo-0.8.0...volo-0.9.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.8.0</title><link>https://www.cloudwego.io/blog/2023/11/30/kitex-release-v0.8.0/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/11/30/kitex-release-v0.8.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC Multi-Service Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implemented multi-service registration for Kitex gRPC, please refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/multi_service/"&gt;Multiple Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Acquire Kitex RPCInfo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added methods for easy retrieval of RPC information from RPCInfo, please refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/"&gt;Acquire RPC information&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="optimizations"&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Map Generic Call&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Map generic call supports returning []byte for binary fields via SetBinaryWithByteSlice option.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. RPCInfo asynchronous use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added an option to disable reusing RPCInfo, facilitating asynchronous usage, please refer to please refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/acquire_rpcinfo/#12-asynchronous-usage"&gt;Acquire RPC information&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;p&gt;Upgraded frugal to &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.12"&gt;v0.1.12&lt;/a&gt;, fixing some concurrency issues when compiling types, especially the issue when registering new modules which may conflict with sonic.&lt;br&gt;
It&amp;rsquo;s STRONGLY SUGGESTED updating both frugal and sonic to the latest version by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; go get github.com/cloudwego/frugal@latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; go get github.com/bytedance/sonic@latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1051"&gt;#1051&lt;/a&gt;] feat(grpc): support gRPC multi-service on a server&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1189"&gt;#1189&lt;/a&gt;] feat(rpcinfo): add kitexutil methods for the convenience to fetch rpc information from RPCInfo&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1176"&gt;#1176&lt;/a&gt;] feat(tool): add an environment variable to make it easier to debug kitex tool&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1173"&gt;#1173&lt;/a&gt;] feat(rpcinfo): allow disable rpcinfo reuse for async reference&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1172"&gt;#1172&lt;/a&gt;] feat(retry): client.WithSpecifiedResultRetry should have higher priority&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1150"&gt;#1150&lt;/a&gt;] feat(proxy): add an interface to customize proxy middleware to replace the default implementation&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1159"&gt;#1159&lt;/a&gt;] feat(generic): support returning []byte for binary fields in map generic&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1153"&gt;#1153&lt;/a&gt;] feat(retry): add Extra for retry.FailurePolicy for better extension&lt;/p&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1187"&gt;#1187&lt;/a&gt;] optimize(tool): add an option to keep resp for kitex tool&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1183"&gt;#1183&lt;/a&gt;] optimize(meshheader): retrieve rip from meshheader and write it to TransInfo&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1178"&gt;#1178&lt;/a&gt;] optimize(bizErr): recurse to obtain BizErr to avoid additional Error encapsulation in the middle, resulting in unwrap results that are not BizErr&lt;/p&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1126"&gt;#1126&lt;/a&gt;] fix(generic): the issue of structs cache of generic call has dirty data under multiple services scene&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1168"&gt;#1168&lt;/a&gt;] fix(tool): remove the pointer to java.Object in generated file for &lt;a href="https://github.com/kitex-contrib/codec-dubbo"&gt;CodecDubbo&lt;/a&gt;&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1169"&gt;#1169&lt;/a&gt;] fix(tool): empty struct generate wrong struct&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1166"&gt;#1166&lt;/a&gt;] fix(generic): issue of deep copy function generation when map key type is binary&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1155"&gt;#1155&lt;/a&gt;] fix(tool): add import package &amp;lsquo;context&amp;rsquo; for gRPC client.go&lt;/p&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1177"&gt;#1177&lt;/a&gt;] test: avoid port conflict&lt;/p&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;p&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1190"&gt;#1190&lt;/a&gt;] chore: update thriftgo version to v0.3.3&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1186"&gt;#1186&lt;/a&gt;] chore: update readme with examples and new blogs&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1185"&gt;#1185&lt;/a&gt;] chore: add ci for windows&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1182"&gt;#1182&lt;/a&gt;] chore: update dynamicgo to v0.1.6&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1152"&gt;#1152&lt;/a&gt;] chore: update dynamicgo and sonic version&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1164"&gt;#1164&lt;/a&gt;] chore: update frugal to v0.1.12 and allow disable frugal by build tag&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1161"&gt;#1161&lt;/a&gt;] chore: update frugal to v0.1.10&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1157"&gt;#1157&lt;/a&gt;] chore: update frugal to v0.1.9&lt;br&gt;
[&lt;a href="https://github.com/cloudwego/kitex/pull/1151"&gt;#1151&lt;/a&gt;] chore(test): upgrade mockey to latest to compatible with Go1.21&lt;/p&gt;</description></item><item><title>Blog: The Role of CloudWeGo in Modern Cloud-Native Applications</title><link>https://www.cloudwego.io/blog/2023/11/28/the-role-of-cloudwego-in-modern-cloud-native-applications/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/11/28/the-role-of-cloudwego-in-modern-cloud-native-applications/</guid><description>
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/The_Role_of_CloudWeGo_in_Modern_Cloud_Native_Applications/1.png" alt="Image"&gt;&lt;/p&gt;
&lt;h1 id="i-introduction"&gt;I. Introduction&lt;/h1&gt;
&lt;p&gt;In the current era of infrastructure modernization, the term &amp;ldquo;Cloud-Native Applications&amp;rdquo; has emerged as a significant factor driving the evolution of the IT landscape. These applications inherently embody the concept of flexibility, scalability, and high availability and are built and delivered in a rapid, dynamic manner. They leverage modern application development frameworks and methodologies like microservices, containerization, and DevOps. Amidst the vast array of technologies accelerating the development and deployment of cloud-native applications is CloudWeGo, a notable player offering a distinctive edge to developers and organizations.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.cloudwego.io"&gt;CloudWeGo&lt;/a&gt;, a brainchild of &lt;a href="https://www.bytedance.com/en/"&gt;ByteDance&lt;/a&gt;, has established itself as a set of microservices middleware. It comprises a collection of high-performance, highly extensible, and highly reliable projects focused on microservices communication and governance.
In the face of the rapidly escalating hybrid and cloud-native microservices environment, CloudWeGo has proved to be a powerful fine-tuned tool to cater to the explicit requirements of such architectures. This article will explore the critical role CloudWeGo plays in understanding, architecting, and leveraging modern cloud-native applications.&lt;/p&gt;
&lt;p&gt;In the following sections, we will delve deeper into what exactly CloudWeGo is, its role in facilitating robust cloud-native applications, its specific advantages, and successfully implemented practical use-cases. Our objective is to present a well-rounded view of CloudWeGo&amp;rsquo;s impact and potential in revolutionizing the way cloud-native applications are structured and operated.&lt;/p&gt;
&lt;h1 id="ii-what-is-cloudwego-an-in-depth-look-at-its-foundations-components-and-simplification-of-hybrid-microservices-creation"&gt;II. What is CloudWeGo: An In-depth Look at its Foundations, Components, and Simplification of Hybrid Microservices Creation&lt;/h1&gt;
&lt;p&gt;CloudWeGo is no ordinary middleware, but an open-source project empowering developers worldwide. Conceptualized and developed by ByteDance, CloudWeGo is a powerful toolbox for building enterprise-grade cloud-native architectures. It embodies a framework with a triple threat of high performance, high extensibility, and high reliability, making it a force to be reckoned with in the world of microservices.&lt;/p&gt;
&lt;p&gt;At its core, CloudWeGo houses multiple components that serve as the building blocks of its robust architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;&lt;/strong&gt;: This is the heartbeat of CloudWeGo - a high-performance RPC framework that serves as a conduit for communication between different services. Its major contribution lies in supporting seamless and efficient distributed system development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;&lt;/strong&gt;: Stepping in as the HTTP framework within CloudWeGo, Hertz plays a pivotal role in supporting different HTTP protocols. Its extensive capabilities provide a solid base for crafting efficient and adaptive cloud-native applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt;&lt;/strong&gt;: Serving as the foundation for CloudWeGo&amp;rsquo;s RPC and HTTP frameworks, Netpoll is an integral network library tailored for high-performance I/O scenarios. It&amp;rsquo;s framed explicitly with an eye on Linux optimization, enabling effective and optimized networking operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/shmipc-go"&gt;Shmipc&lt;/a&gt;&lt;/strong&gt;: CloudWeGo&amp;rsquo;s inter-process communication library paves the way for efficient communication between different processes within the same system space. Shmipc eliminates unnecessary network I/O operations, bolstering overall operational efficiency and performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;&lt;/strong&gt;: A home-brewed Rust-based RPC framework by CloudWeGo. This project exemplifies the organization’s commitment to developing cutting-edge, high-performance applications, offering a fresh perspective for developers accustomed to Golang and looking to dabble in Rust.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CloudWeGo’s strategic packaging and unification of these core components results in a cohesive, versatile and scalable microservices middleware, simplifying the task of creating complex hybrid microservices. Enterprises today are no strangers to utilizing different technological frameworks, languages, and platforms to cater to diverse functionality requirements. This need for diversity often calls for a hybrid microservices setup, where teams build different microservices using disparate programming languages, each optimized for a specific task.&lt;/p&gt;
&lt;p&gt;With CloudWeGo, developers enjoy the flexibility of constructing and seamlessly integrating such heterogeneous services, all while maintaining high performance and reliability. The platform&amp;rsquo;s interoperability, inclusive of &lt;a href="https://grpc.io"&gt;gRPC&lt;/a&gt;, &lt;a href="https://thrift.apache.org"&gt;Thrift&lt;/a&gt;, and other custom protocols, ensures a smooth connection between different services, making the building of hybrid microservices a more straightforward task. By seamlessly weaving together diverse microservices, irrespective of their language of construction, CloudWeGo successfully simplifies the otherwise daunting process of creating hybrid microservices architectures.&lt;/p&gt;
&lt;p&gt;Whether you&amp;rsquo;re a seasoned veteran or a beginner developer just starting in the world of microservices, CloudWeGo simplifies the journey, making the complex and challenging world of hybrid microservices a little less daunting and a lot more exciting.&lt;/p&gt;
&lt;h1 id="iii-role-of-cloudwego-in-cloud-native-applications"&gt;III. Role of CloudWeGo in Cloud-Native Applications&lt;/h1&gt;
&lt;p&gt;In our fast-paced digital world, cloud-native applications are revolutionizing how businesses function. By leveraging cloud computing capabilities, these applications aim to enhance scalability, flexibility, and resilience. They adhere to a diverse set of requirements and characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Microservices Architecture&lt;/strong&gt;: Applications are segmented into smaller, loosely coupled services, each fulfilling a specific function, creating a landscape that enables easier scalability, maintenance, and deployment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Containerization&lt;/strong&gt;: Packaging applications into containers like &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt;, that encapsulate the code, dependencies, and configurations, ensures uniformity across different environments and expedites deployment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Orchestration and Automation&lt;/strong&gt;: Tools such as &lt;a href="https://kubernetes.io"&gt;Kubernetes&lt;/a&gt; excellently manage containerized applications by automating deployment, scaling, and service management, ensuring high availability and optimal resource utilization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DevOps Practices&lt;/strong&gt;: The deployment of Continuous Integration/Continuous Deployment (CI/CD) pipelines accelerates the software delivery process. This approach promotes regular and reliable code updates, facilitated by automated testing, version control, and deployment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability and Elasticity&lt;/strong&gt;: Applications must efficiently scale both vertically (expanding resources within a single node) and horizontally (adding more nodes) to cater to changing workloads. Resource scalability and autoscaling features facilitated through cloud-based resources, handle this necessity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resilience and Fault Tolerance&lt;/strong&gt;: Robust cloud-native applications are engineered to gracefully handle failures. Incorporating redundancy, failover mechanisms, and self-healing facilities ensures functionality despite component failures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security and Compliance&lt;/strong&gt;: Implementing robust security measures is pivotal. Inclusion of features like encryption, identity management, access control, and compliance with regulations such as &lt;a href="https://gdpr-info.eu"&gt;GDPR&lt;/a&gt;, built into the application architecture, is a requisite.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt;: Comprehensive tracking of performance and logging capabilities are key to detect issues, locate system bottlenecks, and garner insights into system behavior. Tools like &lt;a href="https://prometheus.io"&gt;Prometheus&lt;/a&gt;, &lt;a href="https://grafana.com"&gt;Grafana&lt;/a&gt;, and &lt;a href="https://www.jaegertracing.io"&gt;Jaeger&lt;/a&gt; often support this functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost Efficiency&lt;/strong&gt;: Efficient resource usage is crucial to control costs in a cloud environment. To that end, leveraging cloud provider services effectively, employing auto-scaling, monitoring resource consumption, and optimizing performance end-to-end is a must.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Implementing these principles leads to the creation of agile, scalable, and resilient applications, perfectly suited for the dynamic demands of contemporary business environments in the cloud.&lt;/p&gt;
&lt;p&gt;Despite numerous benefits, constructing cloud-native applications poses several challenges:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Complexity in Architecture&lt;/strong&gt;: Adopting a microservices architecture introduces complexity in managing multiple services, dependencies, and interactions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skill Set Requirements&lt;/strong&gt;: Developing cloud-native applications calls for competency in multiple technologies, making it challenging for organizations to acquire and retain talent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security Concerns&lt;/strong&gt;: The distributed environment elevates the potential attack surface. It&amp;rsquo;s crucial to ensure each service&amp;rsquo;s security, secure communication channels, and manage access control across all components.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resilience and Fault Tolerance&lt;/strong&gt;: Ensuring resilience and fault tolerance requires careful planning for fault detection, recovery, retries, and service availability assurance despite failures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networking Complexity&lt;/strong&gt;: Communication between services and managing networking configurations in a microservices-based architecture can get intricate, adding service discovery, load balancing, and handling network latency to the list of challenges.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Monitoring and Observability&lt;/strong&gt;: Implementing comprehensive monitoring and logging across microservices can be challenging, though it&amp;rsquo;s crucial for detecting issues and optimizing the system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overcoming these challenges requires the adoption of best practices, leveraging appropriate technologies, investing in skill development, and continually evolving strategies.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s where CloudWeGo steps in as a comprehensive microservices solution:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Simplifying Architectural Complexity&lt;/strong&gt;: CloudWeGo integrates rich microservices best practices. It facilitates easy construction of a microservices architecture, handling service mesh integration, reducing costs, and driving optimal performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Addressing Skill Set Requirements&lt;/strong&gt;: CloudWeGo streamlines the learning curve by providing all-in-one solutions for different scenarios – microservices vs. monoliths, Golang vs. Rust, RPC vs. RESTful, Protobuf vs. Thrift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ensuring Security&lt;/strong&gt;: CloudWeGo prioritizes security, incorporating several measures. It enables identity management, access controls, and continuous security audits due to its open-source nature and follows industry best practices to ensure application security.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Promoting Resilience and Fault Tolerance&lt;/strong&gt;: The Governance module of CloudWeGo boosts resilience and fault tolerance. With features such as timeout control, circuit breaking, rate-limiting, and fallbacks integrated into the Kitex RPC framework, system reliability is assured.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simplifying Networking&lt;/strong&gt;: CloudWeGo supports most popular registry centers for service discovery and registry. It manages intricate networking concerns through both Kitex and Hertz, which have built-in support and detailed guides for integration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhancing Observability&lt;/strong&gt;: With in-built Logging, Tracing, and Monitoring capabilities aided by &lt;a href="https://opentelemetry.io"&gt;OpenTelemetry&lt;/a&gt; implementation, CloudWeGo significantly improves the observability of cloud-native applications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CloudWeGo also incorporates several specific features tailored for cloud-native applications such as high-performance, high extensibility, and high reliability. These offerings, combined with the power of its key components - Kitex, Hertz, Netpoll, Shmipc, and Volo - make CloudWeGo a versatile toolset for efficient and effective cloud-native application development.&lt;/p&gt;
&lt;h1 id="iv-advantages-of-using-cloudwego"&gt;IV. Advantages of Using CloudWeGo&lt;/h1&gt;
&lt;h3 id="cloudwego-synonymous-with-reliability"&gt;CloudWeGo: Synonymous with Reliability&lt;/h3&gt;
&lt;p&gt;In an environment that demands stability and dependability, CloudWeGo shines as a reliable framework for developers and enterprises. Its focus on meticulous quality assurance, including extensive code reviews and testing, ensures that potential issues are addressed early on before impacting a production environment. CloudWeGo&amp;rsquo;s strong emphasis on stability reflects in the remarkable care the community dedicates toward PR integration, thorough testing, and constant monitoring. The project&amp;rsquo;s frameworks are optimized to effortlessly handle high workloads, guaranteeing stability and reliability, even under considerable pressure. Being open-source, CloudWeGo encourages community members to contribute feedback, driving continual improvement and swift issue resolution while adhering to rigorous quality standards. As a result, CloudWeGo projects are trusted to deliver stable and dependable software solutions continually.&lt;/p&gt;
&lt;h3 id="power-of-performance-the-role-of-netpoll"&gt;Power of Performance: The Role of Netpoll&lt;/h3&gt;
&lt;p&gt;CloudWeGo astounds with its high performance, a direct result of incorporating features like asynchronous RPC, streaming RPC, event-driven programming, high-performance non-blocking I/O networking through Netpoll, and support for protocols like HTTP/2. This powerful blend enables CloudWeGo projects to tackle demanding workloads and achieve impressive performance metrics. It marks a testament to CloudWeGo&amp;rsquo;s commitment to speed, responsiveness, and efficiency, ensuring admirable performance at an industrial production level.&lt;/p&gt;
&lt;h3 id="flexibility-through-extensibility--interoperability"&gt;Flexibility Through Extensibility &amp;amp; Interoperability&lt;/h3&gt;
&lt;p&gt;A standout feature of CloudWeGo lies in its designed extensibility, allowing users to customize its functionality to suit their individual needs. CloudWeGo employs a modular or layered framework providing a set of interfaces and default implementation options.&lt;/p&gt;
&lt;p&gt;The layered design, evident in Kitex and Hertz, allows developers to infuse their implementations into the framework, customizing it for specific needs. This extensibility enables them to replace or enhance default implementations, adapting CloudWeGo to distinct use cases or seamless integration with other libraries and tools.&lt;/p&gt;
&lt;p&gt;The common open standard protocols like Thrift, HTTP and gRPC, supported by CloudWeGo, are language-independent, making it interoperable with other frameworks. Coupled with Kitex&amp;rsquo;s full support for &lt;a href="https://github.com/alibaba/hessian2-codec"&gt;Hessian2&lt;/a&gt; protocol, it promotes interoperability with &lt;a href="https://dubbo.apache.org/en/index.html"&gt;Apache Dubbo&lt;/a&gt; and more. This vast interoperability toolset ensures CloudWeGo&amp;rsquo;s strong presence in the cloud-native applications ecosystem, making it the ideal choice for developers on the hunt for a versatile yet powerful framework.&lt;/p&gt;
&lt;p&gt;By combining reliability, high performance, extensibility, and interoperability, CloudWeGo can be an invaluable asset for modern software development, setting a standard for what a comprehensive and robust framework should embody. Regardless of the complexity of the needs or the unique specifications of an application, CloudWeGo has something to offer to every developer. Our active community also ensures that the software stays relevant to the changing tech landscape, making your investment in learning and implementing CloudWeGo worthwhile.&lt;/p&gt;
&lt;h1 id="v-real-world-use-cases-of-cloudwego"&gt;V. Real-World Use-Cases of CloudWeGo&lt;/h1&gt;
&lt;p&gt;CloudWeGo is designed for flexibility, managing to cater to a vast range of applications such as microservices-based applications, cloud-native applications, real-time applications, IoT applications, and more. Let&amp;rsquo;s explore some of its successful industry adoptions:&lt;/p&gt;
&lt;h3 id="powering-the-gaming-industry"&gt;Powering the Gaming Industry&lt;/h3&gt;
&lt;p&gt;CloudWeGo offers a plethora of benefits for the gaming industry. The platform stands synonymous with increased scalability, optimized performance, and simplified business logic, made possible due to its resource-efficient components like rate limiting, monitoring, and service registration/discovery. Additionally, integration with OpenTelemetry offers valuable monitoring and diagnostics capabilities for developers to optimize game services and ensure an exceptional gaming experience.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tanwan.com/game/"&gt;Tanwan Games&lt;/a&gt;, known for popular games such as &lt;a href="https://play.google.com/store/apps/details?id=com.twon.westwar"&gt;West War&lt;/a&gt;, faced substantial technical challenges around instantaneous high concurrency during game launches, game updates, extensive data pushes from partners, and interface overloads.&lt;/p&gt;
&lt;p&gt;To overcome these challenges, they turned to CloudWeGo, employing the Hertz framework for HTTP services and the Kitex framework for RPC microservices. Additionally, they leveraged Nacos for service discovery and registration, OpenTelemetry for tracing, Prometheus for monitoring, and Kitex&amp;rsquo;s built-in rate-limiting strategies for traffic shaping. The tangible benefits of embracing CloudWeGo include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Performance and stability improvement&lt;/strong&gt;: As an example, each Pod of 1c2g succeeded in handling over 400 QPS, with the latency within the network being astonishingly low and rendering a failure rate close to 0%.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced development efficiency, simplified deployment processes, more convenient auto-scaling, increased business elasticity, and reduced costs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/The_Role_of_CloudWeGo_in_Modern_Cloud_Native_Applications/2.png" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="safeguarding-the-financial-industrys-securities-products"&gt;Safeguarding the Financial Industry&amp;rsquo;s Securities&amp;rsquo; Products&lt;/h3&gt;
&lt;p&gt;CloudWeGo, especially through its Kitex framework, has made waves in the financial industry&amp;rsquo;s securities market as well. With the framework&amp;rsquo;s capabilities around service stress testing, efficiency, and secure communication, it became much easier for organizations to maintain stable communication between services within Kubernetes clusters.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider &lt;a href="https://www.huaxing.com"&gt;Huaxing Securities&lt;/a&gt;, which utilized Kitex for developing its new business product. With carefully integrated tracing libraries for components like &lt;a href="https://gorm.io/index.html"&gt;Gorm&lt;/a&gt;, &lt;a href="https://redis.io"&gt;Redis&lt;/a&gt;, and &lt;a href="https://kafka.apache.org"&gt;Kafka&lt;/a&gt;, they successfully migrated to OpenTelemetry tools like Jaeger for tracing and Prometheus for metrics monitoring. Moreover, they efficiently addressed Kitex&amp;rsquo;s different connection types in Kubernetes environments, resolving issues related to intra-cluster/cross-cluster calls, and achieved multiplexing connections along with seamless rolling upgrades.&lt;/p&gt;
&lt;p&gt;This meticulous implementation resulted in several evident benefits within a mere span of four months, such as rapid construction and launch of the new application, a comprehensive observability system encompassing Log, Trace, and Metrics around the Kitex RPC framework, and efficient cross-cluster invocations.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/The_Role_of_CloudWeGo_in_Modern_Cloud_Native_Applications/3.png" alt="Image"&gt;&lt;/p&gt;
&lt;h3 id="elevating-e-commerce"&gt;Elevating E-commerce&lt;/h3&gt;
&lt;p&gt;The e-commerce industry faces high concurrency and performance challenges. When &lt;a href="https://semirshop.com"&gt;Semir&lt;/a&gt; opted for Kitex as the RPC framework, they were able to significantly amplify their capacity to manage peak traffic and ensure synchronized order processing. In tandem with &lt;a href="https://istio.io"&gt;Istio&lt;/a&gt;, they managed traffic utilizing the Ingress Gateway mesh entry management program and the VirtualService traffic handling logic, thus directing orders to a plethora of services within the mesh.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/The_Role_of_CloudWeGo_in_Modern_Cloud_Native_Applications/4.png" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;The benefits of integrating CloudWeGo were immediately evident:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An improved ability to process a higher number of orders within a given timeframe.&lt;/li&gt;
&lt;li&gt;A shorter processing time even for a specified number of orders, with this performance gap becoming increasingly pronounced as the order volume increased.&lt;/li&gt;
&lt;li&gt;A substantial reduction in machine costs required to support the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ai--machine-learning-implementations"&gt;AI &amp;amp; Machine Learning Implementations&lt;/h3&gt;
&lt;p&gt;The AI industry is host to a number of business challenges surrounding machine learning and large-scale model training scenarios. To ensure optimal GPU-related resource utilization and to contend with high costs, a shift from individual GPU clusters for each tenant to multi-tenant shared clusters became necessary. However, existing service infrastructure that was shared between tenants led to mutual performance issues, increased management costs, and a more complex system architecture.&lt;/p&gt;
&lt;p&gt;When it came to AI SaaS companies like &lt;a href="https://intl.ishumei.com/#HOME"&gt;NextData&lt;/a&gt;, they embraced cloud-native technologies and Golang for rapid development and iteration, while a three-tiered microservices architecture allowed the access layer to handle user requests through HTTP with high-performance HTTP frameworks like Hertz.&lt;/p&gt;
&lt;p&gt;Upon deploying CloudWeGo, the access layer&amp;rsquo;s RPC client and the logical business layer&amp;rsquo;s RPC server &amp;amp; RPC client underwent refactoring with the Kitex framework, using the Thrift protocol to address limitations of the native Apache Thrift framework. Integration of services like rate limiting, circuit breaking, and overload protection allowed the system to adaptively resolve traffic-related stability issues.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/The_Role_of_CloudWeGo_in_Modern_Cloud_Native_Applications/5.png" alt="Image"&gt;&lt;/p&gt;
&lt;p&gt;Through case studies across diverse industries, from gaming to AI, it is evident that CloudWeGo can tackle a myriad of challenges while delivering optimal solutions, reflecting its commitment to versatility, power, and high-standard performance all in equal measure.&lt;/p&gt;
&lt;h1 id="vi-conclusion"&gt;VI. Conclusion&lt;/h1&gt;
&lt;p&gt;In the exciting landscape of cloud-native application development, CloudWeGo stands out as a versatile, powerful, and adaptable solution. This post gave an overview of the project, taking us through its introduction, the critical role it plays in the industry, and its unique propositions in the world of cloud-native application development.&lt;/p&gt;
&lt;p&gt;We have looked at how CloudWeGo&amp;rsquo;s emphasis on interoperability, scalability, and performance makes it an outstanding choice for developers. We dug into its various features, including its frameworks and use of OpenTelemetry, providing a robust foundation for modern, cloud-based applications.&lt;/p&gt;
&lt;p&gt;We also unboxed the technical depth of CloudWeGo, examining how RPC like Kitex functions, and presented real-world examples of CloudWeGo implementation across various industries including gaming, financial securities, e-commerce, and AI. Each case deeply demonstrated how embracing CloudWeGo led to improved efficiency, stability, scalability, and a dramatic reduction in operational costs.&lt;/p&gt;
&lt;p&gt;Whether you’re a seasoned developer, a passionate gamer, or an AI enthusiast, CloudWeGo opens up a universe of possibilities, unlocking new avenues for innovation and creativity. Each success story mentioned here is a testament to CloudWeGo&amp;rsquo;s capability. A shared theme across all these cases is how CloudWeGo recognizes industry-specific challenges and addresses them with tailored, innovative solutions.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a world of cloud-native possibilities to explore, and CloudWeGo can be your companion on this journey. Dive into the unique benefits, the seamless experience, and the vast community that CloudWeGo offers. Explore CloudWeGo today and reinvent the way you develop cloud-native applications.&lt;/p&gt;</description></item><item><title>Blog: Volo Release 0.8.0</title><link>https://www.cloudwego.io/blog/2023/10/23/volo-release-0.8.0/</link><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/10/23/volo-release-0.8.0/</guid><description>
&lt;p&gt;In Volo 0.8.0, we mainly refactored the Service trait and all previous places that used async_trait by using two newly stabilized features: AFIT (Async Fn In Trait) and RPITIT (Return Position Impl Trait In Traits). This not only brings a slight performance improvement, but also significantly enhances the usability of writing Service, as you can directly write async fn call.&lt;/p&gt;
&lt;h2 id="break-change"&gt;Break Change&lt;/h2&gt;
&lt;h3 id="service-trait-refactoring"&gt;Service trait refactoring&lt;/h3&gt;
&lt;p&gt;In the latest nightly, Rust&amp;rsquo;s two highly anticipated heavyweight features, AFIT (Async Fn In Trait) and RPITIT (Return Position Impl Trait In Traits), have been stabilized, which means that in two months, we can use volo in stable rust.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a brief introduction to these two features:&lt;/p&gt;
&lt;h4 id="rpitit"&gt;RPITIT&lt;/h4&gt;
&lt;p&gt;RPITIT means that we can now write impl trait in the return position of a function inside a trait, whereas previously we could only write it in regular functions, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;fetch&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;key&lt;/span&gt;: &lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can write it directly inside a trait:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Fetcher&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;fetch&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;key&lt;/span&gt;: &lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="afit"&gt;AFIT&lt;/h4&gt;
&lt;p&gt;AFIT&amp;rsquo;s feature is that we can now define async fn directly in a trait (essentially syntactic sugar for RPITIT) and no longer need to use the #[async_trait] macro, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Fetcher&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;fetch&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;key&lt;/span&gt;: &lt;span style="color:#000"&gt;FastStr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, it&amp;rsquo;s just syntactic sugar, and the compiler will convert this async fn into the form of RPITIT mentioned above.&lt;/p&gt;
&lt;p&gt;For more information, please refer to: &lt;a href="https://github.com/rust-lang/rust/pull/115822"&gt;https://github.com/rust-lang/rust/pull/115822&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="new-service-definition"&gt;New Service definition&lt;/h4&gt;
&lt;p&gt;The original definition of the new Service Trait is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A more understandable definition is as follows, and you can understand it directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compared to the previous definition, the type Future associated type is removed, and the order of lifetimes in call is changed (the previous order was &lt;code&gt;call&amp;lt;'cx, 's&amp;gt;&lt;/code&gt;, which was a typo when it was first written, and now it&amp;rsquo;s changed back).&lt;/p&gt;
&lt;h4 id="migration-guide"&gt;Migration Guide&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Update Rust compiler to the latest nightly (rustup update) and all dependencies (volo, pilota, motore) to the latest version&lt;/li&gt;
&lt;li&gt;Run cargo check to see where the errors are, such as &amp;ldquo;type Future is not a member&amp;rdquo;, &amp;ldquo;associated type Future not found&amp;rdquo;, etc. We will use the following &lt;code&gt;Service&lt;/code&gt; as an example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;LogService&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;: &lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Sync&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_grpc&lt;/span&gt;::&lt;span style="color:#000"&gt;context&lt;/span&gt;::&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;: &lt;span style="color:#204a87"&gt;Send&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;move&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;inner&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;duration_since&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tracing&lt;/span&gt;::&lt;span style="color:#000"&gt;info!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;rpc_type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;rpcAccess&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cost&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;as_micros&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;as&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;Remove the line with &lt;code&gt;type Future&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Swap the lifetimes in &lt;code&gt;fn call&amp;lt;'cx, 's&amp;gt;&lt;/code&gt; and remove the &lt;code&gt;where&lt;/code&gt; statement below&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;async&lt;/code&gt; before &lt;code&gt;fn call&lt;/code&gt;, then change &lt;code&gt;Self::Future&amp;lt;'cx&amp;gt;&lt;/code&gt; to &lt;code&gt;Result&amp;lt;Self::Response, Self::Error&amp;gt;&lt;/code&gt;, and remove the &lt;code&gt;async move&lt;/code&gt; in the function body&lt;/li&gt;
&lt;li&gt;The final modified &lt;code&gt;Service&lt;/code&gt; is as follows:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;impl&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;LogService&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;: &lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Sync&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_grpc&lt;/span&gt;::&lt;span style="color:#000"&gt;context&lt;/span&gt;::&lt;span style="color:#000"&gt;Config&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Req&lt;/span&gt;: &lt;span style="color:#204a87"&gt;Send&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;&amp;#39;static&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;inner&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;).&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;quanta&lt;/span&gt;::&lt;span style="color:#000"&gt;Instant&lt;/span&gt;::&lt;span style="color:#000"&gt;now&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;duration_since&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;tick&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;tracing&lt;/span&gt;::&lt;span style="color:#000"&gt;info!&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;rpc_type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;rpcAccess&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cost&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;elapsed&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;as_micros&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;as&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;i64&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ret&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="handler-refactoring"&gt;Handler refactoring&lt;/h3&gt;
&lt;p&gt;In previous versions, Volo generated user handlers using async_trait for ease of use, but thanks to AFIT, we can now write async fn directly in traits, so we removed async trait (reducing one Box overhead).&lt;/p&gt;
&lt;p&gt;Therefore, after upgrading, you may initially encounter errors like &amp;ldquo;lifetime parameters or bounds not match&amp;rdquo;. In this case, simply remove the &lt;code&gt;#[async_trait]&lt;/code&gt; macro.&lt;/p&gt;
&lt;h2 id="complete-release-note"&gt;Complete Release Note&lt;/h2&gt;
&lt;p&gt;For the complete Release Note, please refer to: &lt;a href="https://github.com/cloudwego/volo/compare/volo-0.5.4...volo-0.8.0"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Netpoll Release v0.5.1</title><link>https://www.cloudwego.io/blog/2023/10/18/netpoll-release-v0.5.1/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/10/18/netpoll-release-v0.5.1/</guid><description>
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/289"&gt;#289&lt;/a&gt;] fix: panic/fault when dial connection timeout&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="optimise"&gt;Optimise&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/290"&gt;#290&lt;/a&gt;] optimise: rm useless inputBarrier&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Kitex Release v0.7.2</title><link>https://www.cloudwego.io/blog/2023/09/27/kitex-release-v0.7.2/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/09/27/kitex-release-v0.7.2/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Retry: limit perncetage of retry requests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The feature improves the usability of backup requests: if a request exceeds the retry delay threshold, a backup request will be sent; but if the request succeeds within the timeout threshold, it will not be treated as an error. Therefore large amount of backup requests may be sent due to a network jitter, which increases the pressure on the server and could even cause an avanlache.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s recommended to update your current implementation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialize a RetryContainer with &lt;code&gt;retry.NewRetryContainerWithPercentageLimit()&lt;/code&gt; to limit the percentage of retry requests;&lt;/li&gt;
&lt;li&gt;Add an option &lt;code&gt;client.WithCloseCallbacks(container.Close)&lt;/code&gt; when initializing a client, in order to release relevant resources when the client is recycled.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimizations"&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send END_STREAM flag in unary call&lt;/li&gt;
&lt;li&gt;Fix grpc streaming tps decreasing and the selection logic of compressor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Long Connection Pool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;MaxIdleGlobal&lt;/code&gt; is not set, it is not limited by default, simplifying the configuration of long connection pools.&lt;/p&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade netpoll to &lt;a href="https://github.com/cloudwego/netpoll/releases/tag/v0.5.0"&gt;v0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upgrade frugal to &lt;a href="https://github.com/cloudwego/frugal/releases/tag/v0.1.8"&gt;v0.1.8&lt;/a&gt;, enable frugal when compiled on go1.21 (note: old versions of frugal are not adapted to go1.21)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;Full Release Log&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1117"&gt;#1117&lt;/a&gt;] feat(retry): support retry percentage limit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1033"&gt;#1033&lt;/a&gt;] optimize: no need to check svcInfo twice&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1115"&gt;#1115&lt;/a&gt;] optimize: rm outdated framed suggestion&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1095"&gt;#1095&lt;/a&gt;] optimize: add K_METHOD in serviceinline ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1107"&gt;#1107&lt;/a&gt;] optimize(connpool): set maxIdleGlobal to no limit if not set&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1116"&gt;#1116&lt;/a&gt;] fix: use the last rpcinfo to trace&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1104"&gt;#1104&lt;/a&gt;] fix: move limiter handler to the last of the inbound handler to get rpcinfo in custom limiter&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1103"&gt;#1103&lt;/a&gt;] fix: reset all fields of netpoll byte buffer when recycle it&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1106"&gt;#1106&lt;/a&gt;] fix(grpc): fix grpc streaming tps decreasing and the selection logic of compressor&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1114"&gt;#1114&lt;/a&gt;] fix(gRPC): client send END_STREAM flag in unary call (#1066)&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1096"&gt;#1096&lt;/a&gt;] fix(tool): add backquote to handle filepath string invalid syntax under windows os&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1098"&gt;#1098&lt;/a&gt;] fix(tool): fix import for codegen template when using slim and unknown fields&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tests"&gt;Tests:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1124"&gt;#1124&lt;/a&gt;] test: fix codegen script&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1122"&gt;#1122&lt;/a&gt;] test: add codegen test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1119"&gt;#1119&lt;/a&gt;] test(connpool): modify the idleTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1133"&gt;#1133&lt;/a&gt;] chore: update version v0.7.2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1125"&gt;#1125&lt;/a&gt;] chore: upgrade netpoll to v0.5.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1123"&gt;#1123&lt;/a&gt;] perf: replace concurrent string builder with lock&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1118"&gt;#1118&lt;/a&gt;] perf: optimize remote addr setter interface to reduce lock cost of Address()&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1110"&gt;#1110&lt;/a&gt;] chore: upgrade netpoll to v0.4.2 pre-release&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1061"&gt;#1061&lt;/a&gt;] chore: netpoll pre release v0.4.2&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1100"&gt;#1100&lt;/a&gt;] chore: enable frugal on go1.21&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Netpoll Release v0.5.0</title><link>https://www.cloudwego.io/blog/2023/09/26/netpoll-release-v0.5.0/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/09/26/netpoll-release-v0.5.0/</guid><description>
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/274"&gt;#274&lt;/a&gt;] optimize: increase first bookSize to 8KB to reduce overhead for connection read at begin&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/273"&gt;#273&lt;/a&gt;] optimize: ignore EOF when read a closed connection&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/283"&gt;#283&lt;/a&gt;] fix: protect operator dont be detach twice&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/280"&gt;#280&lt;/a&gt;] fix: detach operator race&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/278"&gt;#278&lt;/a&gt;] fix: OnRequest should wait all readable data consumed when sender close connection&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/276"&gt;#276&lt;/a&gt;] fix: compile error by miss package&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/238"&gt;#238&lt;/a&gt;] fix: close conn when server OnRequest panic&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/243"&gt;#243&lt;/a&gt;] docs: rm outdated info&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Blog: Hertz Release v0.7.0</title><link>https://www.cloudwego.io/blog/2023/09/26/hertz-release-v0.7.0/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/09/26/hertz-release-v0.7.0/</guid><description>
&lt;p&gt;In version 0.7.0 of Hertz, in addition to regular iterative optimization, we also brought several important features.&lt;/p&gt;
&lt;h2 id="refactor-binding"&gt;Refactor Binding&lt;/h2&gt;
&lt;p&gt;In version 0.7.0 of Hertz，we refactored the binding feature for Hertz&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/541"&gt;https://github.com/cloudwego/hertz/pull/541&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="description-of-refactoring"&gt;Description Of Refactoring&lt;/h3&gt;
&lt;p&gt;In version 0.7.0 of Hertz，we refactored the binding feature for Hertz to better support user requirements。This refactoring has the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistent functionality:
&lt;ul&gt;
&lt;li&gt;Binder: After the refactoring, we have implemented a default Binder within Hertz, which has the same functionality as before. The previous binding capabilities have been implemented as extensions under hertz-contrib.&lt;/li&gt;
&lt;li&gt;Validator: We are still using go-tagexpr as the default implementation to ensure consistent functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Converged configuration:
&lt;ul&gt;
&lt;li&gt;Before the refactoring, the behavior of parameter binding was mostly configured through global parameters, which could lead to conflicts when multiple components were configured.&lt;/li&gt;
&lt;li&gt;After the refactoring, the binding and validation configurations are injected into the Hertz Engine through &lt;code&gt;BindConfig&lt;/code&gt; and &lt;code&gt;ValidateConfig&lt;/code&gt; struct using the &amp;lsquo;WithOption&amp;rsquo; function. This not only unifies the configuration format but also avoids configuration conflicts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customizable Binder and Validator:
&lt;ul&gt;
&lt;li&gt;Custom Binder: You can use &amp;ldquo;WithCustomBinder&amp;rdquo; to inject your own custom Binder. We have already provided an extension called hertz-contrib/binding/go_tagexpr.&lt;/li&gt;
&lt;li&gt;Custom Validator: You can use &amp;ldquo;WithCustomValidator&amp;rdquo; to inject your own custom Validator. We have also extended go-playground/validator for this purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance improvements: The refactoring has resulted in improved binding performance compared to the previous version. Please refer to the benchmark data below for more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;package&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;import&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/app/server/binding&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;github.com/cloudwego/hertz/pkg/app/server&amp;#34;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bindConfig&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;binding&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewBindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;bindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;LooseZeroMode&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;true&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;New&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;WithBindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;bindConfig&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;...&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Spin&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="benchmark-data"&gt;Benchmark Data&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz-benchmark/tree/main/binding"&gt;https://github.com/cloudwego/hertz-benchmark/tree/main/binding&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="full-release-note"&gt;Full Release Note&lt;/h2&gt;
&lt;p&gt;The complete Release Note can refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.7.0"&gt;https://github.com/cloudwego/hertz/releases/tag/v0.7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hz(scaffolding): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.7.0"&gt;https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.7.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.7.0</title><link>https://www.cloudwego.io/blog/2023/08/14/kitex-release-v0.7.0/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/08/14/kitex-release-v0.7.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. gRPC Compression Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implemented compression support for Kitex gRPC, allowing compression methods like gzip to reduce payload size.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. GLS (Goroutine Local Storage)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Utilized the &lt;a href="https://github.com/cloudwego/localsession"&gt;local-session&lt;/a&gt; component for context propagation in fallback requests, addressing the issue of broken microservice chains caused by missing ctx.&lt;/p&gt;
&lt;h3 id="optimizations"&gt;Optimizations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Unserialized Unknown Fields&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implemented unserialization of unknown fields, resulting in a performance improvement of approximately 6x to 7x on FastCodec. See details in &lt;a href="https://github.com/cloudwego/kitex/pull/1017"&gt;#1017&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Integration with DynamicGo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Integrated &lt;a href="https://github.com/cloudwego/dynamicgo"&gt;dynamicgo&lt;/a&gt; into Kitex&amp;rsquo;s generic module to enhance performance of JSON/HTTP generic invocations (+50% to 200%).&lt;/p&gt;
&lt;h3 id="others"&gt;Others&lt;/h3&gt;
&lt;p&gt;Upgraded Thriftgo library dependency to v0.3.0, adding support for Thriftgo reflection, enabling runtime access to IDL metadata.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;Feature:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1053"&gt;#1053&lt;/a&gt;] feat(retry): support to distinguish local retry request&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1058"&gt;#1058&lt;/a&gt;] feat(retry): support delete retry policy dynamically&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1000"&gt;#1000&lt;/a&gt;] feat(grpc): support grpc compress&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1018"&gt;#1018&lt;/a&gt;] feat: use local-session to backup request context in case of missing&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1045"&gt;#1045&lt;/a&gt;] feat(generic): support base64 codec for map generic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1035"&gt;#1035&lt;/a&gt;] feat(config): provide the ability to dynamically configure the rpctimeout config on the method hierarchy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/825"&gt;#825&lt;/a&gt;] feat(generic): integrate dynamicgo into kitex generic call&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1019"&gt;#1019&lt;/a&gt;] feat(lb): interleaved weighted round-robin load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1064"&gt;#1064&lt;/a&gt;] optimize: check header max size when ttheader encode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1017"&gt;#1017&lt;/a&gt;] optimize: implement unknown field function without serialization&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1036"&gt;#1036&lt;/a&gt;] optimize(protobuf): ignore err when (un)marshal empty req/resp&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1056"&gt;#1056&lt;/a&gt;] optimize(tool): optimize struct ref&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1043"&gt;#1043&lt;/a&gt;] optimize: add method info to the error message of the server handler panic for easy troubleshooting&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1025"&gt;#1025&lt;/a&gt;] optimize: use Tags of ServerBasicInfo as default Tags of RegistryInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1020"&gt;#1020&lt;/a&gt;] optimize: add nil check for MethodInfo which get from ServiceInfo in client.Call to ignore panic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1073"&gt;#1073&lt;/a&gt;] fix: fix failure retryer dump panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1067"&gt;#1067&lt;/a&gt;] fix: slim template with deepcopy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1055"&gt;#1055&lt;/a&gt;] fix: ignore SIGHUP when run with nohup&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1048"&gt;#1048&lt;/a&gt;] fix(retry): keep the behavior of retry policy consistent between initing and updating&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1047"&gt;#1047&lt;/a&gt;] fix(tool): cli warning for unknown suffix&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1038"&gt;#1038&lt;/a&gt;] fix(config): correct the function signature of the rpcinfo.TimeoutProvider implementation&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1034"&gt;#1034&lt;/a&gt;] fix(generic): add case int16 into buildinTypeIntoString&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1023"&gt;#1023&lt;/a&gt;] fix(generic): avoid dead-loop when marshal self-referenced struct&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1028"&gt;#1028&lt;/a&gt;] fix:modify .licenserc.yaml&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1012"&gt;#1012&lt;/a&gt;] fix: skip frugal on go 1.21&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/992"&gt;#992&lt;/a&gt;] fix(grpc): use mcache to fix memory leak caused by grpc codec buffer to reuse memory incorrectly&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/994"&gt;#994&lt;/a&gt;] fix(tool): fix kitex tool git repo pulling logic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1074"&gt;#1074&lt;/a&gt;] chore: update thriftgo to v0.3.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1031"&gt;#1031&lt;/a&gt;] chore: remove wechat group in readme&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1008"&gt;#1008&lt;/a&gt;] chore: update dynamicgo to v0.1.1&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1006"&gt;#1006&lt;/a&gt;] chore: remove unnecessary replace for frugal&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/1007"&gt;#1007&lt;/a&gt;] chore: upgrade netpoll to v0.4.1&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.6.1</title><link>https://www.cloudwego.io/blog/2023/06/19/kitex-release-v0.6.1/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/06/19/kitex-release-v0.6.1/</guid><description>
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="hotfix"&gt;Hotfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/988"&gt;#988&lt;/a&gt;] hotfix(code_gen): fix the problem of code generation with slim template failure&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: CloudWeGo: A leading practice for building enterprise cloud native middleware!</title><link>https://www.cloudwego.io/blog/2023/06/15/cloudwego-a-leading-practice-for-building-enterprise-cloud-native-middleware/</link><pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/06/15/cloudwego-a-leading-practice-for-building-enterprise-cloud-native-middleware/</guid><description>
&lt;h2 id="cloudwego-overview"&gt;CloudWeGo Overview&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.cloudwego.io/"&gt;CloudWeGo&lt;/a&gt; is a set of microservices middleware developed by ByteDance that can be used to quickly build enterprise-class cloud-native architectures. It is a collection of high-performance, high-extensible, and highly-reliable projects that are focused on microservices communication and governance. It contains many components, including the RPC framework &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;, the HTTP framework &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;, the basic network library Netpoll, inter-process communication library &lt;a href="https://github.com/cloudwego/shmipc-go"&gt;shmipc&lt;/a&gt;, Rust-based RPC framework &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt; etc.&lt;/p&gt;
&lt;h2 id="cloudwego-background"&gt;CloudWeGo Background&lt;/h2&gt;
&lt;p&gt;ByteDance uses Golang as its main development language, and supports the reliable communication of tens of thousands of Golang microservices. With our experience in microservices having undergone a massive traffic, we decided to offer open source software in order to enrich the community’s ecology and launched CloudWeGo in September 2021. CloudWeGo is not only an external open source project, but also a real ultra-large-scale enterprise-level project. We are looking forward to enriching the Golang product system of the cloud native community through CloudWeGo and helping other companies to build cloud-native architectures in a rapid and convenient way. We also hope to attract developers in the open source community, to maintain and improve this project together, provide support for multiple scenarios, and enrich product capabilities. Because the projects under CloudWeGo depend on many internal basic tool libraries, we also open sourced the basic Golang tool libraries used internally, and maintain them in &lt;a href="https://github.com/bytedance/gopkg"&gt;bytedance/gopkg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another language that we are committed to advancing is the Rust language that delivers exceptional performance, safety, and low-level control capabilities. Through our open-source projects and contributions, ByteDance aims to provide developers, enterprises, and Rustaceans with robust support in developing RPC microservices and building cloud-native distributed systems. ByteDance&amp;rsquo;s contribution includes the development of Volo, a lightweight, high-performance, scalable, and user-friendly Rust RPC framework. Leveraging the latest features of Rust, Volo showcases exceptional performance and efficiency. ByteDance has extensively used Volo within its own infrastructure, implementing multiple business and foundational components, surpassing expectations and highlighting its superiority compared to similar solutions written in other languages.&lt;/p&gt;
&lt;p&gt;ByteDance&amp;rsquo;s dedication to Rust extends beyond Volo and Monoio. Through our commitment to simplicity and user-friendly tools, such as the Volo command-line tool, ByteDance actively contributes to lowering the barriers for developers to adopt Rust and leverage its full potential.&lt;/p&gt;
&lt;h2 id="key-features"&gt;Key Features&lt;/h2&gt;
&lt;p&gt;Some of the key features of CloudWeGo include:&lt;/p&gt;
&lt;h3 id="high-performance"&gt;&lt;strong&gt;High performance&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;Highly performant nature of CloudWeGo projects stems from our implementation of asynchronous RPC, streaming RPC, event-driven programming, and support for protocols like HTTP/2. These design choices and features work together to deliver superior speed, responsiveness, and efficiency, enabling CloudWeGo projects to handle demanding workloads and achieve excellent performance benchmarks.&lt;/p&gt;
&lt;h3 id="high-extensibility"&gt;&lt;strong&gt;High extensibility&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;CloudWeGo is designed to allow users to customize and expand its functionality according to their specific requirements. CloudWeGo achieves this by providing a modular or layered design that offers a set of interfaces and default implementation options. By utilizing a modular design, CloudWeGo, as seen in Kitex and Hertz, allows users to extend or inject their own implementations into the framework. This means that developers have the flexibility to tailor the behavior of the framework to suit their needs. They can replace or enhance default implementations with their own custom implementations, enabling them to adapt CloudWeGo to specific use cases or integrate seamlessly with other libraries and tools.&lt;/p&gt;
&lt;h3 id="high-reliability"&gt;&lt;strong&gt;High reliability&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;CloudWeGo prioritizes stability and dependability in its projects, providing a reliable framework for developers and enterprises. Through rigorous quality assurance, including code review and testing, potential issues are identified and addressed early on before they impact production environments. CloudWeGo as a whole emphasizes the prevention of any potential losses or disruptions. This is achieved through careful PR integration, extensive testing, and continuous monitoring. CloudWeGo optimizes projects to handle high workloads, ensuring stability and reliability even under heavy load. Feedback from the community helps drive improvements and prompt issue resolution. By adhering to strict quality standards, CloudWeGo projects strive to deliver stable and reliable software.&lt;/p&gt;
&lt;h3 id="microservices-communication-and-governance"&gt;&lt;strong&gt;Microservices communication and governance&lt;/strong&gt;:&lt;/h3&gt;
&lt;p&gt;CloudWeGo&amp;rsquo;s Governance feature encompasses service governance modules such as service registry, discovery, load balancing, circuit breaker, rate limiting, retry, monitoring, tracing, logging, and diagnosis. These modules enhance the management, control, and reliability of services within the CloudWeGo framework. They enable dynamic service discovery, load distribution, fault tolerance, performance optimization, and comprehensive monitoring and diagnostics. The Governance feature ensures efficient and reliable service operations in the CloudWeGo ecosystem.&lt;/p&gt;
&lt;p&gt;Here are some of the benefits of using CloudWeGo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed: CloudWeGo offers the ability to accelerate application development by providing a set of pre-built components and libraries. These components and libraries provide essential functionalities, such as networking, database integration, security, and more. They are designed to be easily integrated into applications, reducing the need for building complex functionalities from scratch. With CloudWeGo&amp;rsquo;s speedy development ecosystem, developers can focus on their application&amp;rsquo;s core logic, leverage existing components, and deliver robust solutions in a shorter timeframe. This enables faster time-to-market, increased development efficiency, and ultimately enhances the overall speed of application development.&lt;/li&gt;
&lt;li&gt;Cost savings: By adopting CloudWeGo and its projects such as Kitex, Hertz, Sonic, and others, users can benefit from significant cost savings. This is achieved through reduced CPU and memory consumption compared to older frameworks or similar projects. CloudWeGo&amp;rsquo;s modern framework is designed to be highly optimized and efficient, resulting in minimized software development overhead. Internally at ByteDance, we moved to using the modern high-performance framework that has proven instrumental in saving substantial resources. With CloudWeGo, users can optimize their resource allocation and achieve cost efficiency while leveraging the powerful capabilities and features provided by the framework.&lt;/li&gt;
&lt;li&gt;Security: CloudWeGo prioritizes security, offering a range of features and measures to ensure application security. The framework incorporates secure design principles, implementing industry best practices. It provides built-in authentication and authorization mechanisms for secure user access control. By leveraging the Rust programming language, CloudWeGo benefits from its inherent security advantages, such as strong type safety and memory safety, reducing the risk of common vulnerabilities. The open-source nature of CloudWeGo allows for community contributions and wider security audits, ensuring continuous improvement and prompt vulnerability mitigation. With CloudWeGo, developers can build applications with confidence, knowing that security is prioritized at every level of the framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="use-cases"&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;CloudWeGo can be used to build a variety of applications, including microservices-based applications, cloud-native applications, real-time applications, IoT applications, and other applications.
Some of the applications include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microservices-based applications: CloudWeGo provides a comprehensive set of features for microservices communication and governance, such as service discovery, routing, and orchestration. This makes it easy to build and manage microservices-based applications.&lt;/li&gt;
&lt;li&gt;Cloud-native applications: CloudWeGo is designed to be used in cloud-native environments. It can be used to build applications that are scalable, reliable, and secure.&lt;/li&gt;
&lt;li&gt;Real-time applications: CloudWeGo supports streaming and asynchronous messaging. This makes it a good choice for building real-time applications, such as chat applications and streaming media applications.&lt;/li&gt;
&lt;li&gt;Other applications: CloudWeGo can be used to build a variety of other applications, such as web applications, mobile applications, gaming applications and enterprise applications. Let&amp;rsquo;s explore some of the industry adoption:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gaming&lt;/strong&gt;: CloudWeGo offers several benefits for the gaming industry. It enables game developers to scale their infrastructure to handle increased player demands, optimize performance, and simplify their business logic through service splitting. With components like current limiting, monitoring, and service registration/discovery, CloudWeGo ensures efficient resource utilization, enhanced responsiveness, and seamless coordination between game components. Additionally, the integration with OpenTelemetry provides valuable monitoring and diagnostics capabilities for developers to optimize their game services and deliver an exceptional gaming experience. Overall, CloudWeGo empowers the gaming industry by providing a scalable, efficient, and streamlined infrastructure for game development and operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: In the security industry, CloudWeGo&amp;rsquo;s adoption, specifically through the Kitex framework, brings significant benefits. Organizations can establish observability systems to monitor and analyze the performance of security services. This enables the identification of potential issues and ensures smooth operation. CloudWeGo also offers solutions for service stress testing, allowing organizations to optimize performance and ensure stability during high-load scenarios. Additionally, CloudWeGo addresses challenges related to different connection types within Kubernetes clusters, enabling efficient and secure communication between services. The framework provides specific solutions tailored to the security industry, helping organizations overcome obstacles and optimize their security infrastructure effectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E-commerce&lt;/strong&gt;: CloudWeGo&amp;rsquo;s Kitex framework offers a powerful solution for e-commerce companies dealing with high-concurrency and high-performance challenges. By integrating Kitex with technologies like Istio, businesses can significantly improve their ability to handle peak traffic and ensure synchronized order processing. This enables efficient communication with multiple e-commerce platforms and prevents issues like overselling. The adoption of CloudWeGo and Kitex, along with the use of a cloud-native service mesh like Istio, enhances the overall performance, scalability, and reliability of e-commerce systems, providing businesses with a competitive edge in the rapidly evolving e-commerce industry.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;To begin your journey with CloudWeGo projects, you can refer to our &lt;a href="https://www.cloudwego.io/docs/"&gt;comprehensive documentation&lt;/a&gt;, which provides step-by-step instructions. Additionally, we regularly publish insightful blogs on various topics, including the latest innovations in &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/shmipc-go"&gt;Shmipc&lt;/a&gt;, and &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;. We also publish best practices blogs and have a dedicated blog that explores best practices for using &lt;a href="https://www.cncf.io/blog/2023/01/11/kitex-proxyless-practice-traffic-lane-implementation-with-istio-and-opentelemetry/"&gt;Kitex without a proxy&lt;/a&gt;. These resources serve as valuable references to help you make the most of CloudWeGo&amp;rsquo;s offerings and stay up-to-date with the latest developments in the ecosystem.&lt;/p&gt;
&lt;h2 id="contributing"&gt;Contributing&lt;/h2&gt;
&lt;p&gt;The CloudWeGo project is subdivided into subprojects under:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; (Kitex &amp;amp; Kitex ecosystem &amp;amp; kitex-contrib)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; (Hertz &amp;amp; Hertz ecosystem &amp;amp; hertz-contrib)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/netpoll"&gt;Netpoll&lt;/a&gt; (Netpoll &amp;amp; Netpoll ecosystem)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/shmipc-go"&gt;Shmipc&lt;/a&gt; (shmipc-spec &amp;amp; shmipc-go)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt; (Volo &amp;amp; Volo ecosystem &amp;amp; volo-rs &amp;amp; Motore &amp;amp; Pilota)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/community"&gt;Website &amp;amp; Docs&lt;/a&gt; (cloudwego.github.io &amp;amp; community)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kitex is equipped with built-in governance strategies and expansion interfaces for frictionless integration into the microservice system. Hertz is a Go HTTP framework with high-performance and strong-extensibility for building micro-services. Netpoll is aimed at scenarios that demand high performance on RPC scenarios. Shmipc is a high performance inter-process communication library, built on Linux&amp;rsquo;s shared memory technology and uses unix or tcp connection to do process synchronization and finally implements zero copy communication across inter-processes. Volo is a high-performance and strong-extensibility Rust RPC framework that helps developers build microservices. Each component of CloudWeGo can be used separately.&lt;/p&gt;
&lt;p&gt;We welcome you to &lt;a href="https://github.com/cloudwego/community/blob/main/CONTRIBUTING.md"&gt;contribute&lt;/a&gt; by submitting issues and PRs to build CloudWeGo together. Contributing to CloudWeGo involves various roles and responsibilities within the project&amp;rsquo;s GitHub organization. The roles include Member, Committer, Reviewer, Approver, and Maintainer. Members are active contributors in the community and are expected to participate in discussions and make multiple contributions to the project. Committers are active code contributors and play a role in reviewing and approving code contributions. Reviewers have expertise in the codebase and provide feedback on contributions. Approvers review and approve code contributions, ensuring their holistic acceptance. Maintainers are responsible for setting technical direction, making design decisions, and ensuring the overall health of a subproject. The responsibilities and privileges of each role vary, but they all contribute to the growth and success of CloudWeGo. The responsibilities of contributor roles in CloudWeGo are outlined in our &lt;a href="https://github.com/cloudwego/community/blob/main/COMMUNITY_MEMBERSHIP.md"&gt;community membership document&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are excited for more developers to join, and also look forward to CloudWeGo helping more and more companies quickly build cloud-native architectures. Feel free to raise an issue in &lt;a href="https://github.com/cloudwego"&gt;Github&lt;/a&gt; if you have any questions. Furthermore, you can join our &lt;a href="https://discord.gg/jceZSE7DsW"&gt;Discord&lt;/a&gt; to keep updated with the latest news.&lt;/p&gt;
&lt;h2 id="community-and-support"&gt;Community and Support&lt;/h2&gt;
&lt;p&gt;At ByteDance, we try to make the projects friendly to external users, and our internal projects will also use this open source project as a library for iterative development. CloudWeGo follows a key principle of maintaining one set of code internally and externally, iterating them as a whole. It has been gratifying to see Kitex gain 6000 stars, Hertz gain 3800+ stars and Netpoll gain 3600+ stars since its launch. More about all these projects can be found under our &lt;a href="https://github.com/cloudwego"&gt;cloudwego github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="maintenance"&gt;Maintenance&lt;/h3&gt;
&lt;p&gt;A complete microservice system builds upon a basic cloud ecosystem. No matter how the microservices are developed; based on the public cloud, a private cloud or your own infrastructure, additional services (including service governance platform, monitoring, tracing, service registry and discovery, configuration and service mesh etc) and some customized standards are needed to provide better service governance. At Bytedance, we have complete internal services to support the microservice system, but these services can not be open sourced in the short term. So, how will CloudWeGo maintain a set of codes internally and externally, and iterate them as a whole?&lt;/p&gt;
&lt;p&gt;Projects in CloudWeGo are not coupled with internal ecosystem. For example, Netpoll is directly migrated to open source libraries, and our internal dependencies are adjusted to open source libraries. Kitex’s code is split into two parts, including the core of Kitex which has been migrated to the open source library, and the encapsulated internal library which will provide transparent upgrades for internal users. For open source users who use Kitex, they can also extend Kitex and integrate Kitex into their own microservice system. We hope, and expect, that more developers will contribute their own extensions to &lt;a href="https://github.com/kitex-contrib"&gt;kitex-contrib&lt;/a&gt;, &lt;a href="https://github.com/hertz-contrib"&gt;hertz-contrib&lt;/a&gt; and &lt;a href="https://github.com/volo-rs"&gt;volo-rs&lt;/a&gt; providing help and convenience for more users.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;CloudWeGo is a rapidly growing project with a large and active community. It is a great choice for developers who are looking to build enterprise-class cloud native applications. If you are looking for a high-performance, extensible, and reliable middleware solution for your cloud native applications, then CloudWeGo is a great choice.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/logo.png" alt="image"&gt;&lt;/p&gt;</description></item><item><title>Blog: Netpoll Release v0.4.0</title><link>https://www.cloudwego.io/blog/2023/06/14/netpoll-release-v0.4.0/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/06/14/netpoll-release-v0.4.0/</guid><description>
&lt;h2 id="feature"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/249"&gt;#249&lt;/a&gt;] feat: add Detach function to support detach connection from its poller&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/250"&gt;#250&lt;/a&gt;] optimize: WriteDirect implementation to avoid panic and duplicate creation of redundant LinkBufferNode when remainLen is 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bugfix"&gt;Bugfix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/256"&gt;#256&lt;/a&gt;] fix: close the poll that has already been created when calling the openPoll fails&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/251"&gt;#251&lt;/a&gt;] fix: err to e0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/226"&gt;#226&lt;/a&gt;] fix: poller read all data before connection close&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/237"&gt;#237&lt;/a&gt;] fix: shard queue state closed mistake&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/189"&gt;#189&lt;/a&gt;] fix: close connection when readv syscall return 0, nil&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/233"&gt;#233&lt;/a&gt;] refactor: simplify race and norace event loop&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.6.0</title><link>https://www.cloudwego.io/blog/2023/06/14/kitex-release-v0.6.0/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/06/14/kitex-release-v0.6.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. GRPC Metainfo Pass Through&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The gRPC client sets the header to ctx by default, and external methods can use &lt;code&gt;GetHeaderMetadataFromCtx&lt;/code&gt; to obtain meta information. It can be used to obtain meta information within transmeta and set it to rpcinfo, or to obtain header information within middlewares.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Kitex configuration module refactoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added config items for retry, circuit breaker, timeout, and flow limiting to support [configmanager] (&lt;a href="https://github.com/cloudwego/configmanager"&gt;https://github.com/cloudwego/configmanager&lt;/a&gt;) Middleware defined interfaces to support extended integration with external configuration centers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kitex - Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for inserting deep copy function of an object in thrift generation code for deep copying source objects to destination objects. The use method is to add &lt;code&gt;-deep-copy-api&lt;/code&gt; parameter to the kitex command;&lt;/li&gt;
&lt;li&gt;Support for inserting IDL descriptor registration code into thrift generation code, which is used to register IDL descriptor information into the &lt;code&gt;github.com/cloudwego/kitex/pkg/reflection/thrift&lt;/code&gt; package after loading the corresponding generated code at runtime, and obtain descriptor information through the exposed functions. The use method is to add &lt;code&gt;generate-reflection-info=true&lt;/code&gt; to the &lt;code&gt;thrift&lt;/code&gt; parameter of kitex command, such as &lt;code&gt;kitex -thrift generate-reflection-info=true&lt;/code&gt;&amp;hellip; Kitex only supports IDL descriptor information registration in v1.12.0, richer query interfaces will be released in subsequent versions, and IDL descriptor registration function generation will also be modified to default generation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimization"&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Refactor the detection server to support detection of multiple protocols&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The old version of the detection server only supports http2 as the detection protocol. The v1.12.0 version supports users to pass-in the &lt;code&gt;remote.ServerTransHandlerFactory&lt;/code&gt; corresponding to the &lt;code&gt;remote.ServerTransHandler&lt;/code&gt; which implement &lt;code&gt;detection.DetectableServerTransHandler&lt;/code&gt; interface as indefinite parameters, and cooperate with the default &lt;code&gt;remote.ServerTransHandler&lt;/code&gt; to handle unmatched protocols to achieve a Kitex Server compatible with multiple protocols.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Consistency hash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Function &lt;code&gt;buildVirtualNodes&lt;/code&gt; in Kitex consistency hash load balancer uses &lt;code&gt;virtualFactorLen&lt;/code&gt; to initialize a bytes array, and there may be insufficient space to accommodate the VirtualNodeLen number, resulting in the address part being overwritten.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Long Connection Pool Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fix the issue that the records that long connection pool reuses connections successfully didn&amp;rsquo;t report.&lt;/p&gt;
&lt;h3 id="other"&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Upgrade netpoll library dependency to v0.4.0 and support for [configmanager] ( &lt;a href="https://github.com/cloudwego/configmanager"&gt;https://github.com/cloudwego/configmanager&lt;/a&gt; ) v0.2.0.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="feature-1"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/923"&gt;#923&lt;/a&gt;] feat(grpc): grpc client set header and trailer to context by default and provide api to get header from ctx&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/891"&gt;#891&lt;/a&gt;] feat: support to service-inline rpc client and server, which can transfer the rpc call as func call. The feature needs to be used with the generation tool&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/946"&gt;#946&lt;/a&gt;] feat: default server handler support executing Read function by trans pipeline&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/936"&gt;#936&lt;/a&gt;] feat(config): add config items for retry/cb/rcptimeout/limiter&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/924"&gt;#924&lt;/a&gt;] [&lt;a href="https://github.com/cloudwego/kitex/pull/939"&gt;#939&lt;/a&gt;] feat(code_gen): support generating deepcopy apis&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/926"&gt;#926&lt;/a&gt;] feat: support thrift reflection info registry&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/897"&gt;#897&lt;/a&gt;] feat: support loop_service in custom template&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/961"&gt;#961&lt;/a&gt;] optimize(tool): optimize kitex tool tpl with -use param&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/966"&gt;#966&lt;/a&gt;] optimize(ttheader): add type check for headerFlags of TTheader&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/919"&gt;#919&lt;/a&gt;] optimize: replace go func with GoFunc to avoid panic&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/960"&gt;#960&lt;/a&gt;] optimize: make stats package public to reuse it in expanded repo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/955"&gt;#955&lt;/a&gt;] optimize: remove redundant onRead error log in gonet transerver&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/954"&gt;#954&lt;/a&gt;] optimize: dont return error when transHandler not implement graceful shutdown&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/941"&gt;#941&lt;/a&gt;] optimize(callopt): optimize the debug info of callopt to reduce the possibility of slice grow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/963"&gt;#963&lt;/a&gt;] fix(generic): generic-map writeInt8 fails on byte&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/901"&gt;#901&lt;/a&gt;] fix(mux): mux connection asynccallback dont create new goroutine and server wait all crrst packets received by client&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/921"&gt;#921&lt;/a&gt;] fix(loadbalance): fix consisthash byte[] length&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/922"&gt;#922&lt;/a&gt;] fix(mux): fix the problem that output unreasonable error when exit if enable mux and use Kitex Protobuf&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/927"&gt;#927&lt;/a&gt;] fix(connpool): long connection pool reports reuse success using reporter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/958"&gt;#958&lt;/a&gt;] refactor(errorHandler): refactor the definition of error handler to get more information to handle error&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/943"&gt;#943&lt;/a&gt;] refactor(client): refactor client.Call to improve readability&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/560"&gt;#560&lt;/a&gt;] refactor: refactor server detection trans handler to support custom registration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tests"&gt;Tests:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/900"&gt;#900&lt;/a&gt;] test(generic): add thrift reflection (using dynamicgo) generic call example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/976"&gt;#976&lt;/a&gt;] chore: upgrade netpoll to v0.4.0 and thriftgo to v0.2.11&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/956"&gt;#956&lt;/a&gt;] chore: update configmanager version to v0.2.0&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/948"&gt;#948&lt;/a&gt;] chore: format with goimports -local github.com/cloudwego/kitex&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.5.3</title><link>https://www.cloudwego.io/blog/2023/04/21/kitex-release-v0.5.3/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/04/21/kitex-release-v0.5.3/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Failure retry：add configuration to support disable timeout retry when do failure retry, which is for the non-idempotent request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codegen tool：support codegen in windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error code: fine grained rpc timeout error code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thrift Fast Codec: support unknown fields&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background of &amp;ldquo;unknown fields&amp;rdquo;: In Thrift, adding fields in the IDL is transparent to the party that has not updated the IDL. Updating the IDL and generating code is necessary to access new fields, which requires all downstream nodes to upgrade when a node on the invocation Chain updates the IDL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Unknown fields&amp;rdquo; supports retaining unrecognized fields. For fields that do not exist in the IDL, they are read and set in the &lt;code&gt;_unknownFields&lt;/code&gt; field of the struct.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage: &lt;code&gt;kitex -thrift keep_unknown_fields your.thrift&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="fix"&gt;&lt;strong&gt;Fix&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Result retry: fix the issue that the result retry becomes invalid after failure retry policy is modified dynamically&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id="feature-1"&gt;Feature:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/887"&gt;#887&lt;/a&gt;] feat(retry): add configuration to support disable timeout retry when do failure retry, which is for the non-idempotent request&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/881"&gt;#881&lt;/a&gt;] feat(tool): support codegen in windows&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/880"&gt;#880&lt;/a&gt;] feat(rpctimeout): fine grained rpc timeout error code&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/872"&gt;#872&lt;/a&gt;] feat(thrift): support unknown fields in fast codec&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/884"&gt;#884&lt;/a&gt;] optimize(rpcinfo): RPCInfo.To().Tag() use instance tag instead of remoteinfo tag firstly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix-1"&gt;Fix:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/896"&gt;#896&lt;/a&gt;] fix(remoteinfo): fix the race problem caused by non-deepcopy CopyFrom of remoteinfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/892"&gt;#892&lt;/a&gt;] fix(grpc): comment error log for the error of ReadFrame.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/889"&gt;#889&lt;/a&gt;] fix(retry): result retry doesn’t work after failure retry policy is modified dynamically&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/866"&gt;#866&lt;/a&gt;] fix(grpc): no need to set context return by sendMsg/recvMsg to the context of stream&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/898"&gt;#898&lt;/a&gt;] chore: modify template for PR to check the modification of user doc&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/854"&gt;#854&lt;/a&gt;] style(nphttp2): keep struct receiver name same&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Introducing Shmipc: A High Performance Inter-process Communication Library</title><link>https://www.cloudwego.io/blog/2023/04/04/introducing-shmipc-a-high-performance-inter-process-communication-library/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/04/04/introducing-shmipc-a-high-performance-inter-process-communication-library/</guid><description>
&lt;p&gt;We are excited to introduce an open source project - &lt;strong&gt;Shmipc&lt;/strong&gt;, a &lt;strong&gt;high performance inter-process communication library&lt;/strong&gt; developed by ByteDance.
It is built on Linux&amp;rsquo;s &lt;strong&gt;shared memory technology&lt;/strong&gt; and uses unix or tcp connection to do process synchronization and finally implements
zero copy communication across inter-processes. In IO-intensive or large-package scenarios, it has better performance.&lt;/p&gt;
&lt;p&gt;There isn&amp;rsquo;t much information on this area, so the open-source of Shmipc would like to contribute by providing a valuable reference.
In this blog, we would like to cover some of the main &lt;strong&gt;design ideas&lt;/strong&gt; of Shmipc, the &lt;strong&gt;problems&lt;/strong&gt; encountered during the adoption process and the subsequent &lt;strong&gt;evolution plan&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design: &lt;a href="https://github.com/cloudwego/shmipc-spec"&gt;https://github.com/cloudwego/shmipc-spec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementation in Golang: &lt;a href="https://github.com/cloudwego/shmipc-go"&gt;https://github.com/cloudwego/shmipc-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="background-and-motivation"&gt;Background and Motivation&lt;/h2&gt;
&lt;p&gt;At ByteDance, Service Mesh has undergone a lot of performance optimization during its adoption and evolution. The &lt;strong&gt;traffic interception&lt;/strong&gt; of Service Mesh is
achieved by &lt;strong&gt;inter-process communication&lt;/strong&gt; between the mesh proxy and the microservice framework&amp;rsquo;s &lt;strong&gt;agreed-upon addresses&lt;/strong&gt;, which performs better than iptables solutions.
However, conventional optimization methods no longer bring significant performance improvements. Therefore, we shifted our focus to inter-process communication, and &lt;strong&gt;Shmipc&lt;/strong&gt; was born.&lt;/p&gt;
&lt;h2 id="design-ideas"&gt;Design Ideas&lt;/h2&gt;
&lt;h3 id="zero-copy"&gt;Zero Copy&lt;/h3&gt;
&lt;p&gt;The two most widely used inter-process communication methods in production environments are unix domain sockets and TCP loopback (localhost:$PORT),
and their performance differences are not significant from the benchmark. From a technical standpoint, both require copying communication data between user space and kernel space.
In the RPC scenario, there are four memory copies in inter-process communication during a single RPC process, with two copies in the request path and two copies in the response path.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Shmipc_Open_Source/zero_copy.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Although sequential copying on modern CPUs is very fast, eliminating up to four memory copies can still save CPU usage in large packet scenarios.
With the zero-copy feature based on shared memory communication, we can easily achieve this. However, to achieve zero-copy, there will be many additional tasks surrounding shared memory itself, such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In-depth serialization and deserialization of microservice frameworks. We hope that when a Request or Response is serialized, the corresponding binary data is already in shared memory,
rather than being serialized to a non-shared memory buffer and then copied to a shared memory buffer.&lt;/li&gt;
&lt;li&gt;Implementing a process synchronization mechanism. When one process writes data to shared memory, another process does not know about it, so a synchronization mechanism is needed for notification.&lt;/li&gt;
&lt;li&gt;Efficient memory allocation and recycling. Ensuring that the allocation and recycling mechanism of shared memory across processes has a low overhead to avoid masking the benefits of zero-copy features.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="synchronization-mechanism"&gt;Synchronization Mechanism&lt;/h3&gt;
&lt;p&gt;Consider different scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On-demand real-time synchronization. Suitable for online scenarios that are extremely sensitive to latency. Notify the other process after each write operation is completed.
There are many options to choose from on Linux, such as TCP loopback, unix domain sockets, event fd, etc. Event fd has slightly better benchmark performance,
but passing fd across processes introduces too much complexity. The performance improvement it brings is not very significant in IPC, and the trade-off between
complexity and performance needs to be carefully considered. At ByteDance, we chose unix domain sockets for process synchronization.&lt;/li&gt;
&lt;li&gt;Periodic synchronization. Suitable for offline scenarios that are not sensitive to latency. Access the custom flag in shared memory through high-interval sleep
to determine whether there is data written. However, note that sleep itself also requires a system call and has greater overhead than reading and writing with unix domain sockets.&lt;/li&gt;
&lt;li&gt;Polling synchronization. Suitable for scenarios where latency is very sensitive but the CPU is not as sensitive. You can complete it by polling the custom flag in shared memory on a single core.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall, on-demand real-time synchronization and periodic synchronization require system calls to complete,
while polling synchronization does not require system calls but requires running a CPU core at full capacity under normal circumstances.&lt;/p&gt;
&lt;h3 id="batching-io-operations"&gt;Batching IO Operations&lt;/h3&gt;
&lt;p&gt;In online scenarios, real-time synchronization is required on demand for each data write, which requires a process synchronization operation (Step 4 in the figure below).
Although the latency issue is resolved, to demonstrate the benefits of zero-copy on performance, the number of packets that require interaction needs to be greater than a relatively large threshold.
Therefore, an IO queue was constructed in shared memory to complete batch IO operation, enabling benefits to be demonstrated even in small packet IO-intensive scenarios.&lt;/p&gt;
&lt;p&gt;The core idea is that when a process writes a request to the IO queue, it notifies the other process to handle it.
When the next request comes in(corresponding to IO Event 2~N in the figure, an IO Event can independently describe the position of a request in shared memory),
if the other process is still processing requests in the IO queue, there is no need to send a notification. Therefore, the more dense the IO, the better the batching effect.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Shmipc_Open_Source/share_memory.jpeg" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;In addition, in offline scenarios, scheduled synchronization itself is a form of batch processing for IO, and the effect of batch processing can
effectively reduce the system calls caused by process synchronization. The longer the sleep interval, the lower the overhead of process synchronization.&lt;/p&gt;
&lt;p&gt;As for polling synchronization, there is no need to consider batch IO operation because this mechanism itself is designed to reduce process synchronization overhead.
Polling synchronization directly occupies a CPU core, which is equivalent to defaulting to maximizing the synchronization mechanism overhead to achieve extremely low synchronization latency.&lt;/p&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;h3 id="benchmark"&gt;Benchmark&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Shmipc_Open_Source/benchmark.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;The X-axis represents the size of the data packet, and the Y-axis represents the time required for one Ping-Pong in microseconds, with smaller values being better.
It can be seen that in small packet scenarios, Shmipc can also achieve some benefits compared to unix domain sockets, and &lt;strong&gt;performance improves as packet size increases&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;: &lt;code&gt;git clone https://github.com/cloudwego/shmipc-go &amp;amp;&amp;amp; go test -bench=BenchmarkParallelPingPong -run BenchmarkParallelPingPong&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="production-environment"&gt;Production Environment&lt;/h3&gt;
&lt;p&gt;In the Service Mesh ecosystem of ByteDance&amp;rsquo;s production environment, we have applied Shmipc in &lt;strong&gt;over 3,000 services and more than 1 million instances&lt;/strong&gt;.
Different business scenarios show different benefits, with the &lt;strong&gt;highest&lt;/strong&gt; benefit being a &lt;strong&gt;24% reduction&lt;/strong&gt; in overall resource usage for the risk control business.
Of course, there are also scenarios with no obvious benefits or even deterioration. However, significant benefits can be seen in &lt;strong&gt;both large packet and IO-intensive scenarios&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="lessons-learned"&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;During the adoption process at ByteDance, we also encountered some pitfalls that caused some online accidents, which are quite valuable for reference.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Shared memory leak&lt;/strong&gt;. The shared memory allocation and recovery in the IPC process involve two processes and can easily lead to shared memory leaks if not careful.
Although the problem is very tricky, as long as it can be discovered actively when a leak occurs and there are observation methods to troubleshoot the leak afterwards, it can be solved.
&lt;ol&gt;
&lt;li&gt;Active discovery. By increasing some statistics and summarizing them in the monitoring system, active discovery can be achieved, such as the total memory size allocated and recovered.&lt;/li&gt;
&lt;li&gt;Observation methods. When designing the layout of shared memory, adding some metadata enables us to analyze shared memory dumped by the built-in debug tool at the time of the leak,
providing information on how much memory is leaked, what is in it, and some metadata related to this content.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packet congestion&lt;/strong&gt;. Packet congestion is the most troublesome problem, which can cause serious consequences due to various reasons. We once had a packet congestion accident in a certain business,
which was caused by the depletion of shared memory due to large packets. During the fallback to the normal path, there was a design defect, which caused a small probability of packet congestion.
A valuable reference is to &lt;strong&gt;increase integration testing and unit testing&lt;/strong&gt; in more scenarios to kill packet congestion in the cradle instead of explaining the investigation process and root cause.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared memory trampling&lt;/strong&gt;. &amp;lsquo;&lt;strong&gt;memfd&lt;/strong&gt;&amp;rsquo; should be used as much as possible to share memory, rather than the path of &amp;lsquo;mmap&amp;rsquo; file system.
In the early days, the &amp;lsquo;mmap&amp;rsquo; file system path was used for shared memory. The startup process of Shmipc and the path of shared memory were specified by environment variables,
and the boot process was injected into the application process. There is a situation where the application process may fork a process, which inherits the environment variables of the application process
and also integrates Shmipc. The forked process and the application process mmaped the same shared memory, resulting in trampling.
In ByteDance&amp;rsquo;s accident scenario, the application process used the golang plugin mechanism to load &lt;code&gt;.so&lt;/code&gt; from the outside to run, and the &lt;code&gt;.so&lt;/code&gt; integrated with Shmipc and ran in the application process.
It could see all the environment variables, so it and the application process mmaped the same shared memory, resulting in undefined behavior during the operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sigbus coredump&lt;/strong&gt;. In the early days, shared memory is achieved through mmaping files under the &lt;code&gt;/dev/shm/&lt;/code&gt; path (tmpfs), and most application services were running in docker container instances.
Container instances have capacity limits on tmpfs (which can be observed through df -h). This may cause a Sigbus error when the shared memory of mmap exceeds this limit.
There will be no error reported by mmap itself, but the application process will crash when it accesses memory beyond the limit during runtime.
To solve this problem, use &amp;lsquo;&lt;strong&gt;memfd&lt;/strong&gt;&amp;rsquo; to share memory, as in the third point.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="roadmap"&gt;RoadMap&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Integrate with the Golang RPC framework &lt;a href="https://github.com/cloudwego/kitex"&gt;CloudWeGo/Kitex&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Integrate with the Golang HTTP framework &lt;a href="https://github.com/cloudwego/hertz"&gt;CloudWeGo/Hertz&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Open-source Rust version of Shmipc and integrate with the Rust RPC framework &lt;a href="https://github.com/cloudwego/volo"&gt;CloudWeGo/Volo&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;Open-source C++ version of Shmipc.&lt;/li&gt;
&lt;li&gt;Introduce a timed synchronization mechanism for offline scenarios.&lt;/li&gt;
&lt;li&gt;Introduce a polling synchronization mechanism for scenarios with extreme latency requirements.&lt;/li&gt;
&lt;li&gt;Empower other IPC scenarios, such as IPC between Log SDK and Log Agent, IPC between Metrics SDK and Metrics Agent, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We hope that this article can provide a basic understanding of Shmipc and its design principles. More implementation details and usage methods
can be found in the projects of &lt;a href="https://github.com/cloudwego/shmipc-spec"&gt;shmipc-spec&lt;/a&gt; and &lt;a href="https://github.com/cloudwego/shmipc-go"&gt;shmipc-go&lt;/a&gt;.
Issues and PRs are always welcomed to the Shmipc project as well as the &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt; community.
We also hope that Shmipc can help more developers and enterprises build high-performance cloud-native architectures in the IPC field.&lt;/p&gt;</description></item><item><title>Blog: Volo Release 0.4.1</title><link>https://www.cloudwego.io/blog/2023/03/20/volo-release-0.4.1/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/03/20/volo-release-0.4.1/</guid><description>
&lt;p&gt;In Volo 0.4.1, in addition to the usual bugfixes, some new features have been introduced.&lt;/p&gt;
&lt;h2 id="more-detailed-thrift-decode-error-messages"&gt;More detailed Thrift Decode error messages&lt;/h2&gt;
&lt;p&gt;Previous versions of Thrift Decode error messages reported only the most basic errors, without any context.
For example, it contained the following structural relationships&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;A&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;B&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;b&lt;/span&gt;&lt;span style="color:#a40000"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;B&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;2&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;C&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#a40000"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;C&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;3&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;a&lt;/span&gt;&lt;span style="color:#a40000"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If an error occurs while decoding field &lt;code&gt;a&lt;/code&gt; of struct &lt;code&gt;C&lt;/code&gt;. In the previous version the error message was only reported for the field &lt;code&gt;a&lt;/code&gt;, but in the current version the Decode error path message is reported in the process &lt;code&gt;A&lt;/code&gt; -&amp;gt; &lt;code&gt;B&lt;/code&gt; -&amp;gt; &lt;code&gt;C&lt;/code&gt;, which makes it easier to catch bugs&lt;/p&gt;
&lt;h2 id="framework-stats-information"&gt;Framework stats information&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/volo/pull/149"&gt;#149&lt;/a&gt; adds more stats information for framework. Users can handle this data in the middleware itself, for example by logging or reporting to the monitoring system.&lt;/p&gt;
&lt;h2 id="support-partial-key-listening-in-discover-for-service-discovery"&gt;Support partial key listening in Discover for service discovery&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/volo/pull/155"&gt;#155&lt;/a&gt; Support for partial key listening in Discover for service discovery, which reduces unnecessary listening and improves performance.&lt;/p&gt;
&lt;h2 id="full-release-note"&gt;Full Release Note&lt;/h2&gt;
&lt;p&gt;For the full Release Notes, please refer to: &lt;a href="https://github.com/cloudwego/volo/compare/volo-0.3.2...volo-0.4.1"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex Release v0.5.0</title><link>https://www.cloudwego.io/blog/2023/03/08/kitex-release-v0.5.0/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/03/08/kitex-release-v0.5.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Fallback: Support fallback for client-side&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the RPC requests fail, users usually have some degradation measures to ensure the effective response (for example, construct the default response after the request timeout or circuit breaker).
Kitex&amp;rsquo;s Fallback supports the processing of all error requests. At the same time, because business errors are usually returned through the Resp (BaseResp field), Kitex also supports the processing of Resp.
Refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/fallback/"&gt;Fallback&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Kitex - gRPC: Client add TLS option configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Setup via client.WithGRPCTLSConfig option.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Kitex - Tool&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Support customized scaffold templates&lt;/strong&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/custom_tpl/"&gt;Custom Scaffold Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support specifying the directory for generating code&lt;/strong&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/#-gen-path"&gt;Code Generation Tool -gen-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support using protoc plugin&lt;/strong&gt;, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/#-protobuf-plugin"&gt;Code Generation Tool -protobuf-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimization"&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. Loadbalance：Use Weighted Round Robin algo as default Loadbalance policy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The old version uses Weight Random to do the loadbalance by default. Random can achieve the global balance. However, in the case of a small number of server instances, there is a large probability of random continuous access to the same instance, resulting in an increase in the maximum concurrent requests of downstream nodes. Therefore, the new version adjusts the default policy to Weight Round Robin.
Refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/loadbalance/"&gt;Loadbalance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Goroutine Resource of Connection Pool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the old version uses a long connection, each client corresponds to a goroutine resource cleaning connection. When there are many clients, it will cause too many goroutines. The new version changes to share the goroutine to avoid the number of goroutines increasing with the number of clients.&lt;/p&gt;
&lt;h3 id="other"&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Upgrade the frugal and pid dependency lib to support go 1.20.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature-1"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/840"&gt;#840&lt;/a&gt;] feat(fallback): support fallback ability for kitex client-side, usage guide refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/fallback/"&gt;Fallback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/841"&gt;#841&lt;/a&gt;] feat(tool): add GetResult() and GetFirstArgument() methods for service params of protobuf&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/791"&gt;#791&lt;/a&gt;] feat(tool): merge two ways of passing extensions, to support two ways at sametime&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/797"&gt;#797&lt;/a&gt;] feat(loadbalance): use smooth weighted round robin algo as default Loadbalance policy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/760"&gt;#760&lt;/a&gt;] feat(grpc): support TLS config in kitex grpc client&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/781"&gt;#781&lt;/a&gt;] feat(tool): supports custom templates&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/783"&gt;#783&lt;/a&gt;] feat(ttheader): add encode logic for gdpr token in TransInfo&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/775"&gt;#775&lt;/a&gt;] feat(tool): support custom generate path&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/687"&gt;#687&lt;/a&gt;] feat(tool): add protoc plugin flag&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/750"&gt;#750&lt;/a&gt;] optimize(generic): generic call write zero value for required and default fields to meet the specification of apache thrift and keep consistent with normal thrift encode of Kitex.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/739"&gt;#739&lt;/a&gt;] optimize(generic): modify the url routing to align with Hertz for HTTP generic call&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/752"&gt;#752&lt;/a&gt;] optimize(ttheader): attach part of ttheader binary into error when readKVInfo failed, which is useful for troubleshooting&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/821"&gt;#821&lt;/a&gt;] optimize(config): add DeepCopy() &amp;amp; Equals() to circuitbreaker.CBConfig and retry.Policy&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/827"&gt;#827&lt;/a&gt;] optimize: revise the remoteInfo of retry call, using the remoteInfo of the RPCCall that returns&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/762"&gt;#762&lt;/a&gt;] optimize(tool): add go mod auto replace to thrift 0.13 in thrift mode&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/755"&gt;#755&lt;/a&gt;] optimize: improve client error msg when ctx cancel or timeout&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/756"&gt;#756&lt;/a&gt;] optimize: use sync.Cond as the profiler event trigger&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/753"&gt;#753&lt;/a&gt;] optimize: add recover for client&amp;rsquo;s Close&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/734"&gt;#734&lt;/a&gt;] fix(retry): fix the panic problem caused by concurrent read and write of rpcinfo under backup retry&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/837"&gt;#837&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/842"&gt;#842&lt;/a&gt;] fix(metahandler): adjust MetainfoHandler to the top of the MetaHandlers array to ensure that the logic of custom MetaHandlers that depends on MetainfoHandler works&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/812"&gt;#812&lt;/a&gt;] fix: use detectionHandler to perform protocol detection in windows environment to support gRPC&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/851"&gt;#851&lt;/a&gt;] fix: upgrade frugal to v0.1.6 for missing stop field&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/845"&gt;#845&lt;/a&gt;] fix: fix the problem that RPCStat report status as success when biz handler return err&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/822"&gt;#822&lt;/a&gt;] fix(loadbalance): don&amp;rsquo;t share balancer factory when loadbalance is defined by user&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/732"&gt;#732&lt;/a&gt;] fix(mux): mux server waits for shardqueue close before shutdown&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/795"&gt;#795&lt;/a&gt;] fix(grpc): zero first byte of grpc data frame, which could be random data from mcache&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/668"&gt;#668&lt;/a&gt;] fix: fix race problem in queue.go/queue @dugenkui03&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/743"&gt;#743&lt;/a&gt;] fix: use sharedTicker for long conn pool to prevent goroutine numbers increase as the number of client increases&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/799"&gt;#799&lt;/a&gt;] fix(util): should return when get at least one GOPATH @StellarisW&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/807"&gt;#807&lt;/a&gt;] fix(codec): fix fastpb nil ptr when struct fields are all default values&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/794"&gt;#794&lt;/a&gt;] fix(tool): fix fastpb codegen by updating dependency&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/787"&gt;#787&lt;/a&gt;] fix(tool): the import did not use the new method to render when template append content&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/785"&gt;#785&lt;/a&gt;] fix(tool): remove useless combine service files&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/754"&gt;#754&lt;/a&gt;] fix: fix the usage of metainfo in grpc scene&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/814"&gt;#814&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/843"&gt;#843&lt;/a&gt;] refactor(trans): return error in onRead of defaultServerHandler and close conn in outer method&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/816"&gt;#816&lt;/a&gt;] refactor(utils): add utils.GetEnvLogDir and deprecate utils.GetLogDir&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test--docs--chore"&gt;Test &amp;amp; Docs &amp;amp; Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/839"&gt;#839&lt;/a&gt; &lt;a href="https://github.com/cloudwego/kitex/pull/693"&gt;#693&lt;/a&gt;] test: import mockey repo and add usage demo of mockey unit test&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/806"&gt;#806&lt;/a&gt;] test(transmeta):add some test cases for tansmeta package&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/761"&gt;#761&lt;/a&gt;] docs: update README.md @fuergaosi233&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/817"&gt;#817&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/832"&gt;#832&lt;/a&gt;] chore: upgrade dependency lib to adapt go 1.20&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/772"&gt;#772&lt;/a&gt;] chore: modify kitex gen code meta file name from kitex.yaml to kitex_info.yaml&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Hertz Release v0.6.0</title><link>https://www.cloudwego.io/blog/2023/03/02/hertz-release-v0.6.0/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/03/02/hertz-release-v0.6.0/</guid><description>
&lt;p&gt;In version 0.6.0 of Hertz, in addition to regular iterative optimization, we also brought several important features.&lt;/p&gt;
&lt;h2 id="http-trailer-support"&gt;HTTP Trailer support&lt;/h2&gt;
&lt;p&gt;In Hertz v0.6.0, we support encoding and parsing of HTTP Trailer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz-examples/tree/main/trailer"&gt;https://github.com/cloudwego/hertz-examples/tree/main/trailer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Write Trailer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// server&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;handler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;){&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Set&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// client&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Set&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Read Trailer&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// server&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;handler&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;){&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Get&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// client&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Header&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Trailer&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;Get&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;Hertz&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="http11-supports-for-response-writer-hijacking"&gt;HTTP/1.1 supports for Response Writer hijacking&lt;/h2&gt;
&lt;p&gt;In Hertz v0.6.0, we extended the HTTP/1.1 write request approach. Based on the original write request flow, we support users to hijack the Response Writer in the business handler/middleware to achieve a more flexible write request approach.&lt;/br&gt;
In simple terms, all the original &amp;ldquo;underlying write&amp;rdquo; logic is unified behind the handler/middleware return, which has two obvious limitations.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user has no control over the timing of the request flush to the other end&lt;/li&gt;
&lt;li&gt;For the scenario of incremental data generation &amp;amp; real-time writing to the peer by chunk, the usage is relatively complicated and restrictive on top of the old architecture&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on this, we extend a Writer that provides the ability to flush request headers and request bodies on its own, while providing support for users to send chunk data on demand. See &lt;a href="https://github.com/cloudwego/hertz/pull/610"&gt;https://github.com/cloudwego/hertz/pull/610&lt;/a&gt; for a detailed implementation.&lt;/p&gt;
&lt;h3 id="major-changes"&gt;Major Changes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Added an interface definition that extends Writer, &lt;code&gt;Writers&lt;/code&gt; that implement this interface can be used to hijack Response Writer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ExtWriter&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;interface&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;io&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Writer&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Flush&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Finalize will be called by framework before the writer is released.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Implementations must guarantee that Finalize is safe for multiple calls.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Finalize&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;error&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provides a &lt;code&gt;Chunk Writer&lt;/code&gt; that implements the above interface (you can refer to this for similar requirements): &lt;code&gt;chunkedBodyWrite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP/1.1 does the corresponding processing (skipping the default write request logic) for Response write operations where the Writer has been hijacked, and finally calls the &lt;code&gt;Finalize()&lt;/code&gt; method of the &lt;code&gt;ExtWriter&lt;/code&gt; interface to complete a request write back&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;As above, Hertz provides a default &lt;code&gt;ExtWriter&lt;/code&gt; implementation to meet the user&amp;rsquo;s active flush needs in the handler/middleware, and it is very simple to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;h&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GET&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;/flush/chunk&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;func&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ctx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Context&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#000"&gt;app&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;RequestContext&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// Hijack the writer of response&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;HijackWriter&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;NewChunkedBodyWriter&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;GetWriter&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;for&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;:=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;0&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;10&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;++&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Write&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;([]&lt;/span&gt;&lt;span style="color:#204a87"&gt;byte&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;fmt&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Sprintf&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;chunk %d: %s&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;strings&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Repeat&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;hi~&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;i&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;))))&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// nolint: errcheck&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;c&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Flush&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;// nolint: errcheck&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;time&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Sleep&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;200&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;*&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;time&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;Millisecond&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;})&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="scaffolding-tool-usage-optimization--best-practices"&gt;Scaffolding Tool Usage Optimization &amp;amp; Best Practices&lt;/h2&gt;
&lt;p&gt;In hz v0.6.0, we have made a number of optimizations to the organization of the generated code, allowing for a more flexible code organization&lt;/p&gt;
&lt;h3 id="major-optimization"&gt;Major Optimization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;new&lt;/code&gt; command supports the &amp;ldquo;router_dir&amp;rdquo; option and works with the existing &amp;ldquo;handler_dir&amp;rdquo; and &amp;ldquo;model_dir&amp;rdquo; to fully customize the path to the IDL generation product; it also persists these custom options in the &amp;ldquo;.hz&amp;rdquo; file, which can be read automatically during &lt;code&gt;update&lt;/code&gt;, reducing the complexity of the command&lt;/li&gt;
&lt;li&gt;Add the ability to search up the &amp;ldquo;go.mod&amp;rdquo; file so that hertz can share the same &amp;ldquo;go module&amp;rdquo; with other projects when it is a subproject&lt;/li&gt;
&lt;li&gt;Add the ability to reference third-party IDL products in the &amp;ldquo;handler&amp;rdquo;, so that IDL products can be maintained separately in the third-party repository and not stored in the project directory, further enhancing IDL management capabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="best-practices"&gt;Best Practices&lt;/h3&gt;
&lt;p&gt;We have rewritten &amp;ldquo;&lt;a href="https://github.com/cloudwego/biz-demo/pull/26"&gt;biz-demo/easy-note&lt;/a&gt;&amp;rdquo; with &amp;ldquo;hz v0.6.0&amp;rdquo; to take advantage of the following hz features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate hertz client call code for accessing &amp;ldquo;api server&amp;rdquo; based on IDL using the capabilities of &amp;ldquo;hz client&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Reorganize the &amp;ldquo;api server&amp;rdquo; code with custom &amp;ldquo;router_dir&amp;rdquo;, &amp;ldquo;handler_dir&amp;rdquo;, and &amp;ldquo;model_dir&amp;rdquo; options, and remove the &amp;ldquo;biz&amp;rdquo; directory restriction&lt;/li&gt;
&lt;li&gt;Use the ability to &amp;ldquo;search up go.mod&amp;rdquo; so that &amp;ldquo;api server&amp;rdquo; can share the same &amp;ldquo;go module&amp;rdquo; as a subproject of &amp;ldquo;easy-note&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Use the ability of &amp;ldquo;handler to refer to third-party IDL products&amp;rdquo; and the ability of &amp;ldquo;hz model&amp;rdquo; to store IDL products separately in the &amp;ldquo;easy-note&amp;rdquo; project and not in the &amp;ldquo;api server&amp;rdquo; subproject&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="full-release-note"&gt;Full Release Note&lt;/h2&gt;
&lt;p&gt;The complete Release Note can refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.6.0"&gt;https://github.com/cloudwego/hertz/releases/tag/v0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hz(scaffolding): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.6.0"&gt;https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Getting Started with Hertz: Performance Testing Guide</title><link>https://www.cloudwego.io/blog/2023/02/24/getting-started-with-hertz-performance-testing-guide/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/02/24/getting-started-with-hertz-performance-testing-guide/</guid><description>
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;On September 8, 2021, ByteDance officially announced the open-sourcing of &lt;a href="https://github.com/cloudwego"&gt;CloudWeGo&lt;/a&gt;.
CloudWeGo is a set of microservices middleware developed by ByteDance, characterized by high performance, strong scalability, and high stability.
It focuses on solving the difficulties of microservices communication and governance, and meets the demands of different businesses in different scenarios.
On June 21, 2022, the CloudWeGo team has officially open-sourced &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;, ByteDance&amp;rsquo;s largest HTTP framework. Hertz has gained a lot of attention from users since its release,
and has received 3K+ stars by now. Many users have tested it themselves, and we are very grateful for your attention and support.
This blog aims to share the scenarios and technical issues that developers need to be aware of when conducting load testing on Hertz.
These suggestions can help users better optimize Hertz based on real HTTP scenarios to better fit their business needs and achieve optimal performance.
Users can also refer to the official load testing project &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id="characteristics-of-http-microservices"&gt;Characteristics of HTTP Microservices&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; was born out of large-scale microservices practice at ByteDance, and is naturally designed for microservices scenarios.
Therefore, in the following, we will first introduce the characteristics of the HTTP microservices to facilitate developers&amp;rsquo; deeper understanding of &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;&amp;rsquo;s design considerations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP Communication Model&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Communication between microservices typically follows a Ping-Pong model. In addition to conventional throughput performance metrics, developers also need to consider the average latency of each HTTP request.
While increasing the number of machines can quickly resolve throughput bottlenecks, reducing latency, which significantly affects user experience, is not as easy.&lt;/p&gt;
&lt;p&gt;In the environment of microservices, a single call often requires collaboration from multiple microservices. Even if each node has low latency, the final latency on the entire chain can be amplified.
Therefore, latency is a more critical metric for developers to pay attention to in microservices. &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; has made certain optimizations for latency while ensuring throughput.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Use of Long and Short Connections&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since establishing a TCP connection requires a three-way handshake, the overhead of creating a new connection for each request can be very high for latency-sensitive services.
Therefore, it is recommended to use persistent connections to complete requests whenever possible. In HTTP 1.1, Long connections are also the default option.
However, there is no silver bullet, as maintaining connections also consumes resources, and the horizontal scalability of persistent connections is not as good as that of short connections.
Therefore, in some scenarios, long connections may not be suitable. For example, in a scenario where configurations need to be pulled periodically,
the connection establishment delay may not have a significant impact on configurations, and it may be more appropriate to use short connections if horizontal scalability is a concern when the configuration center is under high load.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Packet Size&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The package size of a service depends on the actual business scenario. In HTTP scenarios, data can be placed in query, path, header, body, etc., and different locations have different effects on parsing.
HTTP header is an identifier protocol, and the framework does not know how many headers there are until it finds a specific identifier. Therefore, the framework needs to receive all the headers before it can complete the parsing,
which is not very friendly to the framework&amp;rsquo;s memory model. &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; has also made special optimizations for header parsing, allocating enough buffer space for headers to reduce the overhead of cross-package copying during header processing.&lt;/p&gt;
&lt;p&gt;Meanwhile, in the internal statistics of online services at ByteDance, it was found that most packages are within 1K (but too small packages have no practical significance, such as a fixed return of &amp;ldquo;hello world&amp;rdquo;).
At the same time, there is no upper limit on the size of large packages, and various package sizes are involved. Therefore, &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; has focused on optimizing the performance (throughput and latency) of packages within the most commonly used range of 128k or less.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concurrency Quantity&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each instance may have multiple upstreams and will not only accept requests from a single instance. Moreover, HTTP 1 doesn&amp;rsquo;t support multiplexing,
and each connection can only handle one request at a time. Therefore, the Server needs to accept multiple connections and process them simultaneously.&lt;/p&gt;
&lt;p&gt;Different services have different connection utilization rates. For example, load testing services have high connection utilization rates, and a new request is made immediately after the completion of the previous request.
Some services have low connection utilization rates, even though they are long-lived, they are only used once. The connection models used by these two services are not the same.&lt;/p&gt;
&lt;p&gt;For the former, the goroutine per connection model should be used to reduce the overhead of context switching. For the latter, a coroutine pool should be used to reduce the scheduling overhead of too many goroutines.
&lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; supports both models, and users can choose the appropriate configuration based on their business needs.&lt;/p&gt;
&lt;h2 id="load-testing-for-http-scenarios"&gt;Load Testing for HTTP Scenarios&lt;/h2&gt;
&lt;h3 id="using-scenarios-that-resemble-real-usage"&gt;Using Scenarios That Resemble Real Usage&lt;/h3&gt;
&lt;p&gt;There are many load testing projects on GitHub and performance testing reports available online, but they may not be tailored to your specific needs.
For example, in a real-world scenario, would you create a project that only responds with &lt;strong&gt;&lt;code&gt;hello world&lt;/code&gt;&lt;/strong&gt; no matter what the client sends? Unfortunately, many load testing projects do just that.&lt;/p&gt;
&lt;p&gt;Before conducting load testing, consider your actual usage scenarios, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Long vs Short Connections&lt;/strong&gt;: Determine whether using long or short connections is more suitable for your scenario.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estimating Connection Usage&lt;/strong&gt;: If using long connections and connection usage is high (which is the case in most scenarios), use the default configuration.
If connection usage is low, consider adding the configuration option &lt;strong&gt;&lt;code&gt;server.WithIdleTimeout(0)&lt;/code&gt;&lt;/strong&gt; to modify the goroutine per connection model to a coroutine pool model and conduct comparative testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Determining Data Location and Size&lt;/strong&gt;: As mentioned earlier, data in different locations (such as query, header, body, etc.) and of different sizes can affect the framework&amp;rsquo;s performance.
If the performance of all frameworks is similar, consider using a different data transmission location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Determining Concurrency Quantity&lt;/strong&gt;: Some services are lightweight on business logic but heavy on framework, resulting in high framework concurrency.
Conversely, some services are heavy on business logic but light on framework, resulting in low framework concurrency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you just want to test the performance of the framework, you can use the common scenario: &lt;strong&gt;long connection, high connection usage, 1k body, 100 concurrency&lt;/strong&gt;, and so on.
The &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; repository also uses this default load test configuration.
At the same time, the &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; repository also provides configuration options for users to modify headers, body, and concurrency, making it easy to customize the load test to fit their own needs.&lt;/p&gt;
&lt;h3 id="determine-the-target-of-load-testing"&gt;Determine the Target of Load Testing&lt;/h3&gt;
&lt;p&gt;Measuring the performance of an RPC framework requires thinking from two perspectives: the Client perspective and the Server perspective. In a large-scale business architecture,
the upstream Client may not necessarily use the downstream framework, and the downstream services called by developers are also likely to be different. This is even more complicated when considering the situation of Service Mesh.&lt;/p&gt;
&lt;p&gt;Some load testing projects usually conduct load testing for Client and Server processes in a hybrid deployment, and then obtain performance data for the &lt;strong&gt;entire framework&lt;/strong&gt;, which may not be consistent with the actual operation in production.&lt;/p&gt;
&lt;p&gt;If you want to conduct load testing the Server, you should give the Client as many resources as possible and push the Server to the limit, and vice versa.
If both the Client and Server are only given 4 cores for load testing, developers will not be able to determine the performance data under which perspective, let alone provide actual reference for online services.&lt;/p&gt;
&lt;h3 id="use-dedicated-cpus"&gt;Use Dedicated CPUs&lt;/h3&gt;
&lt;p&gt;Although online applications usually share CPUs among multiple processes, in a load testing scenario, both the Client and Server processes are extremely busy. Sharing CPUs at this time will result in a large number of context switches, which will make the data less reliable and prone to large fluctuations.&lt;/p&gt;
&lt;p&gt;Therefore, we recommend isolating Client and Server processes on different CPUs or different dedicated machines. If you want to further avoid the impact of other processes, you can also use the nice -n -20 command to increase the scheduling priority of the load testing process.&lt;/p&gt;
&lt;p&gt;In addition, if conditions permit, using physical machines instead of virtual machines on cloud platforms will make the test results more rigorous and reproducible.&lt;/p&gt;
&lt;h2 id="performance-data-reference"&gt;Performance Data Reference&lt;/h2&gt;
&lt;p&gt;On the premise of meeting the above requirements, we compared the load testing result of multiple frameworks based on the latest version. The pressure test code is in the &lt;a href="https://github.com/cloudwego/hertz-benchmark"&gt;hertz-benchmark&lt;/a&gt; repository.
With the goal of fully filling the load of Server, &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; has the lowest P99 latency of all the frameworks tested, and the throughput is also in the first tier and under continuous optimization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: AMD EPYC 7Y83 64-Core Processor 2.7GHz
&lt;ul&gt;
&lt;li&gt;limits: server 4-CPUs，client 16-CPUS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS：Debian GNU/Linux 10 (buster)&lt;/li&gt;
&lt;li&gt;Go 1.19&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.3.2"&gt;hertz v0.3.2&lt;/a&gt;，&lt;a href="https://github.com/valyala/fasthttp/releases/tag/v1.40.0"&gt;fasthttp v1.40.0&lt;/a&gt;，
&lt;a href="https://github.com/gin-gonic/gin/releases/tag/v1.8.1"&gt;gin v1.8.1&lt;/a&gt;，&lt;a href="https://github.com/gofiber/fiber/releases/tag/v2.38.1"&gt;fiber v2.38.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Hertz-benchmark/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p align="center"&gt;Comparison of throughput and latency of four frameworks&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Hertz-benchmark/2.png" alt="image"&gt;&lt;/p&gt;
&lt;p align="center"&gt;Comparison of throughput and latency of three frameworks&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As a very large scale enterprise microservices HTTP framework, &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; was designed to solve a variety of problems in the large-scale microservices scenario.
In the process of promotion, we encountered all kinds of services and solved many kinds of problem.
Based on those experience, we wrote this blog. As a developer, you are always welcome to choose the right tool for your own scenario based on the testing guide provided above.
If you have any questions, feel free to raise an &lt;a href="https://github.com/cloudwego/hertz/issues"&gt;Issue&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Blog: Volo Release 0.3.2</title><link>https://www.cloudwego.io/blog/2023/02/07/volo-release-0.3.2/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/02/07/volo-release-0.3.2/</guid><description>
&lt;p&gt;In Volo 0.3.2 version, in addition to general bugfixes, there are many improvements.
In particular, it is very much appreciated that there are community contributors who have brought us important features.&lt;/p&gt;
&lt;h2 id="trait-support-for-thrift-asynchronous-codec"&gt;Trait support for Thrift asynchronous codec&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ii64"&gt;@ii64&lt;/a&gt; brought us the definition of Thrift asynchronous codec Trait in &lt;a href="https://github.com/cloudwego/volo/pull/123"&gt;#123&lt;/a&gt; as well as the implementation of Binary and Apache Compact Protocol.
Before that he also contributed the underlying implementation of codec to Pilota!&lt;/p&gt;
&lt;h2 id="support-for-grpc-graceful-shutdown"&gt;Support for gRPC graceful shutdown&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/iGxnon"&gt;@iGxnon&lt;/a&gt; brought us support for gRPC graceful shutdown in &lt;a href="https://github.com/cloudwego/volo/pull/127"&gt;#127&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id="version-update-for-metainfo-and-faststr"&gt;Version update for metainfo and faststr&lt;/h2&gt;
&lt;p&gt;In this release, we updated the versions of metainfo and faststr so that metainfo also supports faststr to minimize memory allocation and copy in as many scenarios as possible to optimize performance.&lt;/p&gt;
&lt;p&gt;faststr is a string library we modify with reference to smol_str, which implements a zero-cost clone of immutable string.&lt;/p&gt;
&lt;p&gt;In addition, FastStr has an incompatible change: previously it implemented &lt;code&gt;From&lt;/code&gt; for all &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt;, but doing so causes the additional memory allocation and copy overhead when using &lt;code&gt;into&lt;/code&gt; directly.
In the new version of 0.2, we only implement &lt;code&gt;From&lt;/code&gt; for &lt;code&gt;'static str&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;/code&gt;、&lt;code&gt;Arc&amp;lt;String&amp;gt;&lt;/code&gt;.
There&amp;rsquo;s no overhead for these four types to use &lt;code&gt;into&lt;/code&gt; to convert to FastStr, in a form that avoids memory allocation and copy problems inadvertently brought on by the user.&lt;/p&gt;
&lt;p&gt;The old version of &lt;code&gt;From&lt;/code&gt; essentially called &lt;code&gt;FastStr::new(s)&lt;/code&gt;, so if there was an incompatibility problem, you could simply call &lt;code&gt;FastStr::new&lt;/code&gt; explicitly instead.&lt;/p&gt;
&lt;h2 id="pilota-supports-faststr-generation-for-protobuf-codec"&gt;Pilota supports FastStr generation for Protobuf codec&lt;/h2&gt;
&lt;p&gt;By supporting FastStr generation for Protobuf codec in Pilota, we can bring our performance optimization capabilities to PB and gRPC.&lt;/p&gt;
&lt;p&gt;After upgrading, we need to use &lt;code&gt;use pilota::prost::message::Message;&lt;/code&gt; instead of &lt;code&gt;use prost::Message;&lt;/code&gt; introduced previously.&lt;/p&gt;
&lt;h2 id="full-release-notes"&gt;Full Release Notes&lt;/h2&gt;
&lt;p&gt;For the full Release Notes, please refer to: &lt;a href="https://github.com/cloudwego/volo/compare/volo-0.3.0...volo-0.3.2"&gt;Volo Changelog&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.5.0</title><link>https://www.cloudwego.io/blog/2023/01/12/hertz-release-v0.5.0/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2023/01/12/hertz-release-v0.5.0/</guid><description>
&lt;p&gt;In version 0.5.0 of Hertz, in addition to regular iterative optimization, we also brought several important features.&lt;/p&gt;
&lt;h2 id="network-layer-and-protocol-layer-support-stream-based-interface"&gt;Network layer and protocol layer support stream-based interface&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/467"&gt;https://github.com/cloudwego/hertz/pull/467&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the Hertz v0.5.0 version, we have further enhanced the scalability of the Hertz transport layer &amp;amp; protocol layer, supporting the seamless connection of the stream-based transport layer protocol QUIC, and the &lt;a href="https://github.com/cloudwego/hertz/issues/458"&gt;HTTP3 protocol&lt;/a&gt; built on top of it.
In addition, on this basis, we have added and improved functions such as &amp;ldquo;ALPN&amp;rdquo; (application layer protocol negotiation), &amp;ldquo;QUIC/TLS parallel monitoring&amp;rdquo; (QUIC/TLS parallel monitoring), &amp;ldquo;Alt-Svc&amp;rdquo; (alternative service).&lt;/p&gt;
&lt;h3 id="major-changes"&gt;Major Changes&lt;/h3&gt;
&lt;h4 id="transport-layer"&gt;Transport layer&lt;/h4&gt;
&lt;p&gt;On the basis of ensuring compatibility performance, we have added an abstract stream-based network connection interface &lt;code&gt;StreamConn&lt;/code&gt;, and adjusted the interaction logic between the transport layer and the protocol layer to achieve the correct protocol layer for the distribution of connection types Processing (protocol server).
For scenarios that need to monitor TCP (TLS) and UDP (QUIC) at the same time, we provide a &lt;code&gt;WithAltTransporter&lt;/code&gt; option, which facilitates passing the backup transporter to the main transporter, and facilitates the ability to monitor QUIC/TLS in parallel.&lt;/p&gt;
&lt;h4 id="protocol-layer"&gt;Protocol Layer&lt;/h4&gt;
&lt;p&gt;Support adding a stream-based protocol layer implementation (protocol server) &lt;code&gt;StreamServer&lt;/code&gt;, so as to build a corresponding processing protocol (HTTP/3) on top of the newly added stream-based transport layer extension.
In order to facilitate the configuration of alternative service meta-information for a main protocol (HTTP/3), &lt;code&gt;ProtocolSuite&lt;/code&gt; exposes the &lt;code&gt;SetAltHeader&lt;/code&gt; interface.
At the same time, we also designed the ALPN capability for &lt;code&gt;StreamConn&lt;/code&gt;, so as to provide the ability of protocol negotiation in QUIC.&lt;/p&gt;
&lt;h4 id="common-layer"&gt;Common layer&lt;/h4&gt;
&lt;p&gt;At the same time, we have added an auxiliary function that can convert with the Golang standard Handler in the general layer, so as to quickly port the implementation based on the Golang standard Handler to Hertz. The &lt;a href="https://github.com/hertz-contrib/http3"&gt;QUIC &amp;amp; HTTP/3 extension&lt;/a&gt; based on &lt;a href="https://github.com/lucas-clemente/quic-go"&gt;quic-go&lt;/a&gt; provided later /pull/1), the capabilities provided by this function are used.&lt;/p&gt;
&lt;h4 id="feature-status"&gt;Feature Status&lt;/h4&gt;
&lt;p&gt;The Hertz core library capability has been released, and the specific implementation will be released in the form of &lt;a href="https://github.com/hertz-contrib/http3/pull/1"&gt;extension package&lt;/a&gt;, welcome to try~&lt;/p&gt;
&lt;p&gt;For more detailed design instructions, please refer to: &lt;a href="https://www.cloudwego.io/zh/blog/2023/08/02/hertz-%E6%94%AF%E6%8C%81-quic-http/3/"&gt;Hertz supports QUIC &amp;amp; HTTP/3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="scaffolding-tools-support-generating-hertz-client-code"&gt;Scaffolding tools support generating hertz client code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/hertz/pull/471"&gt;https://github.com/cloudwego/hertz/pull/471&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the v0.5.0 version of the scaffolding tool (Hz), we support the function of automatically generating the hertz client code based on IDL, and realize the one-click call of the HTTP request in the form of an RPC call.
Instructions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For details, see: &lt;a href="https://github.com/cloudwego/hertz-examples/tree/main/hz_client"&gt;https://github.com/cloudwego/hertz-examples/tree/main/hz_client&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Define the IDL&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;namespace&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;go&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;toutiao&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;middleware&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;hzClient&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryReq&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryValue&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;query&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;query1&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000"&gt;service&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Hertz121&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Resp&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryMethod&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;QueryReq&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;get&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;/query&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;handler_path&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}(&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;api&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;base_domain&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;http://127.0.0.1:8888&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;Generate code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on the above IDL, the server and client codes can be generated separately:&lt;/p&gt;
&lt;p&gt;Server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;hz&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;idl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;psm&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;handler_by_method&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;t&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;template&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;slim&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#000"&gt;hz&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;client&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;idl&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;psm&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;thrift&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;model_dir&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;hertz_gen&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;-&lt;/span&gt;&lt;span style="color:#000"&gt;t&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;template&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;slim&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;--&lt;/span&gt;&lt;span style="color:#000"&gt;client_dir&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#000"&gt;hz_client&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;Call the client code to initiate an HTTP request to realize the intercommunication between the client end and the server end&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="full-release-note"&gt;Full Release Note&lt;/h2&gt;
&lt;p&gt;The complete Release Note can refer to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hertz: &lt;a href="https://github.com/cloudwego/hertz/releases/tag/v0.5.0"&gt;https://github.com/cloudwego/hertz/releases/tag/v0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hz(scaffolding): &lt;a href="https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.5.0"&gt;https://github.com/cloudwego/hertz/releases/tag/cmd%2Fhz%2Fv0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo Release 0.3.0</title><link>https://www.cloudwego.io/blog/2022/12/22/volo-release-0.3.0/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/12/22/volo-release-0.3.0/</guid><description>
&lt;p&gt;In Volo 0.3.0 version, in addition to regular bugfixes, we also brought several important features.&lt;/p&gt;
&lt;h2 id="service-trait-refactoring"&gt;Service Trait refactoring&lt;/h2&gt;
&lt;p&gt;In version 0.3.0 of Volo, we refactored &lt;code&gt;Service&lt;/code&gt; Trait to make the implementation of &lt;code&gt;Service&lt;/code&gt; Trait easier and provide more flexibility.&lt;/p&gt;
&lt;p&gt;Specifically, we changed the definition of &lt;code&gt;Service&lt;/code&gt; Trait from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// The future response value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;: &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;changed to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;pub&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;trait&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Service&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Responses given by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Errors produced by the service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// The future response value.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;type&lt;/span&gt; &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;: &lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#000"&gt;Output&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Result&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Response&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Error&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87"&gt;Send&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;+&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;Self&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;/// Process the request and return the response asynchronously.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;call&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#3465a4"&gt;self&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;cx&lt;/span&gt;: &lt;span style="color:#204a87;font-weight:bold"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt; &lt;span style="color:#000"&gt;mut&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;req&lt;/span&gt;: &lt;span style="color:#000"&gt;Request&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;-&amp;gt; &lt;span style="color:#000"&gt;Self&lt;/span&gt;::&lt;span style="color:#000"&gt;Future&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;where&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#c4a000"&gt;&amp;#39;s&lt;/span&gt;: &lt;span style="color:#c4a000"&gt;&amp;#39;cx&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The most obvious change is that the self parameter of the Service Trait method call() is changed from &lt;code&gt;&amp;amp;mut self&lt;/code&gt; to &lt;code&gt;&amp;amp;self&lt;/code&gt;. The purpose of this is that if we relied on &lt;code&gt;&amp;amp;mut self&lt;/code&gt; before, we have to clone to take ownership before calling, and we need &lt;code&gt;Service&lt;/code&gt; users to ensure that the overhead of Clone is low; in fact, this clone is completely unnecessary, and this decision should be handed over to the user to decide. If there is a need to change the internal state, they can lock it internally or use atomic, which can save the cost of cloning.&lt;/p&gt;
&lt;h2 id="grpc-multi-service-support"&gt;gRPC multi-Service support&lt;/h2&gt;
&lt;p&gt;In this version, we also support the scenario where the gRPC server supports multiple Services at the same time, and each Service can have its own layer; of course, the Server can also have a globally valid layer.&lt;/p&gt;
&lt;p&gt;If a middleware needs to perceive the specific type of Request / Response and process it, or only for a single Service, it can be added as the Service&amp;rsquo;s own layer.&lt;/p&gt;
&lt;p&gt;This is a breaking change. Users of previous versions may need to modify the code. Specifically, it needs to change from this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[volo::main]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;: &lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;[::]:8080&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;parse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;Address&lt;/span&gt;::&lt;span style="color:#000"&gt;from&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;proto_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;hello&lt;/span&gt;::&lt;span style="color:#000"&gt;HelloServiceServer&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;run&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Change it to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;use&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;std&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;;&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;use&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo_grpc&lt;/span&gt;::&lt;span style="color:#000"&gt;server&lt;/span&gt;::&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#000"&gt;Server&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;,&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;ServiceBuilder&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;};&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#8f5902;font-style:italic"&gt;#[volo::main]&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;async&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;fn&lt;/span&gt; &lt;span style="color:#000"&gt;main&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;: &lt;span style="color:#000"&gt;SocketAddr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;[::]:8080&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;parse&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;().&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;let&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;volo&lt;/span&gt;::&lt;span style="color:#000"&gt;net&lt;/span&gt;::&lt;span style="color:#000"&gt;Address&lt;/span&gt;::&lt;span style="color:#000"&gt;from&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Server&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;()&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;add_service&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;ServiceBuilder&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;volo_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;proto_gen&lt;/span&gt;::&lt;span style="color:#000"&gt;hello&lt;/span&gt;::&lt;span style="color:#000"&gt;GreeterServer&lt;/span&gt;::&lt;span style="color:#000"&gt;new&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;S&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)).&lt;/span&gt;&lt;span style="color:#000"&gt;build&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;())&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;run&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;addr&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;)&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;await&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;.&lt;/span&gt;&lt;span style="color:#000"&gt;unwrap&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;();&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="grpc-compression"&gt;gRPC Compression&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/tuchg"&gt;@tuchg&lt;/a&gt; for bringing us gRPC compression and decompression support in &lt;a href="https://github.com/cloudwego/volo/pull/91"&gt;#91&lt;/a&gt; , if there is a requirement for the transmission size, this function can be used.&lt;/p&gt;
&lt;h2 id="thrift-codec-refactoring"&gt;Thrift Codec refactoring&lt;/h2&gt;
&lt;p&gt;In the previous Codec design, Thrift codec was specified by &lt;code&gt;CodecType&lt;/code&gt;, which brought two problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is not easy to extend new protocol support, all supported protocols need to be implemented in the framework and hard-coded into CodecType;&lt;/li&gt;
&lt;li&gt;It is impossible to decouple and arrange the Transport and Serialize protocols. For example, if we want to support the TCompact protocol, then we need to add multiple variants: TTHeaderFramedCompact, TTheaderCompact, FramedCompact, Compact&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the same time, the previous codec did not achieve Zero Copy, and there is room for improvement in performance.&lt;/p&gt;
&lt;p&gt;This refactoring solves all the above problems at once. We no longer rely on &lt;code&gt;CodecType&lt;/code&gt; to specify the codec method, but use the &lt;code&gt;make_codec&lt;/code&gt; interface to specify the Codec generation method, so that we can easily Expand new protocol support, and also decouple and arrange Transport and Serialize protocols.&lt;/p&gt;
&lt;p&gt;For details, please refer to &lt;a href="https://docs.rs/volo-thrift/latest/volo_thrift/codec/index.html"&gt;codec documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="thrift-generated-code-default-field-change"&gt;Thrift generated code default field change&lt;/h2&gt;
&lt;p&gt;In the previous generated code, the binary type will generate &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;, and the string type will generate String, which will cause a clone to be performed when decoding and encoding, and the performance loss will be large; in this version, we will use these two The Rust type generated by default for this type has been changed to Bytes and &lt;a href="https://docs.rs/faststr/latest/faststr/"&gt;FastStr&lt;/a&gt; to achieve full-link Zero Copy, because in practice we have observed absolutely Most of the binary and string in Request / Response will not be modified, and even if the user needs to modify, it is at the cost of one Clone, and the performance will not be worse than before.&lt;/p&gt;
&lt;p&gt;This is a breaking change. Users of previous versions may need to modify the code after upgrading. Generally speaking, only need to modify the type according to the error message.&lt;/p&gt;
&lt;p&gt;If there is still a need to generate &lt;code&gt;String&lt;/code&gt; for string, you can add an annotation of &lt;code&gt;pilota.rust_type=&amp;quot;string&amp;quot;&lt;/code&gt; to the corresponding field in the thrift idl file, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-thrift" data-lang="thrift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;struct&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;Item&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;{&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#0000cf;font-weight:bold"&gt;1&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;:&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;required&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#204a87;font-weight:bold"&gt;string&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;name&lt;/span&gt; &lt;span style="color:#ce5c00;font-weight:bold"&gt;(&lt;/span&gt;&lt;span style="color:#000"&gt;pilota&lt;/span&gt;&lt;span style="color:#a40000"&gt;.&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt; &lt;/span&gt;&lt;span style="color:#000"&gt;rust_type&lt;/span&gt;&lt;span style="color:#ce5c00;font-weight:bold"&gt;=&lt;/span&gt;&lt;span style="color:#4e9a06"&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;);&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;&lt;/span&gt;&lt;span style="color:#000;font-weight:bold"&gt;}&lt;/span&gt;&lt;span style="color:#f8f8f8;text-decoration:underline"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition, Pilota also supports other annotations. For details, please refer to: &lt;a href="https://www.cloudwego.io/docs/volo/pilota/#pilota-supported-annotations"&gt;Pilota Supported Annotations&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="full-release-note"&gt;Full Release Note&lt;/h2&gt;
&lt;p&gt;The complete Release Note can be referred to: &lt;a href="https://github.com/cloudwego/volo/releases/tag/volo-0.3.0"&gt;https://github.com/cloudwego/volo/releases/tag/volo-0.3.0&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Blog: Kitex Proxyless Practice：Traffic Lane Implementation with Istio and OpenTelemetry</title><link>https://www.cloudwego.io/blog/2022/12/20/kitex-proxyless-practicetraffic-lane-implementation-with-istio-and-opentelemetry/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/12/20/kitex-proxyless-practicetraffic-lane-implementation-with-istio-and-opentelemetry/</guid><description>
&lt;blockquote&gt;
&lt;p&gt;Preface: Kitex Proxyless enables the Kitex service to interact directly with istiod without envoy sidecar. It dynamically obtains service governance rules
delivered by the control plane based on the xDS protocol and converts them to Kitex rules to implement some service governance functions, such as traffic routing.
Based on Kitex Proxyless, Kitex can be managed by Service Mesh without sidecar. Besides, the governance rule Spec, governance control plane, governance delivery protocol,
and heterogeneous data governance capability can be unified under multiple deployment modes. By rewriting the bookinfo project using Kitex and Hertz, it demonstrates how to implement a traffic lane using xDS protocol.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="01-introduction"&gt;01 Introduction&lt;/h2&gt;
&lt;h3 id="kitex-proxyless"&gt;&lt;strong&gt;Kitex Proxyless&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; is a Golang RPC framework open-sourced by ByteDance that already natively supports the xDS standard protocol and can be managed by Service Mesh in Proxyless way.
Refer to this doc for detailed design: &lt;a href="https://github.com/cloudwego/kitex/issues/461"&gt;Proposal: Kitex support xDS Protocol&lt;/a&gt;.
Official doc is also available here at &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/xds/"&gt;Kitex/Tutorials/Advanced Feature/xDS Support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kitex Proxyless Simply means that Kitex services can interact directly with istiod without envoy sidecar and dynamically obtain service governance rules delivered by the control plane based on the xDS protocol.
And those rules will be translated into Kitex corresponding rules to implement some service governance functions (such as traffic routing which is the focus of this blog).&lt;/p&gt;
&lt;p&gt;Based on Kitex Proxyless, Kitex application can be managed by Service Mesh in a unified manner without sidecar, and thus the governance rule Spec, governance control plane,
governance delivery protocol, and heterogeneous data governance capability can be unified under multiple deployment modes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/unify_architecture.svg" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="traffic-routing"&gt;Traffic Routing&lt;/h3&gt;
&lt;p&gt;Traffic routing refers to the ability to route traffic to a specified destination based on its specific metadata identifier.&lt;/p&gt;
&lt;p&gt;Traffic routing is one of the core capabilities in service governance and one of the scenarios that Kitex Proxyless supports in the first place.&lt;/p&gt;
&lt;p&gt;The approach of &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; implementing traffic routing base on xDS is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/2.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Specific procedure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an xDS Router MW to Pick Cluster (routing) and watch LDS and RDS of target services.&lt;/li&gt;
&lt;li&gt;Aware of LDS changes and extract the Filter Chain and inline RDS in the LDS of the target service.&lt;/li&gt;
&lt;li&gt;Aware of RDS changes and obtain the route configuration of the target service based on VirtualHost and ServiceName matching. (Prefix, suffix, exact, and wildcard are supported)&lt;/li&gt;
&lt;li&gt;The routing rules in the matched RDS are traversed and processed. The routing rules are divided into two parts (refer to the routing specification definition) :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Match:
&lt;ul&gt;
&lt;li&gt;Path(required): Extract Method from rpcinfo for matching;&lt;/li&gt;
&lt;li&gt;HeaderMatcher(optional): Extract the corresponding metadata KeyValue from the metainfo and match it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Route：
&lt;ul&gt;
&lt;li&gt;Cluster ：Standard Cluster.&lt;/li&gt;
&lt;li&gt;WeightedClusters(Weight routing) : cluster is selected according to weight within MW.&lt;/li&gt;
&lt;li&gt;Write the selected Cluster to the EndpointInfo.Tag for later service discovery.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, traffic routing is a process of selecting the corresponding SubCluster according to certain rules.&lt;/p&gt;
&lt;h2 id="02-traffic-lane"&gt;02 Traffic Lane&lt;/h2&gt;
&lt;p&gt;Based on traffic routing capability, we can extend many usage scenarios, such as: A/B testing, canary release, blue-green release, etc., and the focus of this paper: Traffic Lane.&lt;/p&gt;
&lt;p&gt;The traffic lane can be understood as splitting a group of service instances in a certain way (such as deployment environment), and based on the routing capability and global metadata,
so that traffic can flow in the specified service instance lanes in accordance with the exact rules (logically similar to lanes in a swimming pool). Traffic lane can be used for full-path grey release.&lt;/p&gt;
&lt;p&gt;In Istio we typically group instances with DestinationRule subset, splitting a service into multiple subsets (e.g. Based on attributes such as version and region)
and then work with VirtualService to define the corresponding routing rules and route the traffic to the corresponding subset. In this way, the single-hop routing capability in the lane is realized.&lt;/p&gt;
&lt;p&gt;However, traffic routing capability alone is not enough to realize traffic lane. We need a good mechanism to accurately identify the traffic
and configure routing rules for each hop traffic based on this feature when a request spans multiple services.&lt;/p&gt;
&lt;p&gt;As shown in the following figure: Suppose we want to implement a user request that is accurately route to the v1 version of service-b.
The first thought might be to put a &lt;code&gt;uid = 100&lt;/code&gt; in the request header and configure the corresponding VirtualService to match the &lt;code&gt;uid = 100&lt;/code&gt; in the header.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;But it has several obvious drawbacks for this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Not common enough&lt;/strong&gt;: If a specific business attribute (such as uid) is used as a traffic route matching rule, the business attribute must be manually transmitted through the full path.
This is highly intrusive to business and requires business cooperation. In addition, when we want to use other business attributes, all services on the full path need to change to adapt. Therefore, it is a very unusual practice.&lt;/li&gt;
&lt;li&gt;Routing rules are prone to frequent changes, resulting in &lt;strong&gt;rule overcrowding&lt;/strong&gt;. Routing rules are identified by specific business attributes (for example: uid) is used as a traffic route matching rule.
If you want to change a business attribute or set a routing rule for other users, you need to modify the original routing rule or repeatedly define multiple routing rules for different business attributes, which easily causes route rule overcrowding and is difficult to maintain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, in order to achieve uniform traffic routing across the full path, we also need to use a more general traffic dyeing and the capability to transmit the dye identifier through the full path.&lt;/p&gt;
&lt;h3 id="traffic-dyeing"&gt;Traffic Dyeing&lt;/h3&gt;
&lt;p&gt;Traffic dyeing refers to marking the request traffic with a special identifier and carrying this identifier in the full request path.
The so-called traffic lane means that all services in the path sets traffic routing rules based on the uniform gray traffic dyeing identifier so that the traffic can be accurately controlled in different lanes.&lt;/p&gt;
&lt;p&gt;Usually, traffic dyeing is done at the gateway layer, and the metadata in the original request is converted into corresponding dye identifiers according to certain rules (conditions and proportions).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dyeing by conditions&lt;/strong&gt;: when the request metadata meets certain conditions (such as &lt;code&gt;uid = 100&lt;/code&gt; in the request header and cookie matching), the current request is marked with a dye identifier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dyeing by proportions&lt;/strong&gt;: the request is marked with a dye identifier in proportion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With a unified traffic dyeing mechanism, we do not need to care about specific business attribute identifiers when configuring routing rules. We only need to configure routes based on the dye identifiers.
The specific service attributes are abstracted into conditional dyeing rules to be more universal. Even if the business attributes change, the routing rules do not need to change frequently.&lt;/p&gt;
&lt;h4 id="dye-identifier-transmitting"&gt;Dye Identifier Transmitting&lt;/h4&gt;
&lt;p&gt;The dyed identifier is usually transmitted through the Tracing Baggage, which is used to pass business custom KV attributes through the entire call chain (full-path), such as traffic dyeing identifiers and business identifiers such as AccountID.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;We usually use the Tracing Baggage mechanism to transmit the corresponding dye identifiers through the full-path. Most of the Tracing frameworks support the Baggage concept, such as: OpenTelemetry, Skywalking, Jaeger, etc.&lt;/p&gt;
&lt;p&gt;With a set of universal full-path transmitting mechanism, the service only needs to config the tracing once, and there is no need to adapt every time the service attribute identifier changes.&lt;/p&gt;
&lt;p&gt;Next part introduces and demonstrates how to implement the traffic lane based on Kitex Proxyless and OpenTelemetry Baggage by using a specific engineering example.&lt;/p&gt;
&lt;h2 id="03-demo-introductionbookinfo"&gt;03 Demo Introduction：Bookinfo&lt;/h2&gt;
&lt;p&gt;The demo is a rewriting of the &lt;a href="https://istio.io/latest/zh/docs/examples/bookinfo/"&gt;Istio Bookinfo&lt;/a&gt; project using &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt; and &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;istiod&lt;/strong&gt; as the xDS server and the entry for CRD configuration and delivery.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;wire&lt;/strong&gt; to implement dependency injection;&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;opentelemetry&lt;/strong&gt; to implement full path tracing;&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/kitex-contrib/xds"&gt;Kitex-xds&lt;/a&gt; and &lt;strong&gt;opentelemetry baggage&lt;/strong&gt; to implement a traffic lane in proxyless mode;&lt;/li&gt;
&lt;li&gt;Implement a &lt;a href="https://github.com/cloudwego/biz-demo/blob/main/bookinfo/README_CN.md"&gt;Bookinfo&lt;/a&gt; UI using &lt;strong&gt;arco-design&lt;/strong&gt; and &lt;strong&gt;react&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="business-architecture"&gt;Business Architecture&lt;/h3&gt;
&lt;p&gt;In keeping with Bookinfo, the overall business architecture is divided into four separate microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;productpage&lt;/code&gt; - This microservice calls &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;reviews&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;details&lt;/code&gt; - This microservice contains information about the book;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reviews&lt;/code&gt; - This microservice contains book related reviews. It also calls &lt;code&gt;ratings&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ratings&lt;/code&gt; - This microservice contains ratings information consisting of book reviews.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;reviews&lt;/code&gt; are available in three versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The v1 version calls the ratings service and uses one ⭐️ to display the ratings.&lt;/li&gt;
&lt;li&gt;The v2 version invokes the ratings services, and use five ⭐⭐⭐⭐⭐⭐ to display the ratings.&lt;/li&gt;
&lt;li&gt;The v3 version won&amp;rsquo;t call the ratings service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/bookinfo.svg" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="diagram-of-traffic-lanes"&gt;Diagram of Traffic Lanes&lt;/h3&gt;
&lt;p&gt;The whole call chain is divided into 2 lanes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base lane: Undyed traffic is routed to the base lane.&lt;/li&gt;
&lt;li&gt;Branch lane: dyed traffic is routed to the branch lane of reviews-v2 -&amp;gt;ratings-v2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/lane.svg" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="traffic-dyeing-1"&gt;Traffic Dyeing&lt;/h3&gt;
&lt;p&gt;The gateway is responsible for traffic dyeing. For example, the request with &lt;code&gt;uid=100&lt;/code&gt; in the request header is dyed and carries baggage of &lt;code&gt;env=dev&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/dyeing.svg" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;The dye mode may vary according to different gateways. For example, when we select istio ingress as the gateway, we can use &lt;strong&gt;EnvoyFilter + Lua&lt;/strong&gt; to write the gateway dye rules.&lt;/p&gt;
&lt;h3 id="workload-labeling"&gt;Workload Labeling&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Label the workload with corresponding version identifier.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Take service &lt;code&gt;reviews&lt;/code&gt; as an example. You only need to label the corresponding pod with &lt;code&gt;version: v1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/8.png" alt="image"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Set a series of subsets for the service based on the DestinationRule:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Productpage: v1&lt;/li&gt;
&lt;li&gt;Reviews: v1、v2、v3&lt;/li&gt;
&lt;li&gt;Ratings: v1、v2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="traffic-routing-rules"&gt;Traffic Routing Rules&lt;/h3&gt;
&lt;p&gt;The gateway has already dyed the request header with &lt;code&gt;uid=100&lt;/code&gt; and automatically loaded &lt;code&gt;env=dev&lt;/code&gt; baggage,
so we only need to match the route according to the header. Here is an example of the route rule configuration:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="check-the-effect"&gt;Check the Effect&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Base Lane&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requests without &lt;code&gt;uid=100&lt;/code&gt; header in the inbound traffic are automatically routed to the base lane, which is a round-robin of v1 and v3 of &lt;code&gt;reviews&lt;/code&gt; service resulting in a round-robin score of 0 and 1.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/bookstore_base.png" alt="image"&gt;&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Branch Lane&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We use the &lt;strong&gt;mod-header&lt;/strong&gt; plug-in of the browser to simulate the scenario where the &lt;code&gt;uid=100&lt;/code&gt; is carried in the inbound traffic request header.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/12.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Click the refresh button again, you can find that the request hits the branch lane, and the traffic lane takes effect successfully.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/Kitex_Proxyless/bookstore_branch.jpeg" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="04-summary-and-outlook"&gt;04 Summary and Outlook&lt;/h2&gt;
&lt;p&gt;So far, we have implemented a complete full-path traffic lane based on Kitex Proxyless and OpenTelemetry.
And we can set corresponding routing rules for Kitex based on Istio standard governance rule Spec without Envoy sidecar.&lt;/p&gt;
&lt;p&gt;In addition to traffic routing capabilities, Kitex Proxyless is also continuously iterating and optimizing to meet more requirements for data plane governance capabilities.
As an exploration and practice of Service Mesh data plane, Proxyless not only can enrich the deployment form of data plane, but also hopes to continuously polish &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;,
enhance its ability in open source ecological compatibility, and create a more open and inclusive microservice ecosystem.&lt;/p&gt;
&lt;h2 id="05-relevant-project"&gt;05 Relevant Project&lt;/h2&gt;
&lt;p&gt;Here is a list of the projects involved in the demo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;biz-demo: &lt;a href="https://github.com/cloudwego/biz-demo"&gt;https://github.com/cloudwego/biz-demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex: &lt;a href="https://github.com/cloudwego/kitex"&gt;https://github.com/cloudwego/kitex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hertz: &lt;a href="https://github.com/cloudwego/hertz"&gt;https://github.com/cloudwego/hertz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex-xds: &lt;a href="https://github.com/kitex-contrib/xds"&gt;https://github.com/kitex-contrib/xds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kitex-opentelemetry: &lt;a href="https://github.com/kitex-contrib/obs-opentelemetry"&gt;https://github.com/kitex-contrib/obs-opentelemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hertz-opentelemetry: &lt;a href="https://github.com/hertz-contrib/obs-opentelemetry"&gt;https://github.com/hertz-contrib/obs-opentelemetry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This demo has been submitted in the biz-demo repository, and will be optimised continuously. biz-demo will include some complete demos based on CloudWeGo technology stack with certain business scenarios.
The original intention is to provide valuable references for enterprise users to use CloudWeGo in production. Contributors are always welcomed to participate in the contribution of CloudWeGo biz-demo. Let&amp;rsquo;s try something fun together.&lt;/p&gt;</description></item><item><title>Blog: Netpoll Release v0.3.0</title><link>https://www.cloudwego.io/blog/2022/11/09/netpoll-release-v0.3.0/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/11/09/netpoll-release-v0.3.0/</guid><description>
&lt;h2 id="feat"&gt;Feat&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/206"&gt;#206&lt;/a&gt;] feat: connection flush support write timeout.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/182"&gt;#182&lt;/a&gt;] feat: dial in ipv6 only.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/200"&gt;#200&lt;/a&gt;] fix: fd not detach when close by user.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/196"&gt;#196&lt;/a&gt;] fix: limit iovecs max to 2GB(2^31).&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/179"&gt;#179&lt;/a&gt;] fix: length overflow.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/netpoll/pull/183"&gt;#183&lt;/a&gt;] fix: dont check epollout when epollerr.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.4.3</title><link>https://www.cloudwego.io/blog/2022/11/02/kitex-release-v0.4.3/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/11/02/kitex-release-v0.4.3/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Extend the Generated Code of client/server&lt;/strong&gt;: Add a new feature which can extend generated client.go/server.go with config file. It is applicable to the scenario for customizing the unified suite. See &lt;a href="[/docs/kitex/tutorials/code-gen/template_extension/]"&gt;Extend the Templates of Service Generated Code&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Biz Customized Exception&lt;/strong&gt; : Add supporting to return customized biz error which can distinguish with RPC error. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/basic-feature/bizstatuserr/"&gt;Business Exception&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/issues/511"&gt;Proposal&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request Profiler&lt;/strong&gt; : Add a new feature to do profiler for requests which can be used for cost statistics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context Middleware&lt;/strong&gt; : Add Context Middleware which is used for adding request-level middlewares.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimization"&gt;&lt;strong&gt;Optimization&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Frugal Performance Optimization&lt;/strong&gt; : Support frugal precompile (pretouch) when new client or server, which is to reduce the impact of dynamic compilation on latency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connpool Optimization&lt;/strong&gt; : Refactor connection pool to improve the idle connections cleanup.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature-1"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/691"&gt;#691&lt;/a&gt;] feat(client): add context middleware which is used for adding request-level middlewares.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/649"&gt;#649&lt;/a&gt;] feat(connpool): new long connection pool with minIdle config and idle connections cleanup.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/672"&gt;#672&lt;/a&gt;] feat(grpc): add kitex grpc metadata api to get header, tailer, and peer address metadata.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/613"&gt;#613&lt;/a&gt;] feat(exception): support customized biz error which can distinguish with RPC error.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/670"&gt;#670&lt;/a&gt;] feat(exception): support error format.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/678"&gt;#678&lt;/a&gt;] feat(tool): add git and record param for cmd.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/662"&gt;#662&lt;/a&gt;] feat(tool): support frugal precompile (pretouch) when new client or server.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/657"&gt;#657&lt;/a&gt;] feat(tool): support template extension.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/527"&gt;#527&lt;/a&gt;] feat(profiler): profiler for rpc request which can be used for cost statistics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/690"&gt;#690&lt;/a&gt;] optimize(meta): remove error logic for adding default metaHandler in #503.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/638"&gt;#638&lt;/a&gt;] optimize(generic): httppb generic support map/list elem type as struct.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/641"&gt;#641&lt;/a&gt;] optimize(tool): add warnings comments for oneway methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fix"&gt;Fix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/611"&gt;#611&lt;/a&gt;] fix(client): fix resource leaks caused by Finalizer not being triggered in the scenario where clients are created frequently.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/698"&gt;#698&lt;/a&gt;] fix(connpool): adjust globalIdle based on the number of connections decreased during the Get.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/636"&gt;#636&lt;/a&gt;] fix(connpool): CloseCallback and statistical reporting of connection pool are invalid when the connection pool is reset in &lt;code&gt;ForwardProxy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/647"&gt;#647&lt;/a&gt;] fix(grpc): update grpc connection window size when initial and synchronize grpc pr #5459.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/639"&gt;#639&lt;/a&gt;] fix(generic): marshalling list&lt;byte&gt; in generic and enabling forJSON reader option for MapThriftGeneric.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/655"&gt;#655&lt;/a&gt;] fix(generic): numeric constant parsing fails when used as generic default value.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/654"&gt;#654&lt;/a&gt;] fix(frugal): fix compilation error when using lower go version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/682"&gt;#682&lt;/a&gt;] fix(profiler): profiler stops pprof profile.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/637"&gt;#637&lt;/a&gt;] fix(tool): fix imports in handler.go template.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/630"&gt;#630&lt;/a&gt;] fix(tool): remove redundant kitex comments for file that do not declare an interface.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/627"&gt;#627&lt;/a&gt;] fix(tool): fix import missing when having different alias for the same path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/651"&gt;#651&lt;/a&gt;] refactor(server): server handler read/write interface return new context.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="docs"&gt;Docs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/656"&gt;#656&lt;/a&gt;] docs: remove wrong message in CONTRIBUTING.md.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/683"&gt;#683&lt;/a&gt;] docs(kerrors): fix kerrors WithCauseAndExtraMsg method comment.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/625"&gt;#625&lt;/a&gt;] chore: fix grammar of pull request template.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/623"&gt;#623&lt;/a&gt;] chore: modify the template of pull request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test--ci"&gt;Test &amp;amp; CI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/646"&gt;#646&lt;/a&gt;] test: fix ut failure caused by InitRPCInfoFunc not setting rpcinfo.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/680"&gt;#680&lt;/a&gt;] test: fix retry test race.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/661"&gt;#661&lt;/a&gt;] test: make wpool tests more stable.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/643"&gt;#643&lt;/a&gt;] test: add test for detection server handler.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/632"&gt;#632&lt;/a&gt;] test: replace handwritten mock classes with gomock auto-generated classes.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/697"&gt;#697&lt;/a&gt;] chore(ci): fixed skywalking-eyes version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/652"&gt;#652&lt;/a&gt;] chore(ci): delete repeated tests to reduce unit tests cost times.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/588"&gt;#588&lt;/a&gt;] chore(ci): support codecov.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Hertz Release v0.4.0</title><link>https://www.cloudwego.io/blog/2022/10/28/hertz-release-v0.4.0/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/10/28/hertz-release-v0.4.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/289"&gt;#289&lt;/a&gt;] feat: render support IndentedJSON.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/304"&gt;#304&lt;/a&gt;] feat: support errors format for the recovery middleware.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/278"&gt;#278&lt;/a&gt;] feat: add compile tag for json implementation.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/239"&gt;#239&lt;/a&gt;] feat: add retry extension for client.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/265"&gt;#265&lt;/a&gt;] feat: add closeNoResetBuffer method for standard network.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/258"&gt;#258&lt;/a&gt;] feat: errors support format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/295"&gt;#295&lt;/a&gt;] optimize: ignore flushing error when connection is closed or reset.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/322"&gt;#322&lt;/a&gt;] optimize: modify the default log of the recovery middleware.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/266"&gt;#266&lt;/a&gt;] optimize(hlog): distinguish systemlogger and defaultlogger.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/280"&gt;#280&lt;/a&gt;] optimize: add listening log when using standard lib.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/318"&gt;#318&lt;/a&gt;] refactor: add SetRetryIf to remain compatible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test"&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/299"&gt;#299&lt;/a&gt;] test: enrich ut for pkg/protocol/header.go.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/290"&gt;#290&lt;/a&gt;] test: enrich ut for pkg/app/server/option.go.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/274"&gt;#274&lt;/a&gt;] test: increase internal/bytesconv unit test statement coverage.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/285"&gt;#285&lt;/a&gt;] test: enrich unit tests for pkg/protocol/request.go.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/271"&gt;#271&lt;/a&gt;] test: ut supplementary for pkg/network.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/264"&gt;#264&lt;/a&gt;] test: add ut for hertz/pkg/common/adaptor.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/267"&gt;#267&lt;/a&gt;] test(pkg/common/config): pkg/common/config test coverage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/328"&gt;#328&lt;/a&gt;] docs: add lark extension to readme.md.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/325"&gt;#325&lt;/a&gt;] docs: update performance data in README and README_cn.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/307"&gt;#307&lt;/a&gt;] docs(README): add hertz extensions list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="style"&gt;Style&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/316"&gt;#316&lt;/a&gt;] style: remove empty comments for license.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/272"&gt;#272&lt;/a&gt;] chore: upgrade sonic version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/310"&gt;#310&lt;/a&gt;] chore: change license header style to avoid format error of buildtag from CI check.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo Release v0.2.1</title><link>https://www.cloudwego.io/blog/2022/10/26/volo-release-v0.2.1/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/10/26/volo-release-v0.2.1/</guid><description>
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/61"&gt;#61&lt;/a&gt;] optimize volo-thrift code, remove unnecessary generic parameters.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/63"&gt;#63&lt;/a&gt;] remove TAIT elision lifetime required after nightly-2022-10-20.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/73"&gt;#73&lt;/a&gt;] remove useless liftetime parameter in LoadBalance:: InstanceIter.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/65"&gt;#65&lt;/a&gt;] feat: upgrade clap to 4.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/72"&gt;#72&lt;/a&gt;] feat: add writev support for volo net conn.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Volo Release v0.2.0</title><link>https://www.cloudwego.io/blog/2022/10/18/volo-release-v0.2.0/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/10/18/volo-release-v0.2.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/31"&gt;#31&lt;/a&gt;] Support Windows.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/26"&gt;#26&lt;/a&gt;] feat: add sd and lb for grpc.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/45"&gt;#45&lt;/a&gt;] feat(grpc): support uds.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/32"&gt;#32&lt;/a&gt;] feat: grpc support metainfo.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/30"&gt;#30&lt;/a&gt;] feat: grpc server add &lt;code&gt;layer_front()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/42"&gt;#42&lt;/a&gt;] feat(thrift): support multiplex.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/53"&gt;#53&lt;/a&gt;] fix: &lt;code&gt;write_field_begin&lt;/code&gt; args.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/34"&gt;#34&lt;/a&gt;] fix: connect timeout.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/46"&gt;#46&lt;/a&gt;] retry IO error only.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/volo/pull/33"&gt;#33&lt;/a&gt;] fix: grpc middleware error constraints.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex: Unifying Open Source Practice for a High-Performance RPC Framework</title><link>https://www.cloudwego.io/blog/2022/09/30/kitex-unifying-open-source-practice-for-a-high-performance-rpc-framework/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/09/30/kitex-unifying-open-source-practice-for-a-high-performance-rpc-framework/</guid><description>
&lt;h2 id="from-development-to-open-source-transition"&gt;From Development to Open Source Transition&lt;/h2&gt;
&lt;p&gt;Many researchers and practitioners may have just learned about CloudWeGo, so let&amp;rsquo;s first introduce the relationship between CloudWeGo and &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="cloudwego-and-kitex"&gt;CloudWeGo and Kitex&lt;/h2&gt;
&lt;p&gt;Kitex is CloudWeGo&amp;rsquo;s first open-source microservice framework, designed to empower developers in building high-performance and extensible microservices using Golang. Kitex encompasses the entire stack, including the network library, serialization library, and framework implementation, making it a comprehensive self-developed RPC framework.&lt;/p&gt;
&lt;p&gt;One notable feature of Kitex is its support for the gRPC protocol. Leveraging the official gRPC source code, Kitex optimizes the gRPC implementation, resulting in superior performance compared to the official gRPC framework. This sets Kitex apart from other Golang frameworks that offer open-source support for the gRPC protocol. Developers seeking both gRPC functionality and high-performance capabilities will find Kitex to be an excellent choice.&lt;/p&gt;
&lt;p&gt;In addition to Kitex, CloudWeGo has recently introduced two other projects to its open-source lineup: &lt;a href="https://github.com/cloudwego/hertz"&gt;Hertz&lt;/a&gt;, a Golang HTTP framework, and &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt;, a Rust RPC framework. Alongside these microservice frameworks, CloudWeGo offers various high-performance foundational libraries and general microservice capabilities as open-source resources. To explore more of CloudWeGo&amp;rsquo;s open-source sub-projects, visit the &lt;a href="https://www.cloudwego.io/"&gt;official CloudWeGo website&lt;/a&gt; for additional information and resources.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Based on feedback from the community, there have been discussions surrounding whether Kitex is an open-source Key Performance Indicator (KPI) project of ByteDance, as well as concerns about its stability and continuity. We can responsibly state that Kitex is not a KPI project, but rather a genuine project derived from ByteDance&amp;rsquo;s extensive internal practical experience. Since its open-source release, we have consistently maintained consistency between the internal and external development efforts of Kitex. This consistency, coupled with the alignment of internal and external codebases, has ensured the continuous iteration and improvement of Kitex. To address any remaining concerns, let us provide you with a detailed overview of Kitex&amp;rsquo;s development and open-source process.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/2.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="kitex-development-history"&gt;Kitex Development History&lt;/h2&gt;
&lt;p&gt;In 2014, ByteDance began adopting Golang as a programming language. The internal services of ByteDance were established in 2015, where the Thrift protocol was chosen for RPC (Remote Procedure Call) scenarios, and an internal RPC framework was supported. In 2016, the first Golang RPC framework called Kite was officially launched. During the initial stages of rapid company growth, the primary focus is on quickly implementing requirements and addressing relatively simple scenarios. Therefore, there may not be extensive considerations in the design process. This approach is reasonable since the exploration phase lacks complete clarity on which scenarios will require support, and excessive consideration can lead to over-design issues.&lt;/p&gt;
&lt;p&gt;As business scenarios became more complex, the demand for diversified functionalities increased, resulting in a rise in the number of access services and calls each year. Kite, the initial Golang RPC framework, eventually proved inadequate to support subsequent iterations. Recognizing this, a new project called Kitex was initiated in 2019, following over three years of online service. The official version of Kitex was released in early 2020, and by the end of the same year, over 10,000 services within Byte were connected to Kitex, showcasing its widespread adoption.&lt;/p&gt;
&lt;p&gt;From 2014 to 2020, Golang has served as the primary programming language for business development within ByteDance, positioning the company as one of the industry leaders in terms of Golang application adoption. Our service framework enables reliable communication among tens of thousands of Golang microservices. Through extensive verification of numerous microservices and handling substantial traffic, we have developed relatively mature microservice best practices. To contribute to the cloud-native community and enrich the Golang product ecosystem, we decided to open-source our internal practices. In 2021, under the CloudWeGo brand, we officially released Kitex as the first open-sourced service framework. As of August this year, Kitex has provided support for over &lt;strong&gt;60,000&lt;/strong&gt; internal services at ByteDance, reaching peak &lt;strong&gt;QPS (Queries Per Second) in the hundreds of millions&lt;/strong&gt;.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/3.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;You might still have lingering questions regarding the comprehensive microservice system and its integration with the fundamental cloud ecosystem. Whether it&amp;rsquo;s in a public or private cloud environment, additional services are essential to support microservice governance. These services include governance platforms, registration centers, configuration centers, monitoring tools, traceability systems, service grids, and other customized specifications. ByteDance has developed a comprehensive set of internal services to support its microservice system. However, due to constraints, these services cannot be open-sourced in the short term.&lt;/p&gt;
&lt;p&gt;Now, how does CloudWeGo maintain a unified codebase internally and externally while ensuring seamless iteration?
In addressing this issue, let&amp;rsquo;s examine the module division of Kitex. The Kitex module is divided into three distinct parts. Firstly, there is &lt;strong&gt;Kitex Core&lt;/strong&gt;, situated in the middle. This component defines the hierarchical structure of the framework, implements the core logic of the interface, and provides the default implementation of the interface.&lt;/p&gt;
&lt;p&gt;On the left, we have &lt;strong&gt;Kitex Tool&lt;/strong&gt;, which encompasses the implementation related to the generated code. The generated code tool is acquired by compiling this package and includes features such as IDL parsing, verification, code generation, and plug-in support.&lt;/p&gt;
&lt;p&gt;To enhance user convenience and offer more flexible extensions, the main capabilities have been separated as independent open-source basic libraries. Some examples include Thriftgo, Thrift-validator plug-in, and Fastpb. These independent libraries enable users to leverage specific functionalities and extend Kitex as needed.&lt;/p&gt;
&lt;p&gt;On the right, Kitex Byted represents an extended implementation of Byte&amp;rsquo;s internal basic &lt;strong&gt;capabilities&lt;/strong&gt; integration. At the outset, we consolidated internal capabilities as extensions within a single package, allowing for streamlined integration.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/4.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;By following this approach, we have been able to open-source specific parts of Kitex, namely Kitex Core and Tool. We achieved this by splitting the codebase, migrating the core code and tools of Kitex to the open-source library, and integrating internal extension modules as Kitex extensions while keeping them in the internal library. Additionally, we encapsulated a shell layer within the internal library to ensure seamless upgrades for internal users without significant impact.&lt;/p&gt;
&lt;p&gt;However, Kitex&amp;rsquo;s open-source journey goes beyond simple code splitting. In February 2021, we initiated preparations for Kitex&amp;rsquo;s open-source release. Despite the scalability of Kitex allowing for decoupling and integration with internal infrastructure, Kitex still relies on certain internal basic libraries. Therefore, to facilitate the open-source process, we first identified the dependent libraries and collaborated with relevant developers to open-source the &lt;a href="https://github.com/bytedance/gopkg"&gt;bytedance/gopkg&lt;/a&gt; library. This library is jointly maintained by CloudWeGo and ByteDance&amp;rsquo;s language team and includes enhancements to the capabilities of the Golang standard library. Interested developers can follow and utilize this library as a valuable resource.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/5.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;After successfully open-sourcing the gopkg library, we made necessary code adjustments to ensure compatibility for open-source adaptation. In July 2021, Kitex was officially open-sourced, and the internal version began utilizing the open-source library. However, considering the substantial number of internal microservices relying on Kitex, we prioritized a smooth transition for internal services. Consequently, we opted not to make an initial public announcement about the open-source release. Once we confirmed the stability and compatibility of the open-source version, we proceeded with an official public release in September 2021. The announcement confirmed the open-source nature of Kitex and welcomed external developers to explore and contribute.&lt;/p&gt;
&lt;p&gt;By providing insights into Kitex&amp;rsquo;s development and open-source history, our aim is to address concerns that external developers may have regarding whether Kitex is a KPI project. We want to assure them that Kitex is a community-driven open-source project backed by our commitment to stability, compatibility, and continuous improvement.&lt;/p&gt;
&lt;h3 id="the-value-of-open-source"&gt;The Value of Open Source&lt;/h3&gt;
&lt;p&gt;Towards the end of the first part, let&amp;rsquo;s briefly discuss the value that open source brings to us. Although Kitex was not initially developed solely for open source purposes, its implementation has been oriented towards open source from the start. &lt;strong&gt;Kitex&lt;/strong&gt; itself is a project that has undergone extensive internal implementation within our organization. By open sourcing Kitex, our aim is to enable more users to swiftly build microservices internally.&lt;/p&gt;
&lt;p&gt;At the same time, open source allows us to gather valuable feedback from communities and enterprises. It also attracts external developers to contribute their expertise and insights. This collective engagement helps drive the evolution of Kitex towards supporting multiple scenarios and enriching its capabilities, making it applicable to a wider range of contexts and organizations.&lt;/p&gt;
&lt;p&gt;This symbiotic process of open source fosters a positive cycle of mutual benefit and facilitates a win-win scenario for all involved parties.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/6.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="a-year-long-review-of-open-source-changes"&gt;A Year-long Review of Open Source Changes&lt;/h2&gt;
&lt;h3 id="framework-metrics"&gt;Framework Metrics&lt;/h3&gt;
&lt;p&gt;Before delving into the one-year open source changes of Kitex, let us first discuss the key metrics that should be considered when choosing a framework.&lt;/p&gt;
&lt;h3 id="scalability"&gt;Scalability&lt;/h3&gt;
&lt;p&gt;A framework&amp;rsquo;s scalability is crucial in determining its suitability for different platforms. If a framework is tightly coupled with internal capabilities and cannot be easily transplanted or expanded to support various scenarios, it may present challenges when used externally.&lt;/p&gt;
&lt;h3 id="usability"&gt;Usability&lt;/h3&gt;
&lt;p&gt;The ease of use of a framework can be evaluated from two perspectives. Firstly, for business developers, a framework that requires meticulous attention to its internal details may not be suitable for teams with high research and development efficiency requirements. Secondly, for framework-oriented secondary developers who provide custom support, a framework with excessive expansion capabilities or insufficient scalability may impose limitations and high expansion costs.&lt;/p&gt;
&lt;h3 id="richness-of-functions"&gt;Richness of Functions&lt;/h3&gt;
&lt;p&gt;While a framework can be customized based on extensibility, it is important to consider that not all developers have the capacity for extensive custom development. An ideal framework should offer a range of options for different expansion capabilities, allowing developers to select and combine them according to their underlying infrastructure and specific environment.&lt;/p&gt;
&lt;h3 id="high-performance"&gt;High Performance&lt;/h3&gt;
&lt;p&gt;While the preceding three points are crucial considerations during the initial framework selection, as service scale and resource consumption increase, performance becomes an indispensable factor. It is imperative to prioritize performance when choosing a framework to avoid future issues such as the need for framework replacement or forced customized maintenance.&lt;/p&gt;
&lt;p&gt;Regarding the measurement indicators mentioned above, Kitex may not have achieved perfection in all areas, but these four elements have been carefully considered during its design and implementation. We are committed to ensuring a well-rounded framework that addresses these aspects without compromising on any one of them.&lt;/p&gt;
&lt;h2 id="features"&gt;Features&lt;/h2&gt;
&lt;p&gt;The following is an overview of several significant functional features that have been introduced in Kitex&amp;rsquo;s open source journey over the past year.&lt;/p&gt;
&lt;h3 id="proxyless"&gt;Proxyless&lt;/h3&gt;
&lt;p&gt;Proxyless is a feature in Kitex that caters to open source scenarios. During the initial stages of Kitex&amp;rsquo;s open source release, there were internal discussions on whether to support xDS integration with &lt;a href="https://github.com/istio/istio"&gt;Istio&lt;/a&gt;. For external users, leveraging Istio allows for the quick establishment of a basic microservices architecture, resolving issues such as service discovery, traffic routing, and configuration delivery. However, utilizing the complete Istio solution necessitates the introduction of Envoy, which can increase operational and maintenance costs. Moreover, using the official Envoy solution directly may result in performance degradation, additional CPU overhead, and increased latency.&lt;/p&gt;
&lt;p&gt;If Kitex can directly connect to Istio, users would be able to benefit from some of Istio&amp;rsquo;s capabilities while avoiding the performance loss, deployment complexity, and maintenance costs associated with Envoy. However, in the early days of open source, we did not encounter clear user demands, so we did not provide high-quality support for this.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/7.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Later on, the gRPC team also introduced Proxyless support, and Istio officials adopted Proxyless as a recommended approach for Istio usage. Kitex has now implemented support for Proxyless, primarily focusing on service discovery integration. The extensions supported by xDS have been open sourced separately in the &lt;a href="https://github.com/kitex-contrib/xds"&gt;kitex-contrib/xds&lt;/a&gt; library and will undergo further enhancements in the future. To learn how to use Kitex to connect with Istio, please refer to the &lt;a href="https://github.com/istio/istio/blob/master/README.md"&gt;README&lt;/a&gt; documentation.&lt;/p&gt;
&lt;h3 id="json-and-protobuf-generalized-call-support"&gt;JSON and Protobuf generalized Call Support&lt;/h3&gt;
&lt;p&gt;Initially, Kitex provided support for HTTP generalization in gateway scenarios, as well as Map and binary generalization for common service scenarios. However, after open sourcing Kitex, user feedback highlighted the need for JSON and Protobuf generalization, leading to their subsequent implementation.&lt;/p&gt;
&lt;p&gt;The generalization of Protobuf is also used in API gateway scenarios. While the original data format for HTTP generalization is JSON, the serialization of JSON can be bulky and inefficient, which negatively impacts performance. As a result, many mobile interfaces opt to transmit data using Protobuf due to its more compact representation. To address this demand, Kitex now includes support for Protobuf generalization.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/8.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Currently, Kitex&amp;rsquo;s generalization primarily focuses on the back-end Thrift service. Whether it&amp;rsquo;s Protobuf, Map, or JSON, Kitex combines IDL analysis on the calling side to encode the data mappings into Thrift packets and send them to the back-end service.&lt;/p&gt;
&lt;p&gt;Now, you may wonder why the generalization is implemented on the calling side instead of the server side. Typically, when we think of generalization, we imagine the server parsing and processing the generalized request, with the caller providing a corresponding generalized client. However, generalization comes with a certain cost, making it less suitable for regular RPC scenarios. Moreover, generalization is meant for all back-end services, including those written in different languages like Golang, Java, C++, Python, Rust, and more. If every language framework had to support generalization, the cost would be significantly high. Additionally, achieving convergence across different language frameworks is a lengthy process. Considering these factors, Kitex supports generalization on the calling side. This approach allows for greater flexibility and enables users to take advantage of generalization selectively based on their specific needs.&lt;/p&gt;
&lt;h3 id="enhanced-retry-capability"&gt;Enhanced Retry Capability&lt;/h3&gt;
&lt;p&gt;When Kitex was open sourced last year, it already supported the retry function. Initially, there were two types of retries available: timeout retry and Backup Request.
For timeout retry, only the timeout exception was retried. However, to further improve the success rate of requests, users expressed the need to retry other exceptions or based on specific user-defined status codes. It became evident that supporting only timeout retry was insufficient to meet user requirements. In response, Kitex introduced retries with specified results. Users can now specify other exceptions or a particular type of response for which they want retries, and the framework will retry according to the specified results.&lt;/p&gt;
&lt;p&gt;Additionally, when users configure retries, if they set retries through code configuration, it will take effect for all RPC methods of the entire Client. However, users desired the ability to apply different retry strategies to different RPC methods. Different RPC methods may have varying requirements for indicators. For instance, some users may prefer using Backup Request to reduce delay, while others may prioritize exception retry to improve the success rate. To address this need, the new version of Kitex supports request granular configuration for retries.
The example below illustrates the usage of request granularity retry configuration. For example, if the RPC method is Mock, then when initiating an RPC call, we can configure a calloptspecified, and this request will adopt the specified retry strategy.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/9.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="thrift-validator"&gt;Thrift Validator&lt;/h3&gt;
&lt;p&gt;Thrift-gen-validator is a tool plug-in for Thriftgo, that enhances the code generation process. It allows users to describe and enforce constraints on the generated &lt;code&gt;struct&lt;/code&gt;&amp;rsquo;s &lt;code&gt;IsValid()&lt;/code&gt; error method based on annotations defined in the Thrift IDL. This ensures the legality of field values. Usually when making an RPC call, the user may verify the validity of some fields. If the user directly writes these verification codes, the investment cost will be high. To address this, we provide annotation support. As long as users define annotations in IDL according to the specified format, Kitex can help users generate verification code.&lt;/p&gt;
&lt;p&gt;The example below demonstrates the usage of code generation commands and an IDL annotation definition. By specifying the Thrift Validator plugin during code generation, our tool will parse the annotations and generate the required validation code. We are also currently contributing the Thrift Validator functionality to Apache Thrift.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/10.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="performance-optimization"&gt;Performance Optimization&lt;/h2&gt;
&lt;p&gt;After highlighting the important functional features, let&amp;rsquo;s move on to discussing several performance optimization features.&lt;/p&gt;
&lt;h3 id="thrift-high-performance-codec"&gt;Thrift High-Performance Codec&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cloudwego/frugal"&gt;Frugal&lt;/a&gt; is a dynamic Thrift codec that offers high-performance capabilities by leveraging Just-in-Time (JIT) compilation, eliminating the need for code generation. While we have already optimized the official Thrift codec and introduced FastThrift as part of our pre-open source optimization efforts, we wanted to further enhance performance by incorporating the design principles from our open source high-performance JSON library, Sonic. As a result, we have implemented the Thrift JIT codec in Frugal.
The table below illustrates a performance comparison between Frugal, combined with Kitex, and FastThrift.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/frugal.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;It is evident that Frugal offers superior RPC performance in most scenarios. In addition to its performance advantages, Frugal provides another benefit: it eliminates the need to generate codec code. Compared to Protobuf, Thrift&amp;rsquo;s generated code tends to be heavier. A complex IDL can generate files with tens of thousands of lines of code, which users are responsible for maintaining. Frugal simplifies this process by only requiring the generation of structure code, removing the need for codec code generation.&lt;/p&gt;
&lt;p&gt;To learn how to use Frugal in conjunction with Kitex, you can refer to the repository&amp;rsquo;s &lt;a href="https://github.com/cloudwego/frugal#readme"&gt;Readme&lt;/a&gt; file. users can also utilize Frugal as a standalone high-performance codec for Thrift. In the future, &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; may consider incorporating Frugal as the default codec option.&lt;/p&gt;
&lt;h3 id="protobuf-high-performance-codec"&gt;Protobuf High-Performance Codec&lt;/h3&gt;
&lt;p&gt;We primarily focused on supporting Thrift internally; however, we recognized that external users are more inclined towards using Protobuf or gRPC after the open-source release. Consequently, taking inspiration from Kitex FastThrift&amp;rsquo;s optimization approach, we re-implemented the generated code for Protobuf.
Starting from version v0.4.0, if users employ Kitex tools to generate Protobuf code, the default generation will include &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; codec code. Furthermore, when initiating RPC calls, Kitex will also utilize &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; as the default serialization option.&lt;/p&gt;
&lt;p&gt;The figures below illustrate a performance comparison between &lt;a href="https://github.com/cloudwego/fastpb"&gt;Fastpb&lt;/a&gt; and the official Protobuf serialization library. It is evident that Fastpb outperforms the official library in terms of efficiency, memory allocation, encoding, and decoding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FastWrite: &lt;strong&gt;(ns/op) ↓67.8% ，(B/op) ↓83.9%&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;FastRead: &lt;strong&gt;(ns/op) ↓41.5% ，(B/op) ↓4.5%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="grpc-performance-optimization"&gt;gRPC Performance Optimization&lt;/h3&gt;
&lt;p&gt;In the early days of open sourcing Kitex, our focus on stability and performance optimization for gRPC was relatively limited, as there were fewer internal use cases. However, after receiving feedback from numerous external users, we made dedicated efforts to address issues and optimize the performance of gRPC. In the middle of this year, we officially contributed these optimizations to the open-source library, which was released in version v0.4.0.&lt;/p&gt;
&lt;p&gt;The figure below provides a comparison of unary request throughput between Kitex-gRPC and the official gRPC framework before and after optimization. On the left side, you can see the throughput comparison before optimization.&lt;/p&gt;
&lt;p&gt;The figure below provides a comparison of unary request throughput between Kitex-gRPC and the official gRPC framework before and after optimization. On the left side, you can see the throughput comparison before optimization. At relatively low concurrency, Kitex&amp;rsquo;s throughput does not exhibit an advantage over the official gRPC framework. However, when using Fastpb, Kitex&amp;rsquo;s throughput performance improves compared to the pre-optimization stage. Despite this improvement, the low-concurrency throughput is still lower than that of the official gRPC framework. On the right side of the figure, you can observe the throughput comparison after optimization. The throughput has increased by 46% - 70% compared to the pre-optimization stage, and when compared to the official gRPC framework, the throughput has increased by 51% - 70%.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/13.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;The right side of the figure below presents a comparison of latency for the optimized Unary requests. In scenarios where Kitex achieves a much higher throughput than the official gRPC framework, Kitex also demonstrates significantly lower latency compared to gRPC. Additionally, after optimization, Kitex exhibits improved delay performance overall.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/14.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s examine the performance comparison of streaming requests in a stress test. Prior to optimization, Kitex&amp;rsquo;s performance for streaming requests, even under low concurrency, did not outperform the gRPC framework. However, after optimization, Kitex&amp;rsquo;s throughput surpasses that of the official gRPC, as demonstrated in the figure below. It is worth noting that while Kitex achieves high throughput under low concurrency, the latency remains relatively consistent. However, as concurrency increases, the latency diverges. Consequently, in terms of performance, Kitex&amp;rsquo;s implementation of the gRPC protocol exhibits clear advantages over the official framework.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/15.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;While Kitex may not have achieved complete functional alignment at this stage, it is capable of fulfilling the requirements of the majority of scenarios. Moreover, we are committed to ongoing efforts to further align and enhance its functionality in the future.&lt;/p&gt;
&lt;h2 id="development-with-community-and-advancement-of-ecosystem-and-enterprise-integration"&gt;Development with Community and Advancement of Ecosystem and Enterprise Integration&lt;/h2&gt;
&lt;h3 id="kitexs-community-driven-ecosystem-expansion"&gt;Kitex&amp;rsquo;s Community-Driven Ecosystem Expansion&lt;/h3&gt;
&lt;p&gt;Since its open-source release, we have been thrilled by the enthusiastic response from developers. Recognizing our team&amp;rsquo;s limitations in rapidly building an extensive Kitex ecosystem for external users, we have relied on the invaluable support of the community over the past year. Through collaborative efforts, Kitex has received significant contributions in areas such as service registration/discovery, observability, and service governance, with notable advancements in service registration/discovery. We have successfully integrated with mainstream open-source registration centers, and although further enhancements are required, we now possess the capability to help external users build robust microservice architectures, leveraging our existing support and expanding feature set.&lt;/p&gt;
&lt;p&gt;While we acknowledge the need for further enrichment in our docking capabilities, we are proud to state that, in conjunction with our existing support, Kitex already possesses the necessary features to facilitate the construction of microservice architectures for external users.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/16.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;We extend our heartfelt appreciation to the developers who have actively contributed to the growth of the CloudWeGo community. To explore the extensive ecosystem surrounding Kitex, we invite you to visit the &lt;a href="https://github.com/kitex-contrib"&gt;kitex-contrib&lt;/a&gt; repository in our open-source warehouse.&lt;/p&gt;
&lt;h3 id="working-with-external-companies"&gt;Working with External Companies&lt;/h3&gt;
&lt;p&gt;Our primary goal with the open-source release of Kitex was to assist external companies in swiftly establishing enterprise-level cloud-native architectures. Since then, we have been delighted to receive interest and engagement from notable organizations such as Semir, Huaxing Securities, Tanwan Games, and Heduo Technology. Their valuable feedback and specific requirements have shed light on unique usage scenarios and challenges distinct from our internal use cases, necessitating our attention, support, and optimization efforts.&lt;/p&gt;
&lt;p&gt;We are thrilled to witness the successful application of Kitex in these enterprise environments. In fact, during the CloudWeGo Meetup held on June 25th of this year, R&amp;amp;D professionals from &lt;a href="https://mp.weixin.qq.com/s/JAurW4P2E3NIduFaVY6jew"&gt;Semir&lt;/a&gt; and &lt;a href="https://mp.weixin.qq.com/s/QqGdzp-7rTdlxedy6bsXiw"&gt;Huaxing Securities&lt;/a&gt; shared their internal experiences and practical use cases, further validating the effectiveness and value of Kitex in real-world scenarios.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/17.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;In addition to the above companies, we have also provided consultation to private inquiries from various organizations regarding usage issues. We are very grateful for the support and feedback from these corporate users. As mentioned earlier, gathering feedback from the community and enterprises plays a crucial role in driving the evolution of Kitex to support a wide range of scenarios. If enterprise users have any specific needs or requirements, we encourage them to reach out to us.&lt;/p&gt;
&lt;h2 id="how-to-use-kitex-to-integrate-with-existing-infrastructure"&gt;How to use Kitex to Integrate with Existing Infrastructure&lt;/h2&gt;
&lt;p&gt;Here is a brief introduction on how to use Kitex to integrate with your internal infrastructure. Let&amp;rsquo;s take ByteDance as an example, there are extensions in the open source library within the internal warehouse. These extensions are designed to integrate internal capabilities specific to ByteDance. Within the BytedSuite, Kitex can be initialized to cater to various scenarios. Users simply need to add an option configuration while constructing the Client and Server components to achieve seamless integration. To ensure a hassle-free experience, we have incorporated this configuration within the generated scaffolding code. This means that users no longer need to specifically focus on integrating internal capabilities. Furthermore, we plan to share details about how this configuration is embedded in the generated code. By doing so, secondary developers working with external frameworks will be able to provide integration capabilities to business development teams in a similar manner.
&lt;img src="https://www.cloudwego.io/img/blog/Kitex_architecture_explained_en/18.png" alt="image"&gt;&lt;/p&gt;
&lt;h2 id="summary-and-future-perspectives"&gt;Summary and Future Perspectives&lt;/h2&gt;
&lt;h3 id="summarize"&gt;Summarize&lt;/h3&gt;
&lt;p&gt;This blog introduces the following key points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The transition of Kitex from an internally used framework to an open-source framework while ensuring compatibility between internal and external versions.&lt;/li&gt;
&lt;li&gt;Overview of important functional features and performance optimizations released during the past year of open source.&lt;/li&gt;
&lt;li&gt;The origination and development of Kitex&amp;rsquo;s ecosystem with contributions from the community, examples of enterprise adoption, and elegant integration of internal capabilities using Kitex.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="future-perspectives"&gt;Future Perspectives&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Collaborate with the community to further enrich the ecosystem and foster active participation from developers.&lt;/li&gt;
&lt;li&gt;Enhance the usability of Kitex by incorporating engineering practices and providing greater convenience for microservice developers.&lt;/li&gt;
&lt;li&gt;Continuously improve the BDThrift ecosystem and optimize support for Protobuf and gRPC.&lt;/li&gt;
&lt;li&gt;Explore and implement additional feature support and open sourcing, such as ShmIPC (shared memory IPC), QUIC (Quick UDP Internet Connections), and generalization for Protobuf.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By pursuing these goals, Kitex aims to meet the evolving needs of users and further strengthen its position as a reliable and efficient framework for building cloud-native architectures.&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.3.2</title><link>https://www.cloudwego.io/blog/2022/09/20/hertz-release-v0.3.2/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/09/20/hertz-release-v0.3.2/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/198"&gt;#198&lt;/a&gt;] feat: add the function to get the client dialer name.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/251"&gt;#251&lt;/a&gt;] feat: add a startup log to display the name of the loaded network library.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/238"&gt;#238&lt;/a&gt;] refactor: refactor the client logic initialize for HostClient and TLSHostClient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/226"&gt;#226&lt;/a&gt;] optimize: add a warning log for illegal status code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/249"&gt;#249&lt;/a&gt;] fix: add channel signal judge to allow onShutdownHook to complete or timeout.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/232"&gt;#232&lt;/a&gt;] fix: fix some trailing slash redirect bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/217"&gt;#217&lt;/a&gt;] chore: update pr template.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: China's First Rust-based RPC Framework - Volo is Officially Open Source!</title><link>https://www.cloudwego.io/blog/2022/08/30/chinas-first-rust-based-rpc-framework-volo-is-officially-open-source/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/08/30/chinas-first-rust-based-rpc-framework-volo-is-officially-open-source/</guid><description>
&lt;p&gt;&lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt; is a lightweight, high-performance, scalable, and user-friendly Rust RPC framework developed by the ByteDance service framework team. It leverages the latest GAT and TAIT features of Rust to deliver exceptional performance and efficiency.
Within ByteDance, Volo has been extensively used, implementing multiple business and foundational components. It has exceeded performance expectations, showcasing its superiority compared to the Go version. As with other CloudWeGo open-source projects, Volo maintains a consistent codebase internally and externally, ensuring robustness and reliability for open-source users.
While observing the relatively weak Rust open-source community in terms of RPC frameworks, Volo&amp;rsquo;s open-source release aims to contribute to community improvement. It also strengthens the CloudWeGo ecosystem, advancing performance, security, and the adoption of the latest technologies. Volo provides robust support for developers, enterprises, and Rustaceans in developing RPC microservices and building cloud-native distributed systems.
This article will provide a brief introduction to Volo and its related ecosystem, offering suggestions for choosing between Rust and Go.&lt;/p&gt;
&lt;h2 id="origin-of-the-project"&gt;Origin of the project&lt;/h2&gt;
&lt;p&gt;The founding members of &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt; originally came from the &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; team, the open-source Go RPC framework developed by CloudWeGo. Through deep performance optimizations in Go, they encountered challenges that motivated their exploration of Rust. Rust proved to be a suitable choice for businesses requiring exceptional performance, safety, and low-level control capabilities. The birth of Volo was driven by the need for a robust RPC framework as a vital component of distributed systems.&lt;/p&gt;
&lt;h2 id="features"&gt;Features&lt;/h2&gt;
&lt;p&gt;Key features of Volo include:&lt;/p&gt;
&lt;h3 id="high-performance"&gt;High performance&lt;/h3&gt;
&lt;p&gt;Rust&amp;rsquo;s reputation for high performance and safety guides the design and implementation of Volo. Every aspect of the framework is optimized to minimize overhead and maximize performance.
It is important to note that directly comparing the performance of Volo and Kitex would be unfair, and the performance data provided should be viewed as a reference. We aim to avoid unnecessary controversy, especially since there is no mature Async version of a Thrift RPC framework in the Rust open-source community. Instead, we focus on sharing our own limit QPS (queries per second) data.
Under the same test conditions as &lt;a href="https://github.com/cloudwego/kitex"&gt;Kitex&lt;/a&gt; (limited to 4 cores), Volo achieves a limit QPS of 350,000 (35W).
Judging from the flame graph of our online business, thanks to Rust&amp;rsquo;s static distribution and excellent compilation optimization, the overhead of the framework part is basically negligible (excluding syscall overhead).&lt;/p&gt;
&lt;h3 id="based-on-gat-design"&gt;Based on GAT design&lt;/h3&gt;
&lt;p&gt;Volo embraces the latest technologies and utilizes Rust&amp;rsquo;s GAT feature as the core abstraction. Additionally, we draw inspiration from Tower, a well-designed abstraction layer suitable for non-GAT scenarios. We extend our gratitude to the &lt;a href="https://github.com/tower-rs/tower"&gt;Tower&lt;/a&gt; team for their contribution.&lt;/p&gt;
&lt;p&gt;Through the use of GAT, Volo eliminates unnecessary Box memory allocations, enhances usability, and offers users a more intuitive programming interface and a more ergonomic programming paradigm.
Our core abstraction is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_volo/1.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the use of Rust&amp;rsquo;s GAT feature, they address the lifecycle challenges associated with returning asynchronous Futures. Additionally, if &lt;code&gt;impl_trait_in_assoc_type&lt;/code&gt; is used , the effect will be better. For example, the following methods can be used to implement Timeout:
&lt;img src="https://www.cloudwego.io/img/blog/opensource_volo/2.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="easy-to-use"&gt;Easy to use&lt;/h3&gt;
&lt;p&gt;Rust is renowned for its learning curve and perceived difficulty. We recognize the importance of reducing the barriers for users to adopt the Volo framework and develop microservices in the Rust language. Our goal is to provide the most intuitive and simple coding experience possible.&lt;/p&gt;
&lt;p&gt;To achieve this, we offer the Volo command-line tool, which facilitates project initialization and IDL management. Additionally, we have separated Thrift and gRPC into two independent frameworks (although they share some components) to cater to the specific programming paradigms and interfaces that align with each protocol&amp;rsquo;s semantics.&lt;/p&gt;
&lt;p&gt;We also provide the &lt;code&gt;#[service]&lt;/code&gt; macro (which can be understood as the &lt;code&gt;async_trait&lt;/code&gt; that does not require &lt;code&gt;Box&lt;/code&gt;) to enable users to write service middleware using async rust without psychological burden.
This macro simplifies the implementation of Service middleware, as demonstrated below:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.cloudwego.io/img/blog/opensource_volo/3.png" alt="image"&gt;&lt;/p&gt;
&lt;h3 id="strong-scalability"&gt;Strong scalability&lt;/h3&gt;
&lt;p&gt;Benefiting from Rust&amp;rsquo;s powerful expression and abstraction capabilities, developers can process RPC meta-information, requests, and responses in a unified manner through flexible middleware &amp;lsquo;Service&amp;rsquo; abstraction.
For example, service governance functions such as service discovery and load balancing can be implemented in the form of services without the need to implement Trait independently.
We encourage everyone to contribute their own extensions to volo-rs, which will be hosted under the &lt;a href="http://github.com/volo-rs"&gt;github.com/volo-rs&lt;/a&gt; organization&lt;/p&gt;
&lt;h2 id="ecosystem"&gt;Ecosystem&lt;/h2&gt;
&lt;p&gt;Volo is the RPC framework at the core, accompanied by the following open-source projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/volo-rs"&gt;Volo-rs&lt;/a&gt;: The volo ecosystem which contains a lot of useful components.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/pilota"&gt;Pilota&lt;/a&gt;: A thrift and protobuf implementation in pure rust with high performance and extensibility.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/motore"&gt;Motore&lt;/a&gt;: Middleware abstraction layer designed by Tower, leveraging GAT and TAIT.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/metainfo"&gt;Metainfo&lt;/a&gt;: A Volo component for transparent transmission of meta information, aimed at defining a set of standards for such transmission.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="choosing-between-rust-and-go"&gt;Choosing Between Rust and Go&lt;/h2&gt;
&lt;p&gt;The question of when to use Rust or Go is a classic one. From the perspective of the Volo team, Rust and Go are not opposing choices but rather complementary options that can learn from each other.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For performance-insensitive, IO-heavy, and rapidly developing applications that prioritize stability, Go is recommended. Rust does not bring significant benefits in such scenarios.&lt;/li&gt;
&lt;li&gt;However, for applications requiring extreme performance, heavy calculations, and a need for stability, even if it comes at the expense of development speed, Rust is recommended. Rust&amp;rsquo;s advantages in extreme performance optimization and security are valuable in these cases.&lt;/li&gt;
&lt;li&gt;Additionally, the team&amp;rsquo;s existing technology stack and talent pool are crucial factors to consider.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;We hope this article has provided you with a basic understanding of &lt;a href="https://github.com/cloudwego/volo"&gt;Volo&lt;/a&gt; and its related ecosystem. Volo is still in its early stages, and we welcome interested developers to join us in building the CloudWeGo and Rust open-source communities. We encourage you to submit &lt;a href="https://github.com/cloudwego/volo/issues"&gt;Issues&lt;/a&gt; and &lt;a href="https://github.com/cloudwego/volo/pulls"&gt;PRs&lt;/a&gt; to Volo, as we look forward to collective development. We sincerely hope to see more developers join us, and we aspire for Volo to assist more enterprises in swiftly building cloud-native architectures. If enterprise customers wish to explore Volo internally, we can schedule dedicated technical support and communication for their needs.&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cloudwego/volo"&gt;Volo overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudwego.io/docs/volo/"&gt;Volo Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/volo"&gt;Volo Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/volo-rs"&gt;Volo-rs organization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Hertz Release v0.3.0</title><link>https://www.cloudwego.io/blog/2022/08/29/hertz-release-v0.3.0/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/08/29/hertz-release-v0.3.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/182"&gt;#182&lt;/a&gt;] feat: add service registration &amp;amp; service discovery &amp;amp; load balancing.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/6"&gt;[#6]&lt;/a&gt; feat: add zookeeper register.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/7"&gt;[#7]&lt;/a&gt; feat: add nacos registry.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/8"&gt;[#8]&lt;/a&gt; feat: Support Hertz to use Consul for service discovery and registration.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/9"&gt;[#9]&lt;/a&gt; feat: add polaris registry.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/14"&gt;[#14]&lt;/a&gt; feat: add etcd registry.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/15"&gt;[#15]&lt;/a&gt; feat: support servicecomb.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hertz-contrib/registry/pull/16"&gt;[#16]&lt;/a&gt; feat: support service registration and discovery with Netflix Eureka.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/175"&gt;#175&lt;/a&gt;] refactor: distinguish between global dialer and local dialer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/205"&gt;#205&lt;/a&gt;] optimize: func checkPathValid returns true if the path is valid.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="test"&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/174"&gt;#174&lt;/a&gt;] test: correcting TestRouterMiddlewareAndStatic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/190"&gt;#190&lt;/a&gt;] fix: modify the same middleware name.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/192"&gt;#192&lt;/a&gt;] fix: fix the problem of the same package name in handler.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/208"&gt;#208&lt;/a&gt;] fix: deregister failed when service shutdown.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/202"&gt;#202&lt;/a&gt;] fix: get wrong local loopback IPv6.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/196"&gt;#196&lt;/a&gt;] fix: typo.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/155"&gt;#155&lt;/a&gt;] fix: name_style_thrift.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/169"&gt;#169&lt;/a&gt;] fix: thrift namespace.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/184"&gt;#184&lt;/a&gt;] fix: hijack conn throw timeout err when using standard network lib.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/162"&gt;#162&lt;/a&gt;] fix: generate router register error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/189"&gt;#189&lt;/a&gt;] Revert &amp;ldquo;fix: generate router register error&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/203"&gt;#203&lt;/a&gt;] add v6 support for AddMissingPort function.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/186"&gt;#186&lt;/a&gt;] chore: support codecov.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Blog: Kitex Release v0.4.0</title><link>https://www.cloudwego.io/blog/2022/08/26/kitex-release-v0.4.0/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/08/26/kitex-release-v0.4.0/</guid><description>
&lt;h2 id="introduction-to-key-changes"&gt;&lt;strong&gt;Introduction to Key Changes&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature"&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Retry enhancement&lt;/strong&gt;: Support user-defined result retry; Support request-level configuration (priority is higher than Neptune). See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/service-governance/retry/"&gt;retry guide&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frugal (Thrift)&lt;/strong&gt;: Support default value of IDL; No codec code is supported by using frugal. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/advanced-feature/codec_frugal/"&gt;frugal&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tool-Protobuf&lt;/strong&gt;: Support depend on external libraries with go_package, see &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/code_generation/#notes-for-using-protobuf-idls"&gt;Notes for Using Protobuf IDLs&lt;/a&gt;; Support Guess IDL type from the file extension, it is unnecessary to specify the type param when generating the protobuf code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fastpb(protobuf)&lt;/strong&gt;: Support fastpb to optimize performance of protobuf, and it is integrated into Kite by default. See &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/fastpb/"&gt;fastpb&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Call&lt;/strong&gt;: Support HTTP+Protobuf generic call&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kitex lib supports Windows&lt;/strong&gt;: You can use kitex running on Windows (Kitex tool still doesn&amp;rsquo;t support)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="optimization--bugfix"&gt;&lt;strong&gt;Optimization &amp;amp; Bugfix&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Performance Optimization&lt;/strong&gt;: gRPC unary throughput increased by 46-70%, and 51% - 70% higher than the official gRPC framework throughput. See &lt;a href="https://github.com/cloudwego/kitex-benchmark"&gt;benchmark&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generic Call&lt;/strong&gt;: Support default value defined in thrift IDL for HTTP / Map / JSON Generic&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="full-release-log"&gt;&lt;strong&gt;Full Release Log&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id="feature-1"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/571"&gt;#571&lt;/a&gt;] feat(protobuf): integrate &lt;a href="https://github.com/cloudwego/fastpb"&gt;fastpb&lt;/a&gt; into kitex, refer to &lt;a href="https://www.cloudwego.io/docs/kitex/tutorials/code-gen/fastpb/"&gt;doc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/592"&gt;#592&lt;/a&gt;] feat(generic): add default value defined in thrift idl for HTTP/Map/JSON generic call.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/600"&gt;#600&lt;/a&gt;] feat(thrift): support no codec gen-code when using frugal.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/607"&gt;#607&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/610"&gt;#610&lt;/a&gt;] feat(proxyless): add option for xDS extension. Support traffic route, timeout config and service discovery based on xDS.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/541"&gt;#541&lt;/a&gt;] feat(trans): Add the go net extension to the transport layer, and choose it as the transmission mode by default in Windows OS.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/540"&gt;#540&lt;/a&gt;] feat(retry): support retry with specified error or response and add retry option for setup method retry policy.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/533"&gt;#533&lt;/a&gt;] feat(generic): js_conv annotation of generic call supports map type conversion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="optimize"&gt;Optimize&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/522"&gt;#522&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/538"&gt;#538&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/605"&gt;#605&lt;/a&gt;] perf(grpc): optimize performance for gRPC protocol.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/590"&gt;#590&lt;/a&gt;] optimize(tool): guess IDL type from file extension.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/559"&gt;#559&lt;/a&gt;] optimize(timeout): use wrap func to check timeout err in timeout middleware which can ignore logs customized timeout err.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/581"&gt;#581&lt;/a&gt;] optimize(tool): kitex tool usage add cmd example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bugfix"&gt;Bugfix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/564"&gt;#564&lt;/a&gt;] fix(oneway): discard oneway conn after sending complete, or subsequent requests that send to the same connection may get blocked until the oneway request gets processed by the server.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/577"&gt;#577&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/584"&gt;#584&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/602"&gt;#602&lt;/a&gt;] fix(rpcinfo): fix rpcinfo reuse problem in longconn scene.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/578"&gt;#578&lt;/a&gt;] fix: fix long pool dump panic.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/583"&gt;#583&lt;/a&gt;] fix(tool): fix misusing of package name in protobuf generated code.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/587"&gt;#587&lt;/a&gt;] fix(tool): skip proto files with external import paths when generates code.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/594"&gt;#594&lt;/a&gt;] fix(generic): support the tag format of the escape double quotes in single quotes to be compatible with the logic of the old version.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/595"&gt;#595&lt;/a&gt;] fix: fix nil union panic in BLength.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/589"&gt;#589&lt;/a&gt;, &lt;a href="https://github.com/cloudwego/kitex/pull/596"&gt;#596&lt;/a&gt;] fix(frugal): fix frugal build tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="refactor"&gt;Refactor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/566"&gt;#566&lt;/a&gt;] refactor(metainfo): remove noused metakeys of HTTP2 Header.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/593"&gt;#593&lt;/a&gt;] refactor(trans): support specify Listener for server by option WithListener, the priority is higher than WithServiceAddr.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/582"&gt;#582&lt;/a&gt;] refactor(tool): use templates by embedding and export APIs for external usage for kitex tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="test"&gt;Test&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/579"&gt;#579&lt;/a&gt;] test: add ut for long pool dump function.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/608"&gt;#608&lt;/a&gt;] test: fix data race in TestClientConnDecoupledFromApplicationRead.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/609"&gt;#609&lt;/a&gt;] test: fix gonet ut avoid testing port conflicts.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/480"&gt;#480&lt;/a&gt;] test: add unit test for client package.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="chore"&gt;Chore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/558"&gt;#558&lt;/a&gt;] ci: fix setup-python github action.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/487"&gt;#487&lt;/a&gt;] ci: workflow add golangci-lint.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/580"&gt;#580&lt;/a&gt;] chore: fix the typos in remote module about go net.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/601"&gt;#601&lt;/a&gt;] chore: fixed some typos and replaced some defunct functions.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/604"&gt;#604&lt;/a&gt;] chore: upgrade fastpb to v0.0.2.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/kitex/pull/603"&gt;#603&lt;/a&gt;] chore: upgrade frugal to v0.1.2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dependency-change"&gt;Dependency Change&lt;/h3&gt;
&lt;p&gt;github.com/cloudwego/frugal v0.1.1 -&amp;gt; v0.1.3&lt;/p&gt;
&lt;p&gt;github.com/cloudwego/netpoll v0.2.5 -&amp;gt; v0.2.6&lt;/p&gt;
&lt;p&gt;github.com/cloudwego/thriftgo v0.1.2 -&amp;gt; v0.2.0&lt;/p&gt;
&lt;p&gt;google.golang.org/protobuf v1.26.0 -&amp;gt; v1.28.0&lt;/p&gt;
&lt;p&gt;github.com/choleraehyq/pid v0.0.13 -&amp;gt; v0.0.15&lt;/p&gt;
&lt;p&gt;new imported:&lt;/p&gt;
&lt;p&gt;github.com/cloudwego/fastpb v0.0.2&lt;/p&gt;
&lt;p&gt;github.com/jhump/protoreflect v1.8.2&lt;/p&gt;</description></item><item><title>Blog: Hertz Release v0.2.0</title><link>https://www.cloudwego.io/blog/2022/07/22/hertz-release-v0.2.0/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://www.cloudwego.io/blog/2022/07/22/hertz-release-v0.2.0/</guid><description>
&lt;h2 id="feature"&gt;Feature&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/124"&gt;#124&lt;/a&gt;] feat: add option to remove hijackConnPool.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/116"&gt;#116&lt;/a&gt;] feat: update for template.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/130"&gt;#130&lt;/a&gt;] feat: add a warning log for invalid character in Cookie.Value.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/143"&gt;#143&lt;/a&gt;] feat: custom signal to graceful shutdown&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/114"&gt;#114&lt;/a&gt;] feat: release buffer in standard network method.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/112"&gt;#112&lt;/a&gt;] feat: parse post args in bodystream.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/105"&gt;#105&lt;/a&gt;] feat: client abstracts hostclient layer.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/92"&gt;#92&lt;/a&gt;] feat: hz support windows.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/102"&gt;#102&lt;/a&gt;] feat: client removes default retry logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="optimize"&gt;Optimize&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/111"&gt;#111&lt;/a&gt;] optimize: pre-allocate slice when calling bytesconv.AppendHTTPDate.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/128"&gt;#128&lt;/a&gt;] optimize: remove useless judgement.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/108"&gt;#108&lt;/a&gt;] optimize: avoid parsing regular expression repeatedly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="chore"&gt;Chore&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/125"&gt;#125&lt;/a&gt;] Update pr-check.yml.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fix"&gt;Fix&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/104"&gt;#104&lt;/a&gt;] fix: use defer to guarantee that mutex will be unlocked.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/96"&gt;#96&lt;/a&gt;] fix: ci exec /bin/license-eye: exec format error&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="style"&gt;Style&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/103"&gt;#103&lt;/a&gt;] style: fixed the typo &amp;ldquo;ungzipped&amp;rdquo; to &amp;ldquo;gunzipped&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/90"&gt;#90&lt;/a&gt;] style: use const var and remove duplicate type conversions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refactor"&gt;Refactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/94"&gt;#94&lt;/a&gt;] refactor: use appendCookiePart to simplify code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docs"&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href="https://github.com/cloudwego/hertz/pull/97"&gt;#97&lt;/a&gt;] docs: use comma to separate &amp;amp;&amp;amp; remove extra space.&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>